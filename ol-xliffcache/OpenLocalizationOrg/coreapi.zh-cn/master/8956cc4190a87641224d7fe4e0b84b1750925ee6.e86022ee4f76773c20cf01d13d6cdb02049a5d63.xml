{"nodes":[{"pos":[519,534],"content":"CharUnicodeInfo","needQuote":true,"nodes":[{"content":"CharUnicodeInfo","pos":[0,15]}]},{"pos":[2015,2036],"content":"GetNumericValue(Char)","needQuote":true,"nodes":[{"content":"GetNumericValue(Char)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The Unicode character for which to get the numeric value.","pos":[2782,2844],"source":"\\n<p>The Unicode character for which to get the numeric value."},{"content":"&lt;/p&gt;\\n","pos":[2845,2851],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The numeric value associated with the specified character.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;-1, if the specified character is not a numeric character.&lt;/p&gt;\\n","pos":[2911,3061],"source":"\\n<p>The numeric value associated with the specified character.</p>\\n<p>-or- </p>\\n<p>-1, if the specified character is not a numeric character.</p>\\n"},{"pos":[3513,3543],"content":"GetNumericValue(String, Int32)","needQuote":true,"nodes":[{"content":"GetNumericValue(String, Int32)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The index of the Unicode character for which to get the numeric value.","pos":[4595,4670],"source":"\\n<p>The index of the Unicode character for which to get the numeric value."},{"content":"&lt;/p&gt;\\n","pos":[4671,4677],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The numeric value associated with the character at the specified index of the specified string.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;-1, if the character at the specified index of the specified string is not a numeric character.&lt;/p&gt;\\n","pos":[4737,4961],"source":"\\n<p>The numeric value associated with the character at the specified index of the specified string.</p>\\n<p>-or- </p>\\n<p>-1, if the character at the specified index of the specified string is not a numeric character.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[5080,5123],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[5124,5130],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is outside the range of valid indexes in &lt;em&gt;s&lt;/em&gt;.","pos":[5247,5321],"source":"\\n<p>\\n<em>index</em> is outside the range of valid indexes in <em>s</em>."},{"content":"&lt;/p&gt;\\n","pos":[5322,5328],"source":" </p>\\n"},{"pos":[5753,5777],"content":"GetUnicodeCategory(Char)","needQuote":true,"nodes":[{"content":"GetUnicodeCategory(Char)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The Unicode character for which to get the Unicode category.","pos":[6543,6608],"source":"\\n<p>The Unicode character for which to get the Unicode category."},{"content":"&lt;/p&gt;\\n","pos":[6609,6615],"source":" </p>\\n"},{"pos":[7441,7474],"content":"GetUnicodeCategory(String, Int32)","needQuote":true,"nodes":[{"content":"GetUnicodeCategory(String, Int32)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The index of the Unicode character for which to get the Unicode category.","pos":[8549,8627],"source":"\\n<p>The index of the Unicode character for which to get the Unicode category."},{"content":"&lt;/p&gt;\\n","pos":[8628,8634],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[9040,9083],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[9084,9090],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is outside the range of valid indexes in &lt;em&gt;s&lt;/em&gt;.","pos":[9207,9281],"source":"\\n<p>\\n<em>index</em> is outside the range of valid indexes in <em>s</em>."},{"content":"&lt;/p&gt;\\n","pos":[9282,9288],"source":" </p>\\n"},{"pos":[9616,9636],"content":"System.Globalization","needQuote":true,"nodes":[{"content":"System.Globalization","pos":[0,20]}]},{"pos":[9809,9815],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9975,9985],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[10080,10088],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[10157,10158],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10185,10186],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10256,10264],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[10333,10334],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10361,10362],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10545,10559],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[10678,10684],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[10751,10752],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10802,10808],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10868,10869],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10952,10958],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[11025,11026],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11076,11082],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11142,11143],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11357,11379],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[11527,11533],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[11600,11601],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11651,11657],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[11718,11719]},{"pos":[11774,11780],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11840,11841],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11938,11944],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[12011,12012],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12062,12068],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[12129,12130]},{"pos":[12185,12191],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12251,12252],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12497,12528],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[12694,12709],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[12785,12786],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12836,12842],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[12903,12904]},{"pos":[12959,12965],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13025,13026],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13132,13147],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[13223,13224],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13274,13280],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[13341,13342]},{"pos":[13397,13403],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13463,13464],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13694,13707],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[13808,13819],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[13891,13892],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13919,13920],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13993,14004],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[14076,14077],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14104,14105],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14280,14289],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[14382,14389],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[14457,14458],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14485,14486],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14555,14562],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[14630,14631],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14658,14659],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14834,14851],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[14960,14975],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[15051,15052],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15079,15080],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15157,15172],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[15248,15249],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15276,15277],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15422,15428],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[15557,15561],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[15700,15706],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[15851,15857],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[16001,16006],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[16185,16200],"content":"UnicodeCategory","needQuote":true,"nodes":[{"content":"UnicodeCategory","pos":[0,15]}]},{"pos":[16398,16419],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[16613,16640],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]}],"content":"items:\n- uid: System.Globalization.CharUnicodeInfo\n  commentId: T:System.Globalization.CharUnicodeInfo\n  id: CharUnicodeInfo\n  parent: System.Globalization\n  children:\n  - System.Globalization.CharUnicodeInfo.GetNumericValue(System.Char)\n  - System.Globalization.CharUnicodeInfo.GetNumericValue(System.String,System.Int32)\n  - System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)\n  - System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.String,System.Int32)\n  langs:\n  - csharp\n  - vb\n  name: CharUnicodeInfo\n  fullName: System.Globalization.CharUnicodeInfo\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/CharUnicodeInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CharUnicodeInfo\n    path: src/mscorlib/src/System/Globalization/CharUnicodeInfo.cs\n    startLine: 28\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Retrieves information about a Unicode character. This class cannot be inherited.</p>\\n\"\n  syntax:\n    content: public class CharUnicodeInfo\n    content.vb: Public Class CharUnicodeInfo\n  seealso:\n  - type: System.Globalization.UnicodeCategory\n    commentId: T:System.Globalization.UnicodeCategory\n  - type: System.Text\n    commentId: N:System.Text\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: CharUnicodeInfo\n- uid: System.Globalization.CharUnicodeInfo.GetNumericValue(System.Char)\n  commentId: M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.Char)\n  id: GetNumericValue(System.Char)\n  parent: System.Globalization.CharUnicodeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetNumericValue(Char)\n  fullName: System.Globalization.CharUnicodeInfo.GetNumericValue(System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/CharUnicodeInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetNumericValue\n    path: src/mscorlib/src/System/Globalization/CharUnicodeInfo.cs\n    startLine: 321\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Gets the numeric value associated with the specified character.</p>\\n\"\n  syntax:\n    content: public static double GetNumericValue(char ch)\n    content.vb: Public Shared Function GetNumericValue(ch As Char) As Double\n    parameters:\n    - id: ch\n      type: System.Char\n      description: \"\\n<p>The Unicode character for which to get the numeric value. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The numeric value associated with the specified character.</p>\\n<p>-or- </p>\\n<p>-1, if the specified character is not a numeric character.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CharUnicodeInfo.GetNumericValue(Char)\n- uid: System.Globalization.CharUnicodeInfo.GetNumericValue(System.String,System.Int32)\n  commentId: M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.String,System.Int32)\n  id: GetNumericValue(System.String,System.Int32)\n  parent: System.Globalization.CharUnicodeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetNumericValue(String, Int32)\n  fullName: System.Globalization.CharUnicodeInfo.GetNumericValue(System.String, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/CharUnicodeInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetNumericValue\n    path: src/mscorlib/src/System/Globalization/CharUnicodeInfo.cs\n    startLine: 326\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Gets the numeric value associated with the character at the specified index of the specified string.</p>\\n\"\n  syntax:\n    content: public static double GetNumericValue(string s, int index)\n    content.vb: Public Shared Function GetNumericValue(s As String, index As Integer) As Double\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>The <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing the Unicode character for which to get the numeric value. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index of the Unicode character for which to get the numeric value. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The numeric value associated with the character at the specified index of the specified string.</p>\\n<p>-or- </p>\\n<p>-1, if the character at the specified index of the specified string is not a numeric character.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is outside the range of valid indexes in <em>s</em>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CharUnicodeInfo.GetNumericValue(String, Int32)\n- uid: System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)\n  commentId: M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)\n  id: GetUnicodeCategory(System.Char)\n  parent: System.Globalization.CharUnicodeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetUnicodeCategory(Char)\n  fullName: System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/CharUnicodeInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetUnicodeCategory\n    path: src/mscorlib/src/System/Globalization/CharUnicodeInfo.cs\n    startLine: 409\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Gets the Unicode category of the specified character.</p>\\n\"\n  syntax:\n    content: public static UnicodeCategory GetUnicodeCategory(char ch)\n    content.vb: Public Shared Function GetUnicodeCategory(ch As Char) As UnicodeCategory\n    parameters:\n    - id: ch\n      type: System.Char\n      description: \"\\n<p>The Unicode character for which to get the Unicode category. </p>\\n\"\n    return:\n      type: System.Globalization.UnicodeCategory\n      description: \"\\n<p>A <xref href=\\\"System.Globalization.UnicodeCategory\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value indicating the category of the specified character.</p>\\n\"\n  seealso:\n  - type: System.Globalization.UnicodeCategory\n    commentId: T:System.Globalization.UnicodeCategory\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CharUnicodeInfo.GetUnicodeCategory(Char)\n- uid: System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.String,System.Int32)\n  commentId: M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.String,System.Int32)\n  id: GetUnicodeCategory(System.String,System.Int32)\n  parent: System.Globalization.CharUnicodeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetUnicodeCategory(String, Int32)\n  fullName: System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.String, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/CharUnicodeInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetUnicodeCategory\n    path: src/mscorlib/src/System/Globalization/CharUnicodeInfo.cs\n    startLine: 414\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Gets the Unicode category of the character at the specified index of the specified string.</p>\\n\"\n  syntax:\n    content: public static UnicodeCategory GetUnicodeCategory(string s, int index)\n    content.vb: Public Shared Function GetUnicodeCategory(s As String, index As Integer) As UnicodeCategory\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>The <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing the Unicode character for which to get the Unicode category. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index of the Unicode character for which to get the Unicode category. </p>\\n\"\n    return:\n      type: System.Globalization.UnicodeCategory\n      description: \"\\n<p>A <xref href=\\\"System.Globalization.UnicodeCategory\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value indicating the category of the character at the specified index of the specified string.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is outside the range of valid indexes in <em>s</em>. </p>\\n\"\n  seealso:\n  - type: System.Globalization.UnicodeCategory\n    commentId: T:System.Globalization.UnicodeCategory\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CharUnicodeInfo.GetUnicodeCategory(String, Int32)\nreferences:\n- uid: System.Globalization\n  isExternal: false\n  name: System.Globalization\n  fullName: System.Globalization\n  nameWithType: System.Globalization\n  commentId: N:System.Globalization\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Char\n  parent: System\n  isExternal: false\n  name: Char\n  fullName: System.Char\n  nameWithType: Char\n  commentId: T:System.Char\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  fullName: System.Double\n  nameWithType: Double\n  commentId: T:System.Double\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Globalization.UnicodeCategory\n  parent: System.Globalization\n  isExternal: false\n  name: UnicodeCategory\n  fullName: System.Globalization.UnicodeCategory\n  nameWithType: UnicodeCategory\n  commentId: T:System.Globalization.UnicodeCategory\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n"}