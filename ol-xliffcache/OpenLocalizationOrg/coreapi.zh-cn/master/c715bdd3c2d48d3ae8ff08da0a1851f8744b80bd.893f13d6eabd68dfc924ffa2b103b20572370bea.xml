{"nodes":[{"pos":[450,468],"content":"CallingConventions","needQuote":true,"nodes":[{"content":"CallingConventions","pos":[0,18]}]},{"pos":[1613,1616],"content":"Any","needQuote":true,"nodes":[{"content":"Any","pos":[0,3]}]},{"pos":[2593,2605],"content":"ExplicitThis","needQuote":true,"nodes":[{"content":"ExplicitThis","pos":[0,12]}]},{"pos":[3991,3998],"content":"HasThis","needQuote":true,"nodes":[{"content":"HasThis","pos":[0,7]}]},{"pos":[5222,5230],"content":"Standard","needQuote":true,"nodes":[{"content":"Standard","pos":[0,8]}]},{"pos":[6293,6300],"content":"VarArgs","needQuote":true,"nodes":[{"content":"VarArgs","pos":[0,7]}]},{"pos":[7089,7106],"content":"System.Reflection","needQuote":true,"nodes":[{"content":"System.Reflection","pos":[0,17]}]},{"pos":[7304,7322],"content":"CallingConventions","needQuote":true,"nodes":[{"content":"CallingConventions","pos":[0,18]}]}],"content":"items:\n- uid: System.Reflection.CallingConventions\n  commentId: T:System.Reflection.CallingConventions\n  id: CallingConventions\n  parent: System.Reflection\n  children:\n  - System.Reflection.CallingConventions.Any\n  - System.Reflection.CallingConventions.ExplicitThis\n  - System.Reflection.CallingConventions.HasThis\n  - System.Reflection.CallingConventions.Standard\n  - System.Reflection.CallingConventions.VarArgs\n  langs:\n  - csharp\n  - vb\n  name: CallingConventions\n  fullName: System.Reflection.CallingConventions\n  type: Enum\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CallingConventions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CallingConventions\n    path: src/mscorlib/src/System/Reflection/CallingConventions.cs\n    startLine: 15\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Defines the valid calling conventions for a method.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [Flags]\n\n      [ComVisible(true)]\n\n      public enum CallingConventions\n    content.vb: >-\n      <Serializable>\n\n      <Flags>\n\n      <ComVisible(True)>\n\n      Public Enum CallingConventions\n  attributes:\n  - type: System.FlagsAttribute\n    ctor: System.FlagsAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - enum\n  modifiers.vb:\n  - Public\n  - Enum\n  nameWithType: CallingConventions\n- uid: System.Reflection.CallingConventions.Any\n  commentId: F:System.Reflection.CallingConventions.Any\n  id: Any\n  parent: System.Reflection.CallingConventions\n  langs:\n  - csharp\n  - vb\n  name: Any\n  fullName: System.Reflection.CallingConventions.Any\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CallingConventions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Any\n    path: src/mscorlib/src/System/Reflection/CallingConventions.cs\n    startLine: 24\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that either the <strong>Standard</strong> or the <strong>VarArgs</strong> calling convention may be used.</p>\\n\"\n  syntax:\n    content: Any = 3\n    return:\n      type: System.Reflection.CallingConventions\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: CallingConventions.Any\n- uid: System.Reflection.CallingConventions.ExplicitThis\n  commentId: F:System.Reflection.CallingConventions.ExplicitThis\n  id: ExplicitThis\n  parent: System.Reflection.CallingConventions\n  langs:\n  - csharp\n  - vb\n  name: ExplicitThis\n  fullName: System.Reflection.CallingConventions.ExplicitThis\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CallingConventions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ExplicitThis\n    path: src/mscorlib/src/System/Reflection/CallingConventions.cs\n    startLine: 26\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that the signature is a function-pointer signature, representing a call to an instance or virtual method (not a static method). If <strong>ExplicitThis</strong> is set, <strong>HasThis</strong> must also be set. The first argument passed to the called method is still a <strong>this</strong> pointer, but the type of the first argument is now unknown. Therefore, a token that describes the type (or class) of the <strong>this</strong> pointer is explicitly stored into its metadata signature.</p>\\n\"\n  syntax:\n    content: ExplicitThis = 64\n    return:\n      type: System.Reflection.CallingConventions\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: CallingConventions.ExplicitThis\n- uid: System.Reflection.CallingConventions.HasThis\n  commentId: F:System.Reflection.CallingConventions.HasThis\n  id: HasThis\n  parent: System.Reflection.CallingConventions\n  langs:\n  - csharp\n  - vb\n  name: HasThis\n  fullName: System.Reflection.CallingConventions.HasThis\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CallingConventions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: HasThis\n    path: src/mscorlib/src/System/Reflection/CallingConventions.cs\n    startLine: 25\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies an instance or virtual method (not a static method). At run-time, the called method is passed a pointer to the target object as its first argument (the <strong>this</strong> pointer). The signature stored in metadata does not include the type of this first argument, because the method is known and its owner class can be discovered from metadata.</p>\\n\"\n  syntax:\n    content: HasThis = 32\n    return:\n      type: System.Reflection.CallingConventions\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: CallingConventions.HasThis\n- uid: System.Reflection.CallingConventions.Standard\n  commentId: F:System.Reflection.CallingConventions.Standard\n  id: Standard\n  parent: System.Reflection.CallingConventions\n  langs:\n  - csharp\n  - vb\n  name: Standard\n  fullName: System.Reflection.CallingConventions.Standard\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CallingConventions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Standard\n    path: src/mscorlib/src/System/Reflection/CallingConventions.cs\n    startLine: 22\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies the default calling convention as determined by the common language runtime. Use this calling convention for static methods. For instance or virtual methods use <strong>HasThis</strong>.</p>\\n\"\n  syntax:\n    content: Standard = 1\n    return:\n      type: System.Reflection.CallingConventions\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: CallingConventions.Standard\n- uid: System.Reflection.CallingConventions.VarArgs\n  commentId: F:System.Reflection.CallingConventions.VarArgs\n  id: VarArgs\n  parent: System.Reflection.CallingConventions\n  langs:\n  - csharp\n  - vb\n  name: VarArgs\n  fullName: System.Reflection.CallingConventions.VarArgs\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CallingConventions.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: VarArgs\n    path: src/mscorlib/src/System/Reflection/CallingConventions.cs\n    startLine: 23\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies the calling convention for methods with variable arguments.</p>\\n\"\n  syntax:\n    content: VarArgs = 2\n    return:\n      type: System.Reflection.CallingConventions\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: CallingConventions.VarArgs\nreferences:\n- uid: System.Reflection\n  isExternal: false\n  name: System.Reflection\n  fullName: System.Reflection\n  nameWithType: System.Reflection\n  commentId: N:System.Reflection\n- uid: System.Reflection.CallingConventions\n  parent: System.Reflection\n  isExternal: false\n  name: CallingConventions\n  fullName: System.Reflection.CallingConventions\n  nameWithType: CallingConventions\n  commentId: T:System.Reflection.CallingConventions\n"}