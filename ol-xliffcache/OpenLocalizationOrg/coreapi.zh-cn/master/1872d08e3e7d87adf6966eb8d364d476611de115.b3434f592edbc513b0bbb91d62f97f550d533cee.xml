{"nodes":[{"pos":[3453,3462],"content":"ArrayList","needQuote":true,"nodes":[{"content":"ArrayList","pos":[0,9]}]},{"pos":[5782,5793],"content":"ArrayList()","needQuote":true,"nodes":[{"content":"ArrayList()","pos":[0,11]}]},{"pos":[6956,6978],"content":"ArrayList(ICollection)","needQuote":true,"nodes":[{"content":"ArrayList(ICollection)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;c&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[8156,8199],"source":"\\n<p>\\n<em>c</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[8200,8206],"source":" </p>\\n"},{"pos":[8740,8756],"content":"ArrayList(Int32)","needQuote":true,"nodes":[{"content":"ArrayList(Int32)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The number of elements that the new list can initially store.","pos":[9560,9626],"source":"\\n<p>The number of elements that the new list can initially store."},{"content":"&lt;/p&gt;\\n","pos":[9627,9633],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;capacity&lt;/em&gt; is less than zero.","pos":[9764,9807],"source":"\\n<p>\\n<em>capacity</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[9808,9814],"source":" </p>\\n"},{"pos":[10218,10226],"content":"Capacity","needQuote":true,"nodes":[{"content":"Capacity","pos":[0,8]}]},{"content":"\\n&lt;p&gt;There is not enough memory available on the system.&lt;/p&gt;\\n","pos":[11619,11681],"source":"\\n<p>There is not enough memory available on the system.</p>\\n"},{"pos":[12106,12111],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[13528,13539],"content":"IsFixedSize","needQuote":true,"nodes":[{"content":"IsFixedSize","pos":[0,11]}]},{"pos":[14944,14954],"content":"IsReadOnly","needQuote":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[16523,16537],"content":"IsSynchronized","needQuote":true,"nodes":[{"content":"IsSynchronized","pos":[0,14]}]},{"pos":[18313,18324],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The zero-based index of the element to get or set.","pos":[19031,19086],"source":"\\n<p>The zero-based index of the element to get or set."},{"content":"&lt;/p&gt;\\n","pos":[19087,19093],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The element at the specified index.&lt;/p&gt;\\n","pos":[19153,19199],"source":"\\n<p>The element at the specified index.</p>\\n"},{"pos":[20166,20174],"content":"SyncRoot","needQuote":true,"nodes":[{"content":"SyncRoot","pos":[0,8]}]},{"pos":[21867,21881],"content":"Adapter(IList)","needQuote":true,"nodes":[{"content":"Adapter(IList)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;list&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[23273,23325],"source":"\\n<p>\\n<em>list</em> is <strong>null</strong>.</p>\\n"},{"pos":[24200,24211],"content":"Add(Object)","needQuote":true,"nodes":[{"content":"Add(Object)","pos":[0,11]}]},{"pos":[26833,26854],"content":"AddRange(ICollection)","needQuote":true,"nodes":[{"content":"AddRange(ICollection)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;c&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[28231,28274],"source":"\\n<p>\\n<em>c</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[28275,28281],"source":" </p>\\n"},{"pos":[30317,30362],"content":"BinarySearch(Int32, Int32, Object, IComparer)","needQuote":true,"nodes":[{"content":"BinarySearch(Int32, Int32, Object, IComparer)","pos":[0,45]}]},{"content":"\\n&lt;p&gt;The zero-based starting index of the range to search.","pos":[31419,31477],"source":"\\n<p>The zero-based starting index of the range to search."},{"content":"&lt;/p&gt;\\n","pos":[31478,31484],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The length of the range to search.","pos":[31547,31586],"source":"\\n<p>The length of the range to search."},{"content":"&lt;/p&gt;\\n","pos":[31587,31593],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is less than zero.","pos":[33786,33884],"source":"\\n<p>\\n<em>index</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>count</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[33885,33891],"source":" </p>\\n"},{"pos":[34456,34476],"content":"BinarySearch(Object)","needQuote":true,"nodes":[{"content":"BinarySearch(Object)","pos":[0,20]}]},{"pos":[37126,37157],"content":"BinarySearch(Object, IComparer)","needQuote":true,"nodes":[{"content":"BinarySearch(Object, IComparer)","pos":[0,31]}]},{"pos":[40266,40273],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[41939,41946],"content":"Clone()","needQuote":true,"nodes":[{"content":"Clone()","pos":[0,7]}]},{"pos":[43128,43144],"content":"Contains(Object)","needQuote":true,"nodes":[{"content":"Contains(Object)","pos":[0,16]}]},{"pos":[45121,45134],"content":"CopyTo(Array)","needQuote":true,"nodes":[{"content":"CopyTo(Array)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[46498,46545],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[46546,46552],"source":" </p>\\n"},{"pos":[47626,47646],"content":"CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"CopyTo(Array, Int32)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The zero-based index in &lt;em&gt;array&lt;/em&gt; at which copying begins.","pos":[49018,49086],"source":"\\n<p>The zero-based index in <em>array</em> at which copying begins."},{"content":"&lt;/p&gt;\\n","pos":[49087,49093],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[49212,49259],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[49260,49266],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;arrayIndex&lt;/em&gt; is less than zero.","pos":[49383,49428],"source":"\\n<p>\\n<em>arrayIndex</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[49429,49435],"source":" </p>\\n"},{"pos":[50696,50730],"content":"CopyTo(Int32, Array, Int32, Int32)","needQuote":true,"nodes":[{"content":"CopyTo(Int32, Array, Int32, Int32)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The zero-based index in &lt;em&gt;array&lt;/em&gt; at which copying begins.","pos":[52429,52497],"source":"\\n<p>The zero-based index in <em>array</em> at which copying begins."},{"content":"&lt;/p&gt;\\n","pos":[52498,52504],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of elements to copy.","pos":[52567,52603],"source":"\\n<p>The number of elements to copy."},{"content":"&lt;/p&gt;\\n","pos":[52604,52610],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[52729,52776],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[52777,52783],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;arrayIndex&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is less than zero.","pos":[52900,53061],"source":"\\n<p>\\n<em>index</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>arrayIndex</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>count</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[53062,53068],"source":" </p>\\n"},{"pos":[54501,54521],"content":"FixedSize(ArrayList)","needQuote":true,"nodes":[{"content":"FixedSize(ArrayList)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;list&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[55781,55827],"source":"\\n<p>\\n<em>list</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[55828,55834],"source":" </p>\\n"},{"pos":[56231,56247],"content":"FixedSize(IList)","needQuote":true,"nodes":[{"content":"FixedSize(IList)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;list&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[57467,57513],"source":"\\n<p>\\n<em>list</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[57514,57520],"source":" </p>\\n"},{"pos":[57847,57862],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[59419,59446],"content":"GetEnumerator(Int32, Int32)","needQuote":true,"nodes":[{"content":"GetEnumerator(Int32, Int32)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is less than zero.","pos":[61183,61281],"source":"\\n<p>\\n<em>index</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>count</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[61282,61288],"source":" </p>\\n"},{"pos":[62068,62090],"content":"GetRange(Int32, Int32)","needQuote":true,"nodes":[{"content":"GetRange(Int32, Int32)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The number of elements in the range.","pos":[63252,63293],"source":"\\n<p>The number of elements in the range."},{"content":"&lt;/p&gt;\\n","pos":[63294,63300],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is less than zero.","pos":[63754,63852],"source":"\\n<p>\\n<em>index</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>count</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[63853,63859],"source":" </p>\\n"},{"pos":[65239,65254],"content":"IndexOf(Object)","needQuote":true,"nodes":[{"content":"IndexOf(Object)","pos":[0,15]}]},{"pos":[67422,67444],"content":"IndexOf(Object, Int32)","needQuote":true,"nodes":[{"content":"IndexOf(Object, Int32)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The zero-based starting index of the search.","pos":[68797,68846],"source":"\\n<p>The zero-based starting index of the search."},{"content":"0 (zero) is valid in an empty list.&lt;/p&gt;\\n","pos":[68847,68888],"source":" 0 (zero) is valid in an empty list.</p>\\n"},{"pos":[70256,70285],"content":"IndexOf(Object, Int32, Int32)","needQuote":true,"nodes":[{"content":"IndexOf(Object, Int32, Int32)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The zero-based starting index of the search.","pos":[71704,71753],"source":"\\n<p>The zero-based starting index of the search."},{"content":"0 (zero) is valid in an empty list.&lt;/p&gt;\\n","pos":[71754,71795],"source":" 0 (zero) is valid in an empty list.</p>\\n"},{"content":"\\n&lt;p&gt;The number of elements in the section to search.","pos":[71858,71911],"source":"\\n<p>The number of elements in the section to search."},{"content":"&lt;/p&gt;\\n","pos":[71912,71918],"source":" </p>\\n"},{"pos":[73524,73545],"content":"Insert(Int32, Object)","needQuote":true,"nodes":[{"content":"Insert(Int32, Object)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The zero-based index at which &lt;em&gt;value&lt;/em&gt; should be inserted.","pos":[74363,74432],"source":"\\n<p>The zero-based index at which <em>value</em> should be inserted."},{"content":"&lt;/p&gt;\\n","pos":[74433,74439],"source":" </p>\\n"},{"pos":[76335,76366],"content":"InsertRange(Int32, ICollection)","needQuote":true,"nodes":[{"content":"InsertRange(Int32, ICollection)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The zero-based index at which the new elements should be inserted.","pos":[77241,77312],"source":"\\n<p>The zero-based index at which the new elements should be inserted."},{"content":"&lt;/p&gt;\\n","pos":[77313,77319],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;c&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[77869,77912],"source":"\\n<p>\\n<em>c</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[77913,77919],"source":" </p>\\n"},{"pos":[79823,79842],"content":"LastIndexOf(Object)","needQuote":true,"nodes":[{"content":"LastIndexOf(Object)","pos":[0,19]}]},{"pos":[81970,81996],"content":"LastIndexOf(Object, Int32)","needQuote":true,"nodes":[{"content":"LastIndexOf(Object, Int32)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The zero-based starting index of the backward search.","pos":[83365,83423],"source":"\\n<p>The zero-based starting index of the backward search."},{"content":"&lt;/p&gt;\\n","pos":[83424,83430],"source":" </p>\\n"},{"pos":[84806,84839],"content":"LastIndexOf(Object, Int32, Int32)","needQuote":true,"nodes":[{"content":"LastIndexOf(Object, Int32, Int32)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The zero-based starting index of the backward search.","pos":[86271,86329],"source":"\\n<p>The zero-based starting index of the backward search."},{"content":"&lt;/p&gt;\\n","pos":[86330,86336],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of elements in the section to search.","pos":[86399,86452],"source":"\\n<p>The number of elements in the section to search."},{"content":"&lt;/p&gt;\\n","pos":[86453,86459],"source":" </p>\\n"},{"pos":[88070,88089],"content":"ReadOnly(ArrayList)","needQuote":true,"nodes":[{"content":"ReadOnly(ArrayList)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;list&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[89348,89394],"source":"\\n<p>\\n<em>list</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[89395,89401],"source":" </p>\\n"},{"pos":[89912,89927],"content":"ReadOnly(IList)","needQuote":true,"nodes":[{"content":"ReadOnly(IList)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;list&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[91146,91192],"source":"\\n<p>\\n<em>list</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[91193,91199],"source":" </p>\\n"},{"pos":[91667,91681],"content":"Remove(Object)","needQuote":true,"nodes":[{"content":"Remove(Object)","pos":[0,14]}]},{"pos":[94073,94088],"content":"RemoveAt(Int32)","needQuote":true,"nodes":[{"content":"RemoveAt(Int32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The zero-based index of the element to remove.","pos":[94867,94918],"source":"\\n<p>The zero-based index of the element to remove."},{"content":"&lt;/p&gt;\\n","pos":[94919,94925],"source":" </p>\\n"},{"pos":[96676,96701],"content":"RemoveRange(Int32, Int32)","needQuote":true,"nodes":[{"content":"RemoveRange(Int32, Int32)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The zero-based starting index of the range of elements to remove.","pos":[97522,97592],"source":"\\n<p>The zero-based starting index of the range of elements to remove."},{"content":"&lt;/p&gt;\\n","pos":[97593,97599],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of elements to remove.","pos":[97662,97700],"source":"\\n<p>The number of elements to remove."},{"content":"&lt;/p&gt;\\n","pos":[97701,97707],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is less than zero.","pos":[97838,97936],"source":"\\n<p>\\n<em>index</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>count</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[97937,97943],"source":" </p>\\n"},{"pos":[99972,99993],"content":"Repeat(Object, Int32)","needQuote":true,"nodes":[{"content":"Repeat(Object, Int32)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The number of times &lt;em&gt;value&lt;/em&gt; should be copied.","pos":[101154,101211],"source":"\\n<p>The number of times <em>value</em> should be copied."},{"content":"&lt;/p&gt;\\n","pos":[101212,101218],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is less than zero.","pos":[101609,101649],"source":"\\n<p>\\n<em>count</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[101650,101656],"source":" </p>\\n"},{"pos":[101970,101979],"content":"Reverse()","needQuote":true,"nodes":[{"content":"Reverse()","pos":[0,9]}]},{"pos":[103261,103282],"content":"Reverse(Int32, Int32)","needQuote":true,"nodes":[{"content":"Reverse(Int32, Int32)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The zero-based starting index of the range to reverse.","pos":[104019,104078],"source":"\\n<p>The zero-based starting index of the range to reverse."},{"content":"&lt;/p&gt;\\n","pos":[104079,104085],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of elements in the range to reverse.","pos":[104148,104200],"source":"\\n<p>The number of elements in the range to reverse."},{"content":"&lt;/p&gt;\\n","pos":[104201,104207],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is less than zero.","pos":[104338,104436],"source":"\\n<p>\\n<em>index</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>count</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[104437,104443],"source":" </p>\\n"},{"pos":[105405,105433],"content":"SetRange(Int32, ICollection)","needQuote":true,"nodes":[{"content":"SetRange(Int32, ICollection)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;c&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[107364,107407],"source":"\\n<p>\\n<em>c</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[107408,107414],"source":" </p>\\n"},{"pos":[108652,108658],"content":"Sort()","needQuote":true,"nodes":[{"content":"Sort()","pos":[0,6]}]},{"pos":[109909,109924],"content":"Sort(IComparer)","needQuote":true,"nodes":[{"content":"Sort(IComparer)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;An error occurred while comparing two elements.&lt;/p&gt;\\n","pos":[111453,111511],"source":"\\n<p>An error occurred while comparing two elements.</p>\\n"},{"pos":[112274,112303],"content":"Sort(Int32, Int32, IComparer)","needQuote":true,"nodes":[{"content":"Sort(Int32, Int32, IComparer)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The zero-based starting index of the range to sort.","pos":[113206,113262],"source":"\\n<p>The zero-based starting index of the range to sort."},{"content":"&lt;/p&gt;\\n","pos":[113263,113269],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The length of the range to sort.","pos":[113332,113369],"source":"\\n<p>The length of the range to sort."},{"content":"&lt;/p&gt;\\n","pos":[113370,113376],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is less than zero.","pos":[113944,114042],"source":"\\n<p>\\n<em>index</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>count</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[114043,114049],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An error occurred while comparing two elements.&lt;/p&gt;\\n","pos":[114655,114713],"source":"\\n<p>An error occurred while comparing two elements.</p>\\n"},{"pos":[115146,115169],"content":"Synchronized(ArrayList)","needQuote":true,"nodes":[{"content":"Synchronized(ArrayList)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;list&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[116595,116641],"source":"\\n<p>\\n<em>list</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[116642,116648],"source":" </p>\\n"},{"pos":[117286,117305],"content":"Synchronized(IList)","needQuote":true,"nodes":[{"content":"Synchronized(IList)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;list&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[118691,118737],"source":"\\n<p>\\n<em>list</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[118738,118744],"source":" </p>\\n"},{"pos":[119285,119294],"content":"ToArray()","needQuote":true,"nodes":[{"content":"ToArray()","pos":[0,9]}]},{"pos":[120671,120684],"content":"ToArray(Type)","needQuote":true,"nodes":[{"content":"ToArray(Type)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[122076,122122],"source":"\\n<p>\\n<em>type</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[122123,122129],"source":" </p>\\n"},{"pos":[122790,122802],"content":"TrimToSize()","needQuote":true,"nodes":[{"content":"TrimToSize()","pos":[0,12]}]},{"pos":[124350,124368],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[124535,124541],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[124709,124714],"content":"IList","needQuote":true,"nodes":[{"content":"IList","pos":[0,5]}]},{"pos":[124909,124920],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[125133,125144],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[125343,125353],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[125448,125456],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[125525,125526],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[125553,125554],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[125624,125632],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[125701,125702],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[125729,125730],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[125913,125927],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[126046,126052],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[126119,126120],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[126170,126176],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[126236,126237],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[126320,126326],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[126393,126394],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[126444,126450],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[126510,126511],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[126725,126747],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[126895,126901],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[126968,126969],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[127019,127025],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[127086,127087]},{"pos":[127142,127148],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[127208,127209],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[127306,127312],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[127379,127380],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[127430,127436],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[127497,127498]},{"pos":[127553,127559],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[127619,127620],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[127865,127896],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[128062,128077],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[128153,128154],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[128204,128210],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[128271,128272]},{"pos":[128327,128333],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[128393,128394],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[128500,128515],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[128591,128592],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[128642,128648],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[128709,128710]},{"pos":[128765,128771],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[128831,128832],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[129062,129075],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[129176,129187],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[129259,129260],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[129287,129288],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[129361,129372],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[129444,129445],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[129472,129473],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[129648,129657],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[129750,129757],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[129825,129826],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[129853,129854],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[129923,129930],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[129998,129999],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[130026,130027],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[130202,130219],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[130328,130343],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[130419,130420],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[130447,130448],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[130525,130540],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[130616,130617],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[130644,130645],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[130940,130953],"content":"AsQueryable()","needQuote":true,"nodes":[{"content":"AsQueryable()","pos":[0,13]}]},{"pos":[131070,131081],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[131140,131141],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[131168,131169],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[131250,131261],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[131320,131321],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[131348,131349],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[131704,131716],"content":"AsParallel()","needQuote":true,"nodes":[{"content":"AsParallel()","pos":[0,12]}]},{"pos":[131849,131859],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[131926,131927],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[131954,131955],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[132044,132054],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[132121,132122],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[132149,132150],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[132491,132506],"content":"Cast<TResult>()","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;()","pos":[0,15],"source":"Cast<TResult>()"}]},{"pos":[132710,132723],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[132785,132786],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[132813,132814],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[132892,132908],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[132973,132974],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[133001,133002],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[133380,133397],"content":"OfType<TResult>()","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;()","pos":[0,17],"source":"OfType<TResult>()"}]},{"pos":[133609,133624],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[133688,133689],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[133716,133717],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[133797,133815],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[133882,133883],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[133910,133911],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[134146,134152],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[134317,134341],"content":"AsQueryable(IEnumerable)","needQuote":true,"nodes":[{"content":"AsQueryable(IEnumerable)","pos":[0,24]}]},{"pos":[134520,134531],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[134590,134591],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[134658,134669],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[134746,134747],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[134860,134871],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[134930,134931],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[134998,135009],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[135086,135087],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[135315,135324],"content":"Queryable","needQuote":true,"nodes":[{"content":"Queryable","pos":[0,9]}]},{"pos":[135530,135553],"content":"AsParallel(IEnumerable)","needQuote":true,"nodes":[{"content":"AsParallel(IEnumerable)","pos":[0,23]}]},{"pos":[135748,135758],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[135825,135826],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[135893,135904],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[135981,135982],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[136103,136113],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[136180,136181],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[136248,136259],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[136336,136337],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[136590,136608],"content":"ParallelEnumerable","needQuote":true,"nodes":[{"content":"ParallelEnumerable","pos":[0,18]}]},{"pos":[136830,136856],"content":"Cast<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;(IEnumerable)","pos":[0,26],"source":"Cast<TResult>(IEnumerable)"}]},{"pos":[137163,137176],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[137238,137239],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[137306,137317],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[137394,137395],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[137505,137521],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[137586,137587],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[137654,137665],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[137742,137743],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[138032,138042],"content":"Enumerable","needQuote":true,"nodes":[{"content":"Enumerable","pos":[0,10]}]},{"pos":[138242,138270],"content":"OfType<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;(IEnumerable)","pos":[0,28],"source":"OfType<TResult>(IEnumerable)"}]},{"pos":[138585,138600],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[138664,138665],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[138732,138743],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[138820,138821],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[138933,138951],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[139018,139019],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[139086,139097],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[139174,139175],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[139437,139448],"content":"System.Linq","needQuote":true,"nodes":[{"content":"System.Linq","pos":[0,11]}]},{"pos":[139593,139598],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[139787,139792],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[140035,140046],"content":"IsFixedSize","needQuote":true,"nodes":[{"content":"IsFixedSize","pos":[0,11]}]},{"pos":[140249,140256],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[140444,140454],"content":"IsReadOnly","needQuote":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[140709,140723],"content":"IsSynchronized","needQuote":true,"nodes":[{"content":"IsSynchronized","pos":[0,14]}]},{"pos":[140999,141010],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"pos":[141227,141231],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"content":"[","pos":[141287,141288]},{"pos":[141340,141345],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":"]","pos":[141405,141406]},{"pos":[141500,141504],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"pos":[141559,141560],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[141609,141614],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[141673,141674],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[141937,141945],"content":"SyncRoot","needQuote":true,"nodes":[{"content":"SyncRoot","pos":[0,8]}]},{"pos":[142183,142192],"content":"ArrayList","needQuote":true,"nodes":[{"content":"ArrayList","pos":[0,9]}]},{"pos":[142417,142428],"content":"Add(Object)","needQuote":true,"nodes":[{"content":"Add(Object)","pos":[0,11]}]},{"pos":[142563,142566],"content":"Add","needQuote":true,"nodes":[{"content":"Add","pos":[0,3]}]},{"pos":[142620,142621],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[142671,142677],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[142737,142738],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[142829,142832],"content":"Add","needQuote":true,"nodes":[{"content":"Add","pos":[0,3]}]},{"pos":[142886,142887],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[142937,142943],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[143003,143004],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[143207,143216],"content":"IComparer","needQuote":true,"nodes":[{"content":"IComparer","pos":[0,9]}]},{"pos":[143429,143436],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[143547,143552],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[143608,143609],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[143636,143637],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[143715,143720],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[143776,143777],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[143804,143805],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[144016,144032],"content":"Contains(Object)","needQuote":true,"nodes":[{"content":"Contains(Object)","pos":[0,16]}]},{"pos":[144177,144185],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[144244,144245],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[144295,144301],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[144361,144362],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[144458,144466],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[144525,144526],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[144576,144582],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[144642,144643],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[144828,144833],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"pos":[145049,145069],"content":"CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"CopyTo(Array, Int32)","pos":[0,20]}]},{"pos":[145247,145253],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[145316,145317],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[145366,145371],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[145410,145411]},{"pos":[145465,145470],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[145529,145530],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[145642,145648],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[145711,145712],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[145761,145766],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[145805,145806]},{"pos":[145860,145865],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[145924,145925],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[146192,146207],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[146346,146359],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[146429,146430],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[146457,146458],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[146550,146563],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[146633,146634],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[146661,146662],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[146878,146889],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[147124,147139],"content":"IndexOf(Object)","needQuote":true,"nodes":[{"content":"IndexOf(Object)","pos":[0,15]}]},{"pos":[147282,147289],"content":"IndexOf","needQuote":true,"nodes":[{"content":"IndexOf","pos":[0,7]}]},{"pos":[147347,147348],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[147398,147404],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[147464,147465],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[147560,147567],"content":"IndexOf","needQuote":true,"nodes":[{"content":"IndexOf","pos":[0,7]}]},{"pos":[147625,147626],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[147676,147682],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[147742,147743],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[147990,148011],"content":"Insert(Int32, Object)","needQuote":true,"nodes":[{"content":"Insert(Int32, Object)","pos":[0,21]}]},{"pos":[148179,148185],"content":"Insert","needQuote":true,"nodes":[{"content":"Insert","pos":[0,6]}]},{"pos":[148242,148243],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[148292,148297],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[148357,148358]},{"pos":[148413,148419],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[148479,148480],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[148587,148593],"content":"Insert","needQuote":true,"nodes":[{"content":"Insert","pos":[0,6]}]},{"pos":[148650,148651],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[148700,148705],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[148765,148766]},{"pos":[148821,148827],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[148887,148888],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[149140,149154],"content":"Remove(Object)","needQuote":true,"nodes":[{"content":"Remove(Object)","pos":[0,14]}]},{"pos":[149295,149301],"content":"Remove","needQuote":true,"nodes":[{"content":"Remove","pos":[0,6]}]},{"pos":[149358,149359],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[149409,149415],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[149475,149476],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[149570,149576],"content":"Remove","needQuote":true,"nodes":[{"content":"Remove","pos":[0,6]}]},{"pos":[149633,149634],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[149684,149690],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[149750,149751],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[149984,149999],"content":"RemoveAt(Int32)","needQuote":true,"nodes":[{"content":"RemoveAt(Int32)","pos":[0,15]}]},{"pos":[150142,150150],"content":"RemoveAt","needQuote":true,"nodes":[{"content":"RemoveAt","pos":[0,8]}]},{"pos":[150209,150210],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[150259,150264],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[150323,150324],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[150419,150427],"content":"RemoveAt","needQuote":true,"nodes":[{"content":"RemoveAt","pos":[0,8]}]},{"pos":[150486,150487],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[150536,150541],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[150600,150601],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[150750,150758],"content":"Object[]","needQuote":true,"nodes":[{"content":"Object[]","pos":[0,8]}]},{"pos":[150886,150892],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":"[]","pos":[150953,150955]},{"pos":[151020,151026],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[151086,151088],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[151223,151227],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[151364,151385],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[151579,151606],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[151811,151831],"content":"OutOfMemoryException","needQuote":true,"nodes":[{"content":"OutOfMemoryException","pos":[0,20]}]},{"pos":[152033,152054],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]},{"pos":[152255,152272],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[152469,152494],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[152693,152713],"content":"InvalidCastException","needQuote":true,"nodes":[{"content":"InvalidCastException","pos":[0,20]}]}],"content":"items:\n- uid: System.Collections.ArrayList\n  commentId: T:System.Collections.ArrayList\n  id: ArrayList\n  parent: System.Collections\n  children:\n  - System.Collections.ArrayList.#ctor\n  - System.Collections.ArrayList.#ctor(System.Collections.ICollection)\n  - System.Collections.ArrayList.#ctor(System.Int32)\n  - System.Collections.ArrayList.Adapter(System.Collections.IList)\n  - System.Collections.ArrayList.Add(System.Object)\n  - System.Collections.ArrayList.AddRange(System.Collections.ICollection)\n  - System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)\n  - System.Collections.ArrayList.BinarySearch(System.Object)\n  - System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)\n  - System.Collections.ArrayList.Capacity\n  - System.Collections.ArrayList.Clear\n  - System.Collections.ArrayList.Clone\n  - System.Collections.ArrayList.Contains(System.Object)\n  - System.Collections.ArrayList.CopyTo(System.Array)\n  - System.Collections.ArrayList.CopyTo(System.Array,System.Int32)\n  - System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)\n  - System.Collections.ArrayList.Count\n  - System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)\n  - System.Collections.ArrayList.FixedSize(System.Collections.IList)\n  - System.Collections.ArrayList.GetEnumerator\n  - System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)\n  - System.Collections.ArrayList.GetRange(System.Int32,System.Int32)\n  - System.Collections.ArrayList.IndexOf(System.Object)\n  - System.Collections.ArrayList.IndexOf(System.Object,System.Int32)\n  - System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)\n  - System.Collections.ArrayList.Insert(System.Int32,System.Object)\n  - System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)\n  - System.Collections.ArrayList.IsFixedSize\n  - System.Collections.ArrayList.IsReadOnly\n  - System.Collections.ArrayList.IsSynchronized\n  - System.Collections.ArrayList.Item(System.Int32)\n  - System.Collections.ArrayList.LastIndexOf(System.Object)\n  - System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)\n  - System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)\n  - System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)\n  - System.Collections.ArrayList.ReadOnly(System.Collections.IList)\n  - System.Collections.ArrayList.Remove(System.Object)\n  - System.Collections.ArrayList.RemoveAt(System.Int32)\n  - System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)\n  - System.Collections.ArrayList.Repeat(System.Object,System.Int32)\n  - System.Collections.ArrayList.Reverse\n  - System.Collections.ArrayList.Reverse(System.Int32,System.Int32)\n  - System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)\n  - System.Collections.ArrayList.Sort\n  - System.Collections.ArrayList.Sort(System.Collections.IComparer)\n  - System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)\n  - System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)\n  - System.Collections.ArrayList.Synchronized(System.Collections.IList)\n  - System.Collections.ArrayList.SyncRoot\n  - System.Collections.ArrayList.ToArray\n  - System.Collections.ArrayList.ToArray(System.Type)\n  - System.Collections.ArrayList.TrimToSize\n  langs:\n  - csharp\n  - vb\n  name: ArrayList\n  fullName: System.Collections.ArrayList\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ArrayList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ArrayList\n    path: src/mscorlib/src/System/Collections/ArrayList.cs\n    startLine: 34\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Implements the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface using an array whose size is dynamically increased as required.</p>\\n\"\n  syntax:\n    content: >-\n      [DebuggerTypeProxy(typeof (ArrayList.ArrayListDebugView))]\n\n      [DebuggerDisplay(\"Count = {Count}\")]\n\n      [Serializable]\n\n      [ComVisible(true)]\n\n      public class ArrayList : IList, ICollection, IEnumerable, ICloneable\n    content.vb: >-\n      <DebuggerTypeProxy(GetType(ArrayList.ArrayListDebugView))>\n\n      <DebuggerDisplay(\"Count = {Count}\")>\n\n      <Serializable>\n\n      <ComVisible(True)>\n\n      Public Class ArrayList\n          Implements IList, ICollection, IEnumerable, ICloneable\n  seealso:\n  - type: System.Collections.IList\n    commentId: T:System.Collections.IList\n  - type: System.Collections.Generic.List`1\n    commentId: T:System.Collections.Generic.List`1\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.IList\n  - System.Collections.ICollection\n  - System.Collections.IEnumerable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: ArrayList\n  extensionMethods:\n  - System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  - System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  - System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  - System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n- uid: System.Collections.ArrayList.#ctor\n  commentId: M:System.Collections.ArrayList.#ctor\n  id: '#ctor'\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  - vb\n  name: ArrayList()\n  fullName: System.Collections.ArrayList.ArrayList()\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ArrayList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Collections/ArrayList.cs\n    startLine: 61\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that is empty and has the default initial capacity.</p>\\n\"\n  syntax:\n    content: public ArrayList()\n    content.vb: Public Sub New\n  seealso:\n  - type: System.Collections.ArrayList.Capacity\n    commentId: P:System.Collections.ArrayList.Capacity\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ArrayList.ArrayList()\n- uid: System.Collections.ArrayList.#ctor(System.Collections.ICollection)\n  commentId: M:System.Collections.ArrayList.#ctor(System.Collections.ICollection)\n  id: '#ctor(System.Collections.ICollection)'\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  - vb\n  name: ArrayList(ICollection)\n  fullName: System.Collections.ArrayList.ArrayList(System.Collections.ICollection)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ArrayList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Collections/ArrayList.cs\n    startLine: 83\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that contains elements copied from the specified collection and that has the same initial capacity as the number of elements copied.</p>\\n\"\n  syntax:\n    content: public ArrayList(ICollection c)\n    content.vb: Public Sub New(c As ICollection)\n    parameters:\n    - id: c\n      type: System.Collections.ICollection\n      description: \"\\n<p>The <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements are copied to the new list. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>c</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Collections.ICollection\n    commentId: T:System.Collections.ICollection\n  - type: System.Collections.ArrayList.Capacity\n    commentId: P:System.Collections.ArrayList.Capacity\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ArrayList.ArrayList(ICollection)\n- uid: System.Collections.ArrayList.#ctor(System.Int32)\n  commentId: M:System.Collections.ArrayList.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  - vb\n  name: ArrayList(Int32)\n  fullName: System.Collections.ArrayList.ArrayList(System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ArrayList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Collections/ArrayList.cs\n    startLine: 69\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that is empty and has the specified initial capacity.</p>\\n\"\n  syntax:\n    content: public ArrayList(int capacity)\n    content.vb: Public Sub New(capacity As Integer)\n    parameters:\n    - id: capacity\n      type: System.Int32\n      description: \"\\n<p>The number of elements that the new list can initially store. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>capacity</em> is less than zero. </p>\\n\"\n  seealso:\n  - type: System.Collections.ArrayList.Capacity\n    commentId: P:System.Collections.ArrayList.Capacity\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ArrayList.ArrayList(Int32)\n- uid: System.Collections.ArrayList.Capacity\n  commentId: P:System.Collections.ArrayList.Capacity\n  id: Capacity\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  - vb\n  name: Capacity\n  fullName: System.Collections.ArrayList.Capacity\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ArrayList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Capacity\n    path: src/mscorlib/src/System/Collections/ArrayList.cs\n    startLine: 103\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets or sets the number of elements that the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> can contain.</p>\\n\"\n  syntax:\n    content: public virtual int Capacity { get; set; }\n    content.vb: Public Overridable Property Capacity As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of elements that the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> can contain.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<xref href=\\\"System.Collections.ArrayList.Capacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to a value that is less than <xref href=\\\"System.Collections.ArrayList.Count\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: \"\\n<p>There is not enough memory available on the system.</p>\\n\"\n  seealso:\n  - type: System.Collections.ArrayList.Count\n    commentId: P:System.Collections.ArrayList.Count\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ArrayList.Capacity\n- uid: System.Collections.ArrayList.Count\n  commentId: P:System.Collections.ArrayList.Count\n  id: Count\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  - vb\n  name: Count\n  fullName: System.Collections.ArrayList.Count\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ArrayList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Count\n    path: src/mscorlib/src/System/Collections/ArrayList.cs\n    startLine: 132\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets the number of elements actually contained in the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual int Count { get; }\n    content.vb: Public Overridable ReadOnly Property Count As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of elements actually contained in the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Collections.ArrayList.Capacity\n    commentId: P:System.Collections.ArrayList.Capacity\n  implements:\n  - System.Collections.ICollection.Count\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: ArrayList.Count\n- uid: System.Collections.ArrayList.IsFixedSize\n  commentId: P:System.Collections.ArrayList.IsFixedSize\n  id: IsFixedSize\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  - vb\n  name: IsFixedSize\n  fullName: System.Collections.ArrayList.IsFixedSize\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ArrayList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsFixedSize\n    path: src/mscorlib/src/System/Collections/ArrayList.cs\n    startLine: 139\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets a value indicating whether the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size.</p>\\n\"\n  syntax:\n    content: public virtual bool IsFixedSize { get; }\n    content.vb: Public Overridable ReadOnly Property IsFixedSize As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Collections.IList.IsFixedSize\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: ArrayList.IsFixedSize\n- uid: System.Collections.ArrayList.IsReadOnly\n  commentId: P:System.Collections.ArrayList.IsReadOnly\n  id: IsReadOnly\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  - vb\n  name: IsReadOnly\n  fullName: System.Collections.ArrayList.IsReadOnly\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ArrayList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsReadOnly\n    path: src/mscorlib/src/System/Collections/ArrayList.cs\n    startLine: 145\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets a value indicating whether the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only.</p>\\n\"\n  syntax:\n    content: public virtual bool IsReadOnly { get; }\n    content.vb: Public Overridable ReadOnly Property IsReadOnly As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Collections.ArrayList.ReadOnly(System.Collections.IList)\n    commentId: M:System.Collections.ArrayList.ReadOnly(System.Collections.IList)\n  implements:\n  - System.Collections.IList.IsReadOnly\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: ArrayList.IsReadOnly\n- uid: System.Collections.ArrayList.IsSynchronized\n  commentId: P:System.Collections.ArrayList.IsSynchronized\n  id: IsSynchronized\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  - vb\n  name: IsSynchronized\n  fullName: System.Collections.ArrayList.IsSynchronized\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ArrayList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsSynchronized\n    path: src/mscorlib/src/System/Collections/ArrayList.cs\n    startLine: 150\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets a value indicating whether access to the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is synchronized (thread safe).</p>\\n\"\n  syntax:\n    content: public virtual bool IsSynchronized { get; }\n    content.vb: Public Overridable ReadOnly Property IsSynchronized As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if access to the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is synchronized (thread safe); otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Collections.ArrayList.SyncRoot\n    commentId: P:System.Collections.ArrayList.SyncRoot\n  - type: System.Collections.ArrayList.Synchronized(System.Collections.IList)\n    commentId: M:System.Collections.ArrayList.Synchronized(System.Collections.IList)\n  implements:\n  - System.Collections.ICollection.IsSynchronized\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: ArrayList.IsSynchronized\n- uid: System.Collections.ArrayList.Item(System.Int32)\n  commentId: P:System.Collections.ArrayList.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  - vb\n  name: Item[Int32]\n  fullName: System.Collections.ArrayList.Item[System.Int32]\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ArrayList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: this[]\n    path: src/mscorlib/src/System/Collections/ArrayList.cs\n    startLine: 166\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets or sets the element at the specified index.</p>\\n\"\n  syntax:\n    content: public virtual object this[int index] { get; set; }\n    content.vb: Public Overridable Property Item(index As Integer) As Object\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the element to get or set. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The element at the specified index.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> is equal to or greater than <xref href=\\\"System.Collections.ArrayList.Count\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Collections.ArrayList.Count\n    commentId: P:System.Collections.ArrayList.Count\n  implements:\n  - System.Collections.IList.Item(System.Int32)\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Collections.ArrayList.Item(System.Int32)\n  name.vb: Item(Int32)\n  nameWithType: ArrayList.Item[Int32]\n  nameWithType.vb: ArrayList.Item(Int32)\n- uid: System.Collections.ArrayList.SyncRoot\n  commentId: P:System.Collections.ArrayList.SyncRoot\n  id: SyncRoot\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  - vb\n  name: SyncRoot\n  fullName: System.Collections.ArrayList.SyncRoot\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ArrayList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SyncRoot\n    path: src/mscorlib/src/System/Collections/ArrayList.cs\n    startLine: 155\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets an object that can be used to synchronize access to the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual object SyncRoot { get; }\n    content.vb: Public Overridable ReadOnly Property SyncRoot As Object\n    parameters: []\n    return:\n      type: System.Object\n      description: \"\\n<p>An object that can be used to synchronize access to the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Collections.ArrayList.IsSynchronized\n    commentId: P:System.Collections.ArrayList.IsSynchronized\n  - type: System.Collections.ArrayList.Synchronized(System.Collections.IList)\n    commentId: M:System.Collections.ArrayList.Synchronized(System.Collections.IList)\n  implements:\n  - System.Collections.ICollection.SyncRoot\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: ArrayList.SyncRoot\n- uid: System.Collections.ArrayList.Adapter(System.Collections.IList)\n  commentId: M:System.Collections.ArrayList.Adapter(System.Collections.IList)\n  id: Adapter(System.Collections.IList)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  - vb\n  name: Adapter(IList)\n  fullName: System.Collections.ArrayList.Adapter(System.Collections.IList)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ArrayList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Adapter\n    path: src/mscorlib/src/System/Collections/ArrayList.cs\n    startLine: 188\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Creates an <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> wrapper for a specific <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static ArrayList Adapter(IList list)\n    content.vb: Public Shared Function Adapter(list As IList) As ArrayList\n    parameters:\n    - id: list\n      type: System.Collections.IList\n      description: \"\\n<p>The <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to wrap.</p>\\n\"\n    return:\n      type: System.Collections.ArrayList\n      description: \"\\n<p>The <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> wrapper around the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>list</em> is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Collections.IList\n    commentId: T:System.Collections.IList\n  - type: System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)\n    commentId: M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)\n  - type: System.Collections.ArrayList.Reverse\n    commentId: M:System.Collections.ArrayList.Reverse\n  - type: System.Collections.ArrayList.Sort\n    commentId: M:System.Collections.ArrayList.Sort\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: ArrayList.Adapter(IList)\n- uid: System.Collections.ArrayList.Add(System.Object)\n  commentId: M:System.Collections.ArrayList.Add(System.Object)\n  id: Add(System.Object)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  - vb\n  name: Add(Object)\n  fullName: System.Collections.ArrayList.Add(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ArrayList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Add\n    path: src/mscorlib/src/System/Collections/ArrayList.cs\n    startLine: 200\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Adds an object to the end of the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual int Add(object value)\n    content.vb: Public Overridable Function Add(value As Object) As Integer\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to be added to the end of the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The value can be <strong>null</strong>. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> index at which the <em>value</em> has been added.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only.</p>\\n<p>-or- </p>\\n<p>The <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size. </p>\\n\"\n  seealso:\n  - type: System.Collections.ArrayList.AddRange(System.Collections.ICollection)\n    commentId: M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)\n  - type: System.Collections.ArrayList.Insert(System.Int32,System.Object)\n    commentId: M:System.Collections.ArrayList.Insert(System.Int32,System.Object)\n  - type: System.Collections.ArrayList.Remove(System.Object)\n    commentId: M:System.Collections.ArrayList.Remove(System.Object)\n  - type: System.Collections.ArrayList.Count\n    commentId: P:System.Collections.ArrayList.Count\n  implements:\n  - System.Collections.IList.Add(System.Object)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ArrayList.Add(Object)\n- uid: System.Collections.ArrayList.AddRange(System.Collections.ICollection)\n  commentId: M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)\n  id: AddRange(System.Collections.ICollection)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  - vb\n  name: AddRange(ICollection)\n  fullName: System.Collections.ArrayList.AddRange(System.Collections.ICollection)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ArrayList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AddRange\n    path: src/mscorlib/src/System/Collections/ArrayList.cs\n    startLine: 212\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Adds the elements of an <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to the end of the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual void AddRange(ICollection c)\n    content.vb: Public Overridable Sub AddRange(c As ICollection)\n    parameters:\n    - id: c\n      type: System.Collections.ICollection\n      description: \"\\n<p>The <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements should be added to the end of the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The collection itself cannot be <strong>null</strong>, but it can contain elements that are <strong>null</strong>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>c</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only.</p>\\n<p>-or- </p>\\n<p>The <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size. </p>\\n\"\n  seealso:\n  - type: System.Collections.ICollection\n    commentId: T:System.Collections.ICollection\n  - type: System.Collections.ArrayList.Capacity\n    commentId: P:System.Collections.ArrayList.Capacity\n  - type: System.Collections.ArrayList.Count\n    commentId: P:System.Collections.ArrayList.Count\n  - type: System.Collections.ArrayList.Add(System.Object)\n    commentId: M:System.Collections.ArrayList.Add(System.Object)\n  - type: System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)\n    commentId: M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)\n  - type: System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)\n    commentId: M:System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)\n  - type: System.Collections.ArrayList.GetRange(System.Int32,System.Int32)\n    commentId: M:System.Collections.ArrayList.GetRange(System.Int32,System.Int32)\n  - type: System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)\n    commentId: M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ArrayList.AddRange(ICollection)\n- uid: System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)\n  commentId: M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)\n  id: BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  - vb\n  name: BinarySearch(Int32, Int32, Object, IComparer)\n  fullName: System.Collections.ArrayList.BinarySearch(System.Int32, System.Int32, System.Object, System.Collections.IComparer)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ArrayList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: BinarySearch\n    path: src/mscorlib/src/System/Collections/ArrayList.cs\n    startLine: 236\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Searches a range of elements in the sorted <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for an element using the specified comparer and returns the zero-based index of the element.</p>\\n\"\n  syntax:\n    content: public virtual int BinarySearch(int index, int count, object value, IComparer comparer)\n    content.vb: Public Overridable Function BinarySearch(index As Integer, count As Integer, value As Object, comparer As IComparer) As Integer\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based starting index of the range to search. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The length of the range to search. </p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to locate. The value can be <strong>null</strong>. </p>\\n\"\n    - id: comparer\n      type: System.Collections.IComparer\n      description: \"\\n<p>The <xref href=\\\"System.Collections.IComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> implementation to use when comparing elements.</p>\\n<p>-or- </p>\\n<p>\\n<strong>null</strong> to use the default comparer that is the <xref href=\\\"System.IComparable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> implementation of each element. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of <em>value</em> in the sorted <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, if <em>value</em> is found; otherwise, a negative number, which is the bitwise complement of the index of the next element that is larger than <em>value</em> or, if there is no larger element, the bitwise complement of <xref href=\\\"System.Collections.ArrayList.Count\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>index</em> and <em>count</em> do not denote a valid range in the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or- </p>\\n<p>\\n<em>comparer</em> is <strong>null</strong> and neither <em>value</em> nor the elements of <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> implement the <xref href=\\\"System.IComparable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>comparer</em> is <strong>null</strong> and <em>value</em> is not of the same type as the elements of the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>count</em> is less than zero. </p>\\n\"\n  seealso:\n  - type: System.Collections.IComparer\n    commentId: T:System.Collections.IComparer\n  - type: System.IComparable\n    commentId: T:System.IComparable\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ArrayList.BinarySearch(Int32, Int32, Object, IComparer)\n- uid: System.Collections.ArrayList.BinarySearch(System.Object)\n  commentId: M:System.Collections.ArrayList.BinarySearch(System.Object)\n  id: BinarySearch(System.Object)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  - vb\n  name: BinarySearch(Object)\n  fullName: System.Collections.ArrayList.BinarySearch(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ArrayList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: BinarySearch\n    path: src/mscorlib/src/System/Collections/ArrayList.cs\n    startLine: 250\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Searches the entire sorted <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for an element using the default comparer and returns the zero-based index of the element.</p>\\n\"\n  syntax:\n    content: public virtual int BinarySearch(object value)\n    content.vb: Public Overridable Function BinarySearch(value As Object) As Integer\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to locate. The value can be <strong>null</strong>. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of <em>value</em> in the sorted <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, if <em>value</em> is found; otherwise, a negative number, which is the bitwise complement of the index of the next element that is larger than <em>value</em> or, if there is no larger element, the bitwise complement of <xref href=\\\"System.Collections.ArrayList.Count\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>Neither <em>value</em> nor the elements of <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> implement the <xref href=\\\"System.IComparable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>value</em> is not of the same type as the elements of the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ArrayList.BinarySearch(Object)\n- uid: System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)\n  commentId: M:System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)\n  id: BinarySearch(System.Object,System.Collections.IComparer)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  - vb\n  name: BinarySearch(Object, IComparer)\n  fullName: System.Collections.ArrayList.BinarySearch(System.Object, System.Collections.IComparer)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ArrayList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: BinarySearch\n    path: src/mscorlib/src/System/Collections/ArrayList.cs\n    startLine: 256\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Searches the entire sorted <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for an element using the specified comparer and returns the zero-based index of the element.</p>\\n\"\n  syntax:\n    content: public virtual int BinarySearch(object value, IComparer comparer)\n    content.vb: Public Overridable Function BinarySearch(value As Object, comparer As IComparer) As Integer\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to locate. The value can be <strong>null</strong>. </p>\\n\"\n    - id: comparer\n      type: System.Collections.IComparer\n      description: \"\\n<p>The <xref href=\\\"System.Collections.IComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> implementation to use when comparing elements.</p>\\n<p>-or- </p>\\n<p>\\n<strong>null</strong> to use the default comparer that is the <xref href=\\\"System.IComparable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> implementation of each element. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of <em>value</em> in the sorted <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, if <em>value</em> is found; otherwise, a negative number, which is the bitwise complement of the index of the next element that is larger than <em>value</em> or, if there is no larger element, the bitwise complement of <xref href=\\\"System.Collections.ArrayList.Count\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>comparer</em> is <strong>null</strong> and neither <em>value</em> nor the elements of <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> implement the <xref href=\\\"System.IComparable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>comparer</em> is <strong>null</strong> and <em>value</em> is not of the same type as the elements of the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ArrayList.BinarySearch(Object, IComparer)\n- uid: System.Collections.ArrayList.Clear\n  commentId: M:System.Collections.ArrayList.Clear\n  id: Clear\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  - vb\n  name: Clear()\n  fullName: System.Collections.ArrayList.Clear()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ArrayList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Clear\n    path: src/mscorlib/src/System/Collections/ArrayList.cs\n    startLine: 264\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Removes all elements from the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual void Clear()\n    content.vb: Public Overridable Sub Clear\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only.</p>\\n<p>-or- </p>\\n<p>The <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size. </p>\\n\"\n  seealso:\n  - type: System.Collections.ArrayList.TrimToSize\n    commentId: M:System.Collections.ArrayList.TrimToSize\n  - type: System.Collections.ArrayList.Capacity\n    commentId: P:System.Collections.ArrayList.Capacity\n  - type: System.Collections.ArrayList.Count\n    commentId: P:System.Collections.ArrayList.Count\n  implements:\n  - System.Collections.IList.Clear\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ArrayList.Clear()\n- uid: System.Collections.ArrayList.Clone\n  commentId: M:System.Collections.ArrayList.Clone\n  id: Clone\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  - vb\n  name: Clone()\n  fullName: System.Collections.ArrayList.Clone()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ArrayList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Clone\n    path: src/mscorlib/src/System/Collections/ArrayList.cs\n    startLine: 276\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Creates a shallow copy of the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual object Clone()\n    content.vb: Public Overridable Function Clone As Object\n    return:\n      type: System.Object\n      description: \"\\n<p>A shallow copy of the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ArrayList.Clone()\n- uid: System.Collections.ArrayList.Contains(System.Object)\n  commentId: M:System.Collections.ArrayList.Contains(System.Object)\n  id: Contains(System.Object)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  - vb\n  name: Contains(Object)\n  fullName: System.Collections.ArrayList.Contains(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ArrayList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Contains\n    path: src/mscorlib/src/System/Collections/ArrayList.cs\n    startLine: 291\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Determines whether an element is in the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual bool Contains(object item)\n    content.vb: Public Overridable Function Contains(item As Object) As Boolean\n    parameters:\n    - id: item\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to locate in the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The value can be <strong>null</strong>. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>item</em> is found in the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Collections.ArrayList.IndexOf(System.Object)\n    commentId: M:System.Collections.ArrayList.IndexOf(System.Object)\n  - type: System.Collections.ArrayList.LastIndexOf(System.Object)\n    commentId: M:System.Collections.ArrayList.LastIndexOf(System.Object)\n  implements:\n  - System.Collections.IList.Contains(System.Object)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ArrayList.Contains(Object)\n- uid: System.Collections.ArrayList.CopyTo(System.Array)\n  commentId: M:System.Collections.ArrayList.CopyTo(System.Array)\n  id: CopyTo(System.Array)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  - vb\n  name: CopyTo(Array)\n  fullName: System.Collections.ArrayList.CopyTo(System.Array)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ArrayList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CopyTo\n    path: src/mscorlib/src/System/Collections/ArrayList.cs\n    startLine: 309\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Copies the entire <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a compatible one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, starting at the beginning of the target array.</p>\\n\"\n  syntax:\n    content: public virtual void CopyTo(Array array)\n    content.vb: Public Overridable Sub CopyTo(array As Array)\n    parameters:\n    - id: array\n      type: System.Array\n      description: \"\\n<p>The one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is the destination of the elements copied from <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> must have zero-based indexing. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n<p>-or- </p>\\n<p>The number of elements in the source <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is greater than the number of elements that the destination <em>array</em> can contain. </p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The type of the source <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> cannot be cast automatically to the type of the destination <em>array</em>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ArrayList.CopyTo(Array)\n- uid: System.Collections.ArrayList.CopyTo(System.Array,System.Int32)\n  commentId: M:System.Collections.ArrayList.CopyTo(System.Array,System.Int32)\n  id: CopyTo(System.Array,System.Int32)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  - vb\n  name: CopyTo(Array, Int32)\n  fullName: System.Collections.ArrayList.CopyTo(System.Array, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ArrayList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CopyTo\n    path: src/mscorlib/src/System/Collections/ArrayList.cs\n    startLine: 316\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Copies the entire <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a compatible one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, starting at the specified index of the target array.</p>\\n\"\n  syntax:\n    content: public virtual void CopyTo(Array array, int arrayIndex)\n    content.vb: Public Overridable Sub CopyTo(array As Array, arrayIndex As Integer)\n    parameters:\n    - id: array\n      type: System.Array\n      description: \"\\n<p>The one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is the destination of the elements copied from <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> must have zero-based indexing. </p>\\n\"\n    - id: arrayIndex\n      type: System.Int32\n      description: \"\\n<p>The zero-based index in <em>array</em> at which copying begins. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>arrayIndex</em> is less than zero. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n<p>-or- </p>\\n<p>The number of elements in the source <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is greater than the available space from <em>arrayIndex</em> to the end of the destination <em>array</em>. </p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The type of the source <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> cannot be cast automatically to the type of the destination <em>array</em>. </p>\\n\"\n  implements:\n  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ArrayList.CopyTo(Array, Int32)\n- uid: System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)\n  commentId: M:System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)\n  id: CopyTo(System.Int32,System.Array,System.Int32,System.Int32)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  - vb\n  name: CopyTo(Int32, Array, Int32, Int32)\n  fullName: System.Collections.ArrayList.CopyTo(System.Int32, System.Array, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ArrayList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CopyTo\n    path: src/mscorlib/src/System/Collections/ArrayList.cs\n    startLine: 328\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Copies a range of elements from the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a compatible one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, starting at the specified index of the target array.</p>\\n\"\n  syntax:\n    content: public virtual void CopyTo(int index, Array array, int arrayIndex, int count)\n    content.vb: Public Overridable Sub CopyTo(index As Integer, array As Array, arrayIndex As Integer, count As Integer)\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index in the source <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> at which copying begins. </p>\\n\"\n    - id: array\n      type: System.Array\n      description: \"\\n<p>The one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is the destination of the elements copied from <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> must have zero-based indexing. </p>\\n\"\n    - id: arrayIndex\n      type: System.Int32\n      description: \"\\n<p>The zero-based index in <em>array</em> at which copying begins. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of elements to copy. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>arrayIndex</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>count</em> is less than zero. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> is equal to or greater than the <xref href=\\\"System.Collections.ArrayList.Count\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the source <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or- </p>\\n<p>The number of elements from <em>index</em> to the end of the source <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is greater than the available space from <em>arrayIndex</em> to the end of the destination <em>array</em>. </p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The type of the source <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> cannot be cast automatically to the type of the destination <em>array</em>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ArrayList.CopyTo(Int32, Array, Int32, Int32)\n- uid: System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)\n  commentId: M:System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)\n  id: FixedSize(System.Collections.ArrayList)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  - vb\n  name: FixedSize(ArrayList)\n  fullName: System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ArrayList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FixedSize\n    path: src/mscorlib/src/System/Collections/ArrayList.cs\n    startLine: 367\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Returns an <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> wrapper with a fixed size.</p>\\n\"\n  syntax:\n    content: public static ArrayList FixedSize(ArrayList list)\n    content.vb: Public Shared Function FixedSize(list As ArrayList) As ArrayList\n    parameters:\n    - id: list\n      type: System.Collections.ArrayList\n      description: \"\\n<p>The <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to wrap. </p>\\n\"\n    return:\n      type: System.Collections.ArrayList\n      description: \"\\n<p>An <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> wrapper with a fixed size.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>list</em> is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: ArrayList.FixedSize(ArrayList)\n- uid: System.Collections.ArrayList.FixedSize(System.Collections.IList)\n  commentId: M:System.Collections.ArrayList.FixedSize(System.Collections.IList)\n  id: FixedSize(System.Collections.IList)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  - vb\n  name: FixedSize(IList)\n  fullName: System.Collections.ArrayList.FixedSize(System.Collections.IList)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ArrayList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FixedSize\n    path: src/mscorlib/src/System/Collections/ArrayList.cs\n    startLine: 356\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Returns an <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> wrapper with a fixed size.</p>\\n\"\n  syntax:\n    content: public static IList FixedSize(IList list)\n    content.vb: Public Shared Function FixedSize(list As IList) As IList\n    parameters:\n    - id: list\n      type: System.Collections.IList\n      description: \"\\n<p>The <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to wrap. </p>\\n\"\n    return:\n      type: System.Collections.IList\n      description: \"\\n<p>An <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> wrapper with a fixed size.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>list</em> is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: ArrayList.FixedSize(IList)\n- uid: System.Collections.ArrayList.GetEnumerator\n  commentId: M:System.Collections.ArrayList.GetEnumerator\n  id: GetEnumerator\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  - vb\n  name: GetEnumerator()\n  fullName: System.Collections.ArrayList.GetEnumerator()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ArrayList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetEnumerator\n    path: src/mscorlib/src/System/Collections/ArrayList.cs\n    startLine: 380\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Returns an enumerator for the entire <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual IEnumerator GetEnumerator()\n    content.vb: Public Overridable Function GetEnumerator As IEnumerator\n    return:\n      type: System.Collections.IEnumerator\n      description: \"\\n<p>An <xref href=\\\"System.Collections.IEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for the entire <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Collections.IEnumerator\n    commentId: T:System.Collections.IEnumerator\n  implements:\n  - System.Collections.IEnumerable.GetEnumerator\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ArrayList.GetEnumerator()\n- uid: System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)\n  commentId: M:System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)\n  id: GetEnumerator(System.Int32,System.Int32)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  - vb\n  name: GetEnumerator(Int32, Int32)\n  fullName: System.Collections.ArrayList.GetEnumerator(System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ArrayList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetEnumerator\n    path: src/mscorlib/src/System/Collections/ArrayList.cs\n    startLine: 390\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Returns an enumerator for a range of elements in the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual IEnumerator GetEnumerator(int index, int count)\n    content.vb: Public Overridable Function GetEnumerator(index As Integer, count As Integer) As IEnumerator\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based starting index of the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> section that the enumerator should refer to. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of elements in the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> section that the enumerator should refer to. </p>\\n\"\n    return:\n      type: System.Collections.IEnumerator\n      description: \"\\n<p>An <xref href=\\\"System.Collections.IEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for the specified range of elements in the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>count</em> is less than zero. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>index</em> and <em>count</em> do not specify a valid range in the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Collections.IEnumerator\n    commentId: T:System.Collections.IEnumerator\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ArrayList.GetEnumerator(Int32, Int32)\n- uid: System.Collections.ArrayList.GetRange(System.Int32,System.Int32)\n  commentId: M:System.Collections.ArrayList.GetRange(System.Int32,System.Int32)\n  id: GetRange(System.Int32,System.Int32)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  - vb\n  name: GetRange(Int32, Int32)\n  fullName: System.Collections.ArrayList.GetRange(System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ArrayList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetRange\n    path: src/mscorlib/src/System/Collections/ArrayList.cs\n    startLine: 684\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Returns an <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> which represents a subset of the elements in the source <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual ArrayList GetRange(int index, int count)\n    content.vb: Public Overridable Function GetRange(index As Integer, count As Integer) As ArrayList\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> index at which the range starts. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of elements in the range. </p>\\n\"\n    return:\n      type: System.Collections.ArrayList\n      description: \"\\n<p>An <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> which represents a subset of the elements in the source <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>count</em> is less than zero. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>index</em> and <em>count</em> do not denote a valid range of elements in the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)\n    commentId: M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)\n  - type: System.Collections.ArrayList.AddRange(System.Collections.ICollection)\n    commentId: M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)\n  - type: System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)\n    commentId: M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)\n  - type: System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)\n    commentId: M:System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ArrayList.GetRange(Int32, Int32)\n- uid: System.Collections.ArrayList.IndexOf(System.Object)\n  commentId: M:System.Collections.ArrayList.IndexOf(System.Object)\n  id: IndexOf(System.Object)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  - vb\n  name: IndexOf(Object)\n  fullName: System.Collections.ArrayList.IndexOf(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ArrayList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IndexOf\n    path: src/mscorlib/src/System/Collections/ArrayList.cs\n    startLine: 411\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Searches for the specified <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and returns the zero-based index of the first occurrence within the entire <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual int IndexOf(object value)\n    content.vb: Public Overridable Function IndexOf(value As Object) As Integer\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to locate in the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The value can be <strong>null</strong>. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the first occurrence of <em>value</em> within the entire <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, if found; otherwise, -1.</p>\\n\"\n  seealso:\n  - type: System.Collections.ArrayList.LastIndexOf(System.Object)\n    commentId: M:System.Collections.ArrayList.LastIndexOf(System.Object)\n  - type: System.Collections.ArrayList.Contains(System.Object)\n    commentId: M:System.Collections.ArrayList.Contains(System.Object)\n  implements:\n  - System.Collections.IList.IndexOf(System.Object)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ArrayList.IndexOf(Object)\n- uid: System.Collections.ArrayList.IndexOf(System.Object,System.Int32)\n  commentId: M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32)\n  id: IndexOf(System.Object,System.Int32)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  - vb\n  name: IndexOf(Object, Int32)\n  fullName: System.Collections.ArrayList.IndexOf(System.Object, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ArrayList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IndexOf\n    path: src/mscorlib/src/System/Collections/ArrayList.cs\n    startLine: 425\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Searches for the specified <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and returns the zero-based index of the first occurrence within the range of elements in the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that extends from the specified index to the last element.</p>\\n\"\n  syntax:\n    content: public virtual int IndexOf(object value, int startIndex)\n    content.vb: Public Overridable Function IndexOf(value As Object, startIndex As Integer) As Integer\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to locate in the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The value can be <strong>null</strong>. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The zero-based starting index of the search. 0 (zero) is valid in an empty list.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the first occurrence of <em>value</em> within the range of elements in the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that extends from <em>startIndex</em> to the last element, if found; otherwise, -1.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> is outside the range of valid indexes for the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Collections.ArrayList.LastIndexOf(System.Object)\n    commentId: M:System.Collections.ArrayList.LastIndexOf(System.Object)\n  - type: System.Collections.ArrayList.Contains(System.Object)\n    commentId: M:System.Collections.ArrayList.Contains(System.Object)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ArrayList.IndexOf(Object, Int32)\n- uid: System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)\n  commentId: M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)\n  id: IndexOf(System.Object,System.Int32,System.Int32)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  - vb\n  name: IndexOf(Object, Int32, Int32)\n  fullName: System.Collections.ArrayList.IndexOf(System.Object, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ArrayList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IndexOf\n    path: src/mscorlib/src/System/Collections/ArrayList.cs\n    startLine: 442\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Searches for the specified <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and returns the zero-based index of the first occurrence within the range of elements in the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that starts at the specified index and contains the specified number of elements.</p>\\n\"\n  syntax:\n    content: public virtual int IndexOf(object value, int startIndex, int count)\n    content.vb: Public Overridable Function IndexOf(value As Object, startIndex As Integer, count As Integer) As Integer\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to locate in the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The value can be <strong>null</strong>. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The zero-based starting index of the search. 0 (zero) is valid in an empty list.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of elements in the section to search. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the first occurrence of <em>value</em> within the range of elements in the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that starts at <em>startIndex</em> and contains <em>count</em> number of elements, if found; otherwise, -1.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> is outside the range of valid indexes for the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or- </p>\\n<p>\\n<em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>startIndex</em> and <em>count</em> do not specify a valid section in the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Collections.ArrayList.LastIndexOf(System.Object)\n    commentId: M:System.Collections.ArrayList.LastIndexOf(System.Object)\n  - type: System.Collections.ArrayList.Contains(System.Object)\n    commentId: M:System.Collections.ArrayList.Contains(System.Object)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ArrayList.IndexOf(Object, Int32, Int32)\n- uid: System.Collections.ArrayList.Insert(System.Int32,System.Object)\n  commentId: M:System.Collections.ArrayList.Insert(System.Int32,System.Object)\n  id: Insert(System.Int32,System.Object)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  - vb\n  name: Insert(Int32, Object)\n  fullName: System.Collections.ArrayList.Insert(System.Int32, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ArrayList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Insert\n    path: src/mscorlib/src/System/Collections/ArrayList.cs\n    startLine: 455\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Inserts an element into the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> at the specified index.</p>\\n\"\n  syntax:\n    content: public virtual void Insert(int index, object value)\n    content.vb: Public Overridable Sub Insert(index As Integer, value As Object)\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index at which <em>value</em> should be inserted. </p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to insert. The value can be <strong>null</strong>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> is greater than <xref href=\\\"System.Collections.ArrayList.Count\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only.</p>\\n<p>-or- </p>\\n<p>The <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size. </p>\\n\"\n  seealso:\n  - type: System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)\n    commentId: M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)\n  - type: System.Collections.ArrayList.Add(System.Object)\n    commentId: M:System.Collections.ArrayList.Add(System.Object)\n  - type: System.Collections.ArrayList.Remove(System.Object)\n    commentId: M:System.Collections.ArrayList.Remove(System.Object)\n  implements:\n  - System.Collections.IList.Insert(System.Int32,System.Object)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ArrayList.Insert(Int32, Object)\n- uid: System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)\n  commentId: M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)\n  id: InsertRange(System.Int32,System.Collections.ICollection)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  - vb\n  name: InsertRange(Int32, ICollection)\n  fullName: System.Collections.ArrayList.InsertRange(System.Int32, System.Collections.ICollection)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ArrayList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: InsertRange\n    path: src/mscorlib/src/System/Collections/ArrayList.cs\n    startLine: 475\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Inserts the elements of a collection into the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> at the specified index.</p>\\n\"\n  syntax:\n    content: public virtual void InsertRange(int index, ICollection c)\n    content.vb: Public Overridable Sub InsertRange(index As Integer, c As ICollection)\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index at which the new elements should be inserted. </p>\\n\"\n    - id: c\n      type: System.Collections.ICollection\n      description: \"\\n<p>The <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements should be inserted into the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The collection itself cannot be <strong>null</strong>, but it can contain elements that are <strong>null</strong>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>c</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> is greater than <xref href=\\\"System.Collections.ArrayList.Count\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only.</p>\\n<p>-or- </p>\\n<p>The <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size. </p>\\n\"\n  seealso:\n  - type: System.Collections.ArrayList.Insert(System.Int32,System.Object)\n    commentId: M:System.Collections.ArrayList.Insert(System.Int32,System.Object)\n  - type: System.Collections.ArrayList.AddRange(System.Collections.ICollection)\n    commentId: M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)\n  - type: System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)\n    commentId: M:System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)\n  - type: System.Collections.ArrayList.GetRange(System.Int32,System.Int32)\n    commentId: M:System.Collections.ArrayList.GetRange(System.Int32,System.Int32)\n  - type: System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)\n    commentId: M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ArrayList.InsertRange(Int32, ICollection)\n- uid: System.Collections.ArrayList.LastIndexOf(System.Object)\n  commentId: M:System.Collections.ArrayList.LastIndexOf(System.Object)\n  id: LastIndexOf(System.Object)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  - vb\n  name: LastIndexOf(Object)\n  fullName: System.Collections.ArrayList.LastIndexOf(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ArrayList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: LastIndexOf\n    path: src/mscorlib/src/System/Collections/ArrayList.cs\n    startLine: 506\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Searches for the specified <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and returns the zero-based index of the last occurrence within the entire <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual int LastIndexOf(object value)\n    content.vb: Public Overridable Function LastIndexOf(value As Object) As Integer\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to locate in the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The value can be <strong>null</strong>. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the last occurrence of <em>value</em> within the entire the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, if found; otherwise, -1.</p>\\n\"\n  seealso:\n  - type: System.Collections.ArrayList.IndexOf(System.Object)\n    commentId: M:System.Collections.ArrayList.IndexOf(System.Object)\n  - type: System.Collections.ArrayList.Contains(System.Object)\n    commentId: M:System.Collections.ArrayList.Contains(System.Object)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ArrayList.LastIndexOf(Object)\n- uid: System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)\n  commentId: M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)\n  id: LastIndexOf(System.Object,System.Int32)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  - vb\n  name: LastIndexOf(Object, Int32)\n  fullName: System.Collections.ArrayList.LastIndexOf(System.Object, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ArrayList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: LastIndexOf\n    path: src/mscorlib/src/System/Collections/ArrayList.cs\n    startLine: 521\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Searches for the specified <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and returns the zero-based index of the last occurrence within the range of elements in the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that extends from the first element to the specified index.</p>\\n\"\n  syntax:\n    content: public virtual int LastIndexOf(object value, int startIndex)\n    content.vb: Public Overridable Function LastIndexOf(value As Object, startIndex As Integer) As Integer\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to locate in the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The value can be <strong>null</strong>. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The zero-based starting index of the backward search. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the last occurrence of <em>value</em> within the range of elements in the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that extends from the first element to <em>startIndex</em>, if found; otherwise, -1.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> is outside the range of valid indexes for the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Collections.ArrayList.IndexOf(System.Object)\n    commentId: M:System.Collections.ArrayList.IndexOf(System.Object)\n  - type: System.Collections.ArrayList.Contains(System.Object)\n    commentId: M:System.Collections.ArrayList.Contains(System.Object)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ArrayList.LastIndexOf(Object, Int32)\n- uid: System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)\n  commentId: M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)\n  id: LastIndexOf(System.Object,System.Int32,System.Int32)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  - vb\n  name: LastIndexOf(Object, Int32, Int32)\n  fullName: System.Collections.ArrayList.LastIndexOf(System.Object, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ArrayList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: LastIndexOf\n    path: src/mscorlib/src/System/Collections/ArrayList.cs\n    startLine: 539\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Searches for the specified <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and returns the zero-based index of the last occurrence within the range of elements in the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the specified number of elements and ends at the specified index.</p>\\n\"\n  syntax:\n    content: public virtual int LastIndexOf(object value, int startIndex, int count)\n    content.vb: Public Overridable Function LastIndexOf(value As Object, startIndex As Integer, count As Integer) As Integer\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to locate in the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The value can be <strong>null</strong>. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The zero-based starting index of the backward search. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of elements in the section to search. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the last occurrence of <em>value</em> within the range of elements in the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains <em>count</em> number of elements and ends at <em>startIndex</em>, if found; otherwise, -1.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> is outside the range of valid indexes for the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or- </p>\\n<p>\\n<em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>startIndex</em> and <em>count</em> do not specify a valid section in the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Collections.ArrayList.IndexOf(System.Object)\n    commentId: M:System.Collections.ArrayList.IndexOf(System.Object)\n  - type: System.Collections.ArrayList.Contains(System.Object)\n    commentId: M:System.Collections.ArrayList.Contains(System.Object)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ArrayList.LastIndexOf(Object, Int32, Int32)\n- uid: System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)\n  commentId: M:System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)\n  id: ReadOnly(System.Collections.ArrayList)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  - vb\n  name: ReadOnly(ArrayList)\n  fullName: System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ArrayList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadOnly\n    path: src/mscorlib/src/System/Collections/ArrayList.cs\n    startLine: 569\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Returns a read-only <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> wrapper.</p>\\n\"\n  syntax:\n    content: public static ArrayList ReadOnly(ArrayList list)\n    content.vb: Public Shared Function ReadOnly(list As ArrayList) As ArrayList\n    parameters:\n    - id: list\n      type: System.Collections.ArrayList\n      description: \"\\n<p>The <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to wrap. </p>\\n\"\n    return:\n      type: System.Collections.ArrayList\n      description: \"\\n<p>A read-only <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> wrapper around <em>list</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>list</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Collections.ArrayList.IsReadOnly\n    commentId: P:System.Collections.ArrayList.IsReadOnly\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: ArrayList.ReadOnly(ArrayList)\n- uid: System.Collections.ArrayList.ReadOnly(System.Collections.IList)\n  commentId: M:System.Collections.ArrayList.ReadOnly(System.Collections.IList)\n  id: ReadOnly(System.Collections.IList)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  - vb\n  name: ReadOnly(IList)\n  fullName: System.Collections.ArrayList.ReadOnly(System.Collections.IList)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ArrayList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadOnly\n    path: src/mscorlib/src/System/Collections/ArrayList.cs\n    startLine: 557\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Returns a read-only <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> wrapper.</p>\\n\"\n  syntax:\n    content: public static IList ReadOnly(IList list)\n    content.vb: Public Shared Function ReadOnly(list As IList) As IList\n    parameters:\n    - id: list\n      type: System.Collections.IList\n      description: \"\\n<p>The <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to wrap. </p>\\n\"\n    return:\n      type: System.Collections.IList\n      description: \"\\n<p>A read-only <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> wrapper around <em>list</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>list</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Collections.ArrayList.IsReadOnly\n    commentId: P:System.Collections.ArrayList.IsReadOnly\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: ArrayList.ReadOnly(IList)\n- uid: System.Collections.ArrayList.Remove(System.Object)\n  commentId: M:System.Collections.ArrayList.Remove(System.Object)\n  id: Remove(System.Object)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  - vb\n  name: Remove(Object)\n  fullName: System.Collections.ArrayList.Remove(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ArrayList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Remove\n    path: src/mscorlib/src/System/Collections/ArrayList.cs\n    startLine: 580\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Removes the first occurrence of a specific object from the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual void Remove(object obj)\n    content.vb: Public Overridable Sub Remove(obj As Object)\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to remove from the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The value can be <strong>null</strong>. </p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only.</p>\\n<p>-or- </p>\\n<p>The <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size. </p>\\n\"\n  seealso:\n  - type: System.Collections.ArrayList.RemoveAt(System.Int32)\n    commentId: M:System.Collections.ArrayList.RemoveAt(System.Int32)\n  - type: System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)\n    commentId: M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)\n  - type: System.Collections.ArrayList.Add(System.Object)\n    commentId: M:System.Collections.ArrayList.Add(System.Object)\n  - type: System.Collections.ArrayList.Insert(System.Int32,System.Object)\n    commentId: M:System.Collections.ArrayList.Insert(System.Int32,System.Object)\n  implements:\n  - System.Collections.IList.Remove(System.Object)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ArrayList.Remove(Object)\n- uid: System.Collections.ArrayList.RemoveAt(System.Int32)\n  commentId: M:System.Collections.ArrayList.RemoveAt(System.Int32)\n  id: RemoveAt(System.Int32)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  - vb\n  name: RemoveAt(Int32)\n  fullName: System.Collections.ArrayList.RemoveAt(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ArrayList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: RemoveAt\n    path: src/mscorlib/src/System/Collections/ArrayList.cs\n    startLine: 592\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Removes the element at the specified index of the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual void RemoveAt(int index)\n    content.vb: Public Overridable Sub RemoveAt(index As Integer)\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the element to remove. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> is equal to or greater than <xref href=\\\"System.Collections.ArrayList.Count\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only.</p>\\n<p>-or- </p>\\n<p>The <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size. </p>\\n\"\n  seealso:\n  - type: System.Collections.ArrayList.Remove(System.Object)\n    commentId: M:System.Collections.ArrayList.Remove(System.Object)\n  - type: System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)\n    commentId: M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)\n  - type: System.Collections.ArrayList.Add(System.Object)\n    commentId: M:System.Collections.ArrayList.Add(System.Object)\n  - type: System.Collections.ArrayList.Insert(System.Int32,System.Object)\n    commentId: M:System.Collections.ArrayList.Insert(System.Int32,System.Object)\n  implements:\n  - System.Collections.IList.RemoveAt(System.Int32)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ArrayList.RemoveAt(Int32)\n- uid: System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)\n  commentId: M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)\n  id: RemoveRange(System.Int32,System.Int32)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  - vb\n  name: RemoveRange(Int32, Int32)\n  fullName: System.Collections.ArrayList.RemoveRange(System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ArrayList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: RemoveRange\n    path: src/mscorlib/src/System/Collections/ArrayList.cs\n    startLine: 608\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Removes a range of elements from the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual void RemoveRange(int index, int count)\n    content.vb: Public Overridable Sub RemoveRange(index As Integer, count As Integer)\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based starting index of the range of elements to remove. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of elements to remove. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>count</em> is less than zero. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>index</em> and <em>count</em> do not denote a valid range of elements in the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only.</p>\\n<p>-or- </p>\\n<p>The <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size. </p>\\n\"\n  seealso:\n  - type: System.Collections.ArrayList.Remove(System.Object)\n    commentId: M:System.Collections.ArrayList.Remove(System.Object)\n  - type: System.Collections.ArrayList.RemoveAt(System.Int32)\n    commentId: M:System.Collections.ArrayList.RemoveAt(System.Int32)\n  - type: System.Collections.ArrayList.GetRange(System.Int32,System.Int32)\n    commentId: M:System.Collections.ArrayList.GetRange(System.Int32,System.Int32)\n  - type: System.Collections.ArrayList.AddRange(System.Collections.ICollection)\n    commentId: M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)\n  - type: System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)\n    commentId: M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)\n  - type: System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)\n    commentId: M:System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ArrayList.RemoveRange(Int32, Int32)\n- uid: System.Collections.ArrayList.Repeat(System.Object,System.Int32)\n  commentId: M:System.Collections.ArrayList.Repeat(System.Object,System.Int32)\n  id: Repeat(System.Object,System.Int32)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  - vb\n  name: Repeat(Object, Int32)\n  fullName: System.Collections.ArrayList.Repeat(System.Object, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ArrayList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Repeat\n    path: src/mscorlib/src/System/Collections/ArrayList.cs\n    startLine: 632\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Returns an <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements are copies of the specified value.</p>\\n\"\n  syntax:\n    content: public static ArrayList Repeat(object value, int count)\n    content.vb: Public Shared Function Repeat(value As Object, count As Integer) As ArrayList\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to copy multiple times in the new <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The value can be <strong>null</strong>. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of times <em>value</em> should be copied. </p>\\n\"\n    return:\n      type: System.Collections.ArrayList\n      description: \"\\n<p>An <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with <em>count</em> number of elements, all of which are copies of <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is less than zero. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: ArrayList.Repeat(Object, Int32)\n- uid: System.Collections.ArrayList.Reverse\n  commentId: M:System.Collections.ArrayList.Reverse\n  id: Reverse\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  - vb\n  name: Reverse()\n  fullName: System.Collections.ArrayList.Reverse()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ArrayList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Reverse\n    path: src/mscorlib/src/System/Collections/ArrayList.cs\n    startLine: 645\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Reverses the order of the elements in the entire <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual void Reverse()\n    content.vb: Public Overridable Sub Reverse\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ArrayList.Reverse()\n- uid: System.Collections.ArrayList.Reverse(System.Int32,System.Int32)\n  commentId: M:System.Collections.ArrayList.Reverse(System.Int32,System.Int32)\n  id: Reverse(System.Int32,System.Int32)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  - vb\n  name: Reverse(Int32, Int32)\n  fullName: System.Collections.ArrayList.Reverse(System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ArrayList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Reverse\n    path: src/mscorlib/src/System/Collections/ArrayList.cs\n    startLine: 657\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Reverses the order of the elements in the specified range.</p>\\n\"\n  syntax:\n    content: public virtual void Reverse(int index, int count)\n    content.vb: Public Overridable Sub Reverse(index As Integer, count As Integer)\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based starting index of the range to reverse. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of elements in the range to reverse. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>count</em> is less than zero. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>index</em> and <em>count</em> do not denote a valid range of elements in the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ArrayList.Reverse(Int32, Int32)\n- uid: System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)\n  commentId: M:System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)\n  id: SetRange(System.Int32,System.Collections.ICollection)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  - vb\n  name: SetRange(Int32, ICollection)\n  fullName: System.Collections.ArrayList.SetRange(System.Int32, System.Collections.ICollection)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ArrayList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SetRange\n    path: src/mscorlib/src/System/Collections/ArrayList.cs\n    startLine: 672\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Copies the elements of a collection over a range of elements in the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual void SetRange(int index, ICollection c)\n    content.vb: Public Overridable Sub SetRange(index As Integer, c As ICollection)\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> index at which to start copying the elements of <em>c</em>. </p>\\n\"\n    - id: c\n      type: System.Collections.ICollection\n      description: \"\\n<p>The <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements to copy to the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The collection itself cannot be <strong>null</strong>, but it can contain elements that are <strong>null</strong>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> plus the number of elements in <em>c</em> is greater than <xref href=\\\"System.Collections.ArrayList.Count\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>c</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only. </p>\\n\"\n  seealso:\n  - type: System.Collections.ArrayList.AddRange(System.Collections.ICollection)\n    commentId: M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)\n  - type: System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)\n    commentId: M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)\n  - type: System.Collections.ArrayList.GetRange(System.Int32,System.Int32)\n    commentId: M:System.Collections.ArrayList.GetRange(System.Int32,System.Int32)\n  - type: System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)\n    commentId: M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ArrayList.SetRange(Int32, ICollection)\n- uid: System.Collections.ArrayList.Sort\n  commentId: M:System.Collections.ArrayList.Sort\n  id: Sort\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  - vb\n  name: Sort()\n  fullName: System.Collections.ArrayList.Sort()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ArrayList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Sort\n    path: src/mscorlib/src/System/Collections/ArrayList.cs\n    startLine: 696\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Sorts the elements in the entire <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual void Sort()\n    content.vb: Public Overridable Sub Sort\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ArrayList.Sort()\n- uid: System.Collections.ArrayList.Sort(System.Collections.IComparer)\n  commentId: M:System.Collections.ArrayList.Sort(System.Collections.IComparer)\n  id: Sort(System.Collections.IComparer)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  - vb\n  name: Sort(IComparer)\n  fullName: System.Collections.ArrayList.Sort(System.Collections.IComparer)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ArrayList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Sort\n    path: src/mscorlib/src/System/Collections/ArrayList.cs\n    startLine: 703\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Sorts the elements in the entire <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> using the specified comparer.</p>\\n\"\n  syntax:\n    content: public virtual void Sort(IComparer comparer)\n    content.vb: Public Overridable Sub Sort(comparer As IComparer)\n    parameters:\n    - id: comparer\n      type: System.Collections.IComparer\n      description: \"\\n<p>The <xref href=\\\"System.Collections.IComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> implementation to use when comparing elements.</p>\\n<p>-or- </p>\\n<p>A null reference (<strong>Nothing</strong> in Visual Basic) to use the <xref href=\\\"System.IComparable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> implementation of each element. </p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An error occurred while comparing two elements.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<strong>null</strong> is passed for <em>comparer</em>, and the elements in the list do not implement <xref href=\\\"System.IComparable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ArrayList.Sort(IComparer)\n- uid: System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)\n  commentId: M:System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)\n  id: Sort(System.Int32,System.Int32,System.Collections.IComparer)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  - vb\n  name: Sort(Int32, Int32, IComparer)\n  fullName: System.Collections.ArrayList.Sort(System.Int32, System.Int32, System.Collections.IComparer)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ArrayList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Sort\n    path: src/mscorlib/src/System/Collections/ArrayList.cs\n    startLine: 716\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Sorts the elements in a range of elements in <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> using the specified comparer.</p>\\n\"\n  syntax:\n    content: public virtual void Sort(int index, int count, IComparer comparer)\n    content.vb: Public Overridable Sub Sort(index As Integer, count As Integer, comparer As IComparer)\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based starting index of the range to sort. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The length of the range to sort. </p>\\n\"\n    - id: comparer\n      type: System.Collections.IComparer\n      description: \"\\n<p>The <xref href=\\\"System.Collections.IComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> implementation to use when comparing elements.</p>\\n<p>-or- </p>\\n<p>A null reference (<strong>Nothing</strong> in Visual Basic) to use the <xref href=\\\"System.IComparable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> implementation of each element. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>count</em> is less than zero. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>index</em> and <em>count</em> do not specify a valid range in the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An error occurred while comparing two elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ArrayList.Sort(Int32, Int32, IComparer)\n- uid: System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)\n  commentId: M:System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)\n  id: Synchronized(System.Collections.ArrayList)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  - vb\n  name: Synchronized(ArrayList)\n  fullName: System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ArrayList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Synchronized\n    path: src/mscorlib/src/System/Collections/ArrayList.cs\n    startLine: 742\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Returns an <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> wrapper that is synchronized (thread safe).</p>\\n\"\n  syntax:\n    content: >-\n      [HostProtection(Synchronization = true)]\n\n      public static ArrayList Synchronized(ArrayList list)\n    content.vb: >-\n      <HostProtection(Synchronization:=True)>\n\n      Public Shared Function Synchronized(list As ArrayList) As ArrayList\n    parameters:\n    - id: list\n      type: System.Collections.ArrayList\n      description: \"\\n<p>The <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to synchronize. </p>\\n\"\n    return:\n      type: System.Collections.ArrayList\n      description: \"\\n<p>An <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> wrapper that is synchronized (thread safe).</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>list</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Collections.ArrayList.SyncRoot\n    commentId: P:System.Collections.ArrayList.SyncRoot\n  - type: System.Collections.ArrayList.IsSynchronized\n    commentId: P:System.Collections.ArrayList.IsSynchronized\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: ArrayList.Synchronized(ArrayList)\n- uid: System.Collections.ArrayList.Synchronized(System.Collections.IList)\n  commentId: M:System.Collections.ArrayList.Synchronized(System.Collections.IList)\n  id: Synchronized(System.Collections.IList)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  - vb\n  name: Synchronized(IList)\n  fullName: System.Collections.ArrayList.Synchronized(System.Collections.IList)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ArrayList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Synchronized\n    path: src/mscorlib/src/System/Collections/ArrayList.cs\n    startLine: 731\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Returns an <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> wrapper that is synchronized (thread safe).</p>\\n\"\n  syntax:\n    content: >-\n      [HostProtection(Synchronization = true)]\n\n      public static IList Synchronized(IList list)\n    content.vb: >-\n      <HostProtection(Synchronization:=True)>\n\n      Public Shared Function Synchronized(list As IList) As IList\n    parameters:\n    - id: list\n      type: System.Collections.IList\n      description: \"\\n<p>The <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to synchronize. </p>\\n\"\n    return:\n      type: System.Collections.IList\n      description: \"\\n<p>An <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> wrapper that is synchronized (thread safe).</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>list</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Collections.ArrayList.SyncRoot\n    commentId: P:System.Collections.ArrayList.SyncRoot\n  - type: System.Collections.ArrayList.IsSynchronized\n    commentId: P:System.Collections.ArrayList.IsSynchronized\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: ArrayList.Synchronized(IList)\n- uid: System.Collections.ArrayList.ToArray\n  commentId: M:System.Collections.ArrayList.ToArray\n  id: ToArray\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  - vb\n  name: ToArray()\n  fullName: System.Collections.ArrayList.ToArray()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ArrayList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToArray\n    path: src/mscorlib/src/System/Collections/ArrayList.cs\n    startLine: 753\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Copies the elements of the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a new <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array.</p>\\n\"\n  syntax:\n    content: public virtual object[] ToArray()\n    content.vb: Public Overridable Function ToArray As Object()\n    return:\n      type: System.Object[]\n      description: \"\\n<p>An <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array containing copies of the elements of the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ArrayList.ToArray()\n- uid: System.Collections.ArrayList.ToArray(System.Type)\n  commentId: M:System.Collections.ArrayList.ToArray(System.Type)\n  id: ToArray(System.Type)\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  - vb\n  name: ToArray(Type)\n  fullName: System.Collections.ArrayList.ToArray(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ArrayList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToArray\n    path: src/mscorlib/src/System/Collections/ArrayList.cs\n    startLine: 766\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Copies the elements of the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a new array of the specified element type.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public virtual Array ToArray(Type type)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overridable Function ToArray(type As Type) As Array\n    parameters:\n    - id: type\n      type: System.Type\n      description: \"\\n<p>The element <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the destination array to create and copy elements to.</p>\\n\"\n    return:\n      type: System.Array\n      description: \"\\n<p>An array of the specified element type containing copies of the elements of the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>type</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The type of the source <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> cannot be cast automatically to the specified type. </p>\\n\"\n  seealso:\n  - type: System.Type\n    commentId: T:System.Type\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ArrayList.ToArray(Type)\n- uid: System.Collections.ArrayList.TrimToSize\n  commentId: M:System.Collections.ArrayList.TrimToSize\n  id: TrimToSize\n  parent: System.Collections.ArrayList\n  langs:\n  - csharp\n  - vb\n  name: TrimToSize()\n  fullName: System.Collections.ArrayList.TrimToSize()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ArrayList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TrimToSize\n    path: src/mscorlib/src/System/Collections/ArrayList.cs\n    startLine: 786\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Sets the capacity to the actual number of elements in the <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual void TrimToSize()\n    content.vb: Public Overridable Sub TrimToSize\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only.</p>\\n<p>-or- </p>\\n<p>The <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size. </p>\\n\"\n  seealso:\n  - type: System.Collections.ArrayList.Clear\n    commentId: M:System.Collections.ArrayList.Clear\n  - type: System.Collections.ArrayList.Capacity\n    commentId: P:System.Collections.ArrayList.Capacity\n  - type: System.Collections.ArrayList.Count\n    commentId: P:System.Collections.ArrayList.Count\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ArrayList.TrimToSize()\nreferences:\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Collections.IList\n  parent: System.Collections\n  isExternal: false\n  name: IList\n  fullName: System.Collections.IList\n  nameWithType: IList\n  commentId: T:System.Collections.IList\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  fullName: System.Collections.ICollection\n  nameWithType: ICollection\n  commentId: T:System.Collections.ICollection\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  fullName: System.Collections.IEnumerable\n  nameWithType: IEnumerable\n  commentId: T:System.Collections.IEnumerable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  parent: System.Linq.Queryable\n  definition: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  name: AsQueryable()\n  fullName: System.Linq.Queryable.AsQueryable()\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Queryable.AsQueryable()\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  parent: System.Linq.ParallelEnumerable\n  definition: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  name: AsParallel()\n  fullName: System.Linq.ParallelEnumerable.AsParallel()\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ParallelEnumerable.AsParallel()\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  name: Cast<TResult>()\n  fullName: System.Linq.Enumerable.Cast<TResult>()\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)()\n  name.vb: Cast(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.Cast<TResult>()\n  nameWithType.vb: Enumerable.Cast(Of TResult)()\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  name: OfType<TResult>()\n  fullName: System.Linq.Enumerable.OfType<TResult>()\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)()\n  name.vb: OfType(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.OfType<TResult>()\n  nameWithType.vb: Enumerable.OfType(Of TResult)()\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsQueryable(IEnumerable)\n  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n- uid: System.Linq.Queryable\n  parent: System.Linq\n  isExternal: false\n  name: Queryable\n  fullName: System.Linq.Queryable\n  nameWithType: Queryable\n  commentId: T:System.Linq.Queryable\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsParallel(IEnumerable)\n  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n- uid: System.Linq.ParallelEnumerable\n  parent: System.Linq\n  isExternal: false\n  name: ParallelEnumerable\n  fullName: System.Linq.ParallelEnumerable\n  nameWithType: ParallelEnumerable\n  commentId: T:System.Linq.ParallelEnumerable\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: Cast<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)\n  name.vb: Cast(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.Cast(Of TResult)(IEnumerable)\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n- uid: System.Linq.Enumerable\n  parent: System.Linq\n  isExternal: false\n  name: Enumerable\n  fullName: System.Linq.Enumerable\n  nameWithType: Enumerable\n  commentId: T:System.Linq.Enumerable\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: OfType<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)\n  name.vb: OfType(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.OfType(Of TResult)(IEnumerable)\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n- uid: System.Linq\n  isExternal: false\n  name: System.Linq\n  fullName: System.Linq\n  nameWithType: System.Linq\n  commentId: N:System.Linq\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Collections.ICollection.Count\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: Count\n  fullName: System.Collections.ICollection.Count\n  nameWithType: ICollection.Count\n  commentId: P:System.Collections.ICollection.Count\n- uid: System.Collections.IList.IsFixedSize\n  parent: System.Collections.IList\n  isExternal: false\n  name: IsFixedSize\n  fullName: System.Collections.IList.IsFixedSize\n  nameWithType: IList.IsFixedSize\n  commentId: P:System.Collections.IList.IsFixedSize\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Collections.IList.IsReadOnly\n  parent: System.Collections.IList\n  isExternal: false\n  name: IsReadOnly\n  fullName: System.Collections.IList.IsReadOnly\n  nameWithType: IList.IsReadOnly\n  commentId: P:System.Collections.IList.IsReadOnly\n- uid: System.Collections.ICollection.IsSynchronized\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: IsSynchronized\n  fullName: System.Collections.ICollection.IsSynchronized\n  nameWithType: ICollection.IsSynchronized\n  commentId: P:System.Collections.ICollection.IsSynchronized\n- uid: System.Collections.IList.Item(System.Int32)\n  parent: System.Collections.IList\n  isExternal: true\n  name: Item[Int32]\n  fullName: System.Collections.IList.Item[System.Int32]\n  fullname.vb: System.Collections.IList.Item(System.Int32)\n  name.vb: Item(Int32)\n  spec.csharp:\n  - uid: System.Collections.IList.Item(System.Int32)\n    name: Item\n    fullName: System.Collections.IList.Item\n  - name: '['\n    fullName: '['\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ']'\n    fullName: ']'\n  spec.vb:\n  - uid: System.Collections.IList.Item(System.Int32)\n    name: Item\n    fullName: System.Collections.IList.Item\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.Item[Int32]\n  nameWithType.vb: IList.Item(Int32)\n  commentId: P:System.Collections.IList.Item(System.Int32)\n- uid: System.Collections.ICollection.SyncRoot\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: SyncRoot\n  fullName: System.Collections.ICollection.SyncRoot\n  nameWithType: ICollection.SyncRoot\n  commentId: P:System.Collections.ICollection.SyncRoot\n- uid: System.Collections.ArrayList\n  parent: System.Collections\n  isExternal: false\n  name: ArrayList\n  fullName: System.Collections.ArrayList\n  nameWithType: ArrayList\n  commentId: T:System.Collections.ArrayList\n- uid: System.Collections.IList.Add(System.Object)\n  parent: System.Collections.IList\n  isExternal: true\n  name: Add(Object)\n  fullName: System.Collections.IList.Add(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IList.Add(System.Object)\n    name: Add\n    fullName: System.Collections.IList.Add\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.Add(System.Object)\n    name: Add\n    fullName: System.Collections.IList.Add\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.Add(Object)\n  commentId: M:System.Collections.IList.Add(System.Object)\n- uid: System.Collections.IComparer\n  parent: System.Collections\n  isExternal: false\n  name: IComparer\n  fullName: System.Collections.IComparer\n  nameWithType: IComparer\n  commentId: T:System.Collections.IComparer\n- uid: System.Collections.IList.Clear\n  parent: System.Collections.IList\n  isExternal: false\n  name: Clear()\n  fullName: System.Collections.IList.Clear()\n  spec.csharp:\n  - uid: System.Collections.IList.Clear\n    name: Clear\n    fullName: System.Collections.IList.Clear\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.Clear\n    name: Clear\n    fullName: System.Collections.IList.Clear\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IList.Clear()\n  commentId: M:System.Collections.IList.Clear\n- uid: System.Collections.IList.Contains(System.Object)\n  parent: System.Collections.IList\n  isExternal: true\n  name: Contains(Object)\n  fullName: System.Collections.IList.Contains(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IList.Contains(System.Object)\n    name: Contains\n    fullName: System.Collections.IList.Contains\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.Contains(System.Object)\n    name: Contains\n    fullName: System.Collections.IList.Contains\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.Contains(Object)\n  commentId: M:System.Collections.IList.Contains(System.Object)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  fullName: System.Array\n  nameWithType: Array\n  commentId: T:System.Array\n- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  parent: System.Collections.ICollection\n  isExternal: true\n  name: CopyTo(Array, Int32)\n  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)\n  spec.csharp:\n  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n    name: CopyTo\n    fullName: System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n    name: CopyTo\n    fullName: System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ICollection.CopyTo(Array, Int32)\n  commentId: M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n- uid: System.Collections.IEnumerable.GetEnumerator\n  parent: System.Collections.IEnumerable\n  isExternal: false\n  name: GetEnumerator()\n  fullName: System.Collections.IEnumerable.GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable.GetEnumerator()\n  commentId: M:System.Collections.IEnumerable.GetEnumerator\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  fullName: System.Collections.IEnumerator\n  nameWithType: IEnumerator\n  commentId: T:System.Collections.IEnumerator\n- uid: System.Collections.IList.IndexOf(System.Object)\n  parent: System.Collections.IList\n  isExternal: true\n  name: IndexOf(Object)\n  fullName: System.Collections.IList.IndexOf(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IList.IndexOf(System.Object)\n    name: IndexOf\n    fullName: System.Collections.IList.IndexOf\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.IndexOf(System.Object)\n    name: IndexOf\n    fullName: System.Collections.IList.IndexOf\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.IndexOf(Object)\n  commentId: M:System.Collections.IList.IndexOf(System.Object)\n- uid: System.Collections.IList.Insert(System.Int32,System.Object)\n  parent: System.Collections.IList\n  isExternal: true\n  name: Insert(Int32, Object)\n  fullName: System.Collections.IList.Insert(System.Int32, System.Object)\n  spec.csharp:\n  - uid: System.Collections.IList.Insert(System.Int32,System.Object)\n    name: Insert\n    fullName: System.Collections.IList.Insert\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.Insert(System.Int32,System.Object)\n    name: Insert\n    fullName: System.Collections.IList.Insert\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.Insert(Int32, Object)\n  commentId: M:System.Collections.IList.Insert(System.Int32,System.Object)\n- uid: System.Collections.IList.Remove(System.Object)\n  parent: System.Collections.IList\n  isExternal: true\n  name: Remove(Object)\n  fullName: System.Collections.IList.Remove(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IList.Remove(System.Object)\n    name: Remove\n    fullName: System.Collections.IList.Remove\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.Remove(System.Object)\n    name: Remove\n    fullName: System.Collections.IList.Remove\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.Remove(Object)\n  commentId: M:System.Collections.IList.Remove(System.Object)\n- uid: System.Collections.IList.RemoveAt(System.Int32)\n  parent: System.Collections.IList\n  isExternal: true\n  name: RemoveAt(Int32)\n  fullName: System.Collections.IList.RemoveAt(System.Int32)\n  spec.csharp:\n  - uid: System.Collections.IList.RemoveAt(System.Int32)\n    name: RemoveAt\n    fullName: System.Collections.IList.RemoveAt\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.RemoveAt(System.Int32)\n    name: RemoveAt\n    fullName: System.Collections.IList.RemoveAt\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.RemoveAt(Int32)\n  commentId: M:System.Collections.IList.RemoveAt(System.Int32)\n- uid: System.Object[]\n  name: Object[]\n  fullName: System.Object[]\n  fullname.vb: System.Object()\n  name.vb: Object()\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Object[]\n  nameWithType.vb: Object()\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  nameWithType: Type\n  commentId: T:System.Type\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.OutOfMemoryException\n  isExternal: false\n  name: OutOfMemoryException\n  fullName: System.OutOfMemoryException\n  nameWithType: OutOfMemoryException\n  commentId: T:System.OutOfMemoryException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.InvalidCastException\n  isExternal: false\n  name: InvalidCastException\n  fullName: System.InvalidCastException\n  nameWithType: InvalidCastException\n  commentId: T:System.InvalidCastException\n"}