{"nodes":[{"pos":[930,958],"content":"CustomAttributeNamedArgument","needQuote":true,"nodes":[{"content":"CustomAttributeNamedArgument","pos":[0,28]}]},{"pos":[2890,2897],"content":"IsField","needQuote":true,"nodes":[{"content":"IsField","pos":[0,7]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the named argument is a field; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[3588,3691],"source":"\\n<p>\\n<strong>true</strong> if the named argument is a field; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[4072,4082],"content":"MemberName","needQuote":true,"nodes":[{"content":"MemberName","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The name of the attribute member that would be used to set the named argument.&lt;/p&gt;\\n","pos":[4802,4891],"source":"\\n<p>The name of the attribute member that would be used to set the named argument.</p>\\n"},{"pos":[5275,5285],"content":"TypedValue","needQuote":true,"nodes":[{"content":"TypedValue","pos":[0,10]}]},{"content":"\\n&lt;p&gt;A structure that can be used to obtain the type and value of the current named argument.&lt;/p&gt;\\n","pos":[6199,6298],"source":"\\n<p>A structure that can be used to obtain the type and value of the current named argument.</p>\\n"},{"pos":[7331,7399],"content":"Equality(CustomAttributeNamedArgument, CustomAttributeNamedArgument)","needQuote":true,"nodes":[{"content":"Equality(CustomAttributeNamedArgument, CustomAttributeNamedArgument)","pos":[0,68]}]},{"content":"\\n&lt;p&gt;The structure to the left of the equality operator.&lt;/p&gt;\\n","pos":[8450,8512],"source":"\\n<p>The structure to the left of the equality operator.</p>\\n"},{"content":"\\n&lt;p&gt;The structure to the right of the equality operator.&lt;/p&gt;\\n","pos":[8609,8672],"source":"\\n<p>The structure to the right of the equality operator.</p>\\n"},{"pos":[9679,9749],"content":"Inequality(CustomAttributeNamedArgument, CustomAttributeNamedArgument)","needQuote":true,"nodes":[{"content":"Inequality(CustomAttributeNamedArgument, CustomAttributeNamedArgument)","pos":[0,70]}]},{"content":"\\n&lt;p&gt;The structure to the left of the inequality operator.&lt;/p&gt;\\n","pos":[10804,10868],"source":"\\n<p>The structure to the left of the inequality operator.</p>\\n"},{"content":"\\n&lt;p&gt;The structure to the right of the inequality operator.&lt;/p&gt;\\n","pos":[10965,11030],"source":"\\n<p>The structure to the right of the inequality operator.</p>\\n"},{"pos":[11782,11796],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;An object to compare with this instance, or &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[12540,12617],"source":"\\n<p>An object to compare with this instance, or <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;obj&lt;/em&gt; equals the type and value of this instance; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[12678,12807],"source":"\\n<p>\\n<strong>true</strong> if <em>obj</em> equals the type and value of this instance; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[13257,13270],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A 32-bit signed integer hash code.&lt;/p&gt;\\n","pos":[13932,13977],"source":"\\n<p>A 32-bit signed integer hash code.</p>\\n"},{"pos":[14407,14417],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;A string that consists of the argument name, the equal sign, and a string representation of the argument value.&lt;/p&gt;\\n","pos":[15149,15271],"source":"\\n<p>A string that consists of the argument name, the equal sign, and a string representation of the argument value.</p>\\n"},{"pos":[15519,15536],"content":"System.Reflection","needQuote":true,"nodes":[{"content":"System.Reflection","pos":[0,17]}]},{"pos":[15742,15764],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[15912,15918],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[15985,15986],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16036,16042],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[16103,16104]},{"pos":[16159,16165],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16225,16226],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16323,16329],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[16396,16397],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16447,16453],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[16514,16515]},{"pos":[16570,16576],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16636,16637],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16882,16913],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[17079,17094],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[17170,17171],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17221,17227],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[17288,17289]},{"pos":[17344,17350],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17410,17411],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17517,17532],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[17608,17609],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17659,17665],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[17726,17727]},{"pos":[17782,17788],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17848,17849],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18075,18084],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[18177,18184],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[18252,18253],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18280,18281],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18350,18357],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[18425,18426],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18453,18454],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18607,18613],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18734,18740],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[18872,18879],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[19027,19033],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[19222,19250],"content":"CustomAttributeTypedArgument","needQuote":true,"nodes":[{"content":"CustomAttributeTypedArgument","pos":[0,28]}]},{"pos":[19527,19555],"content":"CustomAttributeNamedArgument","needQuote":true,"nodes":[{"content":"CustomAttributeNamedArgument","pos":[0,28]}]},{"pos":[19822,19836],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[19961,19967],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[20016,20017],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20067,20073],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20133,20134],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20220,20226],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[20275,20276],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20326,20332],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20392,20393],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20574,20583],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[20762,20775],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[20882,20893],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[20947,20948],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20975,20976],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21052,21063],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[21117,21118],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21145,21146],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21312,21317],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[21481,21491],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[21592,21600],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[21651,21652],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21679,21680],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21753,21761],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[21812,21813],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21840,21841],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]}],"content":"items:\n- uid: System.Reflection.CustomAttributeNamedArgument\n  commentId: T:System.Reflection.CustomAttributeNamedArgument\n  id: CustomAttributeNamedArgument\n  parent: System.Reflection\n  children:\n  - System.Reflection.CustomAttributeNamedArgument.Equals(System.Object)\n  - System.Reflection.CustomAttributeNamedArgument.GetHashCode\n  - System.Reflection.CustomAttributeNamedArgument.IsField\n  - System.Reflection.CustomAttributeNamedArgument.MemberName\n  - System.Reflection.CustomAttributeNamedArgument.op_Equality(System.Reflection.CustomAttributeNamedArgument,System.Reflection.CustomAttributeNamedArgument)\n  - System.Reflection.CustomAttributeNamedArgument.op_Inequality(System.Reflection.CustomAttributeNamedArgument,System.Reflection.CustomAttributeNamedArgument)\n  - System.Reflection.CustomAttributeNamedArgument.ToString\n  - System.Reflection.CustomAttributeNamedArgument.TypedValue\n  langs:\n  - csharp\n  - vb\n  name: CustomAttributeNamedArgument\n  fullName: System.Reflection.CustomAttributeNamedArgument\n  type: Struct\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttribute.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CustomAttributeNamedArgument\n    path: src/mscorlib/src/System/Reflection/CustomAttribute.cs\n    startLine: 584\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Represents a named argument of a custom attribute in the reflection-only context.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ComVisible(true)]\n\n      public struct CustomAttributeNamedArgument\n    content.vb: >-\n      <Serializable>\n\n      <ComVisible(True)>\n\n      Public Structure CustomAttributeNamedArgument\n  seealso:\n  - type: System.Reflection.CustomAttributeData\n    commentId: T:System.Reflection.CustomAttributeData\n  - type: System.Reflection.CustomAttributeTypedArgument\n    commentId: T:System.Reflection.CustomAttributeTypedArgument\n  - type: System.Reflection.Assembly.ReflectionOnlyLoad\n    commentId: Overload:System.Reflection.Assembly.ReflectionOnlyLoad\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  nameWithType: CustomAttributeNamedArgument\n- uid: System.Reflection.CustomAttributeNamedArgument.IsField\n  commentId: P:System.Reflection.CustomAttributeNamedArgument.IsField\n  id: IsField\n  parent: System.Reflection.CustomAttributeNamedArgument\n  langs:\n  - csharp\n  - vb\n  name: IsField\n  fullName: System.Reflection.CustomAttributeNamedArgument.IsField\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttribute.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsField\n    path: src/mscorlib/src/System/Reflection/CustomAttribute.cs\n    startLine: 669\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a value that indicates whether the named argument is a field.</p>\\n\"\n  syntax:\n    content: public bool IsField { get; }\n    content.vb: Public ReadOnly Property IsField As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the named argument is a field; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CustomAttributeNamedArgument.IsField\n- uid: System.Reflection.CustomAttributeNamedArgument.MemberName\n  commentId: P:System.Reflection.CustomAttributeNamedArgument.MemberName\n  id: MemberName\n  parent: System.Reflection.CustomAttributeNamedArgument\n  langs:\n  - csharp\n  - vb\n  name: MemberName\n  fullName: System.Reflection.CustomAttributeNamedArgument.MemberName\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttribute.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MemberName\n    path: src/mscorlib/src/System/Reflection/CustomAttribute.cs\n    startLine: 668\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets the name of the attribute member that would be used to set the named argument.</p>\\n\"\n  syntax:\n    content: public string MemberName { get; }\n    content.vb: Public ReadOnly Property MemberName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The name of the attribute member that would be used to set the named argument.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CustomAttributeNamedArgument.MemberName\n- uid: System.Reflection.CustomAttributeNamedArgument.TypedValue\n  commentId: P:System.Reflection.CustomAttributeNamedArgument.TypedValue\n  id: TypedValue\n  parent: System.Reflection.CustomAttributeNamedArgument\n  langs:\n  - csharp\n  - vb\n  name: TypedValue\n  fullName: System.Reflection.CustomAttributeNamedArgument.TypedValue\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttribute.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TypedValue\n    path: src/mscorlib/src/System/Reflection/CustomAttribute.cs\n    startLine: 667\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Reflection.CustomAttributeTypedArgument\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure that can be used to obtain the type and value of the current named argument.</p>\\n\"\n  syntax:\n    content: public CustomAttributeTypedArgument TypedValue { get; }\n    content.vb: Public ReadOnly Property TypedValue As CustomAttributeTypedArgument\n    parameters: []\n    return:\n      type: System.Reflection.CustomAttributeTypedArgument\n      description: \"\\n<p>A structure that can be used to obtain the type and value of the current named argument.</p>\\n\"\n  seealso:\n  - type: System.Reflection.CustomAttributeData\n    commentId: T:System.Reflection.CustomAttributeData\n  - type: System.Reflection.CustomAttributeTypedArgument\n    commentId: T:System.Reflection.CustomAttributeTypedArgument\n  - type: System.Reflection.Assembly.ReflectionOnlyLoad\n    commentId: Overload:System.Reflection.Assembly.ReflectionOnlyLoad\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CustomAttributeNamedArgument.TypedValue\n- uid: System.Reflection.CustomAttributeNamedArgument.op_Equality(System.Reflection.CustomAttributeNamedArgument,System.Reflection.CustomAttributeNamedArgument)\n  commentId: M:System.Reflection.CustomAttributeNamedArgument.op_Equality(System.Reflection.CustomAttributeNamedArgument,System.Reflection.CustomAttributeNamedArgument)\n  id: op_Equality(System.Reflection.CustomAttributeNamedArgument,System.Reflection.CustomAttributeNamedArgument)\n  parent: System.Reflection.CustomAttributeNamedArgument\n  langs:\n  - csharp\n  - vb\n  name: Equality(CustomAttributeNamedArgument, CustomAttributeNamedArgument)\n  fullName: System.Reflection.CustomAttributeNamedArgument.Equality(System.Reflection.CustomAttributeNamedArgument, System.Reflection.CustomAttributeNamedArgument)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttribute.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Equality\n    path: src/mscorlib/src/System/Reflection/CustomAttribute.cs\n    startLine: 589\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Tests whether two <xref href=\\\"System.Reflection.CustomAttributeNamedArgument\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structures are equivalent.</p>\\n\"\n  syntax:\n    content: public static bool operator ==(CustomAttributeNamedArgument left, CustomAttributeNamedArgument right)\n    content.vb: Public Shared Operator =(left As CustomAttributeNamedArgument, right As CustomAttributeNamedArgument) As Boolean\n    parameters:\n    - id: left\n      type: System.Reflection.CustomAttributeNamedArgument\n      description: \"\\n<p>The structure to the left of the equality operator.</p>\\n\"\n    - id: right\n      type: System.Reflection.CustomAttributeNamedArgument\n      description: \"\\n<p>The structure to the right of the equality operator.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the two <xref href=\\\"System.Reflection.CustomAttributeNamedArgument\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structures are equal; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CustomAttributeNamedArgument.Equality(CustomAttributeNamedArgument, CustomAttributeNamedArgument)\n- uid: System.Reflection.CustomAttributeNamedArgument.op_Inequality(System.Reflection.CustomAttributeNamedArgument,System.Reflection.CustomAttributeNamedArgument)\n  commentId: M:System.Reflection.CustomAttributeNamedArgument.op_Inequality(System.Reflection.CustomAttributeNamedArgument,System.Reflection.CustomAttributeNamedArgument)\n  id: op_Inequality(System.Reflection.CustomAttributeNamedArgument,System.Reflection.CustomAttributeNamedArgument)\n  parent: System.Reflection.CustomAttributeNamedArgument\n  langs:\n  - csharp\n  - vb\n  name: Inequality(CustomAttributeNamedArgument, CustomAttributeNamedArgument)\n  fullName: System.Reflection.CustomAttributeNamedArgument.Inequality(System.Reflection.CustomAttributeNamedArgument, System.Reflection.CustomAttributeNamedArgument)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttribute.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Inequality\n    path: src/mscorlib/src/System/Reflection/CustomAttribute.cs\n    startLine: 593\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Tests whether two <xref href=\\\"System.Reflection.CustomAttributeNamedArgument\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structures are different.</p>\\n\"\n  syntax:\n    content: public static bool operator !=(CustomAttributeNamedArgument left, CustomAttributeNamedArgument right)\n    content.vb: Public Shared Operator <>(left As CustomAttributeNamedArgument, right As CustomAttributeNamedArgument) As Boolean\n    parameters:\n    - id: left\n      type: System.Reflection.CustomAttributeNamedArgument\n      description: \"\\n<p>The structure to the left of the inequality operator.</p>\\n\"\n    - id: right\n      type: System.Reflection.CustomAttributeNamedArgument\n      description: \"\\n<p>The structure to the right of the inequality operator.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the two <xref href=\\\"System.Reflection.CustomAttributeNamedArgument\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structures are different; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CustomAttributeNamedArgument.Inequality(CustomAttributeNamedArgument, CustomAttributeNamedArgument)\n- uid: System.Reflection.CustomAttributeNamedArgument.Equals(System.Object)\n  commentId: M:System.Reflection.CustomAttributeNamedArgument.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Reflection.CustomAttributeNamedArgument\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Reflection.CustomAttributeNamedArgument.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttribute.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Reflection/CustomAttribute.cs\n    startLine: 647\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns a value that indicates whether this instance is equal to a specified object.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>An object to compare with this instance, or <strong>null</strong>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>obj</em> equals the type and value of this instance; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.ValueType.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: CustomAttributeNamedArgument.Equals(Object)\n- uid: System.Reflection.CustomAttributeNamedArgument.GetHashCode\n  commentId: M:System.Reflection.CustomAttributeNamedArgument.GetHashCode\n  id: GetHashCode\n  parent: System.Reflection.CustomAttributeNamedArgument\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Reflection.CustomAttributeNamedArgument.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttribute.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHashCode\n    path: src/mscorlib/src/System/Reflection/CustomAttribute.cs\n    startLine: 643\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns the hash code for this instance.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer hash code.</p>\\n\"\n  overridden: System.ValueType.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: CustomAttributeNamedArgument.GetHashCode()\n- uid: System.Reflection.CustomAttributeNamedArgument.ToString\n  commentId: M:System.Reflection.CustomAttributeNamedArgument.ToString\n  id: ToString\n  parent: System.Reflection.CustomAttributeNamedArgument\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Reflection.CustomAttributeNamedArgument.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttribute.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Reflection/CustomAttribute.cs\n    startLine: 636\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns a string that consists of the argument name, the equal sign, and a string representation of the argument value.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>A string that consists of the argument name, the equal sign, and a string representation of the argument value.</p>\\n\"\n  overridden: System.ValueType.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: CustomAttributeNamedArgument.ToString()\nreferences:\n- uid: System.Reflection\n  isExternal: false\n  name: System.Reflection\n  fullName: System.Reflection\n  nameWithType: System.Reflection\n  commentId: N:System.Reflection\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Reflection.CustomAttributeTypedArgument\n  parent: System.Reflection\n  isExternal: false\n  name: CustomAttributeTypedArgument\n  fullName: System.Reflection.CustomAttributeTypedArgument\n  nameWithType: CustomAttributeTypedArgument\n  commentId: T:System.Reflection.CustomAttributeTypedArgument\n- uid: System.Reflection.CustomAttributeNamedArgument\n  parent: System.Reflection\n  isExternal: false\n  name: CustomAttributeNamedArgument\n  fullName: System.Reflection.CustomAttributeNamedArgument\n  nameWithType: CustomAttributeNamedArgument\n  commentId: T:System.Reflection.CustomAttributeNamedArgument\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ValueType.Equals(Object)\n  commentId: M:System.ValueType.Equals(System.Object)\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  nameWithType: ValueType\n  commentId: T:System.ValueType\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.GetHashCode()\n  commentId: M:System.ValueType.GetHashCode\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.ToString()\n  commentId: M:System.ValueType.ToString\n"}