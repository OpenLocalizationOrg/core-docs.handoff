{"nodes":[{"pos":[1089,1096],"content":"Monitor","needQuote":true,"nodes":[{"content":"Monitor","pos":[0,7]}]},{"pos":[2557,2570],"content":"Enter(Object)","needQuote":true,"nodes":[{"content":"Enter(Object)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The object on which to acquire the monitor lock.","pos":[3222,3275],"source":"\\n<p>The object on which to acquire the monitor lock."},{"content":"&lt;/p&gt;\\n","pos":[3276,3282],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;obj&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.","pos":[3401,3458],"source":"\\n<p>The <em>obj</em> parameter is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[3459,3465],"source":" </p>\\n"},{"pos":[3930,3956],"content":"Enter(Object, ref Boolean)","needQuote":true,"nodes":[{"content":"Enter(Object, ref Boolean)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The object on which to wait.","pos":[4738,4771],"source":"\\n<p>The object on which to wait."},{"content":"&lt;/p&gt;\\n","pos":[4772,4778],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The result of the attempt to acquire the lock, passed by reference.","pos":[4847,4919],"source":"\\n<p>The result of the attempt to acquire the lock, passed by reference."},{"content":"The input must be &lt;strong&gt;false&lt;/strong&gt;.","pos":[4920,4961],"source":" The input must be <strong>false</strong>."},{"content":"The output is &lt;strong&gt;true&lt;/strong&gt; if the lock is acquired; otherwise, the output is &lt;strong&gt;false&lt;/strong&gt;.","pos":[4962,5071],"source":" The output is <strong>true</strong> if the lock is acquired; otherwise, the output is <strong>false</strong>."},{"content":"The output is set even if an exception occurs during the attempt to acquire the lock.","pos":[5072,5157]},{"content":"&lt;/p&gt;\\n&lt;p&gt;Note   If no exception occurs, the output of this method is always &lt;strong&gt;true&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[5158,5262],"source":" </p>\\n<p>Note   If no exception occurs, the output of this method is always <strong>true</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The input to &lt;em&gt;lockTaken&lt;/em&gt; is &lt;strong&gt;true&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[5373,5441],"source":"\\n<p>The input to <em>lockTaken</em> is <strong>true</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;obj&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.","pos":[5546,5603],"source":"\\n<p>The <em>obj</em> parameter is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[5604,5610],"source":" </p>\\n"},{"pos":[6130,6142],"content":"Exit(Object)","needQuote":true,"nodes":[{"content":"Exit(Object)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The object on which to release the lock.","pos":[6941,6986],"source":"\\n<p>The object on which to release the lock."},{"content":"&lt;/p&gt;\\n","pos":[6987,6993],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;obj&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.","pos":[7112,7169],"source":"\\n<p>The <em>obj</em> parameter is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[7170,7176],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The current thread does not own the lock for the specified object.","pos":[7315,7386],"source":"\\n<p>The current thread does not own the lock for the specified object."},{"content":"&lt;/p&gt;\\n","pos":[7387,7393],"source":" </p>\\n"},{"pos":[7821,7838],"content":"IsEntered(Object)","needQuote":true,"nodes":[{"content":"IsEntered(Object)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The object to test.","pos":[8619,8643],"source":"\\n<p>The object to test."},{"content":"&lt;/p&gt;\\n","pos":[8644,8650],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the current thread holds the lock on &lt;em&gt;obj&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[8711,8834],"source":"\\n<p>\\n<strong>true</strong> if the current thread holds the lock on <em>obj</em>; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;obj&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[8953,8998],"source":"\\n<p>\\n<em>obj</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[8999,9005],"source":" </p>\\n"},{"pos":[9340,9353],"content":"Pulse(Object)","needQuote":true,"nodes":[{"content":"Pulse(Object)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The object a thread is waiting for.","pos":[10104,10144],"source":"\\n<p>The object a thread is waiting for."},{"content":"&lt;/p&gt;\\n","pos":[10145,10151],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;obj&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.","pos":[10270,10327],"source":"\\n<p>The <em>obj</em> parameter is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[10328,10334],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The calling thread does not own the lock for the specified object.","pos":[10473,10544],"source":"\\n<p>The calling thread does not own the lock for the specified object."},{"content":"&lt;/p&gt;\\n","pos":[10545,10551],"source":" </p>\\n"},{"pos":[10977,10993],"content":"PulseAll(Object)","needQuote":true,"nodes":[{"content":"PulseAll(Object)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The object that sends the pulse.","pos":[11739,11776],"source":"\\n<p>The object that sends the pulse."},{"content":"&lt;/p&gt;\\n","pos":[11777,11783],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;obj&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.","pos":[11902,11959],"source":"\\n<p>The <em>obj</em> parameter is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[11960,11966],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The calling thread does not own the lock for the specified object.","pos":[12105,12176],"source":"\\n<p>The calling thread does not own the lock for the specified object."},{"content":"&lt;/p&gt;\\n","pos":[12177,12183],"source":" </p>\\n"},{"pos":[12612,12628],"content":"TryEnter(Object)","needQuote":true,"nodes":[{"content":"TryEnter(Object)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The object on which to acquire the lock.","pos":[13310,13355],"source":"\\n<p>The object on which to acquire the lock."},{"content":"&lt;/p&gt;\\n","pos":[13356,13362],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the current thread acquires the lock; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[13423,13533],"source":"\\n<p>\\n<strong>true</strong> if the current thread acquires the lock; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;obj&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.","pos":[13652,13709],"source":"\\n<p>The <em>obj</em> parameter is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[13710,13716],"source":" </p>\\n"},{"pos":[14193,14222],"content":"TryEnter(Object, ref Boolean)","needQuote":true,"nodes":[{"content":"TryEnter(Object, ref Boolean)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The object on which to acquire the lock.","pos":[15028,15073],"source":"\\n<p>The object on which to acquire the lock."},{"content":"&lt;/p&gt;\\n","pos":[15074,15080],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The result of the attempt to acquire the lock, passed by reference.","pos":[15149,15221],"source":"\\n<p>The result of the attempt to acquire the lock, passed by reference."},{"content":"The input must be &lt;strong&gt;false&lt;/strong&gt;.","pos":[15222,15263],"source":" The input must be <strong>false</strong>."},{"content":"The output is &lt;strong&gt;true&lt;/strong&gt; if the lock is acquired; otherwise, the output is &lt;strong&gt;false&lt;/strong&gt;.","pos":[15264,15373],"source":" The output is <strong>true</strong> if the lock is acquired; otherwise, the output is <strong>false</strong>."},{"content":"The output is set even if an exception occurs during the attempt to acquire the lock.&lt;/p&gt;\\n","pos":[15374,15465],"source":" The output is set even if an exception occurs during the attempt to acquire the lock.</p>\\n"},{"content":"\\n&lt;p&gt;The input to &lt;em&gt;lockTaken&lt;/em&gt; is &lt;strong&gt;true&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[15576,15644],"source":"\\n<p>The input to <em>lockTaken</em> is <strong>true</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;obj&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.","pos":[15749,15806],"source":"\\n<p>The <em>obj</em> parameter is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[15807,15813],"source":" </p>\\n"},{"pos":[16396,16419],"content":"TryEnter(Object, Int32)","needQuote":true,"nodes":[{"content":"TryEnter(Object, Int32)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The object on which to acquire the lock.","pos":[17216,17261],"source":"\\n<p>The object on which to acquire the lock."},{"content":"&lt;/p&gt;\\n","pos":[17262,17268],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of milliseconds to wait for the lock.","pos":[17345,17398],"source":"\\n<p>The number of milliseconds to wait for the lock."},{"content":"&lt;/p&gt;\\n","pos":[17399,17405],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the current thread acquires the lock; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[17466,17576],"source":"\\n<p>\\n<strong>true</strong> if the current thread acquires the lock; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;obj&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.","pos":[17695,17752],"source":"\\n<p>The <em>obj</em> parameter is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[17753,17759],"source":" </p>\\n"},{"pos":[18566,18602],"content":"TryEnter(Object, Int32, ref Boolean)","needQuote":true,"nodes":[{"content":"TryEnter(Object, Int32, ref Boolean)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;The object on which to acquire the lock.","pos":[19522,19567],"source":"\\n<p>The object on which to acquire the lock."},{"content":"&lt;/p&gt;\\n","pos":[19568,19574],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of milliseconds to wait for the lock.","pos":[19651,19704],"source":"\\n<p>The number of milliseconds to wait for the lock."},{"content":"&lt;/p&gt;\\n","pos":[19705,19711],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The result of the attempt to acquire the lock, passed by reference.","pos":[19780,19852],"source":"\\n<p>The result of the attempt to acquire the lock, passed by reference."},{"content":"The input must be &lt;strong&gt;false&lt;/strong&gt;.","pos":[19853,19894],"source":" The input must be <strong>false</strong>."},{"content":"The output is &lt;strong&gt;true&lt;/strong&gt; if the lock is acquired; otherwise, the output is &lt;strong&gt;false&lt;/strong&gt;.","pos":[19895,20004],"source":" The output is <strong>true</strong> if the lock is acquired; otherwise, the output is <strong>false</strong>."},{"content":"The output is set even if an exception occurs during the attempt to acquire the lock.&lt;/p&gt;\\n","pos":[20005,20096],"source":" The output is set even if an exception occurs during the attempt to acquire the lock.</p>\\n"},{"content":"\\n&lt;p&gt;The input to &lt;em&gt;lockTaken&lt;/em&gt; is &lt;strong&gt;true&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[20207,20275],"source":"\\n<p>The input to <em>lockTaken</em> is <strong>true</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;obj&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.","pos":[20380,20437],"source":"\\n<p>The <em>obj</em> parameter is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[20438,20444],"source":" </p>\\n"},{"pos":[21355,21381],"content":"TryEnter(Object, TimeSpan)","needQuote":true,"nodes":[{"content":"TryEnter(Object, TimeSpan)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The object on which to acquire the lock.","pos":[22155,22200],"source":"\\n<p>The object on which to acquire the lock."},{"content":"&lt;/p&gt;\\n","pos":[22201,22207],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the current thread acquires the lock; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[22532,22642],"source":"\\n<p>\\n<strong>true</strong> if the current thread acquires the lock; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;obj&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.","pos":[22761,22818],"source":"\\n<p>The <em>obj</em> parameter is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[22819,22825],"source":" </p>\\n"},{"pos":[23780,23819],"content":"TryEnter(Object, TimeSpan, ref Boolean)","needQuote":true,"nodes":[{"content":"TryEnter(Object, TimeSpan, ref Boolean)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;The object on which to acquire the lock.","pos":[24716,24761],"source":"\\n<p>The object on which to acquire the lock."},{"content":"&lt;/p&gt;\\n","pos":[24762,24768],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The amount of time to wait for the lock.","pos":[24836,24881],"source":"\\n<p>The amount of time to wait for the lock."},{"content":"A value of –1 millisecond specifies an infinite wait.&lt;/p&gt;\\n","pos":[24882,24941],"source":" A value of –1 millisecond specifies an infinite wait.</p>\\n"},{"content":"\\n&lt;p&gt;The result of the attempt to acquire the lock, passed by reference.","pos":[25010,25082],"source":"\\n<p>The result of the attempt to acquire the lock, passed by reference."},{"content":"The input must be &lt;strong&gt;false&lt;/strong&gt;.","pos":[25083,25124],"source":" The input must be <strong>false</strong>."},{"content":"The output is &lt;strong&gt;true&lt;/strong&gt; if the lock is acquired; otherwise, the output is &lt;strong&gt;false&lt;/strong&gt;.","pos":[25125,25234],"source":" The output is <strong>true</strong> if the lock is acquired; otherwise, the output is <strong>false</strong>."},{"content":"The output is set even if an exception occurs during the attempt to acquire the lock.&lt;/p&gt;\\n","pos":[25235,25326],"source":" The output is set even if an exception occurs during the attempt to acquire the lock.</p>\\n"},{"content":"\\n&lt;p&gt;The input to &lt;em&gt;lockTaken&lt;/em&gt; is &lt;strong&gt;true&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[25437,25505],"source":"\\n<p>The input to <em>lockTaken</em> is <strong>true</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;obj&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.","pos":[25610,25667],"source":"\\n<p>The <em>obj</em> parameter is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[25668,25674],"source":" </p>\\n"},{"pos":[26759,26771],"content":"Wait(Object)","needQuote":true,"nodes":[{"content":"Wait(Object)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The object on which to wait.","pos":[27466,27499],"source":"\\n<p>The object on which to wait."},{"content":"&lt;/p&gt;\\n","pos":[27500,27506],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the call returned because the caller reacquired the lock for the specified object.","pos":[27567,27681],"source":"\\n<p>\\n<strong>true</strong> if the call returned because the caller reacquired the lock for the specified object."},{"content":"This method does not return if the lock is not reacquired.&lt;/p&gt;\\n","pos":[27682,27746],"source":" This method does not return if the lock is not reacquired.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;obj&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.","pos":[27865,27922],"source":"\\n<p>The <em>obj</em> parameter is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[27923,27929],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The calling thread does not own the lock for the specified object.","pos":[28068,28139],"source":"\\n<p>The calling thread does not own the lock for the specified object."},{"content":"&lt;/p&gt;\\n","pos":[28140,28146],"source":" </p>\\n"},{"pos":[28990,29009],"content":"Wait(Object, Int32)","needQuote":true,"nodes":[{"content":"Wait(Object, Int32)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The object on which to wait.","pos":[29854,29887],"source":"\\n<p>The object on which to wait."},{"content":"&lt;/p&gt;\\n","pos":[29888,29894],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of milliseconds to wait before the thread enters the ready queue.","pos":[29971,30052],"source":"\\n<p>The number of milliseconds to wait before the thread enters the ready queue."},{"content":"&lt;/p&gt;\\n","pos":[30053,30059],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the lock was reacquired before the specified time elapsed; &lt;strong&gt;false&lt;/strong&gt; if the lock was reacquired after the specified time elapsed.","pos":[30120,30294],"source":"\\n<p>\\n<strong>true</strong> if the lock was reacquired before the specified time elapsed; <strong>false</strong> if the lock was reacquired after the specified time elapsed."},{"content":"The method does not return until the lock is reacquired.&lt;/p&gt;\\n","pos":[30295,30357],"source":" The method does not return until the lock is reacquired.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;obj&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.","pos":[30476,30533],"source":"\\n<p>The <em>obj</em> parameter is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[30534,30540],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The calling thread does not own the lock for the specified object.","pos":[30679,30750],"source":"\\n<p>The calling thread does not own the lock for the specified object."},{"content":"&lt;/p&gt;\\n","pos":[30751,30757],"source":" </p>\\n"},{"pos":[31929,31951],"content":"Wait(Object, TimeSpan)","needQuote":true,"nodes":[{"content":"Wait(Object, TimeSpan)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The object on which to wait.","pos":[32781,32814],"source":"\\n<p>The object on which to wait."},{"content":"&lt;/p&gt;\\n","pos":[32815,32821],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the lock was reacquired before the specified time elapsed; &lt;strong&gt;false&lt;/strong&gt; if the lock was reacquired after the specified time elapsed.","pos":[33121,33295],"source":"\\n<p>\\n<strong>true</strong> if the lock was reacquired before the specified time elapsed; <strong>false</strong> if the lock was reacquired after the specified time elapsed."},{"content":"The method does not return until the lock is reacquired.&lt;/p&gt;\\n","pos":[33296,33358],"source":" The method does not return until the lock is reacquired.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;obj&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.","pos":[33477,33534],"source":"\\n<p>The <em>obj</em> parameter is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[33535,33541],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The calling thread does not own the lock for the specified object.","pos":[33680,33751],"source":"\\n<p>The calling thread does not own the lock for the specified object."},{"content":"&lt;/p&gt;\\n","pos":[33752,33758],"source":" </p>\\n"},{"pos":[34866,34882],"content":"System.Threading","needQuote":true,"nodes":[{"content":"System.Threading","pos":[0,16]}]},{"pos":[35043,35049],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[35209,35219],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[35314,35322],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[35391,35392],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35419,35420],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35490,35498],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[35567,35568],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35595,35596],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35779,35793],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[35912,35918],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[35985,35986],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36036,36042],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[36102,36103],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36186,36192],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[36259,36260],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36310,36316],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[36376,36377],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36591,36613],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[36761,36767],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[36834,36835],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36885,36891],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[36952,36953]},{"pos":[37008,37014],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[37074,37075],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37172,37178],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[37245,37246],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37296,37302],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[37363,37364]},{"pos":[37419,37425],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[37485,37486],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37731,37762],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[37928,37943],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[38019,38020],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38070,38076],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[38137,38138]},{"pos":[38193,38199],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[38259,38260],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38366,38381],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[38457,38458],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38508,38514],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[38575,38576]},{"pos":[38631,38637],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[38697,38698],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38928,38941],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[39042,39053],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[39125,39126],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39153,39154],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39227,39238],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[39310,39311],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39338,39339],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39514,39523],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[39616,39623],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[39691,39692],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39719,39720],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39789,39796],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[39864,39865],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39892,39893],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40068,40085],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[40194,40209],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[40285,40286],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40313,40314],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40391,40406],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[40482,40483],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40510,40511],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40656,40662],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[40794,40801],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[40948,40953],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[41097,41105],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"pos":[41254,41275],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[41476,41493],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[41686,41714],"content":"SynchronizationLockException","needQuote":true,"nodes":[{"content":"SynchronizationLockException","pos":[0,28]}]},{"pos":[41949,41976],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]}],"content":"items:\n- uid: System.Threading.Monitor\n  commentId: T:System.Threading.Monitor\n  id: Monitor\n  parent: System.Threading\n  children:\n  - System.Threading.Monitor.Enter(System.Object)\n  - System.Threading.Monitor.Enter(System.Object,System.Boolean@)\n  - System.Threading.Monitor.Exit(System.Object)\n  - System.Threading.Monitor.IsEntered(System.Object)\n  - System.Threading.Monitor.Pulse(System.Object)\n  - System.Threading.Monitor.PulseAll(System.Object)\n  - System.Threading.Monitor.TryEnter(System.Object)\n  - System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)\n  - System.Threading.Monitor.TryEnter(System.Object,System.Int32)\n  - System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)\n  - System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)\n  - System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)\n  - System.Threading.Monitor.Wait(System.Object)\n  - System.Threading.Monitor.Wait(System.Object,System.Int32)\n  - System.Threading.Monitor.Wait(System.Object,System.TimeSpan)\n  langs:\n  - csharp\n  - vb\n  name: Monitor\n  fullName: System.Threading.Monitor\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Monitor.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Monitor\n    path: src/mscorlib/src/System/Threading/Monitor.cs\n    startLine: 28\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Provides a mechanism that synchronizes access to objects.</p>\\n\"\n  syntax:\n    content: >-\n      [HostProtection(Synchronization = true, ExternalThreading = true)]\n\n      [ComVisible(true)]\n\n      public class Monitor\n    content.vb: >-\n      <HostProtection(Synchronization:=True, ExternalThreading:=True)>\n\n      <ComVisible(True)>\n\n      Public Class Monitor\n  seealso:\n  - type: System.Threading.Thread\n    commentId: T:System.Threading.Thread\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: Monitor\n- uid: System.Threading.Monitor.Enter(System.Object)\n  commentId: M:System.Threading.Monitor.Enter(System.Object)\n  id: Enter(System.Object)\n  parent: System.Threading.Monitor\n  langs:\n  - csharp\n  - vb\n  name: Enter(Object)\n  fullName: System.Threading.Monitor.Enter(System.Object)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Acquires an exclusive lock on the specified object.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public static void Enter(object obj)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Shared Sub Enter(obj As Object)\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object on which to acquire the monitor lock. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>obj</em> parameter is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Threading.Thread\n    commentId: T:System.Threading.Thread\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Monitor.Enter(Object)\n- uid: System.Threading.Monitor.Enter(System.Object,System.Boolean@)\n  commentId: M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)\n  id: Enter(System.Object,System.Boolean@)\n  parent: System.Threading.Monitor\n  langs:\n  - csharp\n  - vb\n  name: Enter(Object, ref Boolean)\n  fullName: System.Threading.Monitor.Enter(System.Object, ref System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Monitor.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Enter\n    path: src/mscorlib/src/System/Threading/Monitor.cs\n    startLine: 50\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Acquires an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</p>\\n\"\n  syntax:\n    content: public static void Enter(object obj, ref bool lockTaken)\n    content.vb: Public Shared Sub Enter(obj As Object, ByRef lockTaken As Boolean)\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object on which to wait. </p>\\n\"\n    - id: lockTaken\n      type: System.Boolean\n      description: \"\\n<p>The result of the attempt to acquire the lock, passed by reference. The input must be <strong>false</strong>. The output is <strong>true</strong> if the lock is acquired; otherwise, the output is <strong>false</strong>. The output is set even if an exception occurs during the attempt to acquire the lock. </p>\\n<p>Note   If no exception occurs, the output of this method is always <strong>true</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The input to <em>lockTaken</em> is <strong>true</strong>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>obj</em> parameter is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Monitor.Enter(System.Object, ByRef System.Boolean)\n  name.vb: Enter(Object, ByRef Boolean)\n  nameWithType: Monitor.Enter(Object, ref Boolean)\n  nameWithType.vb: Monitor.Enter(Object, ByRef Boolean)\n- uid: System.Threading.Monitor.Exit(System.Object)\n  commentId: M:System.Threading.Monitor.Exit(System.Object)\n  id: Exit(System.Object)\n  parent: System.Threading.Monitor\n  langs:\n  - csharp\n  - vb\n  name: Exit(Object)\n  fullName: System.Threading.Monitor.Exit(System.Object)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Releases an exclusive lock on the specified object.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      public static void Exit(object obj)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      Public Shared Sub Exit(obj As Object)\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object on which to release the lock. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>obj</em> parameter is <strong>null</strong>. </p>\\n\"\n  - type: System.Threading.SynchronizationLockException\n    commentId: T:System.Threading.SynchronizationLockException\n    description: \"\\n<p>The current thread does not own the lock for the specified object. </p>\\n\"\n  seealso:\n  - type: System.Threading.Thread\n    commentId: T:System.Threading.Thread\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Monitor.Exit(Object)\n- uid: System.Threading.Monitor.IsEntered(System.Object)\n  commentId: M:System.Threading.Monitor.IsEntered(System.Object)\n  id: IsEntered(System.Object)\n  parent: System.Threading.Monitor\n  langs:\n  - csharp\n  - vb\n  name: IsEntered(Object)\n  fullName: System.Threading.Monitor.IsEntered(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Monitor.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsEntered\n    path: src/mscorlib/src/System/Threading/Monitor.cs\n    startLine: 160\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Determines whether the current thread holds the lock on the specified object. </p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static bool IsEntered(object obj)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function IsEntered(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object to test. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current thread holds the lock on <em>obj</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>obj</em> is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Monitor.IsEntered(Object)\n- uid: System.Threading.Monitor.Pulse(System.Object)\n  commentId: M:System.Threading.Monitor.Pulse(System.Object)\n  id: Pulse(System.Object)\n  parent: System.Threading.Monitor\n  langs:\n  - csharp\n  - vb\n  name: Pulse(Object)\n  fullName: System.Threading.Monitor.Pulse(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Monitor.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Pulse\n    path: src/mscorlib/src/System/Threading/Monitor.cs\n    startLine: 225\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Notifies a thread in the waiting queue of a change in the locked object's state.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static void Pulse(object obj)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Sub Pulse(obj As Object)\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object a thread is waiting for. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>obj</em> parameter is <strong>null</strong>. </p>\\n\"\n  - type: System.Threading.SynchronizationLockException\n    commentId: T:System.Threading.SynchronizationLockException\n    description: \"\\n<p>The calling thread does not own the lock for the specified object. </p>\\n\"\n  seealso:\n  - type: System.Threading.Thread\n    commentId: T:System.Threading.Thread\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Monitor.Pulse(Object)\n- uid: System.Threading.Monitor.PulseAll(System.Object)\n  commentId: M:System.Threading.Monitor.PulseAll(System.Object)\n  id: PulseAll(System.Object)\n  parent: System.Threading.Monitor\n  langs:\n  - csharp\n  - vb\n  name: PulseAll(Object)\n  fullName: System.Threading.Monitor.PulseAll(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Monitor.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: PulseAll\n    path: src/mscorlib/src/System/Threading/Monitor.cs\n    startLine: 243\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Notifies all waiting threads of a change in the object's state.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static void PulseAll(object obj)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Sub PulseAll(obj As Object)\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object that sends the pulse. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>obj</em> parameter is <strong>null</strong>. </p>\\n\"\n  - type: System.Threading.SynchronizationLockException\n    commentId: T:System.Threading.SynchronizationLockException\n    description: \"\\n<p>The calling thread does not own the lock for the specified object. </p>\\n\"\n  seealso:\n  - type: System.Threading.Thread\n    commentId: T:System.Threading.Thread\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Monitor.PulseAll(Object)\n- uid: System.Threading.Monitor.TryEnter(System.Object)\n  commentId: M:System.Threading.Monitor.TryEnter(System.Object)\n  id: TryEnter(System.Object)\n  parent: System.Threading.Monitor\n  langs:\n  - csharp\n  - vb\n  name: TryEnter(Object)\n  fullName: System.Threading.Monitor.TryEnter(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Monitor.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TryEnter\n    path: src/mscorlib/src/System/Threading/Monitor.cs\n    startLine: 91\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Attempts to acquire an exclusive lock on the specified object.</p>\\n\"\n  syntax:\n    content: public static bool TryEnter(object obj)\n    content.vb: Public Shared Function TryEnter(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object on which to acquire the lock. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current thread acquires the lock; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>obj</em> parameter is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Threading.Thread\n    commentId: T:System.Threading.Thread\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Monitor.TryEnter(Object)\n- uid: System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)\n  commentId: M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)\n  id: TryEnter(System.Object,System.Boolean@)\n  parent: System.Threading.Monitor\n  langs:\n  - csharp\n  - vb\n  name: TryEnter(Object, ref Boolean)\n  fullName: System.Threading.Monitor.TryEnter(System.Object, ref System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Monitor.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TryEnter\n    path: src/mscorlib/src/System/Threading/Monitor.cs\n    startLine: 100\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Attempts to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</p>\\n\"\n  syntax:\n    content: public static void TryEnter(object obj, ref bool lockTaken)\n    content.vb: Public Shared Sub TryEnter(obj As Object, ByRef lockTaken As Boolean)\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object on which to acquire the lock. </p>\\n\"\n    - id: lockTaken\n      type: System.Boolean\n      description: \"\\n<p>The result of the attempt to acquire the lock, passed by reference. The input must be <strong>false</strong>. The output is <strong>true</strong> if the lock is acquired; otherwise, the output is <strong>false</strong>. The output is set even if an exception occurs during the attempt to acquire the lock.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The input to <em>lockTaken</em> is <strong>true</strong>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>obj</em> parameter is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Monitor.TryEnter(System.Object, ByRef System.Boolean)\n  name.vb: TryEnter(Object, ByRef Boolean)\n  nameWithType: Monitor.TryEnter(Object, ref Boolean)\n  nameWithType.vb: Monitor.TryEnter(Object, ByRef Boolean)\n- uid: System.Threading.Monitor.TryEnter(System.Object,System.Int32)\n  commentId: M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)\n  id: TryEnter(System.Object,System.Int32)\n  parent: System.Threading.Monitor\n  langs:\n  - csharp\n  - vb\n  name: TryEnter(Object, Int32)\n  fullName: System.Threading.Monitor.TryEnter(System.Object, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Monitor.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TryEnter\n    path: src/mscorlib/src/System/Threading/Monitor.cs\n    startLine: 118\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object.</p>\\n\"\n  syntax:\n    content: public static bool TryEnter(object obj, int millisecondsTimeout)\n    content.vb: Public Shared Function TryEnter(obj As Object, millisecondsTimeout As Integer) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object on which to acquire the lock. </p>\\n\"\n    - id: millisecondsTimeout\n      type: System.Int32\n      description: \"\\n<p>The number of milliseconds to wait for the lock. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current thread acquires the lock; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>obj</em> parameter is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>millisecondsTimeout</em> is negative, and not equal to <xref href=\\\"System.Threading.Timeout.Infinite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Threading.Thread\n    commentId: T:System.Threading.Thread\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Monitor.TryEnter(Object, Int32)\n- uid: System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)\n  commentId: M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)\n  id: TryEnter(System.Object,System.Int32,System.Boolean@)\n  parent: System.Threading.Monitor\n  langs:\n  - csharp\n  - vb\n  name: TryEnter(Object, Int32, ref Boolean)\n  fullName: System.Threading.Monitor.TryEnter(System.Object, System.Int32, ref System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Monitor.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TryEnter\n    path: src/mscorlib/src/System/Threading/Monitor.cs\n    startLine: 140\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</p>\\n\"\n  syntax:\n    content: public static void TryEnter(object obj, int millisecondsTimeout, ref bool lockTaken)\n    content.vb: Public Shared Sub TryEnter(obj As Object, millisecondsTimeout As Integer, ByRef lockTaken As Boolean)\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object on which to acquire the lock. </p>\\n\"\n    - id: millisecondsTimeout\n      type: System.Int32\n      description: \"\\n<p>The number of milliseconds to wait for the lock. </p>\\n\"\n    - id: lockTaken\n      type: System.Boolean\n      description: \"\\n<p>The result of the attempt to acquire the lock, passed by reference. The input must be <strong>false</strong>. The output is <strong>true</strong> if the lock is acquired; otherwise, the output is <strong>false</strong>. The output is set even if an exception occurs during the attempt to acquire the lock.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The input to <em>lockTaken</em> is <strong>true</strong>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>obj</em> parameter is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>millisecondsTimeout</em> is negative, and not equal to <xref href=\\\"System.Threading.Timeout.Infinite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Monitor.TryEnter(System.Object, System.Int32, ByRef System.Boolean)\n  name.vb: TryEnter(Object, Int32, ByRef Boolean)\n  nameWithType: Monitor.TryEnter(Object, Int32, ref Boolean)\n  nameWithType.vb: Monitor.TryEnter(Object, Int32, ByRef Boolean)\n- uid: System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)\n  commentId: M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)\n  id: TryEnter(System.Object,System.TimeSpan)\n  parent: System.Threading.Monitor\n  langs:\n  - csharp\n  - vb\n  name: TryEnter(Object, TimeSpan)\n  fullName: System.Threading.Monitor.TryEnter(System.Object, System.TimeSpan)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Monitor.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TryEnter\n    path: src/mscorlib/src/System/Threading/Monitor.cs\n    startLine: 133\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object.</p>\\n\"\n  syntax:\n    content: public static bool TryEnter(object obj, TimeSpan timeout)\n    content.vb: Public Shared Function TryEnter(obj As Object, timeout As TimeSpan) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object on which to acquire the lock. </p>\\n\"\n    - id: timeout\n      type: System.TimeSpan\n      description: \"\\n<p>A <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing the amount of time to wait for the lock. A value of –1 millisecond specifies an infinite wait.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current thread acquires the lock; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>obj</em> parameter is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The value of <em>timeout</em> in milliseconds is negative and is not equal to <xref href=\\\"System.Threading.Timeout.Infinite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> (–1 millisecond), or is greater than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Threading.Thread\n    commentId: T:System.Threading.Thread\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Monitor.TryEnter(Object, TimeSpan)\n- uid: System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)\n  commentId: M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)\n  id: TryEnter(System.Object,System.TimeSpan,System.Boolean@)\n  parent: System.Threading.Monitor\n  langs:\n  - csharp\n  - vb\n  name: TryEnter(Object, TimeSpan, ref Boolean)\n  fullName: System.Threading.Monitor.TryEnter(System.Object, System.TimeSpan, ref System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Monitor.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TryEnter\n    path: src/mscorlib/src/System/Threading/Monitor.cs\n    startLine: 148\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</p>\\n\"\n  syntax:\n    content: public static void TryEnter(object obj, TimeSpan timeout, ref bool lockTaken)\n    content.vb: Public Shared Sub TryEnter(obj As Object, timeout As TimeSpan, ByRef lockTaken As Boolean)\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object on which to acquire the lock. </p>\\n\"\n    - id: timeout\n      type: System.TimeSpan\n      description: \"\\n<p>The amount of time to wait for the lock. A value of –1 millisecond specifies an infinite wait.</p>\\n\"\n    - id: lockTaken\n      type: System.Boolean\n      description: \"\\n<p>The result of the attempt to acquire the lock, passed by reference. The input must be <strong>false</strong>. The output is <strong>true</strong> if the lock is acquired; otherwise, the output is <strong>false</strong>. The output is set even if an exception occurs during the attempt to acquire the lock.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The input to <em>lockTaken</em> is <strong>true</strong>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>obj</em> parameter is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The value of <em>timeout</em> in milliseconds is negative and is not equal to <xref href=\\\"System.Threading.Timeout.Infinite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> (–1 millisecond), or is greater than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Threading.Thread\n    commentId: T:System.Threading.Thread\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Monitor.TryEnter(System.Object, System.TimeSpan, ByRef System.Boolean)\n  name.vb: TryEnter(Object, TimeSpan, ByRef Boolean)\n  nameWithType: Monitor.TryEnter(Object, TimeSpan, ref Boolean)\n  nameWithType.vb: Monitor.TryEnter(Object, TimeSpan, ByRef Boolean)\n- uid: System.Threading.Monitor.Wait(System.Object)\n  commentId: M:System.Threading.Monitor.Wait(System.Object)\n  id: Wait(System.Object)\n  parent: System.Threading.Monitor\n  langs:\n  - csharp\n  - vb\n  name: Wait(Object)\n  fullName: System.Threading.Monitor.Wait(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Monitor.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Wait\n    path: src/mscorlib/src/System/Threading/Monitor.cs\n    startLine: 211\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Releases the lock on an object and blocks the current thread until it reacquires the lock.</p>\\n\"\n  syntax:\n    content: public static bool Wait(object obj)\n    content.vb: Public Shared Function Wait(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object on which to wait. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the call returned because the caller reacquired the lock for the specified object. This method does not return if the lock is not reacquired.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>obj</em> parameter is <strong>null</strong>. </p>\\n\"\n  - type: System.Threading.SynchronizationLockException\n    commentId: T:System.Threading.SynchronizationLockException\n    description: \"\\n<p>The calling thread does not own the lock for the specified object. </p>\\n\"\n  - type: System.Threading.ThreadInterruptedException\n    commentId: T:System.Threading.ThreadInterruptedException\n    description: \"\\n<p>The thread that invokes <strong>Wait</strong> is later interrupted from the waiting state. This happens when another thread calls this thread's <xref href=\\\"System.Threading.Thread.Interrupt\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n\"\n  seealso:\n  - type: System.Threading.Thread\n    commentId: T:System.Threading.Thread\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Monitor.Wait(Object)\n- uid: System.Threading.Monitor.Wait(System.Object,System.Int32)\n  commentId: M:System.Threading.Monitor.Wait(System.Object,System.Int32)\n  id: Wait(System.Object,System.Int32)\n  parent: System.Threading.Monitor\n  langs:\n  - csharp\n  - vb\n  name: Wait(Object, Int32)\n  fullName: System.Threading.Monitor.Wait(System.Object, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Monitor.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Wait\n    path: src/mscorlib/src/System/Threading/Monitor.cs\n    startLine: 201\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Releases the lock on an object and blocks the current thread until it reacquires the lock. If the specified time-out interval elapses, the thread enters the ready queue.</p>\\n\"\n  syntax:\n    content: public static bool Wait(object obj, int millisecondsTimeout)\n    content.vb: Public Shared Function Wait(obj As Object, millisecondsTimeout As Integer) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object on which to wait. </p>\\n\"\n    - id: millisecondsTimeout\n      type: System.Int32\n      description: \"\\n<p>The number of milliseconds to wait before the thread enters the ready queue. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the lock was reacquired before the specified time elapsed; <strong>false</strong> if the lock was reacquired after the specified time elapsed. The method does not return until the lock is reacquired.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>obj</em> parameter is <strong>null</strong>. </p>\\n\"\n  - type: System.Threading.SynchronizationLockException\n    commentId: T:System.Threading.SynchronizationLockException\n    description: \"\\n<p>The calling thread does not own the lock for the specified object. </p>\\n\"\n  - type: System.Threading.ThreadInterruptedException\n    commentId: T:System.Threading.ThreadInterruptedException\n    description: \"\\n<p>The thread that invokes <strong>Wait</strong> is later interrupted from the waiting state. This happens when another thread calls this thread's <xref href=\\\"System.Threading.Thread.Interrupt\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The value of the <em>millisecondsTimeout</em> parameter is negative, and is not equal to <xref href=\\\"System.Threading.Timeout.Infinite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Threading.Thread\n    commentId: T:System.Threading.Thread\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Monitor.Wait(Object, Int32)\n- uid: System.Threading.Monitor.Wait(System.Object,System.TimeSpan)\n  commentId: M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)\n  id: Wait(System.Object,System.TimeSpan)\n  parent: System.Threading.Monitor\n  langs:\n  - csharp\n  - vb\n  name: Wait(Object, TimeSpan)\n  fullName: System.Threading.Monitor.Wait(System.Object, System.TimeSpan)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Monitor.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Wait\n    path: src/mscorlib/src/System/Threading/Monitor.cs\n    startLine: 206\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Releases the lock on an object and blocks the current thread until it reacquires the lock. If the specified time-out interval elapses, the thread enters the ready queue.</p>\\n\"\n  syntax:\n    content: public static bool Wait(object obj, TimeSpan timeout)\n    content.vb: Public Shared Function Wait(obj As Object, timeout As TimeSpan) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object on which to wait. </p>\\n\"\n    - id: timeout\n      type: System.TimeSpan\n      description: \"\\n<p>A <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing the amount of time to wait before the thread enters the ready queue. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the lock was reacquired before the specified time elapsed; <strong>false</strong> if the lock was reacquired after the specified time elapsed. The method does not return until the lock is reacquired.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>obj</em> parameter is <strong>null</strong>. </p>\\n\"\n  - type: System.Threading.SynchronizationLockException\n    commentId: T:System.Threading.SynchronizationLockException\n    description: \"\\n<p>The calling thread does not own the lock for the specified object. </p>\\n\"\n  - type: System.Threading.ThreadInterruptedException\n    commentId: T:System.Threading.ThreadInterruptedException\n    description: \"\\n<p>The thread that invokes <strong>Wait</strong> is later interrupted from the waiting state. This happens when another thread calls this thread's <xref href=\\\"System.Threading.Thread.Interrupt\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The value of the <em>timeout</em> parameter in milliseconds is negative and does not represent <xref href=\\\"System.Threading.Timeout.Infinite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> (–1 millisecond), or is greater than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Threading.Thread\n    commentId: T:System.Threading.Thread\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Monitor.Wait(Object, TimeSpan)\nreferences:\n- uid: System.Threading\n  isExternal: false\n  name: System.Threading\n  fullName: System.Threading\n  nameWithType: System.Threading\n  commentId: N:System.Threading\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.TimeSpan\n  parent: System\n  isExternal: false\n  name: TimeSpan\n  fullName: System.TimeSpan\n  nameWithType: TimeSpan\n  commentId: T:System.TimeSpan\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.Threading.SynchronizationLockException\n  isExternal: false\n  name: SynchronizationLockException\n  fullName: System.Threading.SynchronizationLockException\n  nameWithType: SynchronizationLockException\n  commentId: T:System.Threading.SynchronizationLockException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.Threading.ThreadInterruptedException\n"}