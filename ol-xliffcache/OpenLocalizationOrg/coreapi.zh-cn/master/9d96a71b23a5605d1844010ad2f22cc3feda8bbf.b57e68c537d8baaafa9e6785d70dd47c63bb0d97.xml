{"nodes":[{"pos":[5490,5497],"content":"SqlByte","needQuote":true,"nodes":[{"content":"SqlByte","pos":[0,7]}]},{"pos":[7105,7113],"content":"MaxValue","needQuote":true,"nodes":[{"content":"MaxValue","pos":[0,8]}]},{"pos":[8197,8205],"content":"MinValue","needQuote":true,"nodes":[{"content":"MinValue","pos":[0,8]}]},{"pos":[10383,10387],"content":"Zero","needQuote":true,"nodes":[{"content":"Zero","pos":[0,4]}]},{"pos":[11615,11628],"content":"SqlByte(Byte)","needQuote":true,"nodes":[{"content":"SqlByte(Byte)","pos":[0,13]}]},{"pos":[12954,12960],"content":"IsNull","needQuote":true,"nodes":[{"content":"IsNull","pos":[0,6]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if null.","pos":[13740,13777],"source":"\\n<p>\\n<strong>true</strong> if null."},{"content":"Otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[13778,13818],"source":" Otherwise, <strong>false</strong>.</p>\\n"},{"pos":[14164,14169],"content":"Value","needQuote":true,"nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[15519,15540],"content":"Add(SqlByte, SqlByte)","needQuote":true,"nodes":[{"content":"Add(SqlByte, SqlByte)","pos":[0,21]}]},{"pos":[17470,17498],"content":"BitwiseAnd(SqlByte, SqlByte)","needQuote":true,"nodes":[{"content":"BitwiseAnd(SqlByte, SqlByte)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The results of the bitwise AND operation.&lt;/p&gt;\\n","pos":[18763,18815],"source":"\\n<p>The results of the bitwise AND operation.</p>\\n"},{"pos":[19317,19344],"content":"BitwiseOr(SqlByte, SqlByte)","needQuote":true,"nodes":[{"content":"BitwiseOr(SqlByte, SqlByte)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The results of the bitwise OR operation.&lt;/p&gt;\\n","pos":[20608,20659],"source":"\\n<p>The results of the bitwise OR operation.</p>\\n"},{"pos":[21073,21091],"content":"CompareTo(SqlByte)","needQuote":true,"nodes":[{"content":"CompareTo(SqlByte)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;A signed number that indicates the relative values of the instance and the object.&lt;/p&gt;\\n&lt;p&gt;Return Value &lt;/p&gt;\\n&lt;p&gt;Condition &lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Less than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance is less than the object.","pos":[22156,22390],"source":"\\n<p>A signed number that indicates the relative values of the instance and the object.</p>\\n<p>Return Value </p>\\n<p>Condition </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>This instance is less than the object."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance is the same as the object.","pos":[22391,22485],"source":" </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>This instance is the same as the object."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Greater than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance is greater than the object &lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The object is a null reference (&lt;strong&gt;Nothing&lt;/strong&gt; in Visual Basic) &lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[22486,22725],"source":" </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>This instance is greater than the object </p>\\n<p>-or- </p>\\n<p>The object is a null reference (<strong>Nothing</strong> in Visual Basic) </p>\\n</td></tr></tbody></table>\\n"},{"pos":[23063,23080],"content":"CompareTo(Object)","needQuote":true,"nodes":[{"content":"CompareTo(Object)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;A signed number that indicates the relative values of the instance and the object.&lt;/p&gt;\\n&lt;p&gt;Return Value &lt;/p&gt;\\n&lt;p&gt;Condition &lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Less than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance is less than the object.","pos":[24069,24303],"source":"\\n<p>A signed number that indicates the relative values of the instance and the object.</p>\\n<p>Return Value </p>\\n<p>Condition </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>This instance is less than the object."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance is the same as the object.","pos":[24304,24398],"source":" </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>This instance is the same as the object."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Greater than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance is greater than the object &lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The object is a null reference (&lt;strong&gt;Nothing&lt;/strong&gt; in Visual Basic) &lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[24399,24638],"source":" </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>This instance is greater than the object </p>\\n<p>-or- </p>\\n<p>The object is a null reference (<strong>Nothing</strong> in Visual Basic) </p>\\n</td></tr></tbody></table>\\n"},{"pos":[25160,25184],"content":"Divide(SqlByte, SqlByte)","needQuote":true,"nodes":[{"content":"Divide(SqlByte, SqlByte)","pos":[0,24]}]},{"pos":[27184,27208],"content":"Equals(SqlByte, SqlByte)","needQuote":true,"nodes":[{"content":"Equals(SqlByte, SqlByte)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the two values are equal.","pos":[28509,28566],"source":"\\n<p>\\n<strong>true</strong> if the two values are equal."},{"content":"Otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[28567,28601],"source":" Otherwise, <strong>false</strong>."},{"content":"If either instance is null, then the &lt;strong&gt;SqlByte&lt;/strong&gt; will be null.&lt;/p&gt;\\n","pos":[28602,28683],"source":" If either instance is null, then the <strong>SqlByte</strong> will be null.</p>\\n"},{"pos":[29040,29054],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[30793,30806],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A 32-bit signed integer hash code.&lt;/p&gt;\\n","pos":[31472,31517],"source":"\\n<p>A 32-bit signed integer hash code.</p>\\n"},{"pos":[32058,32087],"content":"GreaterThan(SqlByte, SqlByte)","needQuote":true,"nodes":[{"content":"GreaterThan(SqlByte, SqlByte)","pos":[0,29]}]},{"pos":[34743,34779],"content":"GreaterThanOrEqual(SqlByte, SqlByte)","needQuote":true,"nodes":[{"content":"GreaterThanOrEqual(SqlByte, SqlByte)","pos":[0,36]}]},{"pos":[37462,37488],"content":"LessThan(SqlByte, SqlByte)","needQuote":true,"nodes":[{"content":"LessThan(SqlByte, SqlByte)","pos":[0,26]}]},{"pos":[40114,40147],"content":"LessThanOrEqual(SqlByte, SqlByte)","needQuote":true,"nodes":[{"content":"LessThanOrEqual(SqlByte, SqlByte)","pos":[0,33]}]},{"pos":[42796,42817],"content":"Mod(SqlByte, SqlByte)","needQuote":true,"nodes":[{"content":"Mod(SqlByte, SqlByte)","pos":[0,21]}]},{"pos":[44808,44833],"content":"Modulus(SqlByte, SqlByte)","needQuote":true,"nodes":[{"content":"Modulus(SqlByte, SqlByte)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The remainder left after division is performed on &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt;.&lt;/p&gt;\\n","pos":[46068,46155],"source":"\\n<p>The remainder left after division is performed on <em>x</em> and <em>y</em>.</p>\\n"},{"pos":[46651,46677],"content":"Multiply(SqlByte, SqlByte)","needQuote":true,"nodes":[{"content":"Multiply(SqlByte, SqlByte)","pos":[0,26]}]},{"pos":[48703,48730],"content":"NotEquals(SqlByte, SqlByte)","needQuote":true,"nodes":[{"content":"NotEquals(SqlByte, SqlByte)","pos":[0,27]}]},{"pos":[51258,51281],"content":"OnesComplement(SqlByte)","needQuote":true,"nodes":[{"content":"OnesComplement(SqlByte)","pos":[0,23]}]},{"pos":[53228,53254],"content":"Addition(SqlByte, SqlByte)","needQuote":true,"nodes":[{"content":"Addition(SqlByte, SqlByte)","pos":[0,26]}]},{"pos":[55280,55308],"content":"BitwiseAnd(SqlByte, SqlByte)","needQuote":true,"nodes":[{"content":"BitwiseAnd(SqlByte, SqlByte)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The results of the bitwise AND operation.&lt;/p&gt;\\n","pos":[56571,56623],"source":"\\n<p>The results of the bitwise AND operation.</p>\\n"},{"pos":[57134,57161],"content":"BitwiseOr(SqlByte, SqlByte)","needQuote":true,"nodes":[{"content":"BitwiseOr(SqlByte, SqlByte)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The results of the bitwise OR operation.&lt;/p&gt;\\n","pos":[58424,58475],"source":"\\n<p>The results of the bitwise OR operation.</p>\\n"},{"pos":[58982,59008],"content":"Division(SqlByte, SqlByte)","needQuote":true,"nodes":[{"content":"Division(SqlByte, SqlByte)","pos":[0,26]}]},{"pos":[61033,61059],"content":"Equality(SqlByte, SqlByte)","needQuote":true,"nodes":[{"content":"Equality(SqlByte, SqlByte)","pos":[0,26]}]},{"pos":[63688,63717],"content":"ExclusiveOr(SqlByte, SqlByte)","needQuote":true,"nodes":[{"content":"ExclusiveOr(SqlByte, SqlByte)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The results of the bitwise XOR operation.&lt;/p&gt;\\n","pos":[64921,64973],"source":"\\n<p>The results of the bitwise XOR operation.</p>\\n"},{"pos":[65491,65522],"content":"Explicit(SqlBoolean to SqlByte)","needQuote":true,"nodes":[{"content":"Explicit(SqlBoolean to SqlByte)","pos":[0,31]}]},{"pos":[67921,67946],"content":"Explicit(SqlByte to Byte)","needQuote":true,"nodes":[{"content":"Explicit(SqlByte to Byte)","pos":[0,25]}]},{"pos":[69958,69989],"content":"Explicit(SqlDecimal to SqlByte)","needQuote":true,"nodes":[{"content":"Explicit(SqlDecimal to SqlByte)","pos":[0,31]}]},{"pos":[72332,72362],"content":"Explicit(SqlDouble to SqlByte)","needQuote":true,"nodes":[{"content":"Explicit(SqlDouble to SqlByte)","pos":[0,30]}]},{"pos":[74690,74719],"content":"Explicit(SqlInt16 to SqlByte)","needQuote":true,"nodes":[{"content":"Explicit(SqlInt16 to SqlByte)","pos":[0,29]}]},{"pos":[77038,77067],"content":"Explicit(SqlInt32 to SqlByte)","needQuote":true,"nodes":[{"content":"Explicit(SqlInt32 to SqlByte)","pos":[0,29]}]},{"pos":[79383,79412],"content":"Explicit(SqlInt64 to SqlByte)","needQuote":true,"nodes":[{"content":"Explicit(SqlInt64 to SqlByte)","pos":[0,29]}]},{"pos":[81664,81693],"content":"Explicit(SqlMoney to SqlByte)","needQuote":true,"nodes":[{"content":"Explicit(SqlMoney to SqlByte)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;A &lt;strong&gt;SqlMoney&lt;/strong&gt; structure.","pos":[82653,82696],"source":"\\n<p>A <strong>SqlMoney</strong> structure."},{"content":"&lt;/p&gt;\\n","pos":[82697,82703],"source":" </p>\\n"},{"pos":[83951,83981],"content":"Explicit(SqlSingle to SqlByte)","needQuote":true,"nodes":[{"content":"Explicit(SqlSingle to SqlByte)","pos":[0,30]}]},{"pos":[86322,86352],"content":"Explicit(SqlString to SqlByte)","needQuote":true,"nodes":[{"content":"Explicit(SqlString to SqlByte)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;An instance of the &lt;strong&gt;SqlString&lt;/strong&gt; class.","pos":[87314,87371],"source":"\\n<p>An instance of the <strong>SqlString</strong> class."},{"content":"&lt;/p&gt;\\n","pos":[87372,87378],"source":" </p>\\n"},{"pos":[88554,88583],"content":"GreaterThan(SqlByte, SqlByte)","needQuote":true,"nodes":[{"content":"GreaterThan(SqlByte, SqlByte)","pos":[0,29]}]},{"pos":[91240,91276],"content":"GreaterThanOrEqual(SqlByte, SqlByte)","needQuote":true,"nodes":[{"content":"GreaterThanOrEqual(SqlByte, SqlByte)","pos":[0,36]}]},{"pos":[93837,93862],"content":"Implicit(Byte to SqlByte)","needQuote":true,"nodes":[{"content":"Implicit(Byte to SqlByte)","pos":[0,25]}]},{"pos":[95860,95888],"content":"Inequality(SqlByte, SqlByte)","needQuote":true,"nodes":[{"content":"Inequality(SqlByte, SqlByte)","pos":[0,28]}]},{"pos":[98497,98523],"content":"LessThan(SqlByte, SqlByte)","needQuote":true,"nodes":[{"content":"LessThan(SqlByte, SqlByte)","pos":[0,26]}]},{"pos":[101158,101191],"content":"LessThanOrEqual(SqlByte, SqlByte)","needQuote":true,"nodes":[{"content":"LessThanOrEqual(SqlByte, SqlByte)","pos":[0,33]}]},{"pos":[103849,103874],"content":"Modulus(SqlByte, SqlByte)","needQuote":true,"nodes":[{"content":"Modulus(SqlByte, SqlByte)","pos":[0,25]}]},{"pos":[105901,105927],"content":"Multiply(SqlByte, SqlByte)","needQuote":true,"nodes":[{"content":"Multiply(SqlByte, SqlByte)","pos":[0,26]}]},{"pos":[107890,107913],"content":"OnesComplement(SqlByte)","needQuote":true,"nodes":[{"content":"OnesComplement(SqlByte)","pos":[0,23]}]},{"pos":[109859,109888],"content":"Subtraction(SqlByte, SqlByte)","needQuote":true,"nodes":[{"content":"Subtraction(SqlByte, SqlByte)","pos":[0,29]}]},{"pos":[111674,111687],"content":"Parse(String)","needQuote":true,"nodes":[{"content":"Parse(String)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The &lt;strong&gt;String&lt;/strong&gt; to be parsed.","pos":[112493,112539],"source":"\\n<p>The <strong>String</strong> to be parsed."},{"content":"&lt;/p&gt;\\n","pos":[112540,112546],"source":" </p>\\n"},{"pos":[113301,113327],"content":"Subtract(SqlByte, SqlByte)","needQuote":true,"nodes":[{"content":"Subtract(SqlByte, SqlByte)","pos":[0,26]}]},{"pos":[115080,115094],"content":"ToSqlBoolean()","needQuote":true,"nodes":[{"content":"ToSqlBoolean()","pos":[0,14]}]},{"pos":[116437,116451],"content":"ToSqlDecimal()","needQuote":true,"nodes":[{"content":"ToSqlDecimal()","pos":[0,14]}]},{"pos":[117962,117975],"content":"ToSqlDouble()","needQuote":true,"nodes":[{"content":"ToSqlDouble()","pos":[0,13]}]},{"pos":[119273,119285],"content":"ToSqlInt16()","needQuote":true,"nodes":[{"content":"ToSqlInt16()","pos":[0,12]}]},{"pos":[120573,120585],"content":"ToSqlInt32()","needQuote":true,"nodes":[{"content":"ToSqlInt32()","pos":[0,12]}]},{"pos":[121863,121875],"content":"ToSqlInt64()","needQuote":true,"nodes":[{"content":"ToSqlInt64()","pos":[0,12]}]},{"pos":[123349,123361],"content":"ToSqlMoney()","needQuote":true,"nodes":[{"content":"ToSqlMoney()","pos":[0,12]}]},{"pos":[124850,124863],"content":"ToSqlSingle()","needQuote":true,"nodes":[{"content":"ToSqlSingle()","pos":[0,13]}]},{"pos":[126269,126282],"content":"ToSqlString()","needQuote":true,"nodes":[{"content":"ToSqlString()","pos":[0,13]}]},{"pos":[127692,127702],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[129340,129361],"content":"Xor(SqlByte, SqlByte)","needQuote":true,"nodes":[{"content":"Xor(SqlByte, SqlByte)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The results of the XOR operation.&lt;/p&gt;\\n","pos":[130537,130581],"source":"\\n<p>The results of the XOR operation.</p>\\n"},{"pos":[130777,130797],"content":"System.Data.SqlTypes","needQuote":true,"nodes":[{"content":"System.Data.SqlTypes","pos":[0,20]}]},{"pos":[131001,131010],"content":"INullable","needQuote":true,"nodes":[{"content":"INullable","pos":[0,9]}]},{"pos":[131197,131208],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"pos":[131410,131432],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[131580,131586],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[131653,131654],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[131704,131710],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[131771,131772]},{"pos":[131827,131833],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[131893,131894],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[131991,131997],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[132064,132065],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[132115,132121],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[132182,132183]},{"pos":[132238,132244],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[132304,132305],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[132550,132581],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[132747,132762],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[132838,132839],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[132889,132895],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[132956,132957]},{"pos":[133012,133018],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[133078,133079],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[133185,133200],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[133276,133277],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[133327,133333],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[133394,133395]},{"pos":[133450,133456],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[133516,133517],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[133743,133752],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[133845,133852],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[133920,133921],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[133948,133949],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[134018,134025],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[134093,134094],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[134121,134122],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[134251,134257],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[134388,134394],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[134568,134575],"content":"SqlByte","needQuote":true,"nodes":[{"content":"SqlByte","pos":[0,7]}]},{"pos":[134749,134753],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[134940,134946],"content":"IsNull","needQuote":true,"nodes":[{"content":"IsNull","pos":[0,6]}]},{"pos":[135150,135157],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[135304,135309],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[135492,135509],"content":"CompareTo(Object)","needQuote":true,"nodes":[{"content":"CompareTo(Object)","pos":[0,17]}]},{"pos":[135644,135653],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[135707,135708],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[135758,135764],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[135824,135825],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[135916,135925],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[135979,135980],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[136030,136036],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[136096,136097],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[136317,136327],"content":"SqlBoolean","needQuote":true,"nodes":[{"content":"SqlBoolean","pos":[0,10]}]},{"pos":[136546,136560],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[136685,136691],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[136740,136741],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[136791,136797],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[136857,136858],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[136944,136950],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[136999,137000],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[137050,137056],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[137116,137117],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[137298,137307],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[137486,137499],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[137606,137617],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[137671,137672],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[137699,137700],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[137776,137787],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[137841,137842],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[137869,137870],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[138069,138079],"content":"SqlDecimal","needQuote":true,"nodes":[{"content":"SqlDecimal","pos":[0,10]}]},{"pos":[138295,138304],"content":"SqlDouble","needQuote":true,"nodes":[{"content":"SqlDouble","pos":[0,9]}]},{"pos":[138516,138524],"content":"SqlInt16","needQuote":true,"nodes":[{"content":"SqlInt16","pos":[0,8]}]},{"pos":[138733,138741],"content":"SqlInt32","needQuote":true,"nodes":[{"content":"SqlInt32","pos":[0,8]}]},{"pos":[138950,138958],"content":"SqlInt64","needQuote":true,"nodes":[{"content":"SqlInt64","pos":[0,8]}]},{"pos":[139167,139175],"content":"SqlMoney","needQuote":true,"nodes":[{"content":"SqlMoney","pos":[0,8]}]},{"pos":[139385,139394],"content":"SqlSingle","needQuote":true,"nodes":[{"content":"SqlSingle","pos":[0,9]}]},{"pos":[139607,139616],"content":"SqlString","needQuote":true,"nodes":[{"content":"SqlString","pos":[0,9]}]},{"pos":[139798,139804],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[139971,139981],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[140082,140090],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[140141,140142],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[140169,140170],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[140243,140251],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[140302,140303],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[140330,140331],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]}],"content":"items:\n- uid: System.Data.SqlTypes.SqlByte\n  commentId: T:System.Data.SqlTypes.SqlByte\n  id: SqlByte\n  parent: System.Data.SqlTypes\n  children:\n  - System.Data.SqlTypes.SqlByte.#ctor(System.Byte)\n  - System.Data.SqlTypes.SqlByte.Add(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  - System.Data.SqlTypes.SqlByte.BitwiseAnd(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  - System.Data.SqlTypes.SqlByte.BitwiseOr(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  - System.Data.SqlTypes.SqlByte.CompareTo(System.Data.SqlTypes.SqlByte)\n  - System.Data.SqlTypes.SqlByte.CompareTo(System.Object)\n  - System.Data.SqlTypes.SqlByte.Divide(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  - System.Data.SqlTypes.SqlByte.Equals(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  - System.Data.SqlTypes.SqlByte.Equals(System.Object)\n  - System.Data.SqlTypes.SqlByte.GetHashCode\n  - System.Data.SqlTypes.SqlByte.GreaterThan(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  - System.Data.SqlTypes.SqlByte.GreaterThanOrEqual(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  - System.Data.SqlTypes.SqlByte.IsNull\n  - System.Data.SqlTypes.SqlByte.LessThan(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  - System.Data.SqlTypes.SqlByte.LessThanOrEqual(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  - System.Data.SqlTypes.SqlByte.MaxValue\n  - System.Data.SqlTypes.SqlByte.MinValue\n  - System.Data.SqlTypes.SqlByte.Mod(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  - System.Data.SqlTypes.SqlByte.Modulus(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  - System.Data.SqlTypes.SqlByte.Multiply(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  - System.Data.SqlTypes.SqlByte.NotEquals(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  - System.Data.SqlTypes.SqlByte.Null\n  - System.Data.SqlTypes.SqlByte.OnesComplement(System.Data.SqlTypes.SqlByte)\n  - System.Data.SqlTypes.SqlByte.op_Addition(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  - System.Data.SqlTypes.SqlByte.op_BitwiseAnd(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  - System.Data.SqlTypes.SqlByte.op_BitwiseOr(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  - System.Data.SqlTypes.SqlByte.op_Division(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  - System.Data.SqlTypes.SqlByte.op_Equality(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  - System.Data.SqlTypes.SqlByte.op_ExclusiveOr(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  - System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlByte\n  - System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlByte)~System.Byte\n  - System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlByte\n  - System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlByte\n  - System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlByte\n  - System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlByte\n  - System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlByte\n  - System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlByte\n  - System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlByte\n  - System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlByte\n  - System.Data.SqlTypes.SqlByte.op_GreaterThan(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  - System.Data.SqlTypes.SqlByte.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  - System.Data.SqlTypes.SqlByte.op_Implicit(System.Byte)~System.Data.SqlTypes.SqlByte\n  - System.Data.SqlTypes.SqlByte.op_Inequality(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  - System.Data.SqlTypes.SqlByte.op_LessThan(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  - System.Data.SqlTypes.SqlByte.op_LessThanOrEqual(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  - System.Data.SqlTypes.SqlByte.op_Modulus(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  - System.Data.SqlTypes.SqlByte.op_Multiply(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  - System.Data.SqlTypes.SqlByte.op_OnesComplement(System.Data.SqlTypes.SqlByte)\n  - System.Data.SqlTypes.SqlByte.op_Subtraction(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  - System.Data.SqlTypes.SqlByte.Parse(System.String)\n  - System.Data.SqlTypes.SqlByte.Subtract(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  - System.Data.SqlTypes.SqlByte.ToSqlBoolean\n  - System.Data.SqlTypes.SqlByte.ToSqlDecimal\n  - System.Data.SqlTypes.SqlByte.ToSqlDouble\n  - System.Data.SqlTypes.SqlByte.ToSqlInt16\n  - System.Data.SqlTypes.SqlByte.ToSqlInt32\n  - System.Data.SqlTypes.SqlByte.ToSqlInt64\n  - System.Data.SqlTypes.SqlByte.ToSqlMoney\n  - System.Data.SqlTypes.SqlByte.ToSqlSingle\n  - System.Data.SqlTypes.SqlByte.ToSqlString\n  - System.Data.SqlTypes.SqlByte.ToString\n  - System.Data.SqlTypes.SqlByte.Value\n  - System.Data.SqlTypes.SqlByte.Xor(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  - System.Data.SqlTypes.SqlByte.Zero\n  langs:\n  - csharp\n  - vb\n  name: SqlByte\n  fullName: System.Data.SqlTypes.SqlByte\n  type: Struct\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SqlByte\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 21\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Represents an 8-bit unsigned integer, in the range of 0 through 255, to be stored in or retrieved from a database. </p>\\n\"\n  syntax:\n    content: >-\n      [StructLayout(LayoutKind.Sequential)]\n\n      public struct SqlByte : INullable, IComparable\n    content.vb: >-\n      <StructLayout(LayoutKind.Sequential)>\n\n      Public Structure SqlByte\n          Implements INullable, IComparable\n  implements:\n  - System.Data.SqlTypes.INullable\n  - System.IComparable\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  nameWithType: SqlByte\n- uid: System.Data.SqlTypes.SqlByte.MaxValue\n  commentId: F:System.Data.SqlTypes.SqlByte.MaxValue\n  id: MaxValue\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: MaxValue\n  fullName: System.Data.SqlTypes.SqlByte.MaxValue\n  type: Field\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MaxValue\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 617\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>A constant representing the largest possible value of a <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static readonly SqlByte MaxValue\n    content.vb: Public Shared ReadOnly MaxValue As SqlByte\n    return:\n      type: System.Data.SqlTypes.SqlByte\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: SqlByte.MaxValue\n- uid: System.Data.SqlTypes.SqlByte.MinValue\n  commentId: F:System.Data.SqlTypes.SqlByte.MinValue\n  id: MinValue\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: MinValue\n  fullName: System.Data.SqlTypes.SqlByte.MinValue\n  type: Field\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MinValue\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 613\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>A constant representing the smallest possible value of a <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static readonly SqlByte MinValue\n    content.vb: Public Shared ReadOnly MinValue As SqlByte\n    return:\n      type: System.Data.SqlTypes.SqlByte\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: SqlByte.MinValue\n- uid: System.Data.SqlTypes.SqlByte.Null\n  commentId: F:System.Data.SqlTypes.SqlByte.Null\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  fullName: System.Data.SqlTypes.SqlByte.Null\n  type: Field\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 605\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Represents a <xref href=\\\"System.DBNull\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that can be assigned to this instance of the <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public static readonly SqlByte Null\n    content.vb: Public Shared ReadOnly Null As SqlByte\n    return:\n      type: System.Data.SqlTypes.SqlByte\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: SqlByte.Null\n- uid: System.Data.SqlTypes.SqlByte.Zero\n  commentId: F:System.Data.SqlTypes.SqlByte.Zero\n  id: Zero\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: Zero\n  fullName: System.Data.SqlTypes.SqlByte.Zero\n  type: Field\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Zero\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 609\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Represents a zero value that can be assigned to the <xref href=\\\"System.Data.SqlTypes.SqlByte.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of an instance of the <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public static readonly SqlByte Zero\n    content.vb: Public Shared ReadOnly Zero As SqlByte\n    return:\n      type: System.Data.SqlTypes.SqlByte\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: SqlByte.Zero\n- uid: System.Data.SqlTypes.SqlByte.#ctor(System.Byte)\n  commentId: M:System.Data.SqlTypes.SqlByte.#ctor(System.Byte)\n  id: '#ctor(System.Byte)'\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: SqlByte(Byte)\n  fullName: System.Data.SqlTypes.SqlByte.SqlByte(System.Byte)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 40\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure using the specified byte value.</p>\\n\"\n  syntax:\n    content: public SqlByte(byte value)\n    content.vb: Public Sub New(value As Byte)\n    parameters:\n    - id: value\n      type: System.Byte\n      description: \"\\n<p>A byte value to be stored in the <xref href=\\\"System.Data.SqlTypes.SqlByte.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of the new <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlByte.SqlByte(Byte)\n- uid: System.Data.SqlTypes.SqlByte.IsNull\n  commentId: P:System.Data.SqlTypes.SqlByte.IsNull\n  id: IsNull\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: IsNull\n  fullName: System.Data.SqlTypes.SqlByte.IsNull\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsNull\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 50\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Gets a Boolean value that indicates whether this <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure is null.</p>\\n\"\n  syntax:\n    content: public bool IsNull { get; }\n    content.vb: Public ReadOnly Property IsNull As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if null. Otherwise, <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Data.SqlTypes.INullable.IsNull\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SqlByte.IsNull\n- uid: System.Data.SqlTypes.SqlByte.Value\n  commentId: P:System.Data.SqlTypes.SqlByte.Value\n  id: Value\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: Value\n  fullName: System.Data.SqlTypes.SqlByte.Value\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Value\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 59\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Gets the value of the <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. This property is read-only </p>\\n\"\n  syntax:\n    content: public byte Value { get; }\n    content.vb: Public ReadOnly Property Value As Byte\n    parameters: []\n    return:\n      type: System.Byte\n      description: \"\\n<p>The value of the <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SqlByte.Value\n- uid: System.Data.SqlTypes.SqlByte.Add(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  commentId: M:System.Data.SqlTypes.SqlByte.Add(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  id: Add(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: Add(SqlByte, SqlByte)\n  fullName: System.Data.SqlTypes.SqlByte.Add(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Add\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 401\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Computes the sum of the two specified <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structures.</p>\\n\"\n  syntax:\n    content: public static SqlByte Add(SqlByte x, SqlByte y)\n    content.vb: Public Shared Function Add(x As SqlByte, y As SqlByte) As SqlByte\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose <strong>Value</strong> property contains the results of the addition.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlByte.Add(SqlByte, SqlByte)\n- uid: System.Data.SqlTypes.SqlByte.BitwiseAnd(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  commentId: M:System.Data.SqlTypes.SqlByte.BitwiseAnd(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  id: BitwiseAnd(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: BitwiseAnd(SqlByte, SqlByte)\n  fullName: System.Data.SqlTypes.SqlByte.BitwiseAnd(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BitwiseAnd\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 436\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Computes the bitwise AND of its <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operands.</p>\\n\"\n  syntax:\n    content: public static SqlByte BitwiseAnd(SqlByte x, SqlByte y)\n    content.vb: Public Shared Function BitwiseAnd(x As SqlByte, y As SqlByte) As SqlByte\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>The results of the bitwise AND operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlByte.BitwiseAnd(SqlByte, SqlByte)\n- uid: System.Data.SqlTypes.SqlByte.BitwiseOr(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  commentId: M:System.Data.SqlTypes.SqlByte.BitwiseOr(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  id: BitwiseOr(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: BitwiseOr(SqlByte, SqlByte)\n  fullName: System.Data.SqlTypes.SqlByte.BitwiseOr(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BitwiseOr\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 442\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Computes the bitwise OR of its two <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operands.</p>\\n\"\n  syntax:\n    content: public static SqlByte BitwiseOr(SqlByte x, SqlByte y)\n    content.vb: Public Shared Function BitwiseOr(x As SqlByte, y As SqlByte) As SqlByte\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>The results of the bitwise OR operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlByte.BitwiseOr(SqlByte, SqlByte)\n- uid: System.Data.SqlTypes.SqlByte.CompareTo(System.Data.SqlTypes.SqlByte)\n  commentId: M:System.Data.SqlTypes.SqlByte.CompareTo(System.Data.SqlTypes.SqlByte)\n  id: CompareTo(System.Data.SqlTypes.SqlByte)\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: CompareTo(SqlByte)\n  fullName: System.Data.SqlTypes.SqlByte.CompareTo(System.Data.SqlTypes.SqlByte)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CompareTo\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 559\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares this instance to the supplied <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object and returns an indication of their relative values.</p>\\n\"\n  syntax:\n    content: public int CompareTo(SqlByte value)\n    content.vb: Public Function CompareTo(value As SqlByte) As Integer\n    parameters:\n    - id: value\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>The <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to be compared.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A signed number that indicates the relative values of the instance and the object.</p>\\n<p>Return Value </p>\\n<p>Condition </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>This instance is less than the object. </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>This instance is the same as the object. </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>This instance is greater than the object </p>\\n<p>-or- </p>\\n<p>The object is a null reference (<strong>Nothing</strong> in Visual Basic) </p>\\n</td></tr></tbody></table>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlByte.CompareTo(SqlByte)\n- uid: System.Data.SqlTypes.SqlByte.CompareTo(System.Object)\n  commentId: M:System.Data.SqlTypes.SqlByte.CompareTo(System.Object)\n  id: CompareTo(System.Object)\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: CompareTo(Object)\n  fullName: System.Data.SqlTypes.SqlByte.CompareTo(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CompareTo\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 548\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares this instance to the supplied <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and returns an indication of their relative values.</p>\\n\"\n  syntax:\n    content: public int CompareTo(object value)\n    content.vb: Public Function CompareTo(value As Object) As Integer\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to be compared.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A signed number that indicates the relative values of the instance and the object.</p>\\n<p>Return Value </p>\\n<p>Condition </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>This instance is less than the object. </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>This instance is the same as the object. </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>This instance is greater than the object </p>\\n<p>-or- </p>\\n<p>The object is a null reference (<strong>Nothing</strong> in Visual Basic) </p>\\n</td></tr></tbody></table>\\n\"\n  implements:\n  - System.IComparable.CompareTo(System.Object)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlByte.CompareTo(Object)\n- uid: System.Data.SqlTypes.SqlByte.Divide(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  commentId: M:System.Data.SqlTypes.SqlByte.Divide(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  id: Divide(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: Divide(SqlByte, SqlByte)\n  fullName: System.Data.SqlTypes.SqlByte.Divide(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Divide\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 419\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Divides its first <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operand by its second.</p>\\n\"\n  syntax:\n    content: public static SqlByte Divide(SqlByte x, SqlByte y)\n    content.vb: Public Shared Function Divide(x As SqlByte, y As SqlByte) As SqlByte\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose <xref href=\\\"System.Data.SqlTypes.SqlByte.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property contains the results of the division.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlByte.Divide(SqlByte, SqlByte)\n- uid: System.Data.SqlTypes.SqlByte.Equals(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  commentId: M:System.Data.SqlTypes.SqlByte.Equals(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  id: Equals(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: Equals(SqlByte, SqlByte)\n  fullName: System.Data.SqlTypes.SqlByte.Equals(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 454\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Performs a logical comparison of two <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structures to determine whether they are equal.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean Equals(SqlByte x, SqlByte y)\n    content.vb: Public Shared Function Equals(x As SqlByte, y As SqlByte) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>\\n<strong>true</strong> if the two values are equal. Otherwise, <strong>false</strong>. If either instance is null, then the <strong>SqlByte</strong> will be null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlByte.Equals(SqlByte, SqlByte)\n- uid: System.Data.SqlTypes.SqlByte.Equals(System.Object)\n  commentId: M:System.Data.SqlTypes.SqlByte.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Data.SqlTypes.SqlByte.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 577\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares the supplied <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter to the <xref href=\\\"System.Data.SqlTypes.SqlByte.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of the <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object value)\n    content.vb: Public Overrides Function Equals(value As Object) As Boolean\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to be compared. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if object is an instance of <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the two are equal; otherwise <strong>false</strong>.</p>\\n\"\n  overridden: System.ValueType.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlByte.Equals(Object)\n- uid: System.Data.SqlTypes.SqlByte.GetHashCode\n  commentId: M:System.Data.SqlTypes.SqlByte.GetHashCode\n  id: GetHashCode\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Data.SqlTypes.SqlByte.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 596\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Returns the hash code for this instance.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer hash code.</p>\\n\"\n  overridden: System.ValueType.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlByte.GetHashCode()\n- uid: System.Data.SqlTypes.SqlByte.GreaterThan(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  commentId: M:System.Data.SqlTypes.SqlByte.GreaterThan(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  id: GreaterThan(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: GreaterThan(SqlByte, SqlByte)\n  fullName: System.Data.SqlTypes.SqlByte.GreaterThan(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GreaterThan\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 472\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares two instances of <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to determine whether the first is greater than the second.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean GreaterThan(SqlByte x, SqlByte y)\n    content.vb: Public Shared Function GreaterThan(x As SqlByte, y As SqlByte) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the first instance is greater than the second instance. Otherwise, <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlByte.GreaterThan(SqlByte, SqlByte)\n- uid: System.Data.SqlTypes.SqlByte.GreaterThanOrEqual(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  commentId: M:System.Data.SqlTypes.SqlByte.GreaterThanOrEqual(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  id: GreaterThanOrEqual(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: GreaterThanOrEqual(SqlByte, SqlByte)\n  fullName: System.Data.SqlTypes.SqlByte.GreaterThanOrEqual(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GreaterThanOrEqual\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 484\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares two <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structures to determine whether the first is greater than or equal to the second.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean GreaterThanOrEqual(SqlByte x, SqlByte y)\n    content.vb: Public Shared Function GreaterThanOrEqual(x As SqlByte, y As SqlByte) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the first instance is greater than or equal to the second instance. Otherwise, <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlByte.GreaterThanOrEqual(SqlByte, SqlByte)\n- uid: System.Data.SqlTypes.SqlByte.LessThan(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  commentId: M:System.Data.SqlTypes.SqlByte.LessThan(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  id: LessThan(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: LessThan(SqlByte, SqlByte)\n  fullName: System.Data.SqlTypes.SqlByte.LessThan(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LessThan\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 466\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares two instances of <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to determine whether the first is less than the second.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean LessThan(SqlByte x, SqlByte y)\n    content.vb: Public Shared Function LessThan(x As SqlByte, y As SqlByte) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the first instance is less than the second instance. Otherwise, <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlByte.LessThan(SqlByte, SqlByte)\n- uid: System.Data.SqlTypes.SqlByte.LessThanOrEqual(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  commentId: M:System.Data.SqlTypes.SqlByte.LessThanOrEqual(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  id: LessThanOrEqual(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: LessThanOrEqual(SqlByte, SqlByte)\n  fullName: System.Data.SqlTypes.SqlByte.LessThanOrEqual(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LessThanOrEqual\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 478\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares two instances of <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to determine whether the first is less than or equal to the second.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean LessThanOrEqual(SqlByte x, SqlByte y)\n    content.vb: Public Shared Function LessThanOrEqual(x As SqlByte, y As SqlByte) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the first instance is less than or equal to the second instance. Otherwise, <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlByte.LessThanOrEqual(SqlByte, SqlByte)\n- uid: System.Data.SqlTypes.SqlByte.Mod(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  commentId: M:System.Data.SqlTypes.SqlByte.Mod(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  id: Mod(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: Mod(SqlByte, SqlByte)\n  fullName: System.Data.SqlTypes.SqlByte.Mod(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Mod\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 425\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Computes the remainder after dividing its first <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operand by its second.</p>\\n\"\n  syntax:\n    content: public static SqlByte Mod(SqlByte x, SqlByte y)\n    content.vb: Public Shared Function Mod(x As SqlByte, y As SqlByte) As SqlByte\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose <xref href=\\\"System.Data.SqlTypes.SqlByte.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> contains the remainder.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlByte.Mod(SqlByte, SqlByte)\n- uid: System.Data.SqlTypes.SqlByte.Modulus(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  commentId: M:System.Data.SqlTypes.SqlByte.Modulus(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  id: Modulus(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: Modulus(SqlByte, SqlByte)\n  fullName: System.Data.SqlTypes.SqlByte.Modulus(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Modulus\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 430\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Divides two <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values and returns the remainder.</p>\\n\"\n  syntax:\n    content: public static SqlByte Modulus(SqlByte x, SqlByte y)\n    content.vb: Public Shared Function Modulus(x As SqlByte, y As SqlByte) As SqlByte\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>The remainder left after division is performed on <em>x</em> and <em>y</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlByte.Modulus(SqlByte, SqlByte)\n- uid: System.Data.SqlTypes.SqlByte.Multiply(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  commentId: M:System.Data.SqlTypes.SqlByte.Multiply(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  id: Multiply(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: Multiply(SqlByte, SqlByte)\n  fullName: System.Data.SqlTypes.SqlByte.Multiply(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Multiply\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 413\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Computes the product of the two <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operands.</p>\\n\"\n  syntax:\n    content: public static SqlByte Multiply(SqlByte x, SqlByte y)\n    content.vb: Public Shared Function Multiply(x As SqlByte, y As SqlByte) As SqlByte\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose <xref href=\\\"System.Data.SqlTypes.SqlByte.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property contains the product of the multiplication.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlByte.Multiply(SqlByte, SqlByte)\n- uid: System.Data.SqlTypes.SqlByte.NotEquals(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  commentId: M:System.Data.SqlTypes.SqlByte.NotEquals(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  id: NotEquals(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: NotEquals(SqlByte, SqlByte)\n  fullName: System.Data.SqlTypes.SqlByte.NotEquals(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NotEquals\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 460\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares two instances of <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to determine whether they are not equal.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean NotEquals(SqlByte x, SqlByte y)\n    content.vb: Public Shared Function NotEquals(x As SqlByte, y As SqlByte) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the two instances are not equal or <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the two instances are equal. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlByte.NotEquals(SqlByte, SqlByte)\n- uid: System.Data.SqlTypes.SqlByte.OnesComplement(System.Data.SqlTypes.SqlByte)\n  commentId: M:System.Data.SqlTypes.SqlByte.OnesComplement(System.Data.SqlTypes.SqlByte)\n  id: OnesComplement(System.Data.SqlTypes.SqlByte)\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: OnesComplement(SqlByte)\n  fullName: System.Data.SqlTypes.SqlByte.OnesComplement(System.Data.SqlTypes.SqlByte)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OnesComplement\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 395\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>The ones complement operator performs a bitwise one's complement operation on its <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operand.</p>\\n\"\n  syntax:\n    content: public static SqlByte OnesComplement(SqlByte x)\n    content.vb: Public Shared Function OnesComplement(x As SqlByte) As SqlByte\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose <xref href=\\\"System.Data.SqlTypes.SqlByte.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property contains the ones complement of the <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlByte.OnesComplement(SqlByte)\n- uid: System.Data.SqlTypes.SqlByte.op_Addition(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  commentId: M:System.Data.SqlTypes.SqlByte.op_Addition(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  id: op_Addition(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: Addition(SqlByte, SqlByte)\n  fullName: System.Data.SqlTypes.SqlByte.Addition(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Addition\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 123\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Computes the sum of the two specified <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structures.</p>\\n\"\n  syntax:\n    content: public static SqlByte operator +(SqlByte x, SqlByte y)\n    content.vb: Public Shared Operator +(x As SqlByte, y As SqlByte) As SqlByte\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose <xref href=\\\"System.Data.SqlTypes.SqlByte.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property contains the sum of the two operands.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlByte.Addition(SqlByte, SqlByte)\n- uid: System.Data.SqlTypes.SqlByte.op_BitwiseAnd(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  commentId: M:System.Data.SqlTypes.SqlByte.op_BitwiseAnd(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  id: op_BitwiseAnd(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: BitwiseAnd(SqlByte, SqlByte)\n  fullName: System.Data.SqlTypes.SqlByte.BitwiseAnd(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_BitwiseAnd\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 201\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Computes the bitwise AND of its <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operands.</p>\\n\"\n  syntax:\n    content: public static SqlByte operator &(SqlByte x, SqlByte y)\n    content.vb: Public Shared Operator And(x As SqlByte, y As SqlByte) As SqlByte\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>The results of the bitwise AND operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlByte.BitwiseAnd(SqlByte, SqlByte)\n- uid: System.Data.SqlTypes.SqlByte.op_BitwiseOr(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  commentId: M:System.Data.SqlTypes.SqlByte.op_BitwiseOr(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  id: op_BitwiseOr(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: BitwiseOr(SqlByte, SqlByte)\n  fullName: System.Data.SqlTypes.SqlByte.BitwiseOr(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_BitwiseOr\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 209\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Computes the bitwise OR of its two <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operands.</p>\\n\"\n  syntax:\n    content: public static SqlByte operator |(SqlByte x, SqlByte y)\n    content.vb: Public Shared Operator Or(x As SqlByte, y As SqlByte) As SqlByte\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>The results of the bitwise OR operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlByte.BitwiseOr(SqlByte, SqlByte)\n- uid: System.Data.SqlTypes.SqlByte.op_Division(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  commentId: M:System.Data.SqlTypes.SqlByte.op_Division(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  id: op_Division(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: Division(SqlByte, SqlByte)\n  fullName: System.Data.SqlTypes.SqlByte.Division(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Division\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 168\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Divides its first <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operand by its second.</p>\\n\"\n  syntax:\n    content: public static SqlByte operator /(SqlByte x, SqlByte y)\n    content.vb: Public Shared Operator /(x As SqlByte, y As SqlByte) As SqlByte\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose <xref href=\\\"System.Data.SqlTypes.SqlByte.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property contains the results of the division.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlByte.Division(SqlByte, SqlByte)\n- uid: System.Data.SqlTypes.SqlByte.op_Equality(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  commentId: M:System.Data.SqlTypes.SqlByte.op_Equality(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  id: op_Equality(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: Equality(SqlByte, SqlByte)\n  fullName: System.Data.SqlTypes.SqlByte.Equality(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Equality\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 345\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Performs a logical comparison of two <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structures to determine whether they are equal.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean operator ==(SqlByte x, SqlByte y)\n    content.vb: Public Shared Operator =(x As SqlByte, y As SqlByte) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the two instances are equal or <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the two instances are not equal. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlByte.Equality(SqlByte, SqlByte)\n- uid: System.Data.SqlTypes.SqlByte.op_ExclusiveOr(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  commentId: M:System.Data.SqlTypes.SqlByte.op_ExclusiveOr(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  id: op_ExclusiveOr(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: ExclusiveOr(SqlByte, SqlByte)\n  fullName: System.Data.SqlTypes.SqlByte.ExclusiveOr(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_ExclusiveOr\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 217\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Performs a bitwise exclusive-OR operation on the supplied parameters.</p>\\n\"\n  syntax:\n    content: public static SqlByte operator ^(SqlByte x, SqlByte y)\n    content.vb: Public Shared Operator Xor(x As SqlByte, y As SqlByte) As SqlByte\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>The results of the bitwise XOR operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlByte.ExclusiveOr(SqlByte, SqlByte)\n- uid: System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlByte\n  commentId: M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlByte\n  id: op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlByte\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: Explicit(SqlBoolean to SqlByte)\n  fullName: System.Data.SqlTypes.SqlByte.Explicit(System.Data.SqlTypes.SqlBoolean to System.Data.SqlTypes.SqlByte)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 230\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter to a <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static explicit operator SqlByte(SqlBoolean x)\n    content.vb: Public Shared Narrowing Operator CType(x As SqlBoolean) As SqlByte\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>The <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter to be converted to a <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose <xref href=\\\"System.Data.SqlTypes.SqlByte.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equals the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.ByteValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the supplied <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlByte.Narrowing(System.Data.SqlTypes.SqlBoolean to System.Data.SqlTypes.SqlByte)\n  name.vb: Narrowing(SqlBoolean to SqlByte)\n  nameWithType: SqlByte.Explicit(SqlBoolean to SqlByte)\n  nameWithType.vb: SqlByte.Narrowing(SqlBoolean to SqlByte)\n- uid: System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlByte)~System.Byte\n  commentId: M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlByte)~System.Byte\n  id: op_Explicit(System.Data.SqlTypes.SqlByte)~System.Byte\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: Explicit(SqlByte to Byte)\n  fullName: System.Data.SqlTypes.SqlByte.Explicit(System.Data.SqlTypes.SqlByte to System.Byte)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 83\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the supplied <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to a byte.</p>\\n\"\n  syntax:\n    content: public static explicit operator byte (SqlByte x)\n    content.vb: Public Shared Narrowing Operator CType(x As SqlByte) As Byte\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>The <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to be converted to a byte. </p>\\n\"\n    return:\n      type: System.Byte\n      description: \"\\n<p>A byte whose value equals the <xref href=\\\"System.Data.SqlTypes.SqlByte.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of the <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlByte.Narrowing(System.Data.SqlTypes.SqlByte to System.Byte)\n  name.vb: Narrowing(SqlByte to Byte)\n  nameWithType: SqlByte.Explicit(SqlByte to Byte)\n  nameWithType.vb: SqlByte.Narrowing(SqlByte to Byte)\n- uid: System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlByte\n  commentId: M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlByte\n  id: op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlByte\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: Explicit(SqlDecimal to SqlByte)\n  fullName: System.Data.SqlTypes.SqlByte.Explicit(System.Data.SqlTypes.SqlDecimal to System.Data.SqlTypes.SqlByte)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 326\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the supplied <xref href=\\\"System.Data.SqlTypes.SqlDecimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static explicit operator SqlByte(SqlDecimal x)\n    content.vb: Public Shared Narrowing Operator CType(x As SqlDecimal) As SqlByte\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlDecimal\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDecimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose <xref href=\\\"System.Data.SqlTypes.SqlByte.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property is equal to the <xref href=\\\"System.Data.SqlTypes.SqlDecimal.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlDecimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlByte.Narrowing(System.Data.SqlTypes.SqlDecimal to System.Data.SqlTypes.SqlByte)\n  name.vb: Narrowing(SqlDecimal to SqlByte)\n  nameWithType: SqlByte.Explicit(SqlDecimal to SqlByte)\n  nameWithType.vb: SqlByte.Narrowing(SqlDecimal to SqlByte)\n- uid: System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlByte\n  commentId: M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlByte\n  id: op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlByte\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: Explicit(SqlDouble to SqlByte)\n  fullName: System.Data.SqlTypes.SqlByte.Explicit(System.Data.SqlTypes.SqlDouble to System.Data.SqlTypes.SqlByte)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 311\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the supplied <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static explicit operator SqlByte(SqlDouble x)\n    content.vb: Public Shared Narrowing Operator CType(x As SqlDouble) As SqlByte\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose <xref href=\\\"System.Data.SqlTypes.SqlByte.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property is equal to the <xref href=\\\"System.Data.SqlTypes.SqlDouble.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlByte.Narrowing(System.Data.SqlTypes.SqlDouble to System.Data.SqlTypes.SqlByte)\n  name.vb: Narrowing(SqlDouble to SqlByte)\n  nameWithType: SqlByte.Explicit(SqlDouble to SqlByte)\n  nameWithType.vb: SqlByte.Narrowing(SqlDouble to SqlByte)\n- uid: System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlByte\n  commentId: M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlByte\n  id: op_Explicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlByte\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: Explicit(SqlInt16 to SqlByte)\n  fullName: System.Data.SqlTypes.SqlByte.Explicit(System.Data.SqlTypes.SqlInt16 to System.Data.SqlTypes.SqlByte)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 251\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the <xref href=\\\"System.Data.SqlTypes.SqlInt16\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter to a <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static explicit operator SqlByte(SqlInt16 x)\n    content.vb: Public Shared Narrowing Operator CType(x As SqlInt16) As SqlByte\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlInt16\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt16\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose <xref href=\\\"System.Data.SqlTypes.SqlByte.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property is equal to the <xref href=\\\"System.Data.SqlTypes.SqlInt16.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlInt16\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlByte.Narrowing(System.Data.SqlTypes.SqlInt16 to System.Data.SqlTypes.SqlByte)\n  name.vb: Narrowing(SqlInt16 to SqlByte)\n  nameWithType: SqlByte.Explicit(SqlInt16 to SqlByte)\n  nameWithType.vb: SqlByte.Narrowing(SqlInt16 to SqlByte)\n- uid: System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlByte\n  commentId: M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlByte\n  id: op_Explicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlByte\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: Explicit(SqlInt32 to SqlByte)\n  fullName: System.Data.SqlTypes.SqlByte.Explicit(System.Data.SqlTypes.SqlInt32 to System.Data.SqlTypes.SqlByte)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 266\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the supplied <xref href=\\\"System.Data.SqlTypes.SqlInt32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static explicit operator SqlByte(SqlInt32 x)\n    content.vb: Public Shared Narrowing Operator CType(x As SqlInt32) As SqlByte\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlInt32\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose <xref href=\\\"System.Data.SqlTypes.SqlByte.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property is equal to the <xref href=\\\"System.Data.SqlTypes.SqlInt32.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlInt32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlByte.Narrowing(System.Data.SqlTypes.SqlInt32 to System.Data.SqlTypes.SqlByte)\n  name.vb: Narrowing(SqlInt32 to SqlByte)\n  nameWithType: SqlByte.Explicit(SqlInt32 to SqlByte)\n  nameWithType.vb: SqlByte.Narrowing(SqlInt32 to SqlByte)\n- uid: System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlByte\n  commentId: M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlByte\n  id: op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlByte\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: Explicit(SqlInt64 to SqlByte)\n  fullName: System.Data.SqlTypes.SqlByte.Explicit(System.Data.SqlTypes.SqlInt64 to System.Data.SqlTypes.SqlByte)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 281\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the supplied <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static explicit operator SqlByte(SqlInt64 x)\n    content.vb: Public Shared Narrowing Operator CType(x As SqlInt64) As SqlByte\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose <xref href=\\\"System.Data.SqlTypes.SqlByte.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property is equal to the <xref href=\\\"System.Data.SqlTypes.SqlInt64.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <strong>SqlInt64</strong> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlByte.Narrowing(System.Data.SqlTypes.SqlInt64 to System.Data.SqlTypes.SqlByte)\n  name.vb: Narrowing(SqlInt64 to SqlByte)\n  nameWithType: SqlByte.Explicit(SqlInt64 to SqlByte)\n  nameWithType.vb: SqlByte.Narrowing(SqlInt64 to SqlByte)\n- uid: System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlByte\n  commentId: M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlByte\n  id: op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlByte\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: Explicit(SqlMoney to SqlByte)\n  fullName: System.Data.SqlTypes.SqlByte.Explicit(System.Data.SqlTypes.SqlMoney to System.Data.SqlTypes.SqlByte)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 242\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the <xref href=\\\"System.Data.SqlTypes.SqlMoney\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter to a <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static explicit operator SqlByte(SqlMoney x)\n    content.vb: Public Shared Narrowing Operator CType(x As SqlMoney) As SqlByte\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlMoney\n      description: \"\\n<p>A <strong>SqlMoney</strong> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose <xref href=\\\"System.Data.SqlTypes.SqlByte.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property is equal to the <xref href=\\\"System.Data.SqlTypes.SqlMoney.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlMoney\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlByte.Narrowing(System.Data.SqlTypes.SqlMoney to System.Data.SqlTypes.SqlByte)\n  name.vb: Narrowing(SqlMoney to SqlByte)\n  nameWithType: SqlByte.Explicit(SqlMoney to SqlByte)\n  nameWithType.vb: SqlByte.Narrowing(SqlMoney to SqlByte)\n- uid: System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlByte\n  commentId: M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlByte\n  id: op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlByte\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: Explicit(SqlSingle to SqlByte)\n  fullName: System.Data.SqlTypes.SqlByte.Explicit(System.Data.SqlTypes.SqlSingle to System.Data.SqlTypes.SqlByte)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 296\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the supplied <xref href=\\\"System.Data.SqlTypes.SqlSingle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static explicit operator SqlByte(SqlSingle x)\n    content.vb: Public Shared Narrowing Operator CType(x As SqlSingle) As SqlByte\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlSingle\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlSingle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose <xref href=\\\"System.Data.SqlTypes.SqlByte.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property is equal to the <xref href=\\\"System.Data.SqlTypes.SqlSingle.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlSingle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlByte.Narrowing(System.Data.SqlTypes.SqlSingle to System.Data.SqlTypes.SqlByte)\n  name.vb: Narrowing(SqlSingle to SqlByte)\n  nameWithType: SqlByte.Explicit(SqlSingle to SqlByte)\n  nameWithType.vb: SqlByte.Narrowing(SqlSingle to SqlByte)\n- uid: System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlByte\n  commentId: M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlByte\n  id: op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlByte\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: Explicit(SqlString to SqlByte)\n  fullName: System.Data.SqlTypes.SqlByte.Explicit(System.Data.SqlTypes.SqlString to System.Data.SqlTypes.SqlByte)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 336\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the supplied <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static explicit operator SqlByte(SqlString x)\n    content.vb: Public Shared Narrowing Operator CType(x As SqlString) As SqlByte\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>An instance of the <strong>SqlString</strong> class. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose <xref href=\\\"System.Data.SqlTypes.SqlByte.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property is equal to the numeric value represented by the <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlByte.Narrowing(System.Data.SqlTypes.SqlString to System.Data.SqlTypes.SqlByte)\n  name.vb: Narrowing(SqlString to SqlByte)\n  nameWithType: SqlByte.Explicit(SqlString to SqlByte)\n  nameWithType.vb: SqlByte.Narrowing(SqlString to SqlByte)\n- uid: System.Data.SqlTypes.SqlByte.op_GreaterThan(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  commentId: M:System.Data.SqlTypes.SqlByte.op_GreaterThan(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  id: op_GreaterThan(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: GreaterThan(SqlByte, SqlByte)\n  fullName: System.Data.SqlTypes.SqlByte.GreaterThan(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_GreaterThan\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 369\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares two instances of <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to determine whether the first is greater than the second.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean operator>(SqlByte x, SqlByte y)\n    content.vb: Public Shared Operator>(x As SqlByte, y As SqlByte) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the first instance is greater than the second instance. Otherwise, <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlByte.GreaterThan(SqlByte, SqlByte)\n- uid: System.Data.SqlTypes.SqlByte.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  commentId: M:System.Data.SqlTypes.SqlByte.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  id: op_GreaterThanOrEqual(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: GreaterThanOrEqual(SqlByte, SqlByte)\n  fullName: System.Data.SqlTypes.SqlByte.GreaterThanOrEqual(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_GreaterThanOrEqual\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 385\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares two instances of <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to determine whether the first is greater than or equal to the second.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean operator >=(SqlByte x, SqlByte y)\n    content.vb: Public Shared Operator >=(x As SqlByte, y As SqlByte) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the first instance is greater than or equal to the second instance. Otherwise, <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <strong>SqlBoolean</strong> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlByte.GreaterThanOrEqual(SqlByte, SqlByte)\n- uid: System.Data.SqlTypes.SqlByte.op_Implicit(System.Byte)~System.Data.SqlTypes.SqlByte\n  commentId: M:System.Data.SqlTypes.SqlByte.op_Implicit(System.Byte)~System.Data.SqlTypes.SqlByte\n  id: op_Implicit(System.Byte)~System.Data.SqlTypes.SqlByte\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: Implicit(Byte to SqlByte)\n  fullName: System.Data.SqlTypes.SqlByte.Implicit(System.Byte to System.Data.SqlTypes.SqlByte)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Implicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 74\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the supplied byte value to a <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static implicit operator SqlByte(byte x)\n    content.vb: Public Shared Widening Operator CType(x As Byte) As SqlByte\n    parameters:\n    - id: x\n      type: System.Byte\n      description: \"\\n<p>A byte value to be converted to <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose <xref href=\\\"System.Data.SqlTypes.SqlByte.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property is equal to the supplied parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlByte.Widening(System.Byte to System.Data.SqlTypes.SqlByte)\n  name.vb: Widening(Byte to SqlByte)\n  nameWithType: SqlByte.Implicit(Byte to SqlByte)\n  nameWithType.vb: SqlByte.Widening(Byte to SqlByte)\n- uid: System.Data.SqlTypes.SqlByte.op_Inequality(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  commentId: M:System.Data.SqlTypes.SqlByte.op_Inequality(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  id: op_Inequality(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: Inequality(SqlByte, SqlByte)\n  fullName: System.Data.SqlTypes.SqlByte.Inequality(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Inequality\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 353\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares two instances of <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to determine whether they are not equal.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean operator !=(SqlByte x, SqlByte y)\n    content.vb: Public Shared Operator <>(x As SqlByte, y As SqlByte) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the two instances are not equal or <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the two instances are equal. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlByte.Inequality(SqlByte, SqlByte)\n- uid: System.Data.SqlTypes.SqlByte.op_LessThan(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  commentId: M:System.Data.SqlTypes.SqlByte.op_LessThan(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  id: op_LessThan(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: LessThan(SqlByte, SqlByte)\n  fullName: System.Data.SqlTypes.SqlByte.LessThan(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_LessThan\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 361\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares two instances of <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to determine whether the first is less than the second.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean operator <(SqlByte x, SqlByte y)\n    content.vb: Public Shared Operator <(x As SqlByte, y As SqlByte) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the first instance is less than the second instance. Otherwise, <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlByte.LessThan(SqlByte, SqlByte)\n- uid: System.Data.SqlTypes.SqlByte.op_LessThanOrEqual(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  commentId: M:System.Data.SqlTypes.SqlByte.op_LessThanOrEqual(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  id: op_LessThanOrEqual(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: LessThanOrEqual(SqlByte, SqlByte)\n  fullName: System.Data.SqlTypes.SqlByte.LessThanOrEqual(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_LessThanOrEqual\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 377\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares two instances of <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to determine whether the first is less than or equal to the second.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean operator <=(SqlByte x, SqlByte y)\n    content.vb: Public Shared Operator <=(x As SqlByte, y As SqlByte) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the first instance is less than or equal to the second instance. Otherwise, <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlByte.LessThanOrEqual(SqlByte, SqlByte)\n- uid: System.Data.SqlTypes.SqlByte.op_Modulus(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  commentId: M:System.Data.SqlTypes.SqlByte.op_Modulus(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  id: op_Modulus(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: Modulus(SqlByte, SqlByte)\n  fullName: System.Data.SqlTypes.SqlByte.Modulus(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Modulus\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 184\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Computes the remainder after dividing its first <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operand by its second.</p>\\n\"\n  syntax:\n    content: public static SqlByte operator %(SqlByte x, SqlByte y)\n    content.vb: Public Shared Operator Mod(x As SqlByte, y As SqlByte) As SqlByte\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose <xref href=\\\"System.Data.SqlTypes.SqlByte.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> contains the remainder.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlByte.Modulus(SqlByte, SqlByte)\n- uid: System.Data.SqlTypes.SqlByte.op_Multiply(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  commentId: M:System.Data.SqlTypes.SqlByte.op_Multiply(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  id: op_Multiply(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: Multiply(SqlByte, SqlByte)\n  fullName: System.Data.SqlTypes.SqlByte.Multiply(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Multiply\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 153\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Computes the product of the two <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operands.</p>\\n\"\n  syntax:\n    content: public static SqlByte operator *(SqlByte x, SqlByte y)\n    content.vb: Public Shared Operator *(x As SqlByte, y As SqlByte) As SqlByte\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose <xref href=\\\"System.Data.SqlTypes.SqlByte.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property contains the product of the multiplication.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlByte.Multiply(SqlByte, SqlByte)\n- uid: System.Data.SqlTypes.SqlByte.op_OnesComplement(System.Data.SqlTypes.SqlByte)\n  commentId: M:System.Data.SqlTypes.SqlByte.op_OnesComplement(System.Data.SqlTypes.SqlByte)\n  id: op_OnesComplement(System.Data.SqlTypes.SqlByte)\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: OnesComplement(SqlByte)\n  fullName: System.Data.SqlTypes.SqlByte.OnesComplement(System.Data.SqlTypes.SqlByte)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_OnesComplement\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 111\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>The ones complement operator performs a bitwise one's complement operation on its <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operand.</p>\\n\"\n  syntax:\n    content: public static SqlByte operator ~(SqlByte x)\n    content.vb: Public Shared Operator Not(x As SqlByte) As SqlByte\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose <xref href=\\\"System.Data.SqlTypes.SqlByte.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property contains the ones complement of the <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlByte.OnesComplement(SqlByte)\n- uid: System.Data.SqlTypes.SqlByte.op_Subtraction(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  commentId: M:System.Data.SqlTypes.SqlByte.op_Subtraction(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  id: op_Subtraction(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: Subtraction(SqlByte, SqlByte)\n  fullName: System.Data.SqlTypes.SqlByte.Subtraction(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Subtraction\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 138\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Subtracts the second <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operand from the first.</p>\\n\"\n  syntax:\n    content: public static SqlByte operator -(SqlByte x, SqlByte y)\n    content.vb: Public Shared Operator -(x As SqlByte, y As SqlByte) As SqlByte\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>The results of subtracting the second <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operand from the first.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlByte.Subtraction(SqlByte, SqlByte)\n- uid: System.Data.SqlTypes.SqlByte.Parse(System.String)\n  commentId: M:System.Data.SqlTypes.SqlByte.Parse(System.String)\n  id: Parse(System.String)\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: Parse(String)\n  fullName: System.Data.SqlTypes.SqlByte.Parse(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Parse\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 99\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representation of a number to its 8-bit unsigned integer equivalent.</p>\\n\"\n  syntax:\n    content: public static SqlByte Parse(string s)\n    content.vb: Public Shared Function Parse(s As String) As SqlByte\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>The <strong>String</strong> to be parsed. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure that contains the 8-bit number represented by the <strong>String</strong> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlByte.Parse(String)\n- uid: System.Data.SqlTypes.SqlByte.Subtract(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  commentId: M:System.Data.SqlTypes.SqlByte.Subtract(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  id: Subtract(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: Subtract(SqlByte, SqlByte)\n  fullName: System.Data.SqlTypes.SqlByte.Subtract(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Subtract\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 407\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Subtracts the second <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operand from the first.</p>\\n\"\n  syntax:\n    content: public static SqlByte Subtract(SqlByte x, SqlByte y)\n    content.vb: Public Shared Function Subtract(x As SqlByte, y As SqlByte) As SqlByte\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>The results of subtracting the second <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operand from the first.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlByte.Subtract(SqlByte, SqlByte)\n- uid: System.Data.SqlTypes.SqlByte.ToSqlBoolean\n  commentId: M:System.Data.SqlTypes.SqlByte.ToSqlBoolean\n  id: ToSqlBoolean\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: ToSqlBoolean()\n  fullName: System.Data.SqlTypes.SqlByte.ToSqlBoolean()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToSqlBoolean\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 491\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts this <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public SqlBoolean ToSqlBoolean()\n    content.vb: Public Function ToSqlBoolean As SqlBoolean\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Data.SqlTypes.SqlByte.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is non-zero; <strong>false</strong> if zero; otherwise Null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlByte.ToSqlBoolean()\n- uid: System.Data.SqlTypes.SqlByte.ToSqlDecimal\n  commentId: M:System.Data.SqlTypes.SqlByte.ToSqlDecimal\n  id: ToSqlDecimal\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: ToSqlDecimal()\n  fullName: System.Data.SqlTypes.SqlByte.ToSqlDecimal()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToSqlDecimal\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 521\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts this <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to <xref href=\\\"System.Data.SqlTypes.SqlDecimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public SqlDecimal ToSqlDecimal()\n    content.vb: Public Function ToSqlDecimal As SqlDecimal\n    return:\n      type: System.Data.SqlTypes.SqlDecimal\n      description: \"\\n<p>A <strong>SqlDecimal</strong> structure whose <xref href=\\\"System.Data.SqlTypes.SqlDecimal.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equals the <xref href=\\\"System.Data.SqlTypes.SqlByte.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of this <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlByte.ToSqlDecimal()\n- uid: System.Data.SqlTypes.SqlByte.ToSqlDouble\n  commentId: M:System.Data.SqlTypes.SqlByte.ToSqlDouble\n  id: ToSqlDouble\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: ToSqlDouble()\n  fullName: System.Data.SqlTypes.SqlByte.ToSqlDouble()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToSqlDouble\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 496\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts this <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public SqlDouble ToSqlDouble()\n    content.vb: Public Function ToSqlDouble As SqlDouble\n    return:\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A <strong>SqlDouble</strong> structure with the same value as this <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlByte.ToSqlDouble()\n- uid: System.Data.SqlTypes.SqlByte.ToSqlInt16\n  commentId: M:System.Data.SqlTypes.SqlByte.ToSqlInt16\n  id: ToSqlInt16\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: ToSqlInt16()\n  fullName: System.Data.SqlTypes.SqlByte.ToSqlInt16()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToSqlInt16\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 501\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts this <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to <xref href=\\\"System.Data.SqlTypes.SqlInt16\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public SqlInt16 ToSqlInt16()\n    content.vb: Public Function ToSqlInt16 As SqlInt16\n    return:\n      type: System.Data.SqlTypes.SqlInt16\n      description: \"\\n<p>A <strong>SqlInt16</strong> structure with the same value as this <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlByte.ToSqlInt16()\n- uid: System.Data.SqlTypes.SqlByte.ToSqlInt32\n  commentId: M:System.Data.SqlTypes.SqlByte.ToSqlInt32\n  id: ToSqlInt32\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: ToSqlInt32()\n  fullName: System.Data.SqlTypes.SqlByte.ToSqlInt32()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToSqlInt32\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 506\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts this <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to <xref href=\\\"System.Data.SqlTypes.SqlInt32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public SqlInt32 ToSqlInt32()\n    content.vb: Public Function ToSqlInt32 As SqlInt32\n    return:\n      type: System.Data.SqlTypes.SqlInt32\n      description: \"\\n<p>A <strong>SqlInt32</strong> structure with the same value as this <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlByte.ToSqlInt32()\n- uid: System.Data.SqlTypes.SqlByte.ToSqlInt64\n  commentId: M:System.Data.SqlTypes.SqlByte.ToSqlInt64\n  id: ToSqlInt64\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: ToSqlInt64()\n  fullName: System.Data.SqlTypes.SqlByte.ToSqlInt64()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToSqlInt64\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 511\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts this <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public SqlInt64 ToSqlInt64()\n    content.vb: Public Function ToSqlInt64 As SqlInt64\n    return:\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <strong>SqlInt64</strong> structure who <xref href=\\\"System.Data.SqlTypes.SqlInt64.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equals the <xref href=\\\"System.Data.SqlTypes.SqlByte.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of this <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlByte.ToSqlInt64()\n- uid: System.Data.SqlTypes.SqlByte.ToSqlMoney\n  commentId: M:System.Data.SqlTypes.SqlByte.ToSqlMoney\n  id: ToSqlMoney\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: ToSqlMoney()\n  fullName: System.Data.SqlTypes.SqlByte.ToSqlMoney()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToSqlMoney\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 516\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts this <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to <xref href=\\\"System.Data.SqlTypes.SqlMoney\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public SqlMoney ToSqlMoney()\n    content.vb: Public Function ToSqlMoney As SqlMoney\n    return:\n      type: System.Data.SqlTypes.SqlMoney\n      description: \"\\n<p>A <strong>SqlMoney</strong> structure whose <xref href=\\\"System.Data.SqlTypes.SqlMoney.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equals the <xref href=\\\"System.Data.SqlTypes.SqlByte.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of this <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlByte.ToSqlMoney()\n- uid: System.Data.SqlTypes.SqlByte.ToSqlSingle\n  commentId: M:System.Data.SqlTypes.SqlByte.ToSqlSingle\n  id: ToSqlSingle\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: ToSqlSingle()\n  fullName: System.Data.SqlTypes.SqlByte.ToSqlSingle()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToSqlSingle\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 526\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts this <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to <xref href=\\\"System.Data.SqlTypes.SqlSingle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public SqlSingle ToSqlSingle()\n    content.vb: Public Function ToSqlSingle As SqlSingle\n    return:\n      type: System.Data.SqlTypes.SqlSingle\n      description: \"\\n<p>A <strong>SqlSingle</strong> structure that has the same <xref href=\\\"System.Data.SqlTypes.SqlSingle.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> as this <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlByte.ToSqlSingle()\n- uid: System.Data.SqlTypes.SqlByte.ToSqlString\n  commentId: M:System.Data.SqlTypes.SqlByte.ToSqlString\n  id: ToSqlString\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: ToSqlString()\n  fullName: System.Data.SqlTypes.SqlByte.ToSqlString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToSqlString\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 531\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts this instance of <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public SqlString ToSqlString()\n    content.vb: Public Function ToSqlString As SqlString\n    return:\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>A <strong>SqlString</strong> that contains the string representation of the <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure's <xref href=\\\"System.Data.SqlTypes.SqlByte.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlByte.ToSqlString()\n- uid: System.Data.SqlTypes.SqlByte.ToString\n  commentId: M:System.Data.SqlTypes.SqlByte.ToString\n  id: ToString\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Data.SqlTypes.SqlByte.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 91\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts this <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to a <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>A string that contains the <xref href=\\\"System.Data.SqlTypes.SqlByte.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If the <strong>Value</strong> is null, the <strong>String</strong> will be a null string.</p>\\n\"\n  overridden: System.ValueType.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlByte.ToString()\n- uid: System.Data.SqlTypes.SqlByte.Xor(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  commentId: M:System.Data.SqlTypes.SqlByte.Xor(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  id: Xor(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)\n  parent: System.Data.SqlTypes.SqlByte\n  langs:\n  - csharp\n  - vb\n  name: Xor(SqlByte, SqlByte)\n  fullName: System.Data.SqlTypes.SqlByte.Xor(System.Data.SqlTypes.SqlByte, System.Data.SqlTypes.SqlByte)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Xor\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLByte.cs\n    startLine: 448\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Performs a bitwise exclusive-OR operation on the supplied parameters.</p>\\n\"\n  syntax:\n    content: public static SqlByte Xor(SqlByte x, SqlByte y)\n    content.vb: Public Shared Function Xor(x As SqlByte, y As SqlByte) As SqlByte\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>The results of the XOR operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlByte.Xor(SqlByte, SqlByte)\nreferences:\n- uid: System.Data.SqlTypes\n  isExternal: false\n  name: System.Data.SqlTypes\n  fullName: System.Data.SqlTypes\n  nameWithType: System.Data.SqlTypes\n  commentId: N:System.Data.SqlTypes\n- uid: System.Data.SqlTypes.INullable\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: INullable\n  fullName: System.Data.SqlTypes.INullable\n  nameWithType: INullable\n  commentId: T:System.Data.SqlTypes.INullable\n- uid: System.IComparable\n  parent: System\n  isExternal: false\n  name: IComparable\n  fullName: System.IComparable\n  nameWithType: IComparable\n  commentId: T:System.IComparable\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Data.SqlTypes.SqlByte\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlByte\n  fullName: System.Data.SqlTypes.SqlByte\n  nameWithType: SqlByte\n  commentId: T:System.Data.SqlTypes.SqlByte\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  fullName: System.Byte\n  nameWithType: Byte\n  commentId: T:System.Byte\n- uid: System.Data.SqlTypes.INullable.IsNull\n  parent: System.Data.SqlTypes.INullable\n  isExternal: false\n  name: IsNull\n  fullName: System.Data.SqlTypes.INullable.IsNull\n  nameWithType: INullable.IsNull\n  commentId: P:System.Data.SqlTypes.INullable.IsNull\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.IComparable.CompareTo(System.Object)\n  parent: System.IComparable\n  isExternal: true\n  name: CompareTo(Object)\n  fullName: System.IComparable.CompareTo(System.Object)\n  spec.csharp:\n  - uid: System.IComparable.CompareTo(System.Object)\n    name: CompareTo\n    fullName: System.IComparable.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IComparable.CompareTo(System.Object)\n    name: CompareTo\n    fullName: System.IComparable.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IComparable.CompareTo(Object)\n  commentId: M:System.IComparable.CompareTo(System.Object)\n- uid: System.Data.SqlTypes.SqlBoolean\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlBoolean\n  fullName: System.Data.SqlTypes.SqlBoolean\n  nameWithType: SqlBoolean\n  commentId: T:System.Data.SqlTypes.SqlBoolean\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ValueType.Equals(Object)\n  commentId: M:System.ValueType.Equals(System.Object)\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  nameWithType: ValueType\n  commentId: T:System.ValueType\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.GetHashCode()\n  commentId: M:System.ValueType.GetHashCode\n- uid: System.Data.SqlTypes.SqlDecimal\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlDecimal\n  fullName: System.Data.SqlTypes.SqlDecimal\n  nameWithType: SqlDecimal\n  commentId: T:System.Data.SqlTypes.SqlDecimal\n- uid: System.Data.SqlTypes.SqlDouble\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlDouble\n  fullName: System.Data.SqlTypes.SqlDouble\n  nameWithType: SqlDouble\n  commentId: T:System.Data.SqlTypes.SqlDouble\n- uid: System.Data.SqlTypes.SqlInt16\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlInt16\n  fullName: System.Data.SqlTypes.SqlInt16\n  nameWithType: SqlInt16\n  commentId: T:System.Data.SqlTypes.SqlInt16\n- uid: System.Data.SqlTypes.SqlInt32\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlInt32\n  fullName: System.Data.SqlTypes.SqlInt32\n  nameWithType: SqlInt32\n  commentId: T:System.Data.SqlTypes.SqlInt32\n- uid: System.Data.SqlTypes.SqlInt64\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlInt64\n  fullName: System.Data.SqlTypes.SqlInt64\n  nameWithType: SqlInt64\n  commentId: T:System.Data.SqlTypes.SqlInt64\n- uid: System.Data.SqlTypes.SqlMoney\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlMoney\n  fullName: System.Data.SqlTypes.SqlMoney\n  nameWithType: SqlMoney\n  commentId: T:System.Data.SqlTypes.SqlMoney\n- uid: System.Data.SqlTypes.SqlSingle\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlSingle\n  fullName: System.Data.SqlTypes.SqlSingle\n  nameWithType: SqlSingle\n  commentId: T:System.Data.SqlTypes.SqlSingle\n- uid: System.Data.SqlTypes.SqlString\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlString\n  fullName: System.Data.SqlTypes.SqlString\n  nameWithType: SqlString\n  commentId: T:System.Data.SqlTypes.SqlString\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.ToString()\n  commentId: M:System.ValueType.ToString\n"}