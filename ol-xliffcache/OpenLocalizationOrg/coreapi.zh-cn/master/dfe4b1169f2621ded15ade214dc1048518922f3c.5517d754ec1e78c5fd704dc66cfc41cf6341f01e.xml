{"nodes":[{"pos":[412,417],"content":"Match","needQuote":true,"nodes":[{"content":"Match","pos":[0,5]}]},{"pos":[2338,2343],"content":"Empty","needQuote":true,"nodes":[{"content":"Empty","pos":[0,5]}]},{"content":"\\n&lt;p&gt;An empty match.&lt;/p&gt;\\n","pos":[3112,3138],"source":"\\n<p>An empty match.</p>\\n"},{"pos":[3474,3480],"content":"Groups","needQuote":true,"nodes":[{"content":"Groups","pos":[0,6]}]},{"content":"\\n&lt;p&gt;The character groups matched by the pattern.&lt;/p&gt;\\n","pos":[4286,4341],"source":"\\n<p>The character groups matched by the pattern.</p>\\n"},{"pos":[4693,4704],"content":"NextMatch()","needQuote":true,"nodes":[{"content":"NextMatch()","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The next regular expression match.&lt;/p&gt;\\n","pos":[5637,5682],"source":"\\n<p>The next regular expression match.</p>\\n"},{"content":"\\n&lt;p&gt;A time-out occurred.&lt;/p&gt;\\n","pos":[5859,5890],"source":"\\n<p>A time-out occurred.</p>\\n"},{"pos":[6234,6248],"content":"Result(String)","needQuote":true,"nodes":[{"content":"Result(String)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The replacement pattern to use.","pos":[7046,7082],"source":"\\n<p>The replacement pattern to use."},{"content":"&lt;/p&gt;\\n","pos":[7083,7089],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The expanded version of the &lt;em&gt;replacement&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[7149,7219],"source":"\\n<p>The expanded version of the <em>replacement</em> parameter.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;replacement&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[7338,7397],"source":"\\n<p>\\n<em>replacement</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;Expansion is not allowed for this pattern.&lt;/p&gt;\\n","pos":[7502,7555],"source":"\\n<p>Expansion is not allowed for this pattern.</p>\\n"},{"pos":[7944,7974],"content":"System.Text.RegularExpressions","needQuote":true,"nodes":[{"content":"System.Text.RegularExpressions","pos":[0,30]}]},{"pos":[8177,8183],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8377,8384],"content":"Capture","needQuote":true,"nodes":[{"content":"Capture","pos":[0,7]}]},{"pos":[8627,8632],"content":"Group","needQuote":true,"nodes":[{"content":"Group","pos":[0,5]}]},{"pos":[8884,8892],"content":"Captures","needQuote":true,"nodes":[{"content":"Captures","pos":[0,8]}]},{"pos":[9167,9171],"content":"Name","needQuote":true,"nodes":[{"content":"Name","pos":[0,4]}]},{"pos":[9437,9444],"content":"Success","needQuote":true,"nodes":[{"content":"Success","pos":[0,7]}]},{"pos":[9721,9726],"content":"Index","needQuote":true,"nodes":[{"content":"Index","pos":[0,5]}]},{"pos":[10004,10010],"content":"Length","needQuote":true,"nodes":[{"content":"Length","pos":[0,6]}]},{"pos":[10290,10295],"content":"Value","needQuote":true,"nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[10575,10585],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[10730,10738],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[10811,10812],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10839,10840],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10935,10943],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[11016,11017],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11044,11045],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11254,11268],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[11387,11393],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[11460,11461],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11511,11517],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11577,11578],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11661,11667],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[11734,11735],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11785,11791],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11851,11852],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12066,12088],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[12236,12242],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[12309,12310],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12360,12366],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[12427,12428]},{"pos":[12483,12489],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12549,12550],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12647,12653],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[12720,12721],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12771,12777],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[12838,12839]},{"pos":[12894,12900],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12960,12961],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13206,13237],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[13403,13418],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[13494,13495],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13545,13551],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[13612,13613]},{"pos":[13668,13674],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13734,13735],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13841,13856],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[13932,13933],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13983,13989],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[14050,14051]},{"pos":[14106,14112],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14172,14173],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14403,14416],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[14517,14528],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[14600,14601],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14628,14629],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14702,14713],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[14785,14786],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14813,14814],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14989,14998],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[15091,15098],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[15166,15167],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15194,15195],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15264,15271],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[15339,15340],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15367,15368],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15543,15560],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[15669,15684],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[15760,15761],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15788,15789],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15866,15881],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[15957,15958],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15985,15986],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16131,16137],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[16315,16320],"content":"Match","needQuote":true,"nodes":[{"content":"Match","pos":[0,5]}]},{"pos":[16567,16582],"content":"GroupCollection","needQuote":true,"nodes":[{"content":"GroupCollection","pos":[0,15]}]},{"pos":[16802,16808],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[16980,17006],"content":"RegexMatchTimeoutException","needQuote":true,"nodes":[{"content":"RegexMatchTimeoutException","pos":[0,26]}]},{"pos":[17257,17278],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[17483,17504],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]}],"content":"items:\n- uid: System.Text.RegularExpressions.Match\n  commentId: T:System.Text.RegularExpressions.Match\n  id: Match\n  parent: System.Text.RegularExpressions\n  children:\n  - System.Text.RegularExpressions.Match.Empty\n  - System.Text.RegularExpressions.Match.Groups\n  - System.Text.RegularExpressions.Match.NextMatch\n  - System.Text.RegularExpressions.Match.Result(System.String)\n  langs:\n  - csharp\n  - vb\n  name: Match\n  fullName: System.Text.RegularExpressions.Match\n  type: Class\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Match\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 46\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Represents the results from a single regular expression match.</p>\\n\"\n  syntax:\n    content: 'public class Match : Group'\n    content.vb: >-\n      Public Class Match\n          Inherits Group\n  seealso:\n  - type: System.Text.RegularExpressions.MatchCollection\n    commentId: T:System.Text.RegularExpressions.MatchCollection\n  - type: System.Text.RegularExpressions.Regex\n    commentId: T:System.Text.RegularExpressions.Regex\n  inheritance:\n  - System.Object\n  - System.Text.RegularExpressions.Capture\n  - System.Text.RegularExpressions.Group\n  inheritedMembers:\n  - System.Text.RegularExpressions.Group.Captures\n  - System.Text.RegularExpressions.Group.Name\n  - System.Text.RegularExpressions.Group.Success\n  - System.Text.RegularExpressions.Capture.Index\n  - System.Text.RegularExpressions.Capture.Length\n  - System.Text.RegularExpressions.Capture.Value\n  - System.Text.RegularExpressions.Capture.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: Match\n- uid: System.Text.RegularExpressions.Match.Empty\n  commentId: P:System.Text.RegularExpressions.Match.Empty\n  id: Empty\n  parent: System.Text.RegularExpressions.Match\n  langs:\n  - csharp\n  - vb\n  name: Empty\n  fullName: System.Text.RegularExpressions.Match.Empty\n  type: Property\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Empty\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 49\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Gets the empty group. All failed matches return this empty match.</p>\\n\"\n  syntax:\n    content: public static Match Empty { get; }\n    content.vb: Public Shared ReadOnly Property Empty As Match\n    parameters: []\n    return:\n      type: System.Text.RegularExpressions.Match\n      description: \"\\n<p>An empty match.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Match.Empty\n- uid: System.Text.RegularExpressions.Match.Groups\n  commentId: P:System.Text.RegularExpressions.Match.Groups\n  id: Groups\n  parent: System.Text.RegularExpressions.Match\n  langs:\n  - csharp\n  - vb\n  name: Groups\n  fullName: System.Text.RegularExpressions.Match.Groups\n  type: Property\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Groups\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 50\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Gets a collection of groups matched by the regular expression.</p>\\n\"\n  syntax:\n    content: public virtual GroupCollection Groups { get; }\n    content.vb: Public Overridable ReadOnly Property Groups As GroupCollection\n    parameters: []\n    return:\n      type: System.Text.RegularExpressions.GroupCollection\n      description: \"\\n<p>The character groups matched by the pattern.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: Match.Groups\n- uid: System.Text.RegularExpressions.Match.NextMatch\n  commentId: M:System.Text.RegularExpressions.Match.NextMatch\n  id: NextMatch\n  parent: System.Text.RegularExpressions.Match\n  langs:\n  - csharp\n  - vb\n  name: NextMatch()\n  fullName: System.Text.RegularExpressions.Match.NextMatch()\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NextMatch\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 51\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Returns a new <xref href=\\\"System.Text.RegularExpressions.Match\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object with the results for the next match, starting at the position at which the last match ended (at the character after the last matched character).</p>\\n\"\n  syntax:\n    content: public Match NextMatch()\n    content.vb: Public Function NextMatch As Match\n    return:\n      type: System.Text.RegularExpressions.Match\n      description: \"\\n<p>The next regular expression match.</p>\\n\"\n  exceptions:\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: \"\\n<p>A time-out occurred.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Match.NextMatch()\n- uid: System.Text.RegularExpressions.Match.Result(System.String)\n  commentId: M:System.Text.RegularExpressions.Match.Result(System.String)\n  id: Result(System.String)\n  parent: System.Text.RegularExpressions.Match\n  langs:\n  - csharp\n  - vb\n  name: Result(String)\n  fullName: System.Text.RegularExpressions.Match.Result(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Result\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 52\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Returns the expansion of the specified replacement pattern. </p>\\n\"\n  syntax:\n    content: public virtual string Result(string replacement)\n    content.vb: Public Overridable Function Result(replacement As String) As String\n    parameters:\n    - id: replacement\n      type: System.String\n      description: \"\\n<p>The replacement pattern to use. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The expanded version of the <em>replacement</em> parameter.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>replacement</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>Expansion is not allowed for this pattern.</p>\\n\"\n  seealso:\n  - type: System.Text.RegularExpressions.Regex.Replace(System.String,System.String)\n    commentId: M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Match.Result(String)\nreferences:\n- uid: System.Text.RegularExpressions\n  isExternal: false\n  name: System.Text.RegularExpressions\n  fullName: System.Text.RegularExpressions\n  commentId: N:System.Text.RegularExpressions\n  nameWithType: System.Text.RegularExpressions\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Text.RegularExpressions.Capture\n  parent: System.Text.RegularExpressions\n  isExternal: false\n  name: Capture\n  fullName: System.Text.RegularExpressions.Capture\n  commentId: T:System.Text.RegularExpressions.Capture\n  nameWithType: Capture\n- uid: System.Text.RegularExpressions.Group\n  parent: System.Text.RegularExpressions\n  isExternal: false\n  name: Group\n  fullName: System.Text.RegularExpressions.Group\n  commentId: T:System.Text.RegularExpressions.Group\n  nameWithType: Group\n- uid: System.Text.RegularExpressions.Group.Captures\n  parent: System.Text.RegularExpressions.Group\n  isExternal: false\n  name: Captures\n  fullName: System.Text.RegularExpressions.Group.Captures\n  commentId: P:System.Text.RegularExpressions.Group.Captures\n  nameWithType: Group.Captures\n- uid: System.Text.RegularExpressions.Group.Name\n  parent: System.Text.RegularExpressions.Group\n  isExternal: false\n  name: Name\n  fullName: System.Text.RegularExpressions.Group.Name\n  commentId: P:System.Text.RegularExpressions.Group.Name\n  nameWithType: Group.Name\n- uid: System.Text.RegularExpressions.Group.Success\n  parent: System.Text.RegularExpressions.Group\n  isExternal: false\n  name: Success\n  fullName: System.Text.RegularExpressions.Group.Success\n  commentId: P:System.Text.RegularExpressions.Group.Success\n  nameWithType: Group.Success\n- uid: System.Text.RegularExpressions.Capture.Index\n  parent: System.Text.RegularExpressions.Capture\n  isExternal: false\n  name: Index\n  fullName: System.Text.RegularExpressions.Capture.Index\n  commentId: P:System.Text.RegularExpressions.Capture.Index\n  nameWithType: Capture.Index\n- uid: System.Text.RegularExpressions.Capture.Length\n  parent: System.Text.RegularExpressions.Capture\n  isExternal: false\n  name: Length\n  fullName: System.Text.RegularExpressions.Capture.Length\n  commentId: P:System.Text.RegularExpressions.Capture.Length\n  nameWithType: Capture.Length\n- uid: System.Text.RegularExpressions.Capture.Value\n  parent: System.Text.RegularExpressions.Capture\n  isExternal: false\n  name: Value\n  fullName: System.Text.RegularExpressions.Capture.Value\n  commentId: P:System.Text.RegularExpressions.Capture.Value\n  nameWithType: Capture.Value\n- uid: System.Text.RegularExpressions.Capture.ToString\n  parent: System.Text.RegularExpressions.Capture\n  isExternal: false\n  name: ToString()\n  fullName: System.Text.RegularExpressions.Capture.ToString()\n  spec.csharp:\n  - uid: System.Text.RegularExpressions.Capture.ToString\n    name: ToString\n    fullName: System.Text.RegularExpressions.Capture.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.RegularExpressions.Capture.ToString\n    name: ToString\n    fullName: System.Text.RegularExpressions.Capture.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Text.RegularExpressions.Capture.ToString\n  nameWithType: Capture.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Text.RegularExpressions.Match\n  parent: System.Text.RegularExpressions\n  isExternal: false\n  name: Match\n  fullName: System.Text.RegularExpressions.Match\n  commentId: T:System.Text.RegularExpressions.Match\n  nameWithType: Match\n- uid: System.Text.RegularExpressions.GroupCollection\n  parent: System.Text.RegularExpressions\n  isExternal: false\n  name: GroupCollection\n  fullName: System.Text.RegularExpressions.GroupCollection\n  commentId: T:System.Text.RegularExpressions.GroupCollection\n  nameWithType: GroupCollection\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Text.RegularExpressions.RegexMatchTimeoutException\n  isExternal: false\n  name: RegexMatchTimeoutException\n  fullName: System.Text.RegularExpressions.RegexMatchTimeoutException\n  commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n  nameWithType: RegexMatchTimeoutException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n"}