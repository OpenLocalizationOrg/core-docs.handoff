{"nodes":[{"pos":[365,378],"content":"DispatchProxy","needQuote":true,"nodes":[{"content":"DispatchProxy","pos":[0,13]}]},{"pos":[1589,1604],"content":"DispatchProxy()","needQuote":true,"nodes":[{"content":"DispatchProxy()","pos":[0,15]}]},{"pos":[2454,2473],"content":"Create<T, TProxy>()","needQuote":true,"nodes":[{"content":"Create&lt;T, TProxy&gt;()","pos":[0,19],"source":"Create<T, TProxy>()"}]},{"pos":[3799,3827],"content":"Invoke(MethodInfo, Object[])","needQuote":true,"nodes":[{"content":"Invoke(MethodInfo, Object[])","pos":[0,28]}]},{"pos":[5141,5158],"content":"System.Reflection","needQuote":true,"nodes":[{"content":"System.Reflection","pos":[0,17]}]},{"pos":[5318,5324],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[5493,5503],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[5632,5640],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[5743,5744],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[5791,5792],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[5882,5890],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[5993,5994],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6041,6042],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6224,6238],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[6395,6401],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[6500,6501],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6571,6577],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[6662,6663],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6766,6772],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[6871,6872],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6942,6948],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7033,7034],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7244,7266],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[7460,7466],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7565,7566],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7636,7642],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[7728,7729]},{"pos":[7807,7813],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7898,7899],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8016,8022],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8121,8122],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8192,8198],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[8284,8285]},{"pos":[8363,8369],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8454,8455],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8683,8714],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[8935,8950],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[9067,9068],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9138,9144],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9230,9231]},{"pos":[9309,9315],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9400,9401],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9527,9542],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[9659,9660],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9730,9736],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9822,9823]},{"pos":[9901,9907],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9992,9993],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10155,10168],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[10306,10317],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[10426,10427],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10474,10475],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10568,10579],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[10688,10689],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10736,10737],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10891,10900],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[11026,11033],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[11134,11135],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11182,11183],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11272,11279],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[11380,11381],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11428,11429],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11599,11616],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[11766,11781],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[11898,11899],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11946,11947],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12044,12059],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[12176,12177],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12224,12225],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12326,12332],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[12431,12432],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[12502,12503],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[12672,12682],"content":"MethodInfo","needQuote":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[12782,12790],"content":"Object[]","needQuote":true,"nodes":[{"content":"Object[]","pos":[0,8]}]},{"pos":[12971,12977],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":"[]","pos":[13063,13065]},{"pos":[13153,13159],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13244,13246],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]}],"content":"items:\n- uid: System.Reflection.DispatchProxy\n  commentId: T:System.Reflection.DispatchProxy\n  id: DispatchProxy\n  parent: System.Reflection\n  children:\n  - System.Reflection.DispatchProxy.#ctor\n  - System.Reflection.DispatchProxy.Create``2\n  - System.Reflection.DispatchProxy.Invoke(System.Reflection.MethodInfo,System.Object[])\n  langs:\n  - csharp\n  - vb\n  name: DispatchProxy\n  nameWithType: DispatchProxy\n  fullName: System.Reflection.DispatchProxy\n  type: Class\n  source:\n    remote:\n      path: src/System.Reflection.DispatchProxy/ref/System.Reflection.DispatchProxy.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DispatchProxy\n    path: src/System.Reflection.DispatchProxy/ref/System.Reflection.DispatchProxy.cs\n    startLine: 10\n  assemblies:\n  - System.Reflection.DispatchProxy\n  namespace: System.Reflection\n  syntax:\n    content: public abstract class DispatchProxy\n    content.vb: Public MustInherit Class DispatchProxy\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n- uid: System.Reflection.DispatchProxy.#ctor\n  commentId: M:System.Reflection.DispatchProxy.#ctor\n  id: '#ctor'\n  parent: System.Reflection.DispatchProxy\n  langs:\n  - csharp\n  - vb\n  name: DispatchProxy()\n  nameWithType: DispatchProxy.DispatchProxy()\n  fullName: System.Reflection.DispatchProxy.DispatchProxy()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Reflection.DispatchProxy/ref/System.Reflection.DispatchProxy.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Reflection.DispatchProxy/ref/System.Reflection.DispatchProxy.cs\n    startLine: 12\n  assemblies:\n  - System.Reflection.DispatchProxy\n  namespace: System.Reflection\n  syntax:\n    content: protected DispatchProxy()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n- uid: System.Reflection.DispatchProxy.Create``2\n  commentId: M:System.Reflection.DispatchProxy.Create``2\n  id: Create``2\n  parent: System.Reflection.DispatchProxy\n  langs:\n  - csharp\n  - vb\n  name: Create<T, TProxy>()\n  nameWithType: DispatchProxy.Create<T, TProxy>()\n  fullName: System.Reflection.DispatchProxy.Create<T, TProxy>()\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection.DispatchProxy/ref/System.Reflection.DispatchProxy.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Create\n    path: src/System.Reflection.DispatchProxy/ref/System.Reflection.DispatchProxy.cs\n    startLine: 13\n  assemblies:\n  - System.Reflection.DispatchProxy\n  namespace: System.Reflection\n  syntax:\n    content: 'public static T Create<T, TProxy>()where TProxy : DispatchProxy'\n    content.vb: Public Shared Function Create(Of T, TProxy As DispatchProxy) As T\n    typeParameters:\n    - id: T\n    - id: TProxy\n    return:\n      type: '{T}'\n  nameWithType.vb: DispatchProxy.Create(Of T, TProxy)()\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Reflection.DispatchProxy.Create(Of T, TProxy)()\n  name.vb: Create(Of T, TProxy)()\n- uid: System.Reflection.DispatchProxy.Invoke(System.Reflection.MethodInfo,System.Object[])\n  commentId: M:System.Reflection.DispatchProxy.Invoke(System.Reflection.MethodInfo,System.Object[])\n  id: Invoke(System.Reflection.MethodInfo,System.Object[])\n  parent: System.Reflection.DispatchProxy\n  langs:\n  - csharp\n  - vb\n  name: Invoke(MethodInfo, Object[])\n  nameWithType: DispatchProxy.Invoke(MethodInfo, Object[])\n  fullName: System.Reflection.DispatchProxy.Invoke(System.Reflection.MethodInfo, System.Object[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection.DispatchProxy/ref/System.Reflection.DispatchProxy.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Invoke\n    path: src/System.Reflection.DispatchProxy/ref/System.Reflection.DispatchProxy.cs\n    startLine: 14\n  assemblies:\n  - System.Reflection.DispatchProxy\n  namespace: System.Reflection\n  syntax:\n    content: protected abstract object Invoke(MethodInfo targetMethod, object[] args)\n    content.vb: Protected MustOverride Function Invoke(targetMethod As MethodInfo, args As Object()) As Object\n    parameters:\n    - id: targetMethod\n      type: System.Reflection.MethodInfo\n    - id: args\n      type: System.Object[]\n    return:\n      type: System.Object\n  nameWithType.vb: DispatchProxy.Invoke(MethodInfo, Object())\n  modifiers.csharp:\n  - protected\n  - abstract\n  modifiers.vb:\n  - Protected\n  - MustOverride\n  fullName.vb: System.Reflection.DispatchProxy.Invoke(System.Reflection.MethodInfo, System.Object())\n  name.vb: Invoke(MethodInfo, Object())\nreferences:\n- uid: System.Reflection\n  commentId: N:System.Reflection\n  isExternal: false\n  name: System.Reflection\n  nameWithType: System.Reflection\n  fullName: System.Reflection\n- uid: System.Object\n  commentId: T:System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Object.ToString\n  commentId: M:System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    nameWithType: Object.ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    nameWithType: Object.ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.Equals(System.Object)\n  commentId: M:System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.Equals(System.Object,System.Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    nameWithType: Object.ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    nameWithType: Object.ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.GetHashCode\n  commentId: M:System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    nameWithType: Object.GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    nameWithType: Object.GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.GetType\n  commentId: M:System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    nameWithType: Object.GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    nameWithType: Object.GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.MemberwiseClone\n  commentId: M:System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    nameWithType: Object.MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    nameWithType: Object.MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System\n  commentId: N:System\n  isExternal: false\n  name: System\n  nameWithType: System\n  fullName: System\n- uid: '{T}'\n  commentId: '!:T'\n  definition: T\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: T\n  isExternal: false\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Reflection.MethodInfo\n  commentId: T:System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Object[]\n  name: Object[]\n  nameWithType: Object[]\n  fullName: System.Object[]\n  nameWithType.vb: Object()\n  fullname.vb: System.Object()\n  name.vb: Object()\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ()\n    nameWithType: ()\n    fullName: ()\n"}