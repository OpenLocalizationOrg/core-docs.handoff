{"nodes":[{"pos":[337,357],"content":"ConditionalAttribute","needQuote":true,"nodes":[{"content":"ConditionalAttribute","pos":[0,20]}]},{"pos":[2029,2042],"content":"AllowMultiple","needQuote":true,"nodes":[{"content":"AllowMultiple","pos":[0,13]}]},{"pos":[2491,2519],"content":"ConditionalAttribute(String)","needQuote":true,"nodes":[{"content":"ConditionalAttribute(String)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;A string that specifies the case-sensitive conditional compilation symbol that is associated with the attribute.","pos":[3346,3463],"source":"\\n<p>A string that specifies the case-sensitive conditional compilation symbol that is associated with the attribute."},{"content":"&lt;/p&gt;\\n","pos":[3464,3470],"source":" </p>\\n"},{"pos":[3837,3852],"content":"ConditionString","needQuote":true,"nodes":[{"content":"ConditionString","pos":[0,15]}]},{"pos":[5112,5130],"content":"System.Diagnostics","needQuote":true,"nodes":[{"content":"System.Diagnostics","pos":[0,18]}]},{"pos":[5297,5303],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[5451,5460],"content":"Attribute","needQuote":true,"nodes":[{"content":"Attribute","pos":[0,9]}]},{"pos":[5648,5662],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[5787,5793],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[5842,5843],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[5893,5899],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[5959,5960],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6046,6052],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[6101,6102],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6152,6158],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[6218,6219],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6422,6435],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[6542,6553],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[6607,6608],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6635,6636],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6712,6723],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[6777,6778],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6805,6806],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6988,6998],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[7093,7101],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[7170,7171],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7198,7199],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7269,7277],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[7346,7347],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7374,7375],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7572,7594],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[7742,7748],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7815,7816],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7866,7872],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[7933,7934]},{"pos":[7989,7995],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8055,8056],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8153,8159],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8226,8227],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8277,8283],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[8344,8345]},{"pos":[8400,8406],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8466,8467],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8712,8743],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[8909,8924],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[9000,9001],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9051,9057],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9118,9119]},{"pos":[9174,9180],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9240,9241],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9347,9362],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[9438,9439],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9489,9495],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9556,9557]},{"pos":[9612,9618],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9678,9679],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9905,9914],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[10007,10014],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[10082,10083],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10110,10111],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10180,10187],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[10255,10256],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10283,10284],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10459,10476],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[10585,10600],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[10676,10677],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10704,10705],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10782,10797],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[10873,10874],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10901,10902],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11047,11053],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[11184,11190],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]}],"content":"items:\n- uid: System.Diagnostics.ConditionalAttribute\n  commentId: T:System.Diagnostics.ConditionalAttribute\n  id: ConditionalAttribute\n  parent: System.Diagnostics\n  children:\n  - System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n  - System.Diagnostics.ConditionalAttribute.ConditionString\n  langs:\n  - csharp\n  - vb\n  name: ConditionalAttribute\n  fullName: System.Diagnostics.ConditionalAttribute\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/ConditionalAttribute.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ConditionalAttribute\n    path: src/mscorlib/src/System/Diagnostics/ConditionalAttribute.cs\n    startLine: 7\n  assemblies:\n  - System.Runtime\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Indicates to compilers that a method call or attribute should be ignored unless a specified conditional compilation symbol is defined.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, AllowMultiple = true)]\n\n      [ComVisible(true)]\n\n      public sealed class ConditionalAttribute : Attribute, _Attribute\n    content.vb: >-\n      <Serializable>\n\n      <AttributeUsage(AttributeTargets.Class Or AttributeTargets.Method, AllowMultiple:=True)>\n\n      <ComVisible(True)>\n\n      Public NotInheritable Class ConditionalAttribute\n          Inherits Attribute\n          Implements _Attribute\n  inheritance:\n  - System.Object\n  - System.Attribute\n  inheritedMembers:\n  - System.Attribute.Equals(System.Object)\n  - System.Attribute.GetHashCode\n  - System.Object.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  attributes:\n  - type: System.AttributeUsageAttribute\n    ctor: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)\n    arguments:\n    - type: System.AttributeTargets\n      value: 68\n    namedArguments:\n    - name: AllowMultiple\n      type: System.Boolean\n      value: true\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: ConditionalAttribute\n- uid: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n  commentId: M:System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Diagnostics.ConditionalAttribute\n  langs:\n  - csharp\n  - vb\n  name: ConditionalAttribute(String)\n  fullName: System.Diagnostics.ConditionalAttribute.ConditionalAttribute(System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/ConditionalAttribute.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Diagnostics/ConditionalAttribute.cs\n    startLine: 12\n  assemblies:\n  - System.Runtime\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Diagnostics.ConditionalAttribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public ConditionalAttribute(string conditionString)\n    content.vb: Public Sub New(conditionString As String)\n    parameters:\n    - id: conditionString\n      type: System.String\n      description: \"\\n<p>A string that specifies the case-sensitive conditional compilation symbol that is associated with the attribute. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ConditionalAttribute.ConditionalAttribute(String)\n- uid: System.Diagnostics.ConditionalAttribute.ConditionString\n  commentId: P:System.Diagnostics.ConditionalAttribute.ConditionString\n  id: ConditionString\n  parent: System.Diagnostics.ConditionalAttribute\n  langs:\n  - csharp\n  - vb\n  name: ConditionString\n  fullName: System.Diagnostics.ConditionalAttribute.ConditionString\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/ConditionalAttribute.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ConditionString\n    path: src/mscorlib/src/System/Diagnostics/ConditionalAttribute.cs\n    startLine: 17\n  assemblies:\n  - System.Runtime\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets the conditional compilation symbol that is associated with the <xref href=\\\"System.Diagnostics.ConditionalAttribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> attribute.</p>\\n\"\n  syntax:\n    content: public string ConditionString { get; }\n    content.vb: Public ReadOnly Property ConditionString As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>A string that specifies the case-sensitive conditional compilation symbol that is associated with the <xref href=\\\"System.Diagnostics.ConditionalAttribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> attribute.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ConditionalAttribute.ConditionString\nreferences:\n- uid: System.Diagnostics\n  isExternal: false\n  name: System.Diagnostics\n  fullName: System.Diagnostics\n  nameWithType: System.Diagnostics\n  commentId: N:System.Diagnostics\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Attribute\n  parent: System\n  isExternal: false\n  name: Attribute\n  fullName: System.Attribute\n  nameWithType: Attribute\n  commentId: T:System.Attribute\n- uid: System.Attribute.Equals(System.Object)\n  parent: System.Attribute\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Attribute.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Attribute.Equals(System.Object)\n    name: Equals\n    fullName: System.Attribute.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Attribute.Equals(System.Object)\n    name: Equals\n    fullName: System.Attribute.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Attribute.Equals(Object)\n  commentId: M:System.Attribute.Equals(System.Object)\n- uid: System.Attribute.GetHashCode\n  parent: System.Attribute\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.Attribute.GetHashCode()\n  spec.csharp:\n  - uid: System.Attribute.GetHashCode\n    name: GetHashCode\n    fullName: System.Attribute.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Attribute.GetHashCode\n    name: GetHashCode\n    fullName: System.Attribute.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Attribute.GetHashCode()\n  commentId: M:System.Attribute.GetHashCode\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n"}