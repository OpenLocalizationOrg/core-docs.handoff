{"nodes":[{"pos":[718,734],"content":"WindowsPrincipal","needQuote":true,"nodes":[{"content":"WindowsPrincipal","pos":[0,16]}]},{"pos":[3952,3985],"content":"WindowsPrincipal(WindowsIdentity)","needQuote":true,"nodes":[{"content":"WindowsPrincipal(WindowsIdentity)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;ntIdentity&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[5354,5406],"source":"\\n<p>\\n<em>ntIdentity</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[5407,5413],"source":" </p>\\n"},{"pos":[5769,5777],"content":"Identity","needQuote":true,"nodes":[{"content":"Identity","pos":[0,8]}]},{"pos":[7197,7212],"content":"IsInRole(Int32)","needQuote":true,"nodes":[{"content":"IsInRole(Int32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The RID of the Windows user group in which to check for the principal’s membership status.","pos":[8066,8161],"source":"\\n<p>The RID of the Windows user group in which to check for the principal’s membership status."},{"content":"&lt;/p&gt;\\n","pos":[8162,8168],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the current principal is a member of the specified Windows user group, that is, in a particular role; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[8229,8403],"source":"\\n<p>\\n<strong>true</strong> if the current principal is a member of the specified Windows user group, that is, in a particular role; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[8907,8935],"content":"IsInRole(SecurityIdentifier)","needQuote":true,"nodes":[{"content":"IsInRole(SecurityIdentifier)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the current principal is a member of the specified Windows user group; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[10105,10248],"source":"\\n<p>\\n<strong>true</strong> if the current principal is a member of the specified Windows user group; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;sid&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[10367,10418],"source":"\\n<p>\\n<em>sid</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;Windows returned a Win32 error.&lt;/p&gt;\\n","pos":[10533,10575],"source":"\\n<p>Windows returned a Win32 error.</p>\\n"},{"pos":[11092,11120],"content":"IsInRole(WindowsBuiltInRole)","needQuote":true,"nodes":[{"content":"IsInRole(WindowsBuiltInRole)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the current principal is a member of the specified Windows user group; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[12342,12485],"source":"\\n<p>\\n<strong>true</strong> if the current principal is a member of the specified Windows user group; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[13173,13189],"content":"IsInRole(String)","needQuote":true,"nodes":[{"content":"IsInRole(String)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The name of the Windows user group for which to check membership.","pos":[14028,14098],"source":"\\n<p>The name of the Windows user group for which to check membership."},{"content":"&lt;/p&gt;\\n","pos":[14099,14105],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the current principal is a member of the specified Windows user group; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[14166,14309],"source":"\\n<p>\\n<strong>true</strong> if the current principal is a member of the specified Windows user group; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[14852,14877],"content":"System.Security.Principal","needQuote":true,"nodes":[{"content":"System.Security.Principal","pos":[0,25]}]},{"pos":[15065,15071],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15257,15272],"content":"ClaimsPrincipal","needQuote":true,"nodes":[{"content":"ClaimsPrincipal","pos":[0,15]}]},{"pos":[15518,15528],"content":"IPrincipal","needQuote":true,"nodes":[{"content":"IPrincipal","pos":[0,10]}]},{"pos":[15786,15793],"content":"Clone()","needQuote":true,"nodes":[{"content":"Clone()","pos":[0,7]}]},{"pos":[15932,15937],"content":"Clone","needQuote":true,"nodes":[{"content":"Clone","pos":[0,5]}]},{"pos":[16007,16008],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16035,16036],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16128,16133],"content":"Clone","needQuote":true,"nodes":[{"content":"Clone","pos":[0,5]}]},{"pos":[16203,16204],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16231,16232],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16516,16550],"content":"CreateClaimsIdentity(BinaryReader)","needQuote":true,"nodes":[{"content":"CreateClaimsIdentity(BinaryReader)","pos":[0,34]}]},{"pos":[16765,16785],"content":"CreateClaimsIdentity","needQuote":true,"nodes":[{"content":"CreateClaimsIdentity","pos":[0,20]}]},{"pos":[16870,16871],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16930,16942],"content":"BinaryReader","needQuote":true,"nodes":[{"content":"BinaryReader","pos":[0,12]}]},{"pos":[17011,17012],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17143,17163],"content":"CreateClaimsIdentity","needQuote":true,"nodes":[{"content":"CreateClaimsIdentity","pos":[0,20]}]},{"pos":[17248,17249],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17308,17320],"content":"BinaryReader","needQuote":true,"nodes":[{"content":"BinaryReader","pos":[0,12]}]},{"pos":[17389,17390],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17803,17853],"content":"GetObjectData(SerializationInfo, StreamingContext)","needQuote":true,"nodes":[{"content":"GetObjectData(SerializationInfo, StreamingContext)","pos":[0,50]}]},{"pos":[18195,18208],"content":"GetObjectData","needQuote":true,"nodes":[{"content":"GetObjectData","pos":[0,13]}]},{"pos":[18307,18308],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18391,18408],"content":"SerializationInfo","needQuote":true,"nodes":[{"content":"SerializationInfo","pos":[0,17]}]},{"content":",","pos":[18502,18503]},{"pos":[18590,18606],"content":"StreamingContext","needQuote":true,"nodes":[{"content":"StreamingContext","pos":[0,16]}]},{"pos":[18698,18699],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18893,18906],"content":"GetObjectData","needQuote":true,"nodes":[{"content":"GetObjectData","pos":[0,13]}]},{"pos":[19005,19006],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19089,19106],"content":"SerializationInfo","needQuote":true,"nodes":[{"content":"SerializationInfo","pos":[0,17]}]},{"content":",","pos":[19200,19201]},{"pos":[19288,19304],"content":"StreamingContext","needQuote":true,"nodes":[{"content":"StreamingContext","pos":[0,16]}]},{"pos":[19396,19397],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19833,19860],"content":"AddIdentity(ClaimsIdentity)","needQuote":true,"nodes":[{"content":"AddIdentity(ClaimsIdentity)","pos":[0,27]}]},{"pos":[20087,20098],"content":"AddIdentity","needQuote":true,"nodes":[{"content":"AddIdentity","pos":[0,11]}]},{"pos":[20174,20175],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20249,20263],"content":"ClaimsIdentity","needQuote":true,"nodes":[{"content":"ClaimsIdentity","pos":[0,14]}]},{"pos":[20326,20327],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20464,20475],"content":"AddIdentity","needQuote":true,"nodes":[{"content":"AddIdentity","pos":[0,11]}]},{"pos":[20551,20552],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20626,20640],"content":"ClaimsIdentity","needQuote":true,"nodes":[{"content":"ClaimsIdentity","pos":[0,14]}]},{"pos":[20703,20704],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21101,21143],"content":"AddIdentities(IEnumerable<ClaimsIdentity>)","needQuote":true,"nodes":[{"content":"AddIdentities(IEnumerable&lt;ClaimsIdentity&gt;)","pos":[0,42],"source":"AddIdentities(IEnumerable<ClaimsIdentity>)"}]},{"pos":[21661,21674],"content":"AddIdentities","needQuote":true,"nodes":[{"content":"AddIdentities","pos":[0,13]}]},{"pos":[21752,21753],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21830,21841],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[21926,21927],"content":"<","needQuote":true,"nodes":[]},{"pos":[22001,22015],"content":"ClaimsIdentity","needQuote":true,"nodes":[{"content":"ClaimsIdentity","pos":[0,14]}]},{"pos":[22110,22111],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22290,22303],"content":"AddIdentities","needQuote":true,"nodes":[{"content":"AddIdentities","pos":[0,13]}]},{"pos":[22381,22382],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22459,22470],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[22556,22559]},{"pos":[22640,22654],"content":"ClaimsIdentity","needQuote":true,"nodes":[{"content":"ClaimsIdentity","pos":[0,14]}]},{"pos":[22717,22718],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22745,22746],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23244,23269],"content":"FindAll(Predicate<Claim>)","needQuote":true,"nodes":[{"content":"FindAll(Predicate&lt;Claim&gt;)","pos":[0,25],"source":"FindAll(Predicate<Claim>)"}]},{"pos":[23659,23666],"content":"FindAll","needQuote":true,"nodes":[{"content":"FindAll","pos":[0,7]}]},{"pos":[23738,23739],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23794,23803],"content":"Predicate","needQuote":true,"nodes":[{"content":"Predicate","pos":[0,9]}]},{"pos":[23866,23867],"content":"<","needQuote":true,"nodes":[]},{"pos":[23932,23937],"content":"Claim","needQuote":true,"nodes":[{"content":"Claim","pos":[0,5]}]},{"pos":[24023,24024],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24166,24173],"content":"FindAll","needQuote":true,"nodes":[{"content":"FindAll","pos":[0,7]}]},{"pos":[24245,24246],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24301,24310],"content":"Predicate","needQuote":true,"nodes":[{"content":"Predicate","pos":[0,9]}]},{"content":"(Of","pos":[24374,24377]},{"pos":[24449,24454],"content":"Claim","needQuote":true,"nodes":[{"content":"Claim","pos":[0,5]}]},{"pos":[24508,24509],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24536,24537],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24931,24946],"content":"FindAll(String)","needQuote":true,"nodes":[{"content":"FindAll(String)","pos":[0,15]}]},{"pos":[25117,25124],"content":"FindAll","needQuote":true,"nodes":[{"content":"FindAll","pos":[0,7]}]},{"pos":[25196,25197],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25247,25253],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[25313,25314],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25423,25430],"content":"FindAll","needQuote":true,"nodes":[{"content":"FindAll","pos":[0,7]}]},{"pos":[25502,25503],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25553,25559],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[25619,25620],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25942,25969],"content":"FindFirst(Predicate<Claim>)","needQuote":true,"nodes":[{"content":"FindFirst(Predicate&lt;Claim&gt;)","pos":[0,27],"source":"FindFirst(Predicate<Claim>)"}]},{"pos":[26367,26376],"content":"FindFirst","needQuote":true,"nodes":[{"content":"FindFirst","pos":[0,9]}]},{"pos":[26450,26451],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26506,26515],"content":"Predicate","needQuote":true,"nodes":[{"content":"Predicate","pos":[0,9]}]},{"pos":[26578,26579],"content":"<","needQuote":true,"nodes":[]},{"pos":[26644,26649],"content":"Claim","needQuote":true,"nodes":[{"content":"Claim","pos":[0,5]}]},{"pos":[26735,26736],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26880,26889],"content":"FindFirst","needQuote":true,"nodes":[{"content":"FindFirst","pos":[0,9]}]},{"pos":[26963,26964],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27019,27028],"content":"Predicate","needQuote":true,"nodes":[{"content":"Predicate","pos":[0,9]}]},{"content":"(Of","pos":[27092,27095]},{"pos":[27167,27172],"content":"Claim","needQuote":true,"nodes":[{"content":"Claim","pos":[0,5]}]},{"pos":[27226,27227],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27254,27255],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27657,27674],"content":"FindFirst(String)","needQuote":true,"nodes":[{"content":"FindFirst(String)","pos":[0,17]}]},{"pos":[27849,27858],"content":"FindFirst","needQuote":true,"nodes":[{"content":"FindFirst","pos":[0,9]}]},{"pos":[27932,27933],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27983,27989],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[28049,28050],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28161,28170],"content":"FindFirst","needQuote":true,"nodes":[{"content":"FindFirst","pos":[0,9]}]},{"pos":[28244,28245],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28295,28301],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[28361,28362],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28687,28713],"content":"HasClaim(Predicate<Claim>)","needQuote":true,"nodes":[{"content":"HasClaim(Predicate&lt;Claim&gt;)","pos":[0,26],"source":"HasClaim(Predicate<Claim>)"}]},{"pos":[29107,29115],"content":"HasClaim","needQuote":true,"nodes":[{"content":"HasClaim","pos":[0,8]}]},{"pos":[29188,29189],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29244,29253],"content":"Predicate","needQuote":true,"nodes":[{"content":"Predicate","pos":[0,9]}]},{"pos":[29316,29317],"content":"<","needQuote":true,"nodes":[]},{"pos":[29382,29387],"content":"Claim","needQuote":true,"nodes":[{"content":"Claim","pos":[0,5]}]},{"pos":[29473,29474],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29617,29625],"content":"HasClaim","needQuote":true,"nodes":[{"content":"HasClaim","pos":[0,8]}]},{"pos":[29698,29699],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29754,29763],"content":"Predicate","needQuote":true,"nodes":[{"content":"Predicate","pos":[0,9]}]},{"content":"(Of","pos":[29827,29830]},{"pos":[29902,29907],"content":"Claim","needQuote":true,"nodes":[{"content":"Claim","pos":[0,5]}]},{"pos":[29961,29962],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29989,29990],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30402,30426],"content":"HasClaim(String, String)","needQuote":true,"nodes":[{"content":"HasClaim(String, String)","pos":[0,24]}]},{"pos":[30628,30636],"content":"HasClaim","needQuote":true,"nodes":[{"content":"HasClaim","pos":[0,8]}]},{"pos":[30709,30710],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30760,30766],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[30827,30828]},{"pos":[30883,30889],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[30949,30950],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31074,31082],"content":"HasClaim","needQuote":true,"nodes":[{"content":"HasClaim","pos":[0,8]}]},{"pos":[31155,31156],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31206,31212],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[31273,31274]},{"pos":[31329,31335],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[31395,31396],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31716,31737],"content":"WriteTo(BinaryWriter)","needQuote":true,"nodes":[{"content":"WriteTo(BinaryWriter)","pos":[0,21]}]},{"pos":[31926,31933],"content":"WriteTo","needQuote":true,"nodes":[{"content":"WriteTo","pos":[0,7]}]},{"pos":[32005,32006],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32065,32077],"content":"BinaryWriter","needQuote":true,"nodes":[{"content":"BinaryWriter","pos":[0,12]}]},{"pos":[32146,32147],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32265,32272],"content":"WriteTo","needQuote":true,"nodes":[{"content":"WriteTo","pos":[0,7]}]},{"pos":[32344,32345],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32404,32416],"content":"BinaryWriter","needQuote":true,"nodes":[{"content":"BinaryWriter","pos":[0,12]}]},{"pos":[32485,32486],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32811,32840],"content":"WriteTo(BinaryWriter, Byte[])","needQuote":true,"nodes":[{"content":"WriteTo(BinaryWriter, Byte[])","pos":[0,29]}]},{"pos":[33200,33207],"content":"WriteTo","needQuote":true,"nodes":[{"content":"WriteTo","pos":[0,7]}]},{"pos":[33279,33280],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33339,33351],"content":"BinaryWriter","needQuote":true,"nodes":[{"content":"BinaryWriter","pos":[0,12]}]},{"content":",","pos":[33421,33422]},{"pos":[33475,33479],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[33538,33540]},{"pos":[33571,33572],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33704,33711],"content":"WriteTo","needQuote":true,"nodes":[{"content":"WriteTo","pos":[0,7]}]},{"pos":[33783,33784],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33843,33855],"content":"BinaryWriter","needQuote":true,"nodes":[{"content":"BinaryWriter","pos":[0,12]}]},{"content":",","pos":[33925,33926]},{"pos":[33979,33983],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[34041,34043],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[34071,34072],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34463,34486],"content":"PrimaryIdentitySelector","needQuote":true,"nodes":[{"content":"PrimaryIdentitySelector","pos":[0,23]}]},{"pos":[34843,34866],"content":"ClaimsPrincipalSelector","needQuote":true,"nodes":[{"content":"ClaimsPrincipalSelector","pos":[0,23]}]},{"pos":[35223,35246],"content":"CustomSerializationData","needQuote":true,"nodes":[{"content":"CustomSerializationData","pos":[0,23]}]},{"pos":[35586,35592],"content":"Claims","needQuote":true,"nodes":[{"content":"Claims","pos":[0,6]}]},{"pos":[35882,35889],"content":"Current","needQuote":true,"nodes":[{"content":"Current","pos":[0,7]}]},{"pos":[36185,36195],"content":"Identities","needQuote":true,"nodes":[{"content":"Identities","pos":[0,10]}]},{"pos":[36447,36457],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[36552,36560],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[36629,36630],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36657,36658],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36728,36736],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[36805,36806],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36833,36834],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37017,37031],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[37150,37156],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[37223,37224],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37274,37280],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[37340,37341],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37424,37430],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[37497,37498],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37548,37554],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[37614,37615],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37829,37851],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[37999,38005],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[38072,38073],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38123,38129],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[38190,38191]},{"pos":[38246,38252],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[38312,38313],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38410,38416],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[38483,38484],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38534,38540],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[38601,38602]},{"pos":[38657,38663],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[38723,38724],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38969,39000],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[39166,39181],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[39257,39258],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39308,39314],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[39375,39376]},{"pos":[39431,39437],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[39497,39498],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39604,39619],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[39695,39696],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39746,39752],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[39813,39814]},{"pos":[39869,39875],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[39935,39936],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40166,40179],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[40280,40291],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[40363,40364],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40391,40392],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40465,40476],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[40548,40549],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40576,40577],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40752,40761],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[40854,40861],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[40929,40930],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40957,40958],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41027,41034],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[41102,41103],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41130,41131],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41306,41323],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[41432,41447],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[41523,41524],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41551,41552],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41629,41644],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[41720,41721],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41748,41749],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41894,41900],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[42023,42045],"content":"System.Security.Claims","needQuote":true,"nodes":[{"content":"System.Security.Claims","pos":[0,22]}]},{"pos":[42271,42286],"content":"WindowsIdentity","needQuote":true,"nodes":[{"content":"WindowsIdentity","pos":[0,15]}]},{"pos":[42562,42570],"content":"Identity","needQuote":true,"nodes":[{"content":"Identity","pos":[0,8]}]},{"pos":[42842,42851],"content":"IIdentity","needQuote":true,"nodes":[{"content":"IIdentity","pos":[0,9]}]},{"pos":[43042,43047],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[43190,43197],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[43395,43413],"content":"SecurityIdentifier","needQuote":true,"nodes":[{"content":"SecurityIdentifier","pos":[0,18]}]},{"pos":[43682,43700],"content":"WindowsBuiltInRole","needQuote":true,"nodes":[{"content":"WindowsBuiltInRole","pos":[0,18]}]},{"pos":[43999,44015],"content":"IsInRole(String)","needQuote":true,"nodes":[{"content":"IsInRole(String)","pos":[0,16]}]},{"pos":[44188,44196],"content":"IsInRole","needQuote":true,"nodes":[{"content":"IsInRole","pos":[0,8]}]},{"pos":[44269,44270],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44320,44326],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[44386,44387],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44497,44505],"content":"IsInRole","needQuote":true,"nodes":[{"content":"IsInRole","pos":[0,8]}]},{"pos":[44578,44579],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44629,44635],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[44695,44696],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44906,44912],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[45055,45076],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[45269,45286],"content":"SecurityException","needQuote":true,"nodes":[{"content":"SecurityException","pos":[0,17]}]},{"pos":[45493,45510],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Security.Principal.WindowsPrincipal\n  commentId: T:System.Security.Principal.WindowsPrincipal\n  id: WindowsPrincipal\n  parent: System.Security.Principal\n  children:\n  - System.Security.Principal.WindowsPrincipal.#ctor(System.Security.Principal.WindowsIdentity)\n  - System.Security.Principal.WindowsPrincipal.Identity\n  - System.Security.Principal.WindowsPrincipal.IsInRole(System.Int32)\n  - System.Security.Principal.WindowsPrincipal.IsInRole(System.Security.Principal.SecurityIdentifier)\n  - System.Security.Principal.WindowsPrincipal.IsInRole(System.Security.Principal.WindowsBuiltInRole)\n  - System.Security.Principal.WindowsPrincipal.IsInRole(System.String)\n  langs:\n  - csharp\n  - vb\n  name: WindowsPrincipal\n  fullName: System.Security.Principal.WindowsPrincipal\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WindowsPrincipal\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 218\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Enables code to check the Windows group membership of a Windows user.</p>\\n\"\n  syntax:\n    content: 'public class WindowsPrincipal : ClaimsPrincipal, IPrincipal'\n    content.vb: >-\n      Public Class WindowsPrincipal\n          Inherits ClaimsPrincipal\n          Implements IPrincipal\n  inheritance:\n  - System.Object\n  - System.Security.Claims.ClaimsPrincipal\n  implements:\n  - System.Security.Principal.IPrincipal\n  inheritedMembers:\n  - System.Security.Claims.ClaimsPrincipal.Clone\n  - System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity(System.IO.BinaryReader)\n  - System.Security.Claims.ClaimsPrincipal.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Security.Claims.ClaimsPrincipal.AddIdentity(System.Security.Claims.ClaimsIdentity)\n  - System.Security.Claims.ClaimsPrincipal.AddIdentities(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})\n  - System.Security.Claims.ClaimsPrincipal.FindAll(System.Predicate{System.Security.Claims.Claim})\n  - System.Security.Claims.ClaimsPrincipal.FindAll(System.String)\n  - System.Security.Claims.ClaimsPrincipal.FindFirst(System.Predicate{System.Security.Claims.Claim})\n  - System.Security.Claims.ClaimsPrincipal.FindFirst(System.String)\n  - System.Security.Claims.ClaimsPrincipal.HasClaim(System.Predicate{System.Security.Claims.Claim})\n  - System.Security.Claims.ClaimsPrincipal.HasClaim(System.String,System.String)\n  - System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter)\n  - System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter,System.Byte[])\n  - System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector\n  - System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector\n  - System.Security.Claims.ClaimsPrincipal.CustomSerializationData\n  - System.Security.Claims.ClaimsPrincipal.Claims\n  - System.Security.Claims.ClaimsPrincipal.Current\n  - System.Security.Claims.ClaimsPrincipal.Identities\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: WindowsPrincipal\n- uid: System.Security.Principal.WindowsPrincipal.#ctor(System.Security.Principal.WindowsIdentity)\n  commentId: M:System.Security.Principal.WindowsPrincipal.#ctor(System.Security.Principal.WindowsIdentity)\n  id: '#ctor(System.Security.Principal.WindowsIdentity)'\n  parent: System.Security.Principal.WindowsPrincipal\n  langs:\n  - csharp\n  - vb\n  name: WindowsPrincipal(WindowsIdentity)\n  fullName: System.Security.Principal.WindowsPrincipal.WindowsPrincipal(System.Security.Principal.WindowsIdentity)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 220\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Principal.WindowsPrincipal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class by using the specified <xref href=\\\"System.Security.Principal.WindowsIdentity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public WindowsPrincipal(WindowsIdentity ntIdentity)\n    content.vb: Public Sub New(ntIdentity As WindowsIdentity)\n    parameters:\n    - id: ntIdentity\n      type: System.Security.Principal.WindowsIdentity\n      description: \"\\n<p>The object from which to construct the new instance of <xref href=\\\"System.Security.Principal.WindowsPrincipal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>ntIdentity</em> is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: WindowsPrincipal.WindowsPrincipal(WindowsIdentity)\n- uid: System.Security.Principal.WindowsPrincipal.Identity\n  commentId: P:System.Security.Principal.WindowsPrincipal.Identity\n  id: Identity\n  parent: System.Security.Principal.WindowsPrincipal\n  langs:\n  - csharp\n  - vb\n  name: Identity\n  fullName: System.Security.Principal.WindowsPrincipal.Identity\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Identity\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 221\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Gets the identity of the current principal.</p>\\n\"\n  syntax:\n    content: public override IIdentity Identity { get; }\n    content.vb: Public Overrides ReadOnly Property Identity As IIdentity\n    parameters: []\n    return:\n      type: System.Security.Principal.IIdentity\n      description: \"\\n<p>The <xref href=\\\"System.Security.Principal.WindowsIdentity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object of the current principal.</p>\\n\"\n  overridden: System.Security.Claims.ClaimsPrincipal.Identity\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: WindowsPrincipal.Identity\n- uid: System.Security.Principal.WindowsPrincipal.IsInRole(System.Int32)\n  commentId: M:System.Security.Principal.WindowsPrincipal.IsInRole(System.Int32)\n  id: IsInRole(System.Int32)\n  parent: System.Security.Principal.WindowsPrincipal\n  langs:\n  - csharp\n  - vb\n  name: IsInRole(Int32)\n  fullName: System.Security.Principal.WindowsPrincipal.IsInRole(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsInRole\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 222\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Determines whether the current principal belongs to the Windows user group with the specified relative identifier (RID).</p>\\n\"\n  syntax:\n    content: public virtual bool IsInRole(int rid)\n    content.vb: Public Overridable Function IsInRole(rid As Integer) As Boolean\n    parameters:\n    - id: rid\n      type: System.Int32\n      description: \"\\n<p>The RID of the Windows user group in which to check for the principal’s membership status. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current principal is a member of the specified Windows user group, that is, in a particular role; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: WindowsPrincipal.IsInRole(Int32)\n- uid: System.Security.Principal.WindowsPrincipal.IsInRole(System.Security.Principal.SecurityIdentifier)\n  commentId: M:System.Security.Principal.WindowsPrincipal.IsInRole(System.Security.Principal.SecurityIdentifier)\n  id: IsInRole(System.Security.Principal.SecurityIdentifier)\n  parent: System.Security.Principal.WindowsPrincipal\n  langs:\n  - csharp\n  - vb\n  name: IsInRole(SecurityIdentifier)\n  fullName: System.Security.Principal.WindowsPrincipal.IsInRole(System.Security.Principal.SecurityIdentifier)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsInRole\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 223\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Determines whether the current principal belongs to the Windows user group with the specified security identifier (SID).</p>\\n\"\n  syntax:\n    content: public virtual bool IsInRole(SecurityIdentifier sid)\n    content.vb: Public Overridable Function IsInRole(sid As SecurityIdentifier) As Boolean\n    parameters:\n    - id: sid\n      type: System.Security.Principal.SecurityIdentifier\n      description: \"\\n<p>A <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>  that uniquely identifies a Windows user group.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current principal is a member of the specified Windows user group; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>sid</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>Windows returned a Win32 error.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: WindowsPrincipal.IsInRole(SecurityIdentifier)\n- uid: System.Security.Principal.WindowsPrincipal.IsInRole(System.Security.Principal.WindowsBuiltInRole)\n  commentId: M:System.Security.Principal.WindowsPrincipal.IsInRole(System.Security.Principal.WindowsBuiltInRole)\n  id: IsInRole(System.Security.Principal.WindowsBuiltInRole)\n  parent: System.Security.Principal.WindowsPrincipal\n  langs:\n  - csharp\n  - vb\n  name: IsInRole(WindowsBuiltInRole)\n  fullName: System.Security.Principal.WindowsPrincipal.IsInRole(System.Security.Principal.WindowsBuiltInRole)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsInRole\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 224\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Determines whether the current principal belongs to the Windows user group with the specified <xref href=\\\"System.Security.Principal.WindowsBuiltInRole\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual bool IsInRole(WindowsBuiltInRole role)\n    content.vb: Public Overridable Function IsInRole(role As WindowsBuiltInRole) As Boolean\n    parameters:\n    - id: role\n      type: System.Security.Principal.WindowsBuiltInRole\n      description: \"\\n<p>One of the <xref href=\\\"System.Security.Principal.WindowsBuiltInRole\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current principal is a member of the specified Windows user group; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>role</em> is not a valid <xref href=\\\"System.Security.Principal.WindowsBuiltInRole\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: WindowsPrincipal.IsInRole(WindowsBuiltInRole)\n- uid: System.Security.Principal.WindowsPrincipal.IsInRole(System.String)\n  commentId: M:System.Security.Principal.WindowsPrincipal.IsInRole(System.String)\n  id: IsInRole(System.String)\n  parent: System.Security.Principal.WindowsPrincipal\n  langs:\n  - csharp\n  - vb\n  name: IsInRole(String)\n  fullName: System.Security.Principal.WindowsPrincipal.IsInRole(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsInRole\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 225\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Determines whether the current principal belongs to the Windows user group with the specified name.</p>\\n\"\n  syntax:\n    content: public override bool IsInRole(string role)\n    content.vb: Public Overrides Function IsInRole(role As String) As Boolean\n    parameters:\n    - id: role\n      type: System.String\n      description: \"\\n<p>The name of the Windows user group for which to check membership. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current principal is a member of the specified Windows user group; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Security.Claims.ClaimsPrincipal.IsInRole(System.String)\n  seealso:\n  - type: System.Security.Principal.WindowsBuiltInRole\n    commentId: T:System.Security.Principal.WindowsBuiltInRole\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: WindowsPrincipal.IsInRole(String)\nreferences:\n- uid: System.Security.Principal\n  isExternal: false\n  name: System.Security.Principal\n  fullName: System.Security.Principal\n  commentId: N:System.Security.Principal\n  nameWithType: System.Security.Principal\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Security.Claims.ClaimsPrincipal\n  parent: System.Security.Claims\n  isExternal: false\n  name: ClaimsPrincipal\n  fullName: System.Security.Claims.ClaimsPrincipal\n  commentId: T:System.Security.Claims.ClaimsPrincipal\n  nameWithType: ClaimsPrincipal\n- uid: System.Security.Principal.IPrincipal\n  parent: System.Security.Principal\n  isExternal: false\n  name: IPrincipal\n  fullName: System.Security.Principal.IPrincipal\n  commentId: T:System.Security.Principal.IPrincipal\n  nameWithType: IPrincipal\n- uid: System.Security.Claims.ClaimsPrincipal.Clone\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: Clone()\n  fullName: System.Security.Claims.ClaimsPrincipal.Clone()\n  spec.csharp:\n  - uid: System.Security.Claims.ClaimsPrincipal.Clone\n    name: Clone\n    fullName: System.Security.Claims.ClaimsPrincipal.Clone\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Claims.ClaimsPrincipal.Clone\n    name: Clone\n    fullName: System.Security.Claims.ClaimsPrincipal.Clone\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Claims.ClaimsPrincipal.Clone\n  nameWithType: ClaimsPrincipal.Clone()\n- uid: System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity(System.IO.BinaryReader)\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: true\n  name: CreateClaimsIdentity(BinaryReader)\n  fullName: System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity(System.IO.BinaryReader)\n  spec.csharp:\n  - uid: System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity(System.IO.BinaryReader)\n    name: CreateClaimsIdentity\n    fullName: System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity\n  - name: (\n    fullName: (\n  - uid: System.IO.BinaryReader\n    name: BinaryReader\n    fullName: System.IO.BinaryReader\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity(System.IO.BinaryReader)\n    name: CreateClaimsIdentity\n    fullName: System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity\n  - name: (\n    fullName: (\n  - uid: System.IO.BinaryReader\n    name: BinaryReader\n    fullName: System.IO.BinaryReader\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity(System.IO.BinaryReader)\n  nameWithType: ClaimsPrincipal.CreateClaimsIdentity(BinaryReader)\n- uid: System.Security.Claims.ClaimsPrincipal.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: true\n  name: GetObjectData(SerializationInfo, StreamingContext)\n  fullName: System.Security.Claims.ClaimsPrincipal.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)\n  spec.csharp:\n  - uid: System.Security.Claims.ClaimsPrincipal.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n    name: GetObjectData\n    fullName: System.Security.Claims.ClaimsPrincipal.GetObjectData\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Runtime.Serialization.SerializationInfo\n    name: SerializationInfo\n    fullName: System.Runtime.Serialization.SerializationInfo\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Runtime.Serialization.StreamingContext\n    name: StreamingContext\n    fullName: System.Runtime.Serialization.StreamingContext\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Claims.ClaimsPrincipal.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n    name: GetObjectData\n    fullName: System.Security.Claims.ClaimsPrincipal.GetObjectData\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Runtime.Serialization.SerializationInfo\n    name: SerializationInfo\n    fullName: System.Runtime.Serialization.SerializationInfo\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Runtime.Serialization.StreamingContext\n    name: StreamingContext\n    fullName: System.Runtime.Serialization.StreamingContext\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Claims.ClaimsPrincipal.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  nameWithType: ClaimsPrincipal.GetObjectData(SerializationInfo, StreamingContext)\n- uid: System.Security.Claims.ClaimsPrincipal.AddIdentity(System.Security.Claims.ClaimsIdentity)\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: AddIdentity(ClaimsIdentity)\n  fullName: System.Security.Claims.ClaimsPrincipal.AddIdentity(System.Security.Claims.ClaimsIdentity)\n  spec.csharp:\n  - uid: System.Security.Claims.ClaimsPrincipal.AddIdentity(System.Security.Claims.ClaimsIdentity)\n    name: AddIdentity\n    fullName: System.Security.Claims.ClaimsPrincipal.AddIdentity\n  - name: (\n    fullName: (\n  - uid: System.Security.Claims.ClaimsIdentity\n    name: ClaimsIdentity\n    fullName: System.Security.Claims.ClaimsIdentity\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Claims.ClaimsPrincipal.AddIdentity(System.Security.Claims.ClaimsIdentity)\n    name: AddIdentity\n    fullName: System.Security.Claims.ClaimsPrincipal.AddIdentity\n  - name: (\n    fullName: (\n  - uid: System.Security.Claims.ClaimsIdentity\n    name: ClaimsIdentity\n    fullName: System.Security.Claims.ClaimsIdentity\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Claims.ClaimsPrincipal.AddIdentity(System.Security.Claims.ClaimsIdentity)\n  nameWithType: ClaimsPrincipal.AddIdentity(ClaimsIdentity)\n- uid: System.Security.Claims.ClaimsPrincipal.AddIdentities(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: true\n  name: AddIdentities(IEnumerable<ClaimsIdentity>)\n  fullName: System.Security.Claims.ClaimsPrincipal.AddIdentities(System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity>)\n  fullname.vb: System.Security.Claims.ClaimsPrincipal.AddIdentities(System.Collections.Generic.IEnumerable(Of System.Security.Claims.ClaimsIdentity))\n  name.vb: AddIdentities(IEnumerable(Of ClaimsIdentity))\n  spec.csharp:\n  - uid: System.Security.Claims.ClaimsPrincipal.AddIdentities(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})\n    name: AddIdentities\n    fullName: System.Security.Claims.ClaimsPrincipal.AddIdentities\n  - name: (\n    fullName: (\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Security.Claims.ClaimsIdentity\n    name: ClaimsIdentity\n    fullName: System.Security.Claims.ClaimsIdentity\n  - name: '>'\n    fullName: '>'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Claims.ClaimsPrincipal.AddIdentities(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})\n    name: AddIdentities\n    fullName: System.Security.Claims.ClaimsPrincipal.AddIdentities\n  - name: (\n    fullName: (\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Security.Claims.ClaimsIdentity\n    name: ClaimsIdentity\n    fullName: System.Security.Claims.ClaimsIdentity\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Claims.ClaimsPrincipal.AddIdentities(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})\n  nameWithType: ClaimsPrincipal.AddIdentities(IEnumerable<ClaimsIdentity>)\n  nameWithType.vb: ClaimsPrincipal.AddIdentities(IEnumerable(Of ClaimsIdentity))\n- uid: System.Security.Claims.ClaimsPrincipal.FindAll(System.Predicate{System.Security.Claims.Claim})\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: true\n  name: FindAll(Predicate<Claim>)\n  fullName: System.Security.Claims.ClaimsPrincipal.FindAll(System.Predicate<System.Security.Claims.Claim>)\n  fullname.vb: System.Security.Claims.ClaimsPrincipal.FindAll(System.Predicate(Of System.Security.Claims.Claim))\n  name.vb: FindAll(Predicate(Of Claim))\n  spec.csharp:\n  - uid: System.Security.Claims.ClaimsPrincipal.FindAll(System.Predicate{System.Security.Claims.Claim})\n    name: FindAll\n    fullName: System.Security.Claims.ClaimsPrincipal.FindAll\n  - name: (\n    fullName: (\n  - uid: System.Predicate`1\n    name: Predicate\n    fullName: System.Predicate\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Security.Claims.Claim\n    name: Claim\n    fullName: System.Security.Claims.Claim\n  - name: '>'\n    fullName: '>'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Claims.ClaimsPrincipal.FindAll(System.Predicate{System.Security.Claims.Claim})\n    name: FindAll\n    fullName: System.Security.Claims.ClaimsPrincipal.FindAll\n  - name: (\n    fullName: (\n  - uid: System.Predicate`1\n    name: Predicate\n    fullName: System.Predicate\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Security.Claims.Claim\n    name: Claim\n    fullName: System.Security.Claims.Claim\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Claims.ClaimsPrincipal.FindAll(System.Predicate{System.Security.Claims.Claim})\n  nameWithType: ClaimsPrincipal.FindAll(Predicate<Claim>)\n  nameWithType.vb: ClaimsPrincipal.FindAll(Predicate(Of Claim))\n- uid: System.Security.Claims.ClaimsPrincipal.FindAll(System.String)\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: true\n  name: FindAll(String)\n  fullName: System.Security.Claims.ClaimsPrincipal.FindAll(System.String)\n  spec.csharp:\n  - uid: System.Security.Claims.ClaimsPrincipal.FindAll(System.String)\n    name: FindAll\n    fullName: System.Security.Claims.ClaimsPrincipal.FindAll\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Claims.ClaimsPrincipal.FindAll(System.String)\n    name: FindAll\n    fullName: System.Security.Claims.ClaimsPrincipal.FindAll\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Claims.ClaimsPrincipal.FindAll(System.String)\n  nameWithType: ClaimsPrincipal.FindAll(String)\n- uid: System.Security.Claims.ClaimsPrincipal.FindFirst(System.Predicate{System.Security.Claims.Claim})\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: true\n  name: FindFirst(Predicate<Claim>)\n  fullName: System.Security.Claims.ClaimsPrincipal.FindFirst(System.Predicate<System.Security.Claims.Claim>)\n  fullname.vb: System.Security.Claims.ClaimsPrincipal.FindFirst(System.Predicate(Of System.Security.Claims.Claim))\n  name.vb: FindFirst(Predicate(Of Claim))\n  spec.csharp:\n  - uid: System.Security.Claims.ClaimsPrincipal.FindFirst(System.Predicate{System.Security.Claims.Claim})\n    name: FindFirst\n    fullName: System.Security.Claims.ClaimsPrincipal.FindFirst\n  - name: (\n    fullName: (\n  - uid: System.Predicate`1\n    name: Predicate\n    fullName: System.Predicate\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Security.Claims.Claim\n    name: Claim\n    fullName: System.Security.Claims.Claim\n  - name: '>'\n    fullName: '>'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Claims.ClaimsPrincipal.FindFirst(System.Predicate{System.Security.Claims.Claim})\n    name: FindFirst\n    fullName: System.Security.Claims.ClaimsPrincipal.FindFirst\n  - name: (\n    fullName: (\n  - uid: System.Predicate`1\n    name: Predicate\n    fullName: System.Predicate\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Security.Claims.Claim\n    name: Claim\n    fullName: System.Security.Claims.Claim\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Claims.ClaimsPrincipal.FindFirst(System.Predicate{System.Security.Claims.Claim})\n  nameWithType: ClaimsPrincipal.FindFirst(Predicate<Claim>)\n  nameWithType.vb: ClaimsPrincipal.FindFirst(Predicate(Of Claim))\n- uid: System.Security.Claims.ClaimsPrincipal.FindFirst(System.String)\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: true\n  name: FindFirst(String)\n  fullName: System.Security.Claims.ClaimsPrincipal.FindFirst(System.String)\n  spec.csharp:\n  - uid: System.Security.Claims.ClaimsPrincipal.FindFirst(System.String)\n    name: FindFirst\n    fullName: System.Security.Claims.ClaimsPrincipal.FindFirst\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Claims.ClaimsPrincipal.FindFirst(System.String)\n    name: FindFirst\n    fullName: System.Security.Claims.ClaimsPrincipal.FindFirst\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Claims.ClaimsPrincipal.FindFirst(System.String)\n  nameWithType: ClaimsPrincipal.FindFirst(String)\n- uid: System.Security.Claims.ClaimsPrincipal.HasClaim(System.Predicate{System.Security.Claims.Claim})\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: true\n  name: HasClaim(Predicate<Claim>)\n  fullName: System.Security.Claims.ClaimsPrincipal.HasClaim(System.Predicate<System.Security.Claims.Claim>)\n  fullname.vb: System.Security.Claims.ClaimsPrincipal.HasClaim(System.Predicate(Of System.Security.Claims.Claim))\n  name.vb: HasClaim(Predicate(Of Claim))\n  spec.csharp:\n  - uid: System.Security.Claims.ClaimsPrincipal.HasClaim(System.Predicate{System.Security.Claims.Claim})\n    name: HasClaim\n    fullName: System.Security.Claims.ClaimsPrincipal.HasClaim\n  - name: (\n    fullName: (\n  - uid: System.Predicate`1\n    name: Predicate\n    fullName: System.Predicate\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Security.Claims.Claim\n    name: Claim\n    fullName: System.Security.Claims.Claim\n  - name: '>'\n    fullName: '>'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Claims.ClaimsPrincipal.HasClaim(System.Predicate{System.Security.Claims.Claim})\n    name: HasClaim\n    fullName: System.Security.Claims.ClaimsPrincipal.HasClaim\n  - name: (\n    fullName: (\n  - uid: System.Predicate`1\n    name: Predicate\n    fullName: System.Predicate\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Security.Claims.Claim\n    name: Claim\n    fullName: System.Security.Claims.Claim\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Claims.ClaimsPrincipal.HasClaim(System.Predicate{System.Security.Claims.Claim})\n  nameWithType: ClaimsPrincipal.HasClaim(Predicate<Claim>)\n  nameWithType.vb: ClaimsPrincipal.HasClaim(Predicate(Of Claim))\n- uid: System.Security.Claims.ClaimsPrincipal.HasClaim(System.String,System.String)\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: true\n  name: HasClaim(String, String)\n  fullName: System.Security.Claims.ClaimsPrincipal.HasClaim(System.String, System.String)\n  spec.csharp:\n  - uid: System.Security.Claims.ClaimsPrincipal.HasClaim(System.String,System.String)\n    name: HasClaim\n    fullName: System.Security.Claims.ClaimsPrincipal.HasClaim\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Claims.ClaimsPrincipal.HasClaim(System.String,System.String)\n    name: HasClaim\n    fullName: System.Security.Claims.ClaimsPrincipal.HasClaim\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Claims.ClaimsPrincipal.HasClaim(System.String,System.String)\n  nameWithType: ClaimsPrincipal.HasClaim(String, String)\n- uid: System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter)\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: true\n  name: WriteTo(BinaryWriter)\n  fullName: System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter)\n  spec.csharp:\n  - uid: System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter)\n    name: WriteTo\n    fullName: System.Security.Claims.ClaimsPrincipal.WriteTo\n  - name: (\n    fullName: (\n  - uid: System.IO.BinaryWriter\n    name: BinaryWriter\n    fullName: System.IO.BinaryWriter\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter)\n    name: WriteTo\n    fullName: System.Security.Claims.ClaimsPrincipal.WriteTo\n  - name: (\n    fullName: (\n  - uid: System.IO.BinaryWriter\n    name: BinaryWriter\n    fullName: System.IO.BinaryWriter\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter)\n  nameWithType: ClaimsPrincipal.WriteTo(BinaryWriter)\n- uid: System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter,System.Byte[])\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: true\n  name: WriteTo(BinaryWriter, Byte[])\n  fullName: System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter, System.Byte[])\n  fullname.vb: System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter, System.Byte())\n  name.vb: WriteTo(BinaryWriter, Byte())\n  spec.csharp:\n  - uid: System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter,System.Byte[])\n    name: WriteTo\n    fullName: System.Security.Claims.ClaimsPrincipal.WriteTo\n  - name: (\n    fullName: (\n  - uid: System.IO.BinaryWriter\n    name: BinaryWriter\n    fullName: System.IO.BinaryWriter\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter,System.Byte[])\n    name: WriteTo\n    fullName: System.Security.Claims.ClaimsPrincipal.WriteTo\n  - name: (\n    fullName: (\n  - uid: System.IO.BinaryWriter\n    name: BinaryWriter\n    fullName: System.IO.BinaryWriter\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter,System.Byte[])\n  nameWithType: ClaimsPrincipal.WriteTo(BinaryWriter, Byte[])\n  nameWithType.vb: ClaimsPrincipal.WriteTo(BinaryWriter, Byte())\n- uid: System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: PrimaryIdentitySelector\n  fullName: System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector\n  commentId: P:System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector\n  nameWithType: ClaimsPrincipal.PrimaryIdentitySelector\n- uid: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: ClaimsPrincipalSelector\n  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector\n  commentId: P:System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector\n  nameWithType: ClaimsPrincipal.ClaimsPrincipalSelector\n- uid: System.Security.Claims.ClaimsPrincipal.CustomSerializationData\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: CustomSerializationData\n  fullName: System.Security.Claims.ClaimsPrincipal.CustomSerializationData\n  commentId: P:System.Security.Claims.ClaimsPrincipal.CustomSerializationData\n  nameWithType: ClaimsPrincipal.CustomSerializationData\n- uid: System.Security.Claims.ClaimsPrincipal.Claims\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: Claims\n  fullName: System.Security.Claims.ClaimsPrincipal.Claims\n  commentId: P:System.Security.Claims.ClaimsPrincipal.Claims\n  nameWithType: ClaimsPrincipal.Claims\n- uid: System.Security.Claims.ClaimsPrincipal.Current\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: Current\n  fullName: System.Security.Claims.ClaimsPrincipal.Current\n  commentId: P:System.Security.Claims.ClaimsPrincipal.Current\n  nameWithType: ClaimsPrincipal.Current\n- uid: System.Security.Claims.ClaimsPrincipal.Identities\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: Identities\n  fullName: System.Security.Claims.ClaimsPrincipal.Identities\n  commentId: P:System.Security.Claims.ClaimsPrincipal.Identities\n  nameWithType: ClaimsPrincipal.Identities\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Security.Claims\n  isExternal: false\n  name: System.Security.Claims\n  fullName: System.Security.Claims\n  commentId: N:System.Security.Claims\n  nameWithType: System.Security.Claims\n- uid: System.Security.Principal.WindowsIdentity\n  parent: System.Security.Principal\n  isExternal: false\n  name: WindowsIdentity\n  fullName: System.Security.Principal.WindowsIdentity\n  commentId: T:System.Security.Principal.WindowsIdentity\n  nameWithType: WindowsIdentity\n- uid: System.Security.Claims.ClaimsPrincipal.Identity\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: false\n  name: Identity\n  fullName: System.Security.Claims.ClaimsPrincipal.Identity\n  commentId: P:System.Security.Claims.ClaimsPrincipal.Identity\n  nameWithType: ClaimsPrincipal.Identity\n- uid: System.Security.Principal.IIdentity\n  parent: System.Security.Principal\n  isExternal: false\n  name: IIdentity\n  fullName: System.Security.Principal.IIdentity\n  commentId: T:System.Security.Principal.IIdentity\n  nameWithType: IIdentity\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Security.Principal.SecurityIdentifier\n  parent: System.Security.Principal\n  isExternal: false\n  name: SecurityIdentifier\n  fullName: System.Security.Principal.SecurityIdentifier\n  commentId: T:System.Security.Principal.SecurityIdentifier\n  nameWithType: SecurityIdentifier\n- uid: System.Security.Principal.WindowsBuiltInRole\n  parent: System.Security.Principal\n  isExternal: false\n  name: WindowsBuiltInRole\n  fullName: System.Security.Principal.WindowsBuiltInRole\n  commentId: T:System.Security.Principal.WindowsBuiltInRole\n  nameWithType: WindowsBuiltInRole\n- uid: System.Security.Claims.ClaimsPrincipal.IsInRole(System.String)\n  parent: System.Security.Claims.ClaimsPrincipal\n  isExternal: true\n  name: IsInRole(String)\n  fullName: System.Security.Claims.ClaimsPrincipal.IsInRole(System.String)\n  spec.csharp:\n  - uid: System.Security.Claims.ClaimsPrincipal.IsInRole(System.String)\n    name: IsInRole\n    fullName: System.Security.Claims.ClaimsPrincipal.IsInRole\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Claims.ClaimsPrincipal.IsInRole(System.String)\n    name: IsInRole\n    fullName: System.Security.Claims.ClaimsPrincipal.IsInRole\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Claims.ClaimsPrincipal.IsInRole(System.String)\n  nameWithType: ClaimsPrincipal.IsInRole(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.Security.SecurityException\n  isExternal: false\n  name: SecurityException\n  fullName: System.Security.SecurityException\n  nameWithType: SecurityException\n  commentId: T:System.Security.SecurityException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}