{"nodes":[{"pos":[765,784],"content":"EventInfoExtensions","needQuote":true,"nodes":[{"content":"EventInfoExtensions","pos":[0,19]}]},{"pos":[2130,2153],"content":"GetAddMethod(EventInfo)","needQuote":true,"nodes":[{"content":"GetAddMethod(EventInfo)","pos":[0,23]}]},{"pos":[3517,3549],"content":"GetAddMethod(EventInfo, Boolean)","needQuote":true,"nodes":[{"content":"GetAddMethod(EventInfo, Boolean)","pos":[0,32]}]},{"pos":[4984,5009],"content":"GetRaiseMethod(EventInfo)","needQuote":true,"nodes":[{"content":"GetRaiseMethod(EventInfo)","pos":[0,25]}]},{"pos":[6389,6423],"content":"GetRaiseMethod(EventInfo, Boolean)","needQuote":true,"nodes":[{"content":"GetRaiseMethod(EventInfo, Boolean)","pos":[0,34]}]},{"pos":[7871,7897],"content":"GetRemoveMethod(EventInfo)","needQuote":true,"nodes":[{"content":"GetRemoveMethod(EventInfo)","pos":[0,26]}]},{"pos":[9285,9320],"content":"GetRemoveMethod(EventInfo, Boolean)","needQuote":true,"nodes":[{"content":"GetRemoveMethod(EventInfo, Boolean)","pos":[0,35]}]},{"pos":[10523,10540],"content":"System.Reflection","needQuote":true,"nodes":[{"content":"System.Reflection","pos":[0,17]}]},{"pos":[10700,10706],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10875,10885],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[11014,11022],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[11125,11126],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11173,11174],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11264,11272],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[11375,11376],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11423,11424],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11606,11620],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[11777,11783],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[11882,11883],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11953,11959],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12044,12045],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12148,12154],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[12253,12254],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12324,12330],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12415,12416],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12626,12648],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[12842,12848],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[12947,12948],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13018,13024],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[13110,13111]},{"pos":[13189,13195],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13280,13281],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13398,13404],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[13503,13504],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13574,13580],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[13666,13667]},{"pos":[13745,13751],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13836,13837],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14065,14096],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[14317,14332],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[14449,14450],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14520,14526],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[14612,14613]},{"pos":[14691,14697],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14782,14783],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14909,14924],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[15041,15042],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15112,15118],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[15204,15205]},{"pos":[15283,15289],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15374,15375],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15537,15550],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[15688,15699],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[15808,15809],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15856,15857],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15950,15961],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[16070,16071],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16118,16119],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16273,16282],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[16408,16415],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[16516,16517],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16564,16565],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16654,16661],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[16762,16763],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16810,16811],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16981,16998],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[17148,17163],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[17280,17281],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17328,17329],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17426,17441],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[17558,17559],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17606,17607],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17708,17714],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[17891,17900],"content":"EventInfo","needQuote":true,"nodes":[{"content":"EventInfo","pos":[0,9]}]},{"pos":[18103,18113],"content":"MethodInfo","needQuote":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[18279,18286],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]}],"content":"items:\n- uid: System.Reflection.EventInfoExtensions\n  commentId: T:System.Reflection.EventInfoExtensions\n  id: EventInfoExtensions\n  parent: System.Reflection\n  children:\n  - System.Reflection.EventInfoExtensions.GetAddMethod(System.Reflection.EventInfo)\n  - System.Reflection.EventInfoExtensions.GetAddMethod(System.Reflection.EventInfo,System.Boolean)\n  - System.Reflection.EventInfoExtensions.GetRaiseMethod(System.Reflection.EventInfo)\n  - System.Reflection.EventInfoExtensions.GetRaiseMethod(System.Reflection.EventInfo,System.Boolean)\n  - System.Reflection.EventInfoExtensions.GetRemoveMethod(System.Reflection.EventInfo)\n  - System.Reflection.EventInfoExtensions.GetRemoveMethod(System.Reflection.EventInfo,System.Boolean)\n  langs:\n  - csharp\n  - vb\n  name: EventInfoExtensions\n  nameWithType: EventInfoExtensions\n  fullName: System.Reflection.EventInfoExtensions\n  type: Class\n  source:\n    remote:\n      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: EventInfoExtensions\n    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n    startLine: 17\n  assemblies:\n  - System.Reflection.TypeExtensions\n  namespace: System.Reflection\n  syntax:\n    content: public class EventInfoExtensions\n    content.vb: Public Class EventInfoExtensions\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n- uid: System.Reflection.EventInfoExtensions.GetAddMethod(System.Reflection.EventInfo)\n  commentId: M:System.Reflection.EventInfoExtensions.GetAddMethod(System.Reflection.EventInfo)\n  id: GetAddMethod(System.Reflection.EventInfo)\n  isExtensionMethod: true\n  parent: System.Reflection.EventInfoExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetAddMethod(EventInfo)\n  nameWithType: EventInfoExtensions.GetAddMethod(EventInfo)\n  fullName: System.Reflection.EventInfoExtensions.GetAddMethod(System.Reflection.EventInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetAddMethod\n    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n    startLine: 19\n  assemblies:\n  - System.Reflection.TypeExtensions\n  namespace: System.Reflection\n  syntax:\n    content: public static MethodInfo GetAddMethod(this EventInfo eventInfo)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetAddMethod(eventInfo As EventInfo) As MethodInfo\n    parameters:\n    - id: eventInfo\n      type: System.Reflection.EventInfo\n    return:\n      type: System.Reflection.MethodInfo\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Reflection.EventInfoExtensions.GetAddMethod(System.Reflection.EventInfo,System.Boolean)\n  commentId: M:System.Reflection.EventInfoExtensions.GetAddMethod(System.Reflection.EventInfo,System.Boolean)\n  id: GetAddMethod(System.Reflection.EventInfo,System.Boolean)\n  isExtensionMethod: true\n  parent: System.Reflection.EventInfoExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetAddMethod(EventInfo, Boolean)\n  nameWithType: EventInfoExtensions.GetAddMethod(EventInfo, Boolean)\n  fullName: System.Reflection.EventInfoExtensions.GetAddMethod(System.Reflection.EventInfo, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetAddMethod\n    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n    startLine: 20\n  assemblies:\n  - System.Reflection.TypeExtensions\n  namespace: System.Reflection\n  syntax:\n    content: public static MethodInfo GetAddMethod(this EventInfo eventInfo, bool nonPublic)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetAddMethod(eventInfo As EventInfo, nonPublic As Boolean) As MethodInfo\n    parameters:\n    - id: eventInfo\n      type: System.Reflection.EventInfo\n    - id: nonPublic\n      type: System.Boolean\n    return:\n      type: System.Reflection.MethodInfo\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Reflection.EventInfoExtensions.GetRaiseMethod(System.Reflection.EventInfo)\n  commentId: M:System.Reflection.EventInfoExtensions.GetRaiseMethod(System.Reflection.EventInfo)\n  id: GetRaiseMethod(System.Reflection.EventInfo)\n  isExtensionMethod: true\n  parent: System.Reflection.EventInfoExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetRaiseMethod(EventInfo)\n  nameWithType: EventInfoExtensions.GetRaiseMethod(EventInfo)\n  fullName: System.Reflection.EventInfoExtensions.GetRaiseMethod(System.Reflection.EventInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetRaiseMethod\n    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n    startLine: 21\n  assemblies:\n  - System.Reflection.TypeExtensions\n  namespace: System.Reflection\n  syntax:\n    content: public static MethodInfo GetRaiseMethod(this EventInfo eventInfo)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetRaiseMethod(eventInfo As EventInfo) As MethodInfo\n    parameters:\n    - id: eventInfo\n      type: System.Reflection.EventInfo\n    return:\n      type: System.Reflection.MethodInfo\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Reflection.EventInfoExtensions.GetRaiseMethod(System.Reflection.EventInfo,System.Boolean)\n  commentId: M:System.Reflection.EventInfoExtensions.GetRaiseMethod(System.Reflection.EventInfo,System.Boolean)\n  id: GetRaiseMethod(System.Reflection.EventInfo,System.Boolean)\n  isExtensionMethod: true\n  parent: System.Reflection.EventInfoExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetRaiseMethod(EventInfo, Boolean)\n  nameWithType: EventInfoExtensions.GetRaiseMethod(EventInfo, Boolean)\n  fullName: System.Reflection.EventInfoExtensions.GetRaiseMethod(System.Reflection.EventInfo, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetRaiseMethod\n    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n    startLine: 22\n  assemblies:\n  - System.Reflection.TypeExtensions\n  namespace: System.Reflection\n  syntax:\n    content: public static MethodInfo GetRaiseMethod(this EventInfo eventInfo, bool nonPublic)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetRaiseMethod(eventInfo As EventInfo, nonPublic As Boolean) As MethodInfo\n    parameters:\n    - id: eventInfo\n      type: System.Reflection.EventInfo\n    - id: nonPublic\n      type: System.Boolean\n    return:\n      type: System.Reflection.MethodInfo\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Reflection.EventInfoExtensions.GetRemoveMethod(System.Reflection.EventInfo)\n  commentId: M:System.Reflection.EventInfoExtensions.GetRemoveMethod(System.Reflection.EventInfo)\n  id: GetRemoveMethod(System.Reflection.EventInfo)\n  isExtensionMethod: true\n  parent: System.Reflection.EventInfoExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetRemoveMethod(EventInfo)\n  nameWithType: EventInfoExtensions.GetRemoveMethod(EventInfo)\n  fullName: System.Reflection.EventInfoExtensions.GetRemoveMethod(System.Reflection.EventInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetRemoveMethod\n    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n    startLine: 23\n  assemblies:\n  - System.Reflection.TypeExtensions\n  namespace: System.Reflection\n  syntax:\n    content: public static MethodInfo GetRemoveMethod(this EventInfo eventInfo)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetRemoveMethod(eventInfo As EventInfo) As MethodInfo\n    parameters:\n    - id: eventInfo\n      type: System.Reflection.EventInfo\n    return:\n      type: System.Reflection.MethodInfo\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Reflection.EventInfoExtensions.GetRemoveMethod(System.Reflection.EventInfo,System.Boolean)\n  commentId: M:System.Reflection.EventInfoExtensions.GetRemoveMethod(System.Reflection.EventInfo,System.Boolean)\n  id: GetRemoveMethod(System.Reflection.EventInfo,System.Boolean)\n  isExtensionMethod: true\n  parent: System.Reflection.EventInfoExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetRemoveMethod(EventInfo, Boolean)\n  nameWithType: EventInfoExtensions.GetRemoveMethod(EventInfo, Boolean)\n  fullName: System.Reflection.EventInfoExtensions.GetRemoveMethod(System.Reflection.EventInfo, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetRemoveMethod\n    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n    startLine: 24\n  assemblies:\n  - System.Reflection.TypeExtensions\n  namespace: System.Reflection\n  syntax:\n    content: public static MethodInfo GetRemoveMethod(this EventInfo eventInfo, bool nonPublic)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetRemoveMethod(eventInfo As EventInfo, nonPublic As Boolean) As MethodInfo\n    parameters:\n    - id: eventInfo\n      type: System.Reflection.EventInfo\n    - id: nonPublic\n      type: System.Boolean\n    return:\n      type: System.Reflection.MethodInfo\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\nreferences:\n- uid: System.Reflection\n  commentId: N:System.Reflection\n  isExternal: false\n  name: System.Reflection\n  nameWithType: System.Reflection\n  fullName: System.Reflection\n- uid: System.Object\n  commentId: T:System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Object.ToString\n  commentId: M:System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    nameWithType: Object.ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    nameWithType: Object.ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.Equals(System.Object)\n  commentId: M:System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.Equals(System.Object,System.Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    nameWithType: Object.ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    nameWithType: Object.ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.GetHashCode\n  commentId: M:System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    nameWithType: Object.GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    nameWithType: Object.GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.GetType\n  commentId: M:System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    nameWithType: Object.GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    nameWithType: Object.GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.MemberwiseClone\n  commentId: M:System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    nameWithType: Object.MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    nameWithType: Object.MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System\n  commentId: N:System\n  isExternal: false\n  name: System\n  nameWithType: System\n  fullName: System\n- uid: System.Reflection.EventInfo\n  commentId: T:System.Reflection.EventInfo\n  parent: System.Reflection\n  isExternal: false\n  name: EventInfo\n  nameWithType: EventInfo\n  fullName: System.Reflection.EventInfo\n- uid: System.Reflection.MethodInfo\n  commentId: T:System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Boolean\n  commentId: T:System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n"}