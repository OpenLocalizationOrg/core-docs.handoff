{"nodes":[{"pos":[351,377],"content":"AsyncStateMachineAttribute","needQuote":true,"nodes":[{"content":"AsyncStateMachineAttribute","pos":[0,26]}]},{"pos":[2534,2543],"content":"Inherited","needQuote":true,"nodes":[{"content":"Inherited","pos":[0,9]}]},{"pos":[2602,2615],"content":"AllowMultiple","needQuote":true,"nodes":[{"content":"AllowMultiple","pos":[0,13]}]},{"pos":[3122,3154],"content":"AsyncStateMachineAttribute(Type)","needQuote":true,"nodes":[{"content":"AsyncStateMachineAttribute(Type)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The type object for the underlying state machine type that's used to implement a state machine method.&lt;/p&gt;\\n","pos":[4077,4190],"source":"\\n<p>The type object for the underlying state machine type that's used to implement a state machine method.</p>\\n"},{"pos":[4405,4436],"content":"System.Runtime.CompilerServices","needQuote":true,"nodes":[{"content":"System.Runtime.CompilerServices","pos":[0,31]}]},{"pos":[4642,4648],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[4796,4805],"content":"Attribute","needQuote":true,"nodes":[{"content":"Attribute","pos":[0,9]}]},{"pos":[5024,5045],"content":"StateMachineAttribute","needQuote":true,"nodes":[{"content":"StateMachineAttribute","pos":[0,21]}]},{"pos":[5389,5405],"content":"StateMachineType","needQuote":true,"nodes":[{"content":"StateMachineType","pos":[0,16]}]},{"pos":[5730,5744],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[5869,5875],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[5924,5925],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[5975,5981],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[6041,6042],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6128,6134],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[6183,6184],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6234,6240],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[6300,6301],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6504,6517],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[6624,6635],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[6689,6690],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6717,6718],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6794,6805],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[6859,6860],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6887,6888],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7070,7080],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[7175,7183],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[7252,7253],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7280,7281],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7351,7359],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[7428,7429],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7456,7457],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7654,7676],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[7824,7830],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7897,7898],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7948,7954],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[8015,8016]},{"pos":[8071,8077],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8137,8138],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8235,8241],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8308,8309],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8359,8365],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[8426,8427]},{"pos":[8482,8488],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8548,8549],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8794,8825],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[8991,9006],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[9082,9083],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9133,9139],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9200,9201]},{"pos":[9256,9262],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9322,9323],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9429,9444],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[9520,9521],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9571,9577],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9638,9639]},{"pos":[9694,9700],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9760,9761],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9987,9996],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[10089,10096],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[10164,10165],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10192,10193],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10262,10269],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[10337,10338],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10365,10366],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10541,10558],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[10667,10682],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[10758,10759],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10786,10787],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10864,10879],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[10955,10956],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10983,10984],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11129,11135],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[11264,11268],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]}],"content":"items:\n- uid: System.Runtime.CompilerServices.AsyncStateMachineAttribute\n  commentId: T:System.Runtime.CompilerServices.AsyncStateMachineAttribute\n  id: AsyncStateMachineAttribute\n  parent: System.Runtime.CompilerServices\n  children:\n  - System.Runtime.CompilerServices.AsyncStateMachineAttribute.#ctor(System.Type)\n  langs:\n  - csharp\n  - vb\n  name: AsyncStateMachineAttribute\n  fullName: System.Runtime.CompilerServices.AsyncStateMachineAttribute\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/CompilerServices/AsyncStateMachineAttribute.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AsyncStateMachineAttribute\n    path: src/mscorlib/src/System/Runtime/CompilerServices/AsyncStateMachineAttribute.cs\n    startLine: 9\n  assemblies:\n  - System.Runtime\n  namespace: System.Runtime.CompilerServices\n  summary: \"\\n<p>Indicates whether a method is marked with either the Async (Visual Basic) or async (C# Reference) modifier.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n\n      public sealed class AsyncStateMachineAttribute : StateMachineAttribute, _Attribute\n    content.vb: >-\n      <Serializable>\n\n      <AttributeUsage(AttributeTargets.Method, Inherited:=False, AllowMultiple:=False)>\n\n      Public NotInheritable Class AsyncStateMachineAttribute\n          Inherits StateMachineAttribute\n          Implements _Attribute\n  seealso:\n  - type: System.Runtime.CompilerServices.IteratorStateMachineAttribute\n    commentId: T:System.Runtime.CompilerServices.IteratorStateMachineAttribute\n  - type: System.Runtime.CompilerServices.StateMachineAttribute.StateMachineType\n    commentId: P:System.Runtime.CompilerServices.StateMachineAttribute.StateMachineType\n  inheritance:\n  - System.Object\n  - System.Attribute\n  - System.Runtime.CompilerServices.StateMachineAttribute\n  inheritedMembers:\n  - System.Runtime.CompilerServices.StateMachineAttribute.StateMachineType\n  - System.Attribute.Equals(System.Object)\n  - System.Attribute.GetHashCode\n  - System.Object.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  attributes:\n  - type: System.AttributeUsageAttribute\n    ctor: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)\n    arguments:\n    - type: System.AttributeTargets\n      value: 64\n    namedArguments:\n    - name: Inherited\n      type: System.Boolean\n      value: false\n    - name: AllowMultiple\n      type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: AsyncStateMachineAttribute\n- uid: System.Runtime.CompilerServices.AsyncStateMachineAttribute.#ctor(System.Type)\n  commentId: M:System.Runtime.CompilerServices.AsyncStateMachineAttribute.#ctor(System.Type)\n  id: '#ctor(System.Type)'\n  parent: System.Runtime.CompilerServices.AsyncStateMachineAttribute\n  langs:\n  - csharp\n  - vb\n  name: AsyncStateMachineAttribute(Type)\n  fullName: System.Runtime.CompilerServices.AsyncStateMachineAttribute.AsyncStateMachineAttribute(System.Type)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/CompilerServices/AsyncStateMachineAttribute.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Runtime/CompilerServices/AsyncStateMachineAttribute.cs\n    startLine: 12\n  assemblies:\n  - System.Runtime\n  namespace: System.Runtime.CompilerServices\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Runtime.CompilerServices.AsyncStateMachineAttribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public AsyncStateMachineAttribute(Type stateMachineType)\n    content.vb: Public Sub New(stateMachineType As Type)\n    parameters:\n    - id: stateMachineType\n      type: System.Type\n      description: \"\\n<p>The type object for the underlying state machine type that's used to implement a state machine method.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: AsyncStateMachineAttribute.AsyncStateMachineAttribute(Type)\nreferences:\n- uid: System.Runtime.CompilerServices\n  isExternal: false\n  name: System.Runtime.CompilerServices\n  fullName: System.Runtime.CompilerServices\n  nameWithType: System.Runtime.CompilerServices\n  commentId: N:System.Runtime.CompilerServices\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Attribute\n  parent: System\n  isExternal: false\n  name: Attribute\n  fullName: System.Attribute\n  nameWithType: Attribute\n  commentId: T:System.Attribute\n- uid: System.Runtime.CompilerServices.StateMachineAttribute\n  parent: System.Runtime.CompilerServices\n  isExternal: false\n  name: StateMachineAttribute\n  fullName: System.Runtime.CompilerServices.StateMachineAttribute\n  nameWithType: StateMachineAttribute\n  commentId: T:System.Runtime.CompilerServices.StateMachineAttribute\n- uid: System.Runtime.CompilerServices.StateMachineAttribute.StateMachineType\n  parent: System.Runtime.CompilerServices.StateMachineAttribute\n  isExternal: false\n  name: StateMachineType\n  fullName: System.Runtime.CompilerServices.StateMachineAttribute.StateMachineType\n  nameWithType: StateMachineAttribute.StateMachineType\n  commentId: P:System.Runtime.CompilerServices.StateMachineAttribute.StateMachineType\n- uid: System.Attribute.Equals(System.Object)\n  parent: System.Attribute\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Attribute.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Attribute.Equals(System.Object)\n    name: Equals\n    fullName: System.Attribute.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Attribute.Equals(System.Object)\n    name: Equals\n    fullName: System.Attribute.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Attribute.Equals(Object)\n  commentId: M:System.Attribute.Equals(System.Object)\n- uid: System.Attribute.GetHashCode\n  parent: System.Attribute\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.Attribute.GetHashCode()\n  spec.csharp:\n  - uid: System.Attribute.GetHashCode\n    name: GetHashCode\n    fullName: System.Attribute.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Attribute.GetHashCode\n    name: GetHashCode\n    fullName: System.Attribute.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Attribute.GetHashCode()\n  commentId: M:System.Attribute.GetHashCode\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  nameWithType: Type\n  commentId: T:System.Type\n"}