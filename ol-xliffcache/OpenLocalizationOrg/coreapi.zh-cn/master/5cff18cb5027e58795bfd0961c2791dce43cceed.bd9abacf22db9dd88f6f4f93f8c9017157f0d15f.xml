{"nodes":[{"pos":[3103,3112],"content":"Vector<T>","needQuote":true,"nodes":[{"content":"Vector&lt;T&gt;","pos":[0,9],"source":"Vector<T>"}]},{"pos":[4778,4787],"content":"Vector(T)","needQuote":true,"nodes":[{"content":"Vector(T)","pos":[0,9]}]},{"pos":[5707,5718],"content":"Vector(T[])","needQuote":true,"nodes":[{"content":"Vector(T[])","pos":[0,11]}]},{"pos":[6717,6735],"content":"Vector(T[], Int32)","needQuote":true,"nodes":[{"content":"Vector(T[], Int32)","pos":[0,18]}]},{"pos":[7794,7799],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[8800,8811],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"pos":[9843,9846],"content":"One","needQuote":true,"nodes":[{"content":"One","pos":[0,3]}]},{"pos":[10814,10818],"content":"Zero","needQuote":true,"nodes":[{"content":"Zero","pos":[0,4]}]},{"pos":[11817,11828],"content":"CopyTo(T[])","needQuote":true,"nodes":[{"content":"CopyTo(T[])","pos":[0,11]}]},{"pos":[12847,12865],"content":"CopyTo(T[], Int32)","needQuote":true,"nodes":[{"content":"CopyTo(T[], Int32)","pos":[0,18]}]},{"pos":[14045,14062],"content":"Equals(Vector<T>)","needQuote":true,"nodes":[{"content":"Equals(Vector&lt;T&gt;)","pos":[0,17],"source":"Equals(Vector<T>)"}]},{"pos":[15307,15321],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[16443,16456],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[17646,17676],"content":"Addition(Vector<T>, Vector<T>)","needQuote":true,"nodes":[{"content":"Addition(Vector&lt;T&gt;, Vector&lt;T&gt;)","pos":[0,30],"source":"Addition(Vector<T>, Vector<T>)"}]},{"pos":[19222,19254],"content":"BitwiseAnd(Vector<T>, Vector<T>)","needQuote":true,"nodes":[{"content":"BitwiseAnd(Vector&lt;T&gt;, Vector&lt;T&gt;)","pos":[0,32],"source":"BitwiseAnd(Vector<T>, Vector<T>)"}]},{"pos":[20811,20842],"content":"BitwiseOr(Vector<T>, Vector<T>)","needQuote":true,"nodes":[{"content":"BitwiseOr(Vector&lt;T&gt;, Vector&lt;T&gt;)","pos":[0,31],"source":"BitwiseOr(Vector<T>, Vector<T>)"}]},{"pos":[22389,22419],"content":"Division(Vector<T>, Vector<T>)","needQuote":true,"nodes":[{"content":"Division(Vector&lt;T&gt;, Vector&lt;T&gt;)","pos":[0,30],"source":"Division(Vector<T>, Vector<T>)"}]},{"pos":[23959,23989],"content":"Equality(Vector<T>, Vector<T>)","needQuote":true,"nodes":[{"content":"Equality(Vector&lt;T&gt;, Vector&lt;T&gt;)","pos":[0,30],"source":"Equality(Vector<T>, Vector<T>)"}]},{"pos":[25519,25552],"content":"ExclusiveOr(Vector<T>, Vector<T>)","needQuote":true,"nodes":[{"content":"ExclusiveOr(Vector&lt;T&gt;, Vector&lt;T&gt;)","pos":[0,33],"source":"ExclusiveOr(Vector<T>, Vector<T>)"}]},{"pos":[27139,27174],"content":"Explicit(Vector<T> to Vector<Byte>)","needQuote":true,"nodes":[{"content":"Explicit(Vector&lt;T&gt; to Vector&lt;Byte&gt;)","pos":[0,35],"source":"Explicit(Vector<T> to Vector<Byte>)"}]},{"pos":[28737,28774],"content":"Explicit(Vector<T> to Vector<Double>)","needQuote":true,"nodes":[{"content":"Explicit(Vector&lt;T&gt; to Vector&lt;Double&gt;)","pos":[0,37],"source":"Explicit(Vector<T> to Vector<Double>)"}]},{"pos":[30350,30386],"content":"Explicit(Vector<T> to Vector<Int16>)","needQuote":true,"nodes":[{"content":"Explicit(Vector&lt;T&gt; to Vector&lt;Int16&gt;)","pos":[0,36],"source":"Explicit(Vector<T> to Vector<Int16>)"}]},{"pos":[31954,31990],"content":"Explicit(Vector<T> to Vector<Int32>)","needQuote":true,"nodes":[{"content":"Explicit(Vector&lt;T&gt; to Vector&lt;Int32&gt;)","pos":[0,36],"source":"Explicit(Vector<T> to Vector<Int32>)"}]},{"pos":[33558,33594],"content":"Explicit(Vector<T> to Vector<Int64>)","needQuote":true,"nodes":[{"content":"Explicit(Vector&lt;T&gt; to Vector&lt;Int64&gt;)","pos":[0,36],"source":"Explicit(Vector<T> to Vector<Int64>)"}]},{"pos":[35160,35196],"content":"Explicit(Vector<T> to Vector<SByte>)","needQuote":true,"nodes":[{"content":"Explicit(Vector&lt;T&gt; to Vector&lt;SByte&gt;)","pos":[0,36],"source":"Explicit(Vector<T> to Vector<SByte>)"}]},{"pos":[37018,37055],"content":"Explicit(Vector<T> to Vector<Single>)","needQuote":true,"nodes":[{"content":"Explicit(Vector&lt;T&gt; to Vector&lt;Single&gt;)","pos":[0,37],"source":"Explicit(Vector<T> to Vector<Single>)"}]},{"pos":[38633,38670],"content":"Explicit(Vector<T> to Vector<UInt16>)","needQuote":true,"nodes":[{"content":"Explicit(Vector&lt;T&gt; to Vector&lt;UInt16&gt;)","pos":[0,37],"source":"Explicit(Vector<T> to Vector<UInt16>)"}]},{"pos":[40500,40537],"content":"Explicit(Vector<T> to Vector<UInt32>)","needQuote":true,"nodes":[{"content":"Explicit(Vector&lt;T&gt; to Vector&lt;UInt32&gt;)","pos":[0,37],"source":"Explicit(Vector<T> to Vector<UInt32>)"}]},{"pos":[42367,42404],"content":"Explicit(Vector<T> to Vector<UInt64>)","needQuote":true,"nodes":[{"content":"Explicit(Vector&lt;T&gt; to Vector&lt;UInt64&gt;)","pos":[0,37],"source":"Explicit(Vector<T> to Vector<UInt64>)"}]},{"pos":[44205,44237],"content":"Inequality(Vector<T>, Vector<T>)","needQuote":true,"nodes":[{"content":"Inequality(Vector&lt;T&gt;, Vector&lt;T&gt;)","pos":[0,32],"source":"Inequality(Vector<T>, Vector<T>)"}]},{"pos":[45699,45721],"content":"Multiply(T, Vector<T>)","needQuote":true,"nodes":[{"content":"Multiply(T, Vector&lt;T&gt;)","pos":[0,22],"source":"Multiply(T, Vector<T>)"}]},{"pos":[47076,47098],"content":"Multiply(Vector<T>, T)","needQuote":true,"nodes":[{"content":"Multiply(Vector&lt;T&gt;, T)","pos":[0,22],"source":"Multiply(Vector<T>, T)"}]},{"pos":[48525,48555],"content":"Multiply(Vector<T>, Vector<T>)","needQuote":true,"nodes":[{"content":"Multiply(Vector&lt;T&gt;, Vector&lt;T&gt;)","pos":[0,30],"source":"Multiply(Vector<T>, Vector<T>)"}]},{"pos":[50032,50057],"content":"OnesComplement(Vector<T>)","needQuote":true,"nodes":[{"content":"OnesComplement(Vector&lt;T&gt;)","pos":[0,25],"source":"OnesComplement(Vector<T>)"}]},{"pos":[51458,51491],"content":"Subtraction(Vector<T>, Vector<T>)","needQuote":true,"nodes":[{"content":"Subtraction(Vector&lt;T&gt;, Vector&lt;T&gt;)","pos":[0,33],"source":"Subtraction(Vector<T>, Vector<T>)"}]},{"pos":[52983,53007],"content":"UnaryNegation(Vector<T>)","needQuote":true,"nodes":[{"content":"UnaryNegation(Vector&lt;T&gt;)","pos":[0,24],"source":"UnaryNegation(Vector<T>)"}]},{"pos":[54217,54227],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[55267,55283],"content":"ToString(String)","needQuote":true,"nodes":[{"content":"ToString(String)","pos":[0,16]}]},{"pos":[56434,56467],"content":"ToString(String, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToString(String, IFormatProvider)","pos":[0,33]}]},{"pos":[57717,57732],"content":"System.Numerics","needQuote":true,"nodes":[{"content":"System.Numerics","pos":[0,15]}]},{"pos":[57962,57983],"content":"IEquatable<Vector<T>>","needQuote":true,"nodes":[{"content":"IEquatable&lt;Vector&lt;T&gt;&gt;","pos":[0,21],"source":"IEquatable<Vector<T>>"}]},{"pos":[58285,58295],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[58388,58389],"content":"<","needQuote":true,"nodes":[]},{"pos":[58470,58476],"content":"Vector","needQuote":true,"nodes":[{"content":"Vector","pos":[0,6]}]},{"pos":[58549,58550],"content":"<","needQuote":true,"nodes":[]},{"pos":[58597,58598],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[58793,58803],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[58897,58900]},{"pos":[58993,58999],"content":"Vector","needQuote":true,"nodes":[{"content":"Vector","pos":[0,6]}]},{"content":"(Of","pos":[59073,59076]},{"pos":[59135,59136],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[59183,59184],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59231,59232],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59376,59388],"content":"IFormattable","needQuote":true,"nodes":[{"content":"IFormattable","pos":[0,12]}]},{"pos":[59623,59645],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[59839,59845],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[59944,59945],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60015,60021],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[60107,60108]},{"pos":[60186,60192],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[60277,60278],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60395,60401],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[60500,60501],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60571,60577],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[60663,60664]},{"pos":[60742,60748],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[60833,60834],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61062,61093],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[61314,61329],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[61446,61447],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61517,61523],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[61609,61610]},{"pos":[61688,61694],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[61779,61780],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61906,61921],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[62038,62039],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62109,62115],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[62201,62202]},{"pos":[62280,62286],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[62371,62372],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62526,62535],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[62661,62668],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[62769,62770],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62817,62818],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62907,62914],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[63015,63016],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63063,63064],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63191,63204],"content":"IEquatable<T>","needQuote":true,"nodes":[{"content":"IEquatable&lt;T&gt;","pos":[0,13],"source":"IEquatable<T>"}]},{"pos":[63425,63435],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[63507,63508],"content":"<","needQuote":true,"nodes":[]},{"pos":[63555,63556],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[63697,63707],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[63780,63783]},{"pos":[63842,63843],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[63890,63891],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63992,63998],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[64136,64142],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[64248,64249],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[64319,64320],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[64376,64379],"content":"T[]","needQuote":true,"nodes":[{"content":"T[]","pos":[0,3]}]},{"pos":[64498,64499],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"content":"[]","pos":[64547,64549]},{"pos":[64614,64615],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[64662,64664],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[64796,64801],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[64975,64984],"content":"Vector<T>","needQuote":true,"nodes":[{"content":"Vector&lt;T&gt;","pos":[0,9],"source":"Vector<T>"}]},{"pos":[65208,65214],"content":"Vector","needQuote":true,"nodes":[{"content":"Vector","pos":[0,6]}]},{"pos":[65287,65288],"content":"<","needQuote":true,"nodes":[]},{"pos":[65335,65336],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[65482,65488],"content":"Vector","needQuote":true,"nodes":[{"content":"Vector","pos":[0,6]}]},{"content":"(Of","pos":[65562,65565]},{"pos":[65624,65625],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[65672,65673],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65998,66015],"content":"Equals(Vector<T>)","needQuote":true,"nodes":[{"content":"Equals(Vector&lt;T&gt;)","pos":[0,17],"source":"Equals(Vector<T>)"}]},{"pos":[66431,66437],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[66582,66583],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66664,66670],"content":"Vector","needQuote":true,"nodes":[{"content":"Vector","pos":[0,6]}]},{"pos":[66743,66744],"content":"<","needQuote":true,"nodes":[]},{"pos":[66791,66792],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[66893,66894],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66992,66998],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[67155,67156],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67237,67243],"content":"Vector","needQuote":true,"nodes":[{"content":"Vector","pos":[0,6]}]},{"content":"(Of","pos":[67317,67320]},{"pos":[67379,67380],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[67427,67428],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67475,67476],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67610,67617],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[67781,67790],"content":"Equals(T)","needQuote":true,"nodes":[{"content":"Equals(T)","pos":[0,9]}]},{"pos":[68034,68040],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[68132,68133],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68180,68181],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[68228,68229],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68327,68333],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[68431,68432],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68479,68480],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[68527,68528],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68719,68733],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[68899,68905],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[68989,68990],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69060,69066],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[69151,69152],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69258,69264],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[69348,69349],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69419,69425],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[69510,69511],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69649,69658],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[69849,69862],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[70009,70020],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[70114,70115],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70162,70163],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70259,70270],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[70364,70365],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70412,70413],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70617,70629],"content":"Vector<Byte>","needQuote":true,"nodes":[{"content":"Vector&lt;Byte&gt;","pos":[0,12],"source":"Vector<Byte>"}]},{"pos":[70882,70888],"content":"Vector","needQuote":true,"nodes":[{"content":"Vector","pos":[0,6]}]},{"pos":[70961,70962],"content":"<","needQuote":true,"nodes":[]},{"pos":[71030,71034],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[71214,71220],"content":"Vector","needQuote":true,"nodes":[{"content":"Vector","pos":[0,6]}]},{"content":"(Of","pos":[71294,71297]},{"pos":[71377,71381],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[71462,71463],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71671,71685],"content":"Vector<Double>","needQuote":true,"nodes":[{"content":"Vector&lt;Double&gt;","pos":[0,14],"source":"Vector<Double>"}]},{"pos":[71948,71954],"content":"Vector","needQuote":true,"nodes":[{"content":"Vector","pos":[0,6]}]},{"pos":[72027,72028],"content":"<","needQuote":true,"nodes":[]},{"pos":[72098,72104],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[72288,72294],"content":"Vector","needQuote":true,"nodes":[{"content":"Vector","pos":[0,6]}]},{"content":"(Of","pos":[72368,72371]},{"pos":[72453,72459],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[72544,72545],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72751,72764],"content":"Vector<Int16>","needQuote":true,"nodes":[{"content":"Vector&lt;Int16&gt;","pos":[0,13],"source":"Vector<Int16>"}]},{"pos":[73022,73028],"content":"Vector","needQuote":true,"nodes":[{"content":"Vector","pos":[0,6]}]},{"pos":[73101,73102],"content":"<","needQuote":true,"nodes":[]},{"pos":[73171,73176],"content":"Int16","needQuote":true,"nodes":[{"content":"Int16","pos":[0,5]}]},{"pos":[73358,73364],"content":"Vector","needQuote":true,"nodes":[{"content":"Vector","pos":[0,6]}]},{"content":"(Of","pos":[73438,73441]},{"pos":[73522,73527],"content":"Int16","needQuote":true,"nodes":[{"content":"Int16","pos":[0,5]}]},{"pos":[73610,73611],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73817,73830],"content":"Vector<Int32>","needQuote":true,"nodes":[{"content":"Vector&lt;Int32&gt;","pos":[0,13],"source":"Vector<Int32>"}]},{"pos":[74088,74094],"content":"Vector","needQuote":true,"nodes":[{"content":"Vector","pos":[0,6]}]},{"pos":[74167,74168],"content":"<","needQuote":true,"nodes":[]},{"pos":[74237,74242],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[74424,74430],"content":"Vector","needQuote":true,"nodes":[{"content":"Vector","pos":[0,6]}]},{"content":"(Of","pos":[74504,74507]},{"pos":[74588,74593],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[74676,74677],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74883,74896],"content":"Vector<Int64>","needQuote":true,"nodes":[{"content":"Vector&lt;Int64&gt;","pos":[0,13],"source":"Vector<Int64>"}]},{"pos":[75154,75160],"content":"Vector","needQuote":true,"nodes":[{"content":"Vector","pos":[0,6]}]},{"pos":[75233,75234],"content":"<","needQuote":true,"nodes":[]},{"pos":[75303,75308],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[75490,75496],"content":"Vector","needQuote":true,"nodes":[{"content":"Vector","pos":[0,6]}]},{"content":"(Of","pos":[75570,75573]},{"pos":[75654,75659],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[75742,75743],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75949,75962],"content":"Vector<SByte>","needQuote":true,"nodes":[{"content":"Vector&lt;SByte&gt;","pos":[0,13],"source":"Vector<SByte>"}]},{"pos":[76220,76226],"content":"Vector","needQuote":true,"nodes":[{"content":"Vector","pos":[0,6]}]},{"pos":[76299,76300],"content":"<","needQuote":true,"nodes":[]},{"pos":[76369,76374],"content":"SByte","needQuote":true,"nodes":[{"content":"SByte","pos":[0,5]}]},{"pos":[76556,76562],"content":"Vector","needQuote":true,"nodes":[{"content":"Vector","pos":[0,6]}]},{"content":"(Of","pos":[76636,76639]},{"pos":[76720,76725],"content":"SByte","needQuote":true,"nodes":[{"content":"SByte","pos":[0,5]}]},{"pos":[76808,76809],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77017,77031],"content":"Vector<Single>","needQuote":true,"nodes":[{"content":"Vector&lt;Single&gt;","pos":[0,14],"source":"Vector<Single>"}]},{"pos":[77294,77300],"content":"Vector","needQuote":true,"nodes":[{"content":"Vector","pos":[0,6]}]},{"pos":[77373,77374],"content":"<","needQuote":true,"nodes":[]},{"pos":[77444,77450],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[77634,77640],"content":"Vector","needQuote":true,"nodes":[{"content":"Vector","pos":[0,6]}]},{"content":"(Of","pos":[77714,77717]},{"pos":[77799,77805],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[77890,77891],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78099,78113],"content":"Vector<UInt16>","needQuote":true,"nodes":[{"content":"Vector&lt;UInt16&gt;","pos":[0,14],"source":"Vector<UInt16>"}]},{"pos":[78376,78382],"content":"Vector","needQuote":true,"nodes":[{"content":"Vector","pos":[0,6]}]},{"pos":[78455,78456],"content":"<","needQuote":true,"nodes":[]},{"pos":[78526,78532],"content":"UInt16","needQuote":true,"nodes":[{"content":"UInt16","pos":[0,6]}]},{"pos":[78716,78722],"content":"Vector","needQuote":true,"nodes":[{"content":"Vector","pos":[0,6]}]},{"content":"(Of","pos":[78796,78799]},{"pos":[78881,78887],"content":"UInt16","needQuote":true,"nodes":[{"content":"UInt16","pos":[0,6]}]},{"pos":[78972,78973],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79181,79195],"content":"Vector<UInt32>","needQuote":true,"nodes":[{"content":"Vector&lt;UInt32&gt;","pos":[0,14],"source":"Vector<UInt32>"}]},{"pos":[79458,79464],"content":"Vector","needQuote":true,"nodes":[{"content":"Vector","pos":[0,6]}]},{"pos":[79537,79538],"content":"<","needQuote":true,"nodes":[]},{"pos":[79608,79614],"content":"UInt32","needQuote":true,"nodes":[{"content":"UInt32","pos":[0,6]}]},{"pos":[79798,79804],"content":"Vector","needQuote":true,"nodes":[{"content":"Vector","pos":[0,6]}]},{"content":"(Of","pos":[79878,79881]},{"pos":[79963,79969],"content":"UInt32","needQuote":true,"nodes":[{"content":"UInt32","pos":[0,6]}]},{"pos":[80054,80055],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80263,80277],"content":"Vector<UInt64>","needQuote":true,"nodes":[{"content":"Vector&lt;UInt64&gt;","pos":[0,14],"source":"Vector<UInt64>"}]},{"pos":[80540,80546],"content":"Vector","needQuote":true,"nodes":[{"content":"Vector","pos":[0,6]}]},{"pos":[80619,80620],"content":"<","needQuote":true,"nodes":[]},{"pos":[80690,80696],"content":"UInt64","needQuote":true,"nodes":[{"content":"UInt64","pos":[0,6]}]},{"pos":[80880,80886],"content":"Vector","needQuote":true,"nodes":[{"content":"Vector","pos":[0,6]}]},{"content":"(Of","pos":[80960,80963]},{"pos":[81045,81051],"content":"UInt64","needQuote":true,"nodes":[{"content":"UInt64","pos":[0,6]}]},{"pos":[81136,81137],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81303,81313],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[81451,81459],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[81547,81548],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81595,81596],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81689,81697],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[81785,81786],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81833,81834],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81966,81972],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[82235,82268],"content":"ToString(String, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToString(String, IFormatProvider)","pos":[0,33]}]},{"pos":[82513,82521],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[82615,82616],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82686,82692],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[82778,82779]},{"pos":[82866,82881],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[82963,82964],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83098,83106],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[83200,83201],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83271,83277],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[83363,83364]},{"pos":[83451,83466],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[83548,83549],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83699,83714],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]}],"content":"items:\n- uid: System.Numerics.Vector`1\n  commentId: T:System.Numerics.Vector`1\n  id: Vector`1\n  parent: System.Numerics\n  children:\n  - System.Numerics.Vector`1.#ctor(`0)\n  - System.Numerics.Vector`1.#ctor(`0[])\n  - System.Numerics.Vector`1.#ctor(`0[],System.Int32)\n  - System.Numerics.Vector`1.CopyTo(`0[])\n  - System.Numerics.Vector`1.CopyTo(`0[],System.Int32)\n  - System.Numerics.Vector`1.Count\n  - System.Numerics.Vector`1.Equals(System.Numerics.Vector{`0})\n  - System.Numerics.Vector`1.Equals(System.Object)\n  - System.Numerics.Vector`1.GetHashCode\n  - System.Numerics.Vector`1.Item(System.Int32)\n  - System.Numerics.Vector`1.One\n  - System.Numerics.Vector`1.op_Addition(System.Numerics.Vector{`0},System.Numerics.Vector{`0})\n  - System.Numerics.Vector`1.op_BitwiseAnd(System.Numerics.Vector{`0},System.Numerics.Vector{`0})\n  - System.Numerics.Vector`1.op_BitwiseOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})\n  - System.Numerics.Vector`1.op_Division(System.Numerics.Vector{`0},System.Numerics.Vector{`0})\n  - System.Numerics.Vector`1.op_Equality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})\n  - System.Numerics.Vector`1.op_ExclusiveOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})\n  - System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Byte}\n  - System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Double}\n  - System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int16}\n  - System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int32}\n  - System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int64}\n  - System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.SByte}\n  - System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Single}\n  - System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt16}\n  - System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt32}\n  - System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt64}\n  - System.Numerics.Vector`1.op_Inequality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})\n  - System.Numerics.Vector`1.op_Multiply(`0,System.Numerics.Vector{`0})\n  - System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},`0)\n  - System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},System.Numerics.Vector{`0})\n  - System.Numerics.Vector`1.op_OnesComplement(System.Numerics.Vector{`0})\n  - System.Numerics.Vector`1.op_Subtraction(System.Numerics.Vector{`0},System.Numerics.Vector{`0})\n  - System.Numerics.Vector`1.op_UnaryNegation(System.Numerics.Vector{`0})\n  - System.Numerics.Vector`1.ToString\n  - System.Numerics.Vector`1.ToString(System.String)\n  - System.Numerics.Vector`1.ToString(System.String,System.IFormatProvider)\n  - System.Numerics.Vector`1.Zero\n  langs:\n  - csharp\n  - vb\n  name: Vector<T>\n  nameWithType: Vector<T>\n  fullName: System.Numerics.Vector<T>\n  type: Struct\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Vector\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 267\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: >-\n      [StructLayout(LayoutKind.Sequential)]\n\n      public struct Vector<T> : IEquatable<Vector<T>>, IFormattable where T : struct\n    content.vb: >-\n      <StructLayout(LayoutKind.Sequential)>\n\n      Public Structure Vector(Of T As Structure)\n          Implements IEquatable(Of Vector(Of T)), IFormattable\n    typeParameters:\n    - id: T\n  implements:\n  - System.IEquatable{System.Numerics.Vector`1}\n  - System.IFormattable\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  nameWithType.vb: Vector(Of T)\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  fullName.vb: System.Numerics.Vector(Of T)\n  name.vb: Vector(Of T)\n- uid: System.Numerics.Vector`1.#ctor(`0)\n  commentId: M:System.Numerics.Vector`1.#ctor(`0)\n  id: '#ctor(`0)'\n  parent: System.Numerics.Vector`1\n  langs:\n  - csharp\n  - vb\n  name: Vector(T)\n  nameWithType: Vector<T>.Vector(T)\n  fullName: System.Numerics.Vector<T>.Vector(T)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 270\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public Vector(T value)\n    content.vb: Public Sub New(value As T)\n    parameters:\n    - id: value\n      type: '{T}'\n  nameWithType.vb: Vector(Of T).Vector(T)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Numerics.Vector(Of T).Vector(T)\n- uid: System.Numerics.Vector`1.#ctor(`0[])\n  commentId: M:System.Numerics.Vector`1.#ctor(`0[])\n  id: '#ctor(`0[])'\n  parent: System.Numerics.Vector`1\n  langs:\n  - csharp\n  - vb\n  name: Vector(T[])\n  nameWithType: Vector<T>.Vector(T[])\n  fullName: System.Numerics.Vector<T>.Vector(T[])\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 271\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public Vector(T[] values)\n    content.vb: Public Sub New(values As T())\n    parameters:\n    - id: values\n      type: '{T}[]'\n  nameWithType.vb: Vector(Of T).Vector(T())\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Numerics.Vector(Of T).Vector(T())\n  name.vb: Vector(T())\n- uid: System.Numerics.Vector`1.#ctor(`0[],System.Int32)\n  commentId: M:System.Numerics.Vector`1.#ctor(`0[],System.Int32)\n  id: '#ctor(`0[],System.Int32)'\n  parent: System.Numerics.Vector`1\n  langs:\n  - csharp\n  - vb\n  name: Vector(T[], Int32)\n  nameWithType: Vector<T>.Vector(T[], Int32)\n  fullName: System.Numerics.Vector<T>.Vector(T[], System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 272\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public Vector(T[] values, int index)\n    content.vb: Public Sub New(values As T(), index As Integer)\n    parameters:\n    - id: values\n      type: '{T}[]'\n    - id: index\n      type: System.Int32\n  nameWithType.vb: Vector(Of T).Vector(T(), Int32)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Numerics.Vector(Of T).Vector(T(), System.Int32)\n  name.vb: Vector(T(), Int32)\n- uid: System.Numerics.Vector`1.Count\n  commentId: P:System.Numerics.Vector`1.Count\n  id: Count\n  parent: System.Numerics.Vector`1\n  langs:\n  - csharp\n  - vb\n  name: Count\n  nameWithType: Vector<T>.Count\n  fullName: System.Numerics.Vector<T>.Count\n  type: Property\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Count\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 273\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public static int Count { get; }\n    content.vb: Public Shared ReadOnly Property Count As Integer\n    parameters: []\n    return:\n      type: System.Int32\n  nameWithType.vb: Vector(Of T).Count\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  fullName.vb: System.Numerics.Vector(Of T).Count\n- uid: System.Numerics.Vector`1.Item(System.Int32)\n  commentId: P:System.Numerics.Vector`1.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Numerics.Vector`1\n  langs:\n  - csharp\n  - vb\n  name: Item[Int32]\n  nameWithType: Vector<T>.Item[Int32]\n  fullName: System.Numerics.Vector<T>.Item[System.Int32]\n  type: Property\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: this[]\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 274\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public T this[int index] { get; }\n    content.vb: Public ReadOnly Property Item(index As Integer) As T\n    parameters:\n    - id: index\n      type: System.Int32\n    return:\n      type: '{T}'\n  nameWithType.vb: Vector(Of T).Item(Int32)\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  fullName.vb: System.Numerics.Vector(Of T).Item(System.Int32)\n  name.vb: Item(Int32)\n- uid: System.Numerics.Vector`1.One\n  commentId: P:System.Numerics.Vector`1.One\n  id: One\n  parent: System.Numerics.Vector`1\n  langs:\n  - csharp\n  - vb\n  name: One\n  nameWithType: Vector<T>.One\n  fullName: System.Numerics.Vector<T>.One\n  type: Property\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: One\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 275\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public static Vector<T> One { get; }\n    content.vb: Public Shared ReadOnly Property One As Vector(Of T)\n    parameters: []\n    return:\n      type: System.Numerics.Vector`1\n  nameWithType.vb: Vector(Of T).One\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  fullName.vb: System.Numerics.Vector(Of T).One\n- uid: System.Numerics.Vector`1.Zero\n  commentId: P:System.Numerics.Vector`1.Zero\n  id: Zero\n  parent: System.Numerics.Vector`1\n  langs:\n  - csharp\n  - vb\n  name: Zero\n  nameWithType: Vector<T>.Zero\n  fullName: System.Numerics.Vector<T>.Zero\n  type: Property\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Zero\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 276\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public static Vector<T> Zero { get; }\n    content.vb: Public Shared ReadOnly Property Zero As Vector(Of T)\n    parameters: []\n    return:\n      type: System.Numerics.Vector`1\n  nameWithType.vb: Vector(Of T).Zero\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  fullName.vb: System.Numerics.Vector(Of T).Zero\n- uid: System.Numerics.Vector`1.CopyTo(`0[])\n  commentId: M:System.Numerics.Vector`1.CopyTo(`0[])\n  id: CopyTo(`0[])\n  parent: System.Numerics.Vector`1\n  langs:\n  - csharp\n  - vb\n  name: CopyTo(T[])\n  nameWithType: Vector<T>.CopyTo(T[])\n  fullName: System.Numerics.Vector<T>.CopyTo(T[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CopyTo\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 277\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public void CopyTo(T[] destination)\n    content.vb: Public Sub CopyTo(destination As T())\n    parameters:\n    - id: destination\n      type: '{T}[]'\n  nameWithType.vb: Vector(Of T).CopyTo(T())\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Numerics.Vector(Of T).CopyTo(T())\n  name.vb: CopyTo(T())\n- uid: System.Numerics.Vector`1.CopyTo(`0[],System.Int32)\n  commentId: M:System.Numerics.Vector`1.CopyTo(`0[],System.Int32)\n  id: CopyTo(`0[],System.Int32)\n  parent: System.Numerics.Vector`1\n  langs:\n  - csharp\n  - vb\n  name: CopyTo(T[], Int32)\n  nameWithType: Vector<T>.CopyTo(T[], Int32)\n  fullName: System.Numerics.Vector<T>.CopyTo(T[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CopyTo\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 278\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public void CopyTo(T[] destination, int startIndex)\n    content.vb: Public Sub CopyTo(destination As T(), startIndex As Integer)\n    parameters:\n    - id: destination\n      type: '{T}[]'\n    - id: startIndex\n      type: System.Int32\n  nameWithType.vb: Vector(Of T).CopyTo(T(), Int32)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Numerics.Vector(Of T).CopyTo(T(), System.Int32)\n  name.vb: CopyTo(T(), Int32)\n- uid: System.Numerics.Vector`1.Equals(System.Numerics.Vector{`0})\n  commentId: M:System.Numerics.Vector`1.Equals(System.Numerics.Vector{`0})\n  id: Equals(System.Numerics.Vector{`0})\n  parent: System.Numerics.Vector`1\n  langs:\n  - csharp\n  - vb\n  name: Equals(Vector<T>)\n  nameWithType: Vector<T>.Equals(Vector<T>)\n  fullName: System.Numerics.Vector<T>.Equals(System.Numerics.Vector<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 279\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public bool Equals(Vector<T> other)\n    content.vb: Public Function Equals(other As Vector(Of T)) As Boolean\n    parameters:\n    - id: other\n      type: System.Numerics.Vector`1\n    return:\n      type: System.Boolean\n  implements:\n  - System.IEquatable{System.Numerics.Vector`1}.Equals(System.Numerics.Vector{{T}})\n  nameWithType.vb: Vector(Of T).Equals(Vector(Of T))\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Numerics.Vector(Of T).Equals(System.Numerics.Vector(Of T))\n  name.vb: Equals(Vector(Of T))\n- uid: System.Numerics.Vector`1.Equals(System.Object)\n  commentId: M:System.Numerics.Vector`1.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Numerics.Vector`1\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  nameWithType: Vector<T>.Equals(Object)\n  fullName: System.Numerics.Vector<T>.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 280\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n    return:\n      type: System.Boolean\n  overridden: System.ValueType.Equals(System.Object)\n  nameWithType.vb: Vector(Of T).Equals(Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Numerics.Vector(Of T).Equals(System.Object)\n- uid: System.Numerics.Vector`1.GetHashCode\n  commentId: M:System.Numerics.Vector`1.GetHashCode\n  id: GetHashCode\n  parent: System.Numerics.Vector`1\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  nameWithType: Vector<T>.GetHashCode()\n  fullName: System.Numerics.Vector<T>.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 281\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n  overridden: System.ValueType.GetHashCode\n  nameWithType.vb: Vector(Of T).GetHashCode()\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Numerics.Vector(Of T).GetHashCode()\n- uid: System.Numerics.Vector`1.op_Addition(System.Numerics.Vector{`0},System.Numerics.Vector{`0})\n  commentId: M:System.Numerics.Vector`1.op_Addition(System.Numerics.Vector{`0},System.Numerics.Vector{`0})\n  id: op_Addition(System.Numerics.Vector{`0},System.Numerics.Vector{`0})\n  parent: System.Numerics.Vector`1\n  langs:\n  - csharp\n  - vb\n  name: Addition(Vector<T>, Vector<T>)\n  nameWithType: Vector<T>.Addition(Vector<T>, Vector<T>)\n  fullName: System.Numerics.Vector<T>.Addition(System.Numerics.Vector<T>, System.Numerics.Vector<T>)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Addition\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 282\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public static Vector<T> operator +(Vector<T> left, Vector<T> right)\n    content.vb: Public Shared Operator +(left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)\n    parameters:\n    - id: left\n      type: System.Numerics.Vector`1\n    - id: right\n      type: System.Numerics.Vector`1\n    return:\n      type: System.Numerics.Vector`1\n  nameWithType.vb: Vector(Of T).Addition(Vector(Of T), Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector(Of T).Addition(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))\n  name.vb: Addition(Vector(Of T), Vector(Of T))\n- uid: System.Numerics.Vector`1.op_BitwiseAnd(System.Numerics.Vector{`0},System.Numerics.Vector{`0})\n  commentId: M:System.Numerics.Vector`1.op_BitwiseAnd(System.Numerics.Vector{`0},System.Numerics.Vector{`0})\n  id: op_BitwiseAnd(System.Numerics.Vector{`0},System.Numerics.Vector{`0})\n  parent: System.Numerics.Vector`1\n  langs:\n  - csharp\n  - vb\n  name: BitwiseAnd(Vector<T>, Vector<T>)\n  nameWithType: Vector<T>.BitwiseAnd(Vector<T>, Vector<T>)\n  fullName: System.Numerics.Vector<T>.BitwiseAnd(System.Numerics.Vector<T>, System.Numerics.Vector<T>)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_BitwiseAnd\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 283\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public static Vector<T> operator &(Vector<T> left, Vector<T> right)\n    content.vb: Public Shared Operator And(left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)\n    parameters:\n    - id: left\n      type: System.Numerics.Vector`1\n    - id: right\n      type: System.Numerics.Vector`1\n    return:\n      type: System.Numerics.Vector`1\n  nameWithType.vb: Vector(Of T).BitwiseAnd(Vector(Of T), Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector(Of T).BitwiseAnd(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))\n  name.vb: BitwiseAnd(Vector(Of T), Vector(Of T))\n- uid: System.Numerics.Vector`1.op_BitwiseOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})\n  commentId: M:System.Numerics.Vector`1.op_BitwiseOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})\n  id: op_BitwiseOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})\n  parent: System.Numerics.Vector`1\n  langs:\n  - csharp\n  - vb\n  name: BitwiseOr(Vector<T>, Vector<T>)\n  nameWithType: Vector<T>.BitwiseOr(Vector<T>, Vector<T>)\n  fullName: System.Numerics.Vector<T>.BitwiseOr(System.Numerics.Vector<T>, System.Numerics.Vector<T>)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_BitwiseOr\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 284\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public static Vector<T> operator |(Vector<T> left, Vector<T> right)\n    content.vb: Public Shared Operator Or(left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)\n    parameters:\n    - id: left\n      type: System.Numerics.Vector`1\n    - id: right\n      type: System.Numerics.Vector`1\n    return:\n      type: System.Numerics.Vector`1\n  nameWithType.vb: Vector(Of T).BitwiseOr(Vector(Of T), Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector(Of T).BitwiseOr(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))\n  name.vb: BitwiseOr(Vector(Of T), Vector(Of T))\n- uid: System.Numerics.Vector`1.op_Division(System.Numerics.Vector{`0},System.Numerics.Vector{`0})\n  commentId: M:System.Numerics.Vector`1.op_Division(System.Numerics.Vector{`0},System.Numerics.Vector{`0})\n  id: op_Division(System.Numerics.Vector{`0},System.Numerics.Vector{`0})\n  parent: System.Numerics.Vector`1\n  langs:\n  - csharp\n  - vb\n  name: Division(Vector<T>, Vector<T>)\n  nameWithType: Vector<T>.Division(Vector<T>, Vector<T>)\n  fullName: System.Numerics.Vector<T>.Division(System.Numerics.Vector<T>, System.Numerics.Vector<T>)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Division\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 285\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public static Vector<T> operator /(Vector<T> left, Vector<T> right)\n    content.vb: Public Shared Operator /(left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)\n    parameters:\n    - id: left\n      type: System.Numerics.Vector`1\n    - id: right\n      type: System.Numerics.Vector`1\n    return:\n      type: System.Numerics.Vector`1\n  nameWithType.vb: Vector(Of T).Division(Vector(Of T), Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector(Of T).Division(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))\n  name.vb: Division(Vector(Of T), Vector(Of T))\n- uid: System.Numerics.Vector`1.op_Equality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})\n  commentId: M:System.Numerics.Vector`1.op_Equality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})\n  id: op_Equality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})\n  parent: System.Numerics.Vector`1\n  langs:\n  - csharp\n  - vb\n  name: Equality(Vector<T>, Vector<T>)\n  nameWithType: Vector<T>.Equality(Vector<T>, Vector<T>)\n  fullName: System.Numerics.Vector<T>.Equality(System.Numerics.Vector<T>, System.Numerics.Vector<T>)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Equality\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 286\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public static bool operator ==(Vector<T> left, Vector<T> right)\n    content.vb: Public Shared Operator =(left As Vector(Of T), right As Vector(Of T)) As Boolean\n    parameters:\n    - id: left\n      type: System.Numerics.Vector`1\n    - id: right\n      type: System.Numerics.Vector`1\n    return:\n      type: System.Boolean\n  nameWithType.vb: Vector(Of T).Equality(Vector(Of T), Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector(Of T).Equality(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))\n  name.vb: Equality(Vector(Of T), Vector(Of T))\n- uid: System.Numerics.Vector`1.op_ExclusiveOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})\n  commentId: M:System.Numerics.Vector`1.op_ExclusiveOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})\n  id: op_ExclusiveOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})\n  parent: System.Numerics.Vector`1\n  langs:\n  - csharp\n  - vb\n  name: ExclusiveOr(Vector<T>, Vector<T>)\n  nameWithType: Vector<T>.ExclusiveOr(Vector<T>, Vector<T>)\n  fullName: System.Numerics.Vector<T>.ExclusiveOr(System.Numerics.Vector<T>, System.Numerics.Vector<T>)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_ExclusiveOr\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 287\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public static Vector<T> operator ^(Vector<T> left, Vector<T> right)\n    content.vb: Public Shared Operator Xor(left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)\n    parameters:\n    - id: left\n      type: System.Numerics.Vector`1\n    - id: right\n      type: System.Numerics.Vector`1\n    return:\n      type: System.Numerics.Vector`1\n  nameWithType.vb: Vector(Of T).ExclusiveOr(Vector(Of T), Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector(Of T).ExclusiveOr(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))\n  name.vb: ExclusiveOr(Vector(Of T), Vector(Of T))\n- uid: System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Byte}\n  commentId: M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Byte}\n  id: op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Byte}\n  parent: System.Numerics.Vector`1\n  langs:\n  - csharp\n  - vb\n  name: Explicit(Vector<T> to Vector<Byte>)\n  nameWithType: Vector<T>.Explicit(Vector<T> to Vector<Byte>)\n  fullName: System.Numerics.Vector<T>.Explicit(System.Numerics.Vector<T> to System.Numerics.Vector<System.Byte>)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 288\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public static explicit operator Vector<byte>(Vector<T> value)\n    content.vb: Public Shared Narrowing Operator CType(value As Vector(Of T)) As Vector(Of Byte)\n    parameters:\n    - id: value\n      type: System.Numerics.Vector`1\n    return:\n      type: System.Numerics.Vector{System.Byte}\n  nameWithType.vb: Vector(Of T).Narrowing(Vector(Of T) to Vector(Of Byte))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector(Of T).Narrowing(System.Numerics.Vector(Of T) to System.Numerics.Vector(Of System.Byte))\n  name.vb: Narrowing(Vector(Of T) to Vector(Of Byte))\n- uid: System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Double}\n  commentId: M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Double}\n  id: op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Double}\n  parent: System.Numerics.Vector`1\n  langs:\n  - csharp\n  - vb\n  name: Explicit(Vector<T> to Vector<Double>)\n  nameWithType: Vector<T>.Explicit(Vector<T> to Vector<Double>)\n  fullName: System.Numerics.Vector<T>.Explicit(System.Numerics.Vector<T> to System.Numerics.Vector<System.Double>)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 289\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public static explicit operator Vector<double>(Vector<T> value)\n    content.vb: Public Shared Narrowing Operator CType(value As Vector(Of T)) As Vector(Of Double)\n    parameters:\n    - id: value\n      type: System.Numerics.Vector`1\n    return:\n      type: System.Numerics.Vector{System.Double}\n  nameWithType.vb: Vector(Of T).Narrowing(Vector(Of T) to Vector(Of Double))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector(Of T).Narrowing(System.Numerics.Vector(Of T) to System.Numerics.Vector(Of System.Double))\n  name.vb: Narrowing(Vector(Of T) to Vector(Of Double))\n- uid: System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int16}\n  commentId: M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int16}\n  id: op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int16}\n  parent: System.Numerics.Vector`1\n  langs:\n  - csharp\n  - vb\n  name: Explicit(Vector<T> to Vector<Int16>)\n  nameWithType: Vector<T>.Explicit(Vector<T> to Vector<Int16>)\n  fullName: System.Numerics.Vector<T>.Explicit(System.Numerics.Vector<T> to System.Numerics.Vector<System.Int16>)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 290\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public static explicit operator Vector<short>(Vector<T> value)\n    content.vb: Public Shared Narrowing Operator CType(value As Vector(Of T)) As Vector(Of Short)\n    parameters:\n    - id: value\n      type: System.Numerics.Vector`1\n    return:\n      type: System.Numerics.Vector{System.Int16}\n  nameWithType.vb: Vector(Of T).Narrowing(Vector(Of T) to Vector(Of Int16))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector(Of T).Narrowing(System.Numerics.Vector(Of T) to System.Numerics.Vector(Of System.Int16))\n  name.vb: Narrowing(Vector(Of T) to Vector(Of Int16))\n- uid: System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int32}\n  commentId: M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int32}\n  id: op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int32}\n  parent: System.Numerics.Vector`1\n  langs:\n  - csharp\n  - vb\n  name: Explicit(Vector<T> to Vector<Int32>)\n  nameWithType: Vector<T>.Explicit(Vector<T> to Vector<Int32>)\n  fullName: System.Numerics.Vector<T>.Explicit(System.Numerics.Vector<T> to System.Numerics.Vector<System.Int32>)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 291\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public static explicit operator Vector<int>(Vector<T> value)\n    content.vb: Public Shared Narrowing Operator CType(value As Vector(Of T)) As Vector(Of Integer)\n    parameters:\n    - id: value\n      type: System.Numerics.Vector`1\n    return:\n      type: System.Numerics.Vector{System.Int32}\n  nameWithType.vb: Vector(Of T).Narrowing(Vector(Of T) to Vector(Of Int32))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector(Of T).Narrowing(System.Numerics.Vector(Of T) to System.Numerics.Vector(Of System.Int32))\n  name.vb: Narrowing(Vector(Of T) to Vector(Of Int32))\n- uid: System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int64}\n  commentId: M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int64}\n  id: op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int64}\n  parent: System.Numerics.Vector`1\n  langs:\n  - csharp\n  - vb\n  name: Explicit(Vector<T> to Vector<Int64>)\n  nameWithType: Vector<T>.Explicit(Vector<T> to Vector<Int64>)\n  fullName: System.Numerics.Vector<T>.Explicit(System.Numerics.Vector<T> to System.Numerics.Vector<System.Int64>)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 292\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public static explicit operator Vector<long>(Vector<T> value)\n    content.vb: Public Shared Narrowing Operator CType(value As Vector(Of T)) As Vector(Of Long)\n    parameters:\n    - id: value\n      type: System.Numerics.Vector`1\n    return:\n      type: System.Numerics.Vector{System.Int64}\n  nameWithType.vb: Vector(Of T).Narrowing(Vector(Of T) to Vector(Of Int64))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector(Of T).Narrowing(System.Numerics.Vector(Of T) to System.Numerics.Vector(Of System.Int64))\n  name.vb: Narrowing(Vector(Of T) to Vector(Of Int64))\n- uid: System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.SByte}\n  commentId: M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.SByte}\n  id: op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.SByte}\n  parent: System.Numerics.Vector`1\n  langs:\n  - csharp\n  - vb\n  name: Explicit(Vector<T> to Vector<SByte>)\n  nameWithType: Vector<T>.Explicit(Vector<T> to Vector<SByte>)\n  fullName: System.Numerics.Vector<T>.Explicit(System.Numerics.Vector<T> to System.Numerics.Vector<System.SByte>)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 293\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static explicit operator Vector<sbyte>(Vector<T> value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Narrowing Operator CType(value As Vector(Of T)) As Vector(Of SByte)\n    parameters:\n    - id: value\n      type: System.Numerics.Vector`1\n    return:\n      type: System.Numerics.Vector{System.SByte}\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  nameWithType.vb: Vector(Of T).Narrowing(Vector(Of T) to Vector(Of SByte))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector(Of T).Narrowing(System.Numerics.Vector(Of T) to System.Numerics.Vector(Of System.SByte))\n  name.vb: Narrowing(Vector(Of T) to Vector(Of SByte))\n- uid: System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Single}\n  commentId: M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Single}\n  id: op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Single}\n  parent: System.Numerics.Vector`1\n  langs:\n  - csharp\n  - vb\n  name: Explicit(Vector<T> to Vector<Single>)\n  nameWithType: Vector<T>.Explicit(Vector<T> to Vector<Single>)\n  fullName: System.Numerics.Vector<T>.Explicit(System.Numerics.Vector<T> to System.Numerics.Vector<System.Single>)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 295\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public static explicit operator Vector<float>(Vector<T> value)\n    content.vb: Public Shared Narrowing Operator CType(value As Vector(Of T)) As Vector(Of Single)\n    parameters:\n    - id: value\n      type: System.Numerics.Vector`1\n    return:\n      type: System.Numerics.Vector{System.Single}\n  nameWithType.vb: Vector(Of T).Narrowing(Vector(Of T) to Vector(Of Single))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector(Of T).Narrowing(System.Numerics.Vector(Of T) to System.Numerics.Vector(Of System.Single))\n  name.vb: Narrowing(Vector(Of T) to Vector(Of Single))\n- uid: System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt16}\n  commentId: M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt16}\n  id: op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt16}\n  parent: System.Numerics.Vector`1\n  langs:\n  - csharp\n  - vb\n  name: Explicit(Vector<T> to Vector<UInt16>)\n  nameWithType: Vector<T>.Explicit(Vector<T> to Vector<UInt16>)\n  fullName: System.Numerics.Vector<T>.Explicit(System.Numerics.Vector<T> to System.Numerics.Vector<System.UInt16>)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 296\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static explicit operator Vector<ushort>(Vector<T> value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Narrowing Operator CType(value As Vector(Of T)) As Vector(Of UShort)\n    parameters:\n    - id: value\n      type: System.Numerics.Vector`1\n    return:\n      type: System.Numerics.Vector{System.UInt16}\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  nameWithType.vb: Vector(Of T).Narrowing(Vector(Of T) to Vector(Of UInt16))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector(Of T).Narrowing(System.Numerics.Vector(Of T) to System.Numerics.Vector(Of System.UInt16))\n  name.vb: Narrowing(Vector(Of T) to Vector(Of UInt16))\n- uid: System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt32}\n  commentId: M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt32}\n  id: op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt32}\n  parent: System.Numerics.Vector`1\n  langs:\n  - csharp\n  - vb\n  name: Explicit(Vector<T> to Vector<UInt32>)\n  nameWithType: Vector<T>.Explicit(Vector<T> to Vector<UInt32>)\n  fullName: System.Numerics.Vector<T>.Explicit(System.Numerics.Vector<T> to System.Numerics.Vector<System.UInt32>)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 298\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static explicit operator Vector<uint>(Vector<T> value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Narrowing Operator CType(value As Vector(Of T)) As Vector(Of UInteger)\n    parameters:\n    - id: value\n      type: System.Numerics.Vector`1\n    return:\n      type: System.Numerics.Vector{System.UInt32}\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  nameWithType.vb: Vector(Of T).Narrowing(Vector(Of T) to Vector(Of UInt32))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector(Of T).Narrowing(System.Numerics.Vector(Of T) to System.Numerics.Vector(Of System.UInt32))\n  name.vb: Narrowing(Vector(Of T) to Vector(Of UInt32))\n- uid: System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt64}\n  commentId: M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt64}\n  id: op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt64}\n  parent: System.Numerics.Vector`1\n  langs:\n  - csharp\n  - vb\n  name: Explicit(Vector<T> to Vector<UInt64>)\n  nameWithType: Vector<T>.Explicit(Vector<T> to Vector<UInt64>)\n  fullName: System.Numerics.Vector<T>.Explicit(System.Numerics.Vector<T> to System.Numerics.Vector<System.UInt64>)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 300\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static explicit operator Vector<ulong>(Vector<T> value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Narrowing Operator CType(value As Vector(Of T)) As Vector(Of ULong)\n    parameters:\n    - id: value\n      type: System.Numerics.Vector`1\n    return:\n      type: System.Numerics.Vector{System.UInt64}\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  nameWithType.vb: Vector(Of T).Narrowing(Vector(Of T) to Vector(Of UInt64))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector(Of T).Narrowing(System.Numerics.Vector(Of T) to System.Numerics.Vector(Of System.UInt64))\n  name.vb: Narrowing(Vector(Of T) to Vector(Of UInt64))\n- uid: System.Numerics.Vector`1.op_Inequality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})\n  commentId: M:System.Numerics.Vector`1.op_Inequality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})\n  id: op_Inequality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})\n  parent: System.Numerics.Vector`1\n  langs:\n  - csharp\n  - vb\n  name: Inequality(Vector<T>, Vector<T>)\n  nameWithType: Vector<T>.Inequality(Vector<T>, Vector<T>)\n  fullName: System.Numerics.Vector<T>.Inequality(System.Numerics.Vector<T>, System.Numerics.Vector<T>)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Inequality\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 302\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public static bool operator !=(Vector<T> left, Vector<T> right)\n    content.vb: Public Shared Operator <>(left As Vector(Of T), right As Vector(Of T)) As Boolean\n    parameters:\n    - id: left\n      type: System.Numerics.Vector`1\n    - id: right\n      type: System.Numerics.Vector`1\n    return:\n      type: System.Boolean\n  nameWithType.vb: Vector(Of T).Inequality(Vector(Of T), Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector(Of T).Inequality(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))\n  name.vb: Inequality(Vector(Of T), Vector(Of T))\n- uid: System.Numerics.Vector`1.op_Multiply(`0,System.Numerics.Vector{`0})\n  commentId: M:System.Numerics.Vector`1.op_Multiply(`0,System.Numerics.Vector{`0})\n  id: op_Multiply(`0,System.Numerics.Vector{`0})\n  parent: System.Numerics.Vector`1\n  langs:\n  - csharp\n  - vb\n  name: Multiply(T, Vector<T>)\n  nameWithType: Vector<T>.Multiply(T, Vector<T>)\n  fullName: System.Numerics.Vector<T>.Multiply(T, System.Numerics.Vector<T>)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Multiply\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 303\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public static Vector<T> operator *(T factor, Vector<T> value)\n    content.vb: Public Shared Operator *(factor As T, value As Vector(Of T)) As Vector(Of T)\n    parameters:\n    - id: factor\n      type: '{T}'\n    - id: value\n      type: System.Numerics.Vector`1\n    return:\n      type: System.Numerics.Vector`1\n  nameWithType.vb: Vector(Of T).Multiply(T, Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector(Of T).Multiply(T, System.Numerics.Vector(Of T))\n  name.vb: Multiply(T, Vector(Of T))\n- uid: System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},`0)\n  commentId: M:System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},`0)\n  id: op_Multiply(System.Numerics.Vector{`0},`0)\n  parent: System.Numerics.Vector`1\n  langs:\n  - csharp\n  - vb\n  name: Multiply(Vector<T>, T)\n  nameWithType: Vector<T>.Multiply(Vector<T>, T)\n  fullName: System.Numerics.Vector<T>.Multiply(System.Numerics.Vector<T>, T)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Multiply\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 304\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public static Vector<T> operator *(Vector<T> value, T factor)\n    content.vb: Public Shared Operator *(value As Vector(Of T), factor As T) As Vector(Of T)\n    parameters:\n    - id: value\n      type: System.Numerics.Vector`1\n    - id: factor\n      type: '{T}'\n    return:\n      type: System.Numerics.Vector`1\n  nameWithType.vb: Vector(Of T).Multiply(Vector(Of T), T)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector(Of T).Multiply(System.Numerics.Vector(Of T), T)\n  name.vb: Multiply(Vector(Of T), T)\n- uid: System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},System.Numerics.Vector{`0})\n  commentId: M:System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},System.Numerics.Vector{`0})\n  id: op_Multiply(System.Numerics.Vector{`0},System.Numerics.Vector{`0})\n  parent: System.Numerics.Vector`1\n  langs:\n  - csharp\n  - vb\n  name: Multiply(Vector<T>, Vector<T>)\n  nameWithType: Vector<T>.Multiply(Vector<T>, Vector<T>)\n  fullName: System.Numerics.Vector<T>.Multiply(System.Numerics.Vector<T>, System.Numerics.Vector<T>)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Multiply\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 305\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public static Vector<T> operator *(Vector<T> left, Vector<T> right)\n    content.vb: Public Shared Operator *(left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)\n    parameters:\n    - id: left\n      type: System.Numerics.Vector`1\n    - id: right\n      type: System.Numerics.Vector`1\n    return:\n      type: System.Numerics.Vector`1\n  nameWithType.vb: Vector(Of T).Multiply(Vector(Of T), Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector(Of T).Multiply(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))\n  name.vb: Multiply(Vector(Of T), Vector(Of T))\n- uid: System.Numerics.Vector`1.op_OnesComplement(System.Numerics.Vector{`0})\n  commentId: M:System.Numerics.Vector`1.op_OnesComplement(System.Numerics.Vector{`0})\n  id: op_OnesComplement(System.Numerics.Vector{`0})\n  parent: System.Numerics.Vector`1\n  langs:\n  - csharp\n  - vb\n  name: OnesComplement(Vector<T>)\n  nameWithType: Vector<T>.OnesComplement(Vector<T>)\n  fullName: System.Numerics.Vector<T>.OnesComplement(System.Numerics.Vector<T>)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_OnesComplement\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 306\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public static Vector<T> operator ~(Vector<T> value)\n    content.vb: Public Shared Operator Not(value As Vector(Of T)) As Vector(Of T)\n    parameters:\n    - id: value\n      type: System.Numerics.Vector`1\n    return:\n      type: System.Numerics.Vector`1\n  nameWithType.vb: Vector(Of T).OnesComplement(Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector(Of T).OnesComplement(System.Numerics.Vector(Of T))\n  name.vb: OnesComplement(Vector(Of T))\n- uid: System.Numerics.Vector`1.op_Subtraction(System.Numerics.Vector{`0},System.Numerics.Vector{`0})\n  commentId: M:System.Numerics.Vector`1.op_Subtraction(System.Numerics.Vector{`0},System.Numerics.Vector{`0})\n  id: op_Subtraction(System.Numerics.Vector{`0},System.Numerics.Vector{`0})\n  parent: System.Numerics.Vector`1\n  langs:\n  - csharp\n  - vb\n  name: Subtraction(Vector<T>, Vector<T>)\n  nameWithType: Vector<T>.Subtraction(Vector<T>, Vector<T>)\n  fullName: System.Numerics.Vector<T>.Subtraction(System.Numerics.Vector<T>, System.Numerics.Vector<T>)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Subtraction\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 307\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public static Vector<T> operator -(Vector<T> left, Vector<T> right)\n    content.vb: Public Shared Operator -(left As Vector(Of T), right As Vector(Of T)) As Vector(Of T)\n    parameters:\n    - id: left\n      type: System.Numerics.Vector`1\n    - id: right\n      type: System.Numerics.Vector`1\n    return:\n      type: System.Numerics.Vector`1\n  nameWithType.vb: Vector(Of T).Subtraction(Vector(Of T), Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector(Of T).Subtraction(System.Numerics.Vector(Of T), System.Numerics.Vector(Of T))\n  name.vb: Subtraction(Vector(Of T), Vector(Of T))\n- uid: System.Numerics.Vector`1.op_UnaryNegation(System.Numerics.Vector{`0})\n  commentId: M:System.Numerics.Vector`1.op_UnaryNegation(System.Numerics.Vector{`0})\n  id: op_UnaryNegation(System.Numerics.Vector{`0})\n  parent: System.Numerics.Vector`1\n  langs:\n  - csharp\n  - vb\n  name: UnaryNegation(Vector<T>)\n  nameWithType: Vector<T>.UnaryNegation(Vector<T>)\n  fullName: System.Numerics.Vector<T>.UnaryNegation(System.Numerics.Vector<T>)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_UnaryNegation\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 308\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public static Vector<T> operator -(Vector<T> value)\n    content.vb: Public Shared Operator -(value As Vector(Of T)) As Vector(Of T)\n    parameters:\n    - id: value\n      type: System.Numerics.Vector`1\n    return:\n      type: System.Numerics.Vector`1\n  nameWithType.vb: Vector(Of T).UnaryNegation(Vector(Of T))\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Vector(Of T).UnaryNegation(System.Numerics.Vector(Of T))\n  name.vb: UnaryNegation(Vector(Of T))\n- uid: System.Numerics.Vector`1.ToString\n  commentId: M:System.Numerics.Vector`1.ToString\n  id: ToString\n  parent: System.Numerics.Vector`1\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  nameWithType: Vector<T>.ToString()\n  fullName: System.Numerics.Vector<T>.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 309\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n  overridden: System.ValueType.ToString\n  nameWithType.vb: Vector(Of T).ToString()\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Numerics.Vector(Of T).ToString()\n- uid: System.Numerics.Vector`1.ToString(System.String)\n  commentId: M:System.Numerics.Vector`1.ToString(System.String)\n  id: ToString(System.String)\n  parent: System.Numerics.Vector`1\n  langs:\n  - csharp\n  - vb\n  name: ToString(String)\n  nameWithType: Vector<T>.ToString(String)\n  fullName: System.Numerics.Vector<T>.ToString(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 310\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public string ToString(string format)\n    content.vb: Public Function ToString(format As String) As String\n    parameters:\n    - id: format\n      type: System.String\n    return:\n      type: System.String\n  nameWithType.vb: Vector(Of T).ToString(String)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Numerics.Vector(Of T).ToString(System.String)\n- uid: System.Numerics.Vector`1.ToString(System.String,System.IFormatProvider)\n  commentId: M:System.Numerics.Vector`1.ToString(System.String,System.IFormatProvider)\n  id: ToString(System.String,System.IFormatProvider)\n  parent: System.Numerics.Vector`1\n  langs:\n  - csharp\n  - vb\n  name: ToString(String, IFormatProvider)\n  nameWithType: Vector<T>.ToString(String, IFormatProvider)\n  fullName: System.Numerics.Vector<T>.ToString(System.String, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 311\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  syntax:\n    content: public string ToString(string format, IFormatProvider formatProvider)\n    content.vb: Public Function ToString(format As String, formatProvider As IFormatProvider) As String\n    parameters:\n    - id: format\n      type: System.String\n    - id: formatProvider\n      type: System.IFormatProvider\n    return:\n      type: System.String\n  implements:\n  - System.IFormattable.ToString(System.String,System.IFormatProvider)\n  nameWithType.vb: Vector(Of T).ToString(String, IFormatProvider)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Numerics.Vector(Of T).ToString(System.String, System.IFormatProvider)\nreferences:\n- uid: System.Numerics\n  commentId: N:System.Numerics\n  isExternal: false\n  name: System.Numerics\n  nameWithType: System.Numerics\n  fullName: System.Numerics\n- uid: System.IEquatable{System.Numerics.Vector`1}\n  commentId: T:System.IEquatable{System.Numerics.Vector`1}\n  parent: System\n  definition: System.IEquatable`1\n  name: IEquatable<Vector<T>>\n  nameWithType: IEquatable<Vector<T>>\n  fullName: System.IEquatable<System.Numerics.Vector<T>>\n  nameWithType.vb: IEquatable(Of Vector(Of T))\n  fullname.vb: System.IEquatable(Of System.Numerics.Vector(Of T))\n  name.vb: IEquatable(Of Vector(Of T))\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    nameWithType: IEquatable\n    fullName: System.IEquatable\n    isExternal: true\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Numerics.Vector`1\n    name: Vector\n    nameWithType: Vector\n    fullName: System.Numerics.Vector\n  - name: <\n    nameWithType: <\n    fullName: <\n  - name: T\n    nameWithType: T\n    fullName: T\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    nameWithType: IEquatable\n    fullName: System.IEquatable\n    isExternal: true\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - uid: System.Numerics.Vector`1\n    name: Vector\n    nameWithType: Vector\n    fullName: System.Numerics.Vector\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - name: T\n    nameWithType: T\n    fullName: T\n  - name: )\n    nameWithType: )\n    fullName: )\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.IFormattable\n  commentId: T:System.IFormattable\n  parent: System\n  isExternal: false\n  name: IFormattable\n  nameWithType: IFormattable\n  fullName: System.IFormattable\n- uid: System.Object.Equals(System.Object,System.Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    nameWithType: Object.ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    nameWithType: Object.ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.GetType\n  commentId: M:System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    nameWithType: Object.GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    nameWithType: Object.GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.IEquatable`1\n  commentId: T:System.IEquatable`1\n  isExternal: false\n  name: IEquatable<T>\n  nameWithType: IEquatable<T>\n  fullName: System.IEquatable<T>\n  nameWithType.vb: IEquatable(Of T)\n  fullname.vb: System.IEquatable(Of T)\n  name.vb: IEquatable(Of T)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    nameWithType: IEquatable\n    fullName: System.IEquatable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - name: T\n    nameWithType: T\n    fullName: T\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    nameWithType: IEquatable\n    fullName: System.IEquatable\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - name: T\n    nameWithType: T\n    fullName: T\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System\n  commentId: N:System\n  isExternal: false\n  name: System\n  nameWithType: System\n  fullName: System\n- uid: System.Object\n  commentId: T:System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: '{T}'\n  commentId: '!:T'\n  definition: T\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: T\n  isExternal: false\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: '{T}[]'\n  name: T[]\n  nameWithType: T[]\n  fullName: T[]\n  nameWithType.vb: T()\n  fullname.vb: T()\n  name.vb: T()\n  spec.csharp:\n  - name: T\n    nameWithType: T\n    fullName: T\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n  spec.vb:\n  - name: T\n    nameWithType: T\n    fullName: T\n  - name: ()\n    nameWithType: ()\n    fullName: ()\n- uid: System.Int32\n  commentId: T:System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Numerics.Vector`1\n  commentId: T:System.Numerics.Vector`1\n  parent: System.Numerics\n  isExternal: false\n  name: Vector<T>\n  nameWithType: Vector<T>\n  fullName: System.Numerics.Vector<T>\n  nameWithType.vb: Vector(Of T)\n  fullname.vb: System.Numerics.Vector(Of T)\n  name.vb: Vector(Of T)\n  spec.csharp:\n  - uid: System.Numerics.Vector`1\n    name: Vector\n    nameWithType: Vector\n    fullName: System.Numerics.Vector\n  - name: <\n    nameWithType: <\n    fullName: <\n  - name: T\n    nameWithType: T\n    fullName: T\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Numerics.Vector`1\n    name: Vector\n    nameWithType: Vector\n    fullName: System.Numerics.Vector\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - name: T\n    nameWithType: T\n    fullName: T\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.IEquatable{System.Numerics.Vector`1}.Equals(System.Numerics.Vector{{T}})\n  commentId: M:System.IEquatable{System.Numerics.Vector`1}.Equals(System.Numerics.Vector{`0})\n  parent: System.IEquatable{System.Numerics.Vector`1}\n  definition: System.IEquatable`1.Equals(`0)\n  name: Equals(Vector<T>)\n  nameWithType: IEquatable<Vector<T>>.Equals(Vector<T>)\n  fullName: System.IEquatable<System.Numerics.Vector<T>>.Equals(System.Numerics.Vector<T>)\n  nameWithType.vb: IEquatable(Of Vector(Of T)).Equals(Vector(Of T))\n  fullname.vb: System.IEquatable(Of System.Numerics.Vector(Of T)).Equals(System.Numerics.Vector(Of T))\n  name.vb: Equals(Vector(Of T))\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    nameWithType: IEquatable<Vector<T>>.Equals\n    fullName: System.IEquatable<System.Numerics.Vector<T>>.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Numerics.Vector`1\n    name: Vector\n    nameWithType: Vector\n    fullName: System.Numerics.Vector\n  - name: <\n    nameWithType: <\n    fullName: <\n  - name: T\n    nameWithType: T\n    fullName: T\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    nameWithType: IEquatable(Of Vector(Of T)).Equals\n    fullName: System.IEquatable(Of System.Numerics.Vector(Of T)).Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Numerics.Vector`1\n    name: Vector\n    nameWithType: Vector\n    fullName: System.Numerics.Vector\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - name: T\n    nameWithType: T\n    fullName: T\n  - name: )\n    nameWithType: )\n    fullName: )\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Boolean\n  commentId: T:System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.IEquatable`1.Equals(`0)\n  commentId: M:System.IEquatable`1.Equals(`0)\n  isExternal: false\n  name: Equals(T)\n  nameWithType: IEquatable<T>.Equals(T)\n  fullName: System.IEquatable<T>.Equals(T)\n  nameWithType.vb: IEquatable(Of T).Equals(T)\n  fullname.vb: System.IEquatable(Of T).Equals(T)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    nameWithType: IEquatable<T>.Equals\n    fullName: System.IEquatable<T>.Equals\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: T\n    nameWithType: T\n    fullName: T\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    nameWithType: IEquatable(Of T).Equals\n    fullName: System.IEquatable(Of T).Equals\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: T\n    nameWithType: T\n    fullName: T\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.ValueType.Equals(System.Object)\n  commentId: M:System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  nameWithType: ValueType.Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    nameWithType: ValueType.Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    nameWithType: ValueType.Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.ValueType\n  commentId: T:System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  nameWithType: ValueType\n  fullName: System.ValueType\n- uid: System.ValueType.GetHashCode\n  commentId: M:System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: ValueType.GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    nameWithType: ValueType.GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    nameWithType: ValueType.GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Numerics.Vector{System.Byte}\n  commentId: T:System.Numerics.Vector{System.Byte}\n  parent: System.Numerics\n  definition: System.Numerics.Vector`1\n  name: Vector<Byte>\n  nameWithType: Vector<Byte>\n  fullName: System.Numerics.Vector<System.Byte>\n  nameWithType.vb: Vector(Of Byte)\n  fullname.vb: System.Numerics.Vector(Of System.Byte)\n  name.vb: Vector(Of Byte)\n  spec.csharp:\n  - uid: System.Numerics.Vector`1\n    name: Vector\n    nameWithType: Vector\n    fullName: System.Numerics.Vector\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Numerics.Vector`1\n    name: Vector\n    nameWithType: Vector\n    fullName: System.Numerics.Vector\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Numerics.Vector{System.Double}\n  commentId: T:System.Numerics.Vector{System.Double}\n  parent: System.Numerics\n  definition: System.Numerics.Vector`1\n  name: Vector<Double>\n  nameWithType: Vector<Double>\n  fullName: System.Numerics.Vector<System.Double>\n  nameWithType.vb: Vector(Of Double)\n  fullname.vb: System.Numerics.Vector(Of System.Double)\n  name.vb: Vector(Of Double)\n  spec.csharp:\n  - uid: System.Numerics.Vector`1\n    name: Vector\n    nameWithType: Vector\n    fullName: System.Numerics.Vector\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Double\n    name: Double\n    nameWithType: Double\n    fullName: System.Double\n    isExternal: true\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Numerics.Vector`1\n    name: Vector\n    nameWithType: Vector\n    fullName: System.Numerics.Vector\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - uid: System.Double\n    name: Double\n    nameWithType: Double\n    fullName: System.Double\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Numerics.Vector{System.Int16}\n  commentId: T:System.Numerics.Vector{System.Int16}\n  parent: System.Numerics\n  definition: System.Numerics.Vector`1\n  name: Vector<Int16>\n  nameWithType: Vector<Int16>\n  fullName: System.Numerics.Vector<System.Int16>\n  nameWithType.vb: Vector(Of Int16)\n  fullname.vb: System.Numerics.Vector(Of System.Int16)\n  name.vb: Vector(Of Int16)\n  spec.csharp:\n  - uid: System.Numerics.Vector`1\n    name: Vector\n    nameWithType: Vector\n    fullName: System.Numerics.Vector\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Int16\n    name: Int16\n    nameWithType: Int16\n    fullName: System.Int16\n    isExternal: true\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Numerics.Vector`1\n    name: Vector\n    nameWithType: Vector\n    fullName: System.Numerics.Vector\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - uid: System.Int16\n    name: Int16\n    nameWithType: Int16\n    fullName: System.Int16\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Numerics.Vector{System.Int32}\n  commentId: T:System.Numerics.Vector{System.Int32}\n  parent: System.Numerics\n  definition: System.Numerics.Vector`1\n  name: Vector<Int32>\n  nameWithType: Vector<Int32>\n  fullName: System.Numerics.Vector<System.Int32>\n  nameWithType.vb: Vector(Of Int32)\n  fullname.vb: System.Numerics.Vector(Of System.Int32)\n  name.vb: Vector(Of Int32)\n  spec.csharp:\n  - uid: System.Numerics.Vector`1\n    name: Vector\n    nameWithType: Vector\n    fullName: System.Numerics.Vector\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Numerics.Vector`1\n    name: Vector\n    nameWithType: Vector\n    fullName: System.Numerics.Vector\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Numerics.Vector{System.Int64}\n  commentId: T:System.Numerics.Vector{System.Int64}\n  parent: System.Numerics\n  definition: System.Numerics.Vector`1\n  name: Vector<Int64>\n  nameWithType: Vector<Int64>\n  fullName: System.Numerics.Vector<System.Int64>\n  nameWithType.vb: Vector(Of Int64)\n  fullname.vb: System.Numerics.Vector(Of System.Int64)\n  name.vb: Vector(Of Int64)\n  spec.csharp:\n  - uid: System.Numerics.Vector`1\n    name: Vector\n    nameWithType: Vector\n    fullName: System.Numerics.Vector\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Int64\n    name: Int64\n    nameWithType: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Numerics.Vector`1\n    name: Vector\n    nameWithType: Vector\n    fullName: System.Numerics.Vector\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - uid: System.Int64\n    name: Int64\n    nameWithType: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Numerics.Vector{System.SByte}\n  commentId: T:System.Numerics.Vector{System.SByte}\n  parent: System.Numerics\n  definition: System.Numerics.Vector`1\n  name: Vector<SByte>\n  nameWithType: Vector<SByte>\n  fullName: System.Numerics.Vector<System.SByte>\n  nameWithType.vb: Vector(Of SByte)\n  fullname.vb: System.Numerics.Vector(Of System.SByte)\n  name.vb: Vector(Of SByte)\n  spec.csharp:\n  - uid: System.Numerics.Vector`1\n    name: Vector\n    nameWithType: Vector\n    fullName: System.Numerics.Vector\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.SByte\n    name: SByte\n    nameWithType: SByte\n    fullName: System.SByte\n    isExternal: true\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Numerics.Vector`1\n    name: Vector\n    nameWithType: Vector\n    fullName: System.Numerics.Vector\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - uid: System.SByte\n    name: SByte\n    nameWithType: SByte\n    fullName: System.SByte\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Numerics.Vector{System.Single}\n  commentId: T:System.Numerics.Vector{System.Single}\n  parent: System.Numerics\n  definition: System.Numerics.Vector`1\n  name: Vector<Single>\n  nameWithType: Vector<Single>\n  fullName: System.Numerics.Vector<System.Single>\n  nameWithType.vb: Vector(Of Single)\n  fullname.vb: System.Numerics.Vector(Of System.Single)\n  name.vb: Vector(Of Single)\n  spec.csharp:\n  - uid: System.Numerics.Vector`1\n    name: Vector\n    nameWithType: Vector\n    fullName: System.Numerics.Vector\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Single\n    name: Single\n    nameWithType: Single\n    fullName: System.Single\n    isExternal: true\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Numerics.Vector`1\n    name: Vector\n    nameWithType: Vector\n    fullName: System.Numerics.Vector\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - uid: System.Single\n    name: Single\n    nameWithType: Single\n    fullName: System.Single\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Numerics.Vector{System.UInt16}\n  commentId: T:System.Numerics.Vector{System.UInt16}\n  parent: System.Numerics\n  definition: System.Numerics.Vector`1\n  name: Vector<UInt16>\n  nameWithType: Vector<UInt16>\n  fullName: System.Numerics.Vector<System.UInt16>\n  nameWithType.vb: Vector(Of UInt16)\n  fullname.vb: System.Numerics.Vector(Of System.UInt16)\n  name.vb: Vector(Of UInt16)\n  spec.csharp:\n  - uid: System.Numerics.Vector`1\n    name: Vector\n    nameWithType: Vector\n    fullName: System.Numerics.Vector\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.UInt16\n    name: UInt16\n    nameWithType: UInt16\n    fullName: System.UInt16\n    isExternal: true\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Numerics.Vector`1\n    name: Vector\n    nameWithType: Vector\n    fullName: System.Numerics.Vector\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - uid: System.UInt16\n    name: UInt16\n    nameWithType: UInt16\n    fullName: System.UInt16\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Numerics.Vector{System.UInt32}\n  commentId: T:System.Numerics.Vector{System.UInt32}\n  parent: System.Numerics\n  definition: System.Numerics.Vector`1\n  name: Vector<UInt32>\n  nameWithType: Vector<UInt32>\n  fullName: System.Numerics.Vector<System.UInt32>\n  nameWithType.vb: Vector(Of UInt32)\n  fullname.vb: System.Numerics.Vector(Of System.UInt32)\n  name.vb: Vector(Of UInt32)\n  spec.csharp:\n  - uid: System.Numerics.Vector`1\n    name: Vector\n    nameWithType: Vector\n    fullName: System.Numerics.Vector\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.UInt32\n    name: UInt32\n    nameWithType: UInt32\n    fullName: System.UInt32\n    isExternal: true\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Numerics.Vector`1\n    name: Vector\n    nameWithType: Vector\n    fullName: System.Numerics.Vector\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - uid: System.UInt32\n    name: UInt32\n    nameWithType: UInt32\n    fullName: System.UInt32\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Numerics.Vector{System.UInt64}\n  commentId: T:System.Numerics.Vector{System.UInt64}\n  parent: System.Numerics\n  definition: System.Numerics.Vector`1\n  name: Vector<UInt64>\n  nameWithType: Vector<UInt64>\n  fullName: System.Numerics.Vector<System.UInt64>\n  nameWithType.vb: Vector(Of UInt64)\n  fullname.vb: System.Numerics.Vector(Of System.UInt64)\n  name.vb: Vector(Of UInt64)\n  spec.csharp:\n  - uid: System.Numerics.Vector`1\n    name: Vector\n    nameWithType: Vector\n    fullName: System.Numerics.Vector\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.UInt64\n    name: UInt64\n    nameWithType: UInt64\n    fullName: System.UInt64\n    isExternal: true\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Numerics.Vector`1\n    name: Vector\n    nameWithType: Vector\n    fullName: System.Numerics.Vector\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - uid: System.UInt64\n    name: UInt64\n    nameWithType: UInt64\n    fullName: System.UInt64\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.ValueType.ToString\n  commentId: M:System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  nameWithType: ValueType.ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    nameWithType: ValueType.ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    nameWithType: ValueType.ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.String\n  commentId: T:System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.IFormattable.ToString(System.String,System.IFormatProvider)\n  commentId: M:System.IFormattable.ToString(System.String,System.IFormatProvider)\n  parent: System.IFormattable\n  isExternal: true\n  name: ToString(String, IFormatProvider)\n  nameWithType: IFormattable.ToString(String, IFormatProvider)\n  fullName: System.IFormattable.ToString(System.String, System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)\n    name: ToString\n    nameWithType: IFormattable.ToString\n    fullName: System.IFormattable.ToString\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    nameWithType: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)\n    name: ToString\n    nameWithType: IFormattable.ToString\n    fullName: System.IFormattable.ToString\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    nameWithType: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.IFormatProvider\n  commentId: T:System.IFormatProvider\n  parent: System\n  isExternal: false\n  name: IFormatProvider\n  nameWithType: IFormatProvider\n  fullName: System.IFormatProvider\n"}