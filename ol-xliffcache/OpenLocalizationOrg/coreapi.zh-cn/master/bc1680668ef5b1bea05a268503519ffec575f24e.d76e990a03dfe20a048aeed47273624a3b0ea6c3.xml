{"nodes":[{"pos":[3826,3837],"content":"CompareInfo","needQuote":true,"nodes":[{"content":"CompareInfo","pos":[0,11]}]},{"pos":[5049,5053],"content":"Name","needQuote":true,"nodes":[{"content":"Name","pos":[0,4]}]},{"content":"\\n&lt;p&gt;The name of a culture.&lt;/p&gt;\\n","pos":[5913,5946],"source":"\\n<p>The name of a culture.</p>\\n"},{"pos":[6527,6578],"content":"Compare(String, Int32, Int32, String, Int32, Int32)","needQuote":true,"nodes":[{"content":"Compare(String, Int32, Int32, String, Int32, Int32)","pos":[0,51]}]},{"content":"\\n&lt;p&gt;The first string to compare.","pos":[7548,7581],"source":"\\n<p>The first string to compare."},{"content":"&lt;/p&gt;\\n","pos":[7582,7588],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index of the character in &lt;em&gt;string1&lt;/em&gt; at which to start comparing.","pos":[7653,7744],"source":"\\n<p>The zero-based index of the character in <em>string1</em> at which to start comparing."},{"content":"&lt;/p&gt;\\n","pos":[7745,7751],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of consecutive characters in &lt;em&gt;string1&lt;/em&gt; to compare.","pos":[7816,7889],"source":"\\n<p>The number of consecutive characters in <em>string1</em> to compare."},{"content":"&lt;/p&gt;\\n","pos":[7890,7896],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second string to compare.","pos":[7962,7996],"source":"\\n<p>The second string to compare."},{"content":"&lt;/p&gt;\\n","pos":[7997,8003],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index of the character in &lt;em&gt;string2&lt;/em&gt; at which to start comparing.","pos":[8068,8159],"source":"\\n<p>The zero-based index of the character in <em>string2</em> at which to start comparing."},{"content":"&lt;/p&gt;\\n","pos":[8160,8166],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of consecutive characters in &lt;em&gt;string2&lt;/em&gt; to compare.","pos":[8231,8304],"source":"\\n<p>The number of consecutive characters in <em>string2</em> to compare."},{"content":"&lt;/p&gt;\\n","pos":[8305,8311],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 32-bit signed integer indicating the lexical relationship between the two comparands.&lt;/p&gt;\\n&lt;p&gt;Value &lt;/p&gt;\\n&lt;p&gt;Condition &lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;The two strings are equal.","pos":[8370,8580],"source":"\\n<p>A 32-bit signed integer indicating the lexical relationship between the two comparands.</p>\\n<p>Value </p>\\n<p>Condition </p>\\n<table><tbody><tr><td>\\n<p>zero </p>\\n</td><td>\\n<p>The two strings are equal."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;less than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;The specified section of &lt;em&gt;string1&lt;/em&gt; is less than the specified section of &lt;em&gt;string2&lt;/em&gt;.","pos":[8581,8742],"source":" </p>\\n</td></tr><tr><td>\\n<p>less than zero </p>\\n</td><td>\\n<p>The specified section of <em>string1</em> is less than the specified section of <em>string2</em>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;greater than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;The specified section of &lt;em&gt;string1&lt;/em&gt; is greater than the specified section of &lt;em&gt;string2&lt;/em&gt;.","pos":[8743,8910],"source":" </p>\\n</td></tr><tr><td>\\n<p>greater than zero </p>\\n</td><td>\\n<p>The specified section of <em>string1</em> is greater than the specified section of <em>string2</em>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[8911,8945],"source":" </p>\\n</td></tr></tbody></table>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset1&lt;/em&gt; or &lt;em&gt;length1&lt;/em&gt; or &lt;em&gt;offset2&lt;/em&gt; or &lt;em&gt;length2&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;offset1&lt;/em&gt; is greater than or equal to the number of characters in &lt;em&gt;string1&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;offset2&lt;/em&gt; is greater than or equal to the number of characters in &lt;em&gt;string2&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;length1&lt;/em&gt; is greater than the number of characters from &lt;em&gt;offset1&lt;/em&gt; to the end of &lt;em&gt;string1&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;length2&lt;/em&gt; is greater than the number of characters from &lt;em&gt;offset2&lt;/em&gt; to the end of &lt;em&gt;string2&lt;/em&gt;.","pos":[9076,9680],"source":"\\n<p>\\n<em>offset1</em> or <em>length1</em> or <em>offset2</em> or <em>length2</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>offset1</em> is greater than or equal to the number of characters in <em>string1</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>offset2</em> is greater than or equal to the number of characters in <em>string2</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>length1</em> is greater than the number of characters from <em>offset1</em> to the end of <em>string1</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>length2</em> is greater than the number of characters from <em>offset2</em> to the end of <em>string2</em>."},{"content":"&lt;/p&gt;\\n","pos":[9681,9687],"source":" </p>\\n"},{"pos":[10402,10469],"content":"Compare(String, Int32, Int32, String, Int32, Int32, CompareOptions)","needQuote":true,"nodes":[{"content":"Compare(String, Int32, Int32, String, Int32, Int32, CompareOptions)","pos":[0,67]}]},{"content":"\\n&lt;p&gt;The first string to compare.","pos":[11727,11760],"source":"\\n<p>The first string to compare."},{"content":"&lt;/p&gt;\\n","pos":[11761,11767],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index of the character in &lt;em&gt;string1&lt;/em&gt; at which to start comparing.","pos":[11832,11923],"source":"\\n<p>The zero-based index of the character in <em>string1</em> at which to start comparing."},{"content":"&lt;/p&gt;\\n","pos":[11924,11930],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of consecutive characters in &lt;em&gt;string1&lt;/em&gt; to compare.","pos":[11995,12068],"source":"\\n<p>The number of consecutive characters in <em>string1</em> to compare."},{"content":"&lt;/p&gt;\\n","pos":[12069,12075],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second string to compare.","pos":[12141,12175],"source":"\\n<p>The second string to compare."},{"content":"&lt;/p&gt;\\n","pos":[12176,12182],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index of the character in &lt;em&gt;string2&lt;/em&gt; at which to start comparing.","pos":[12247,12338],"source":"\\n<p>The zero-based index of the character in <em>string2</em> at which to start comparing."},{"content":"&lt;/p&gt;\\n","pos":[12339,12345],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of consecutive characters in &lt;em&gt;string2&lt;/em&gt; to compare.","pos":[12410,12483],"source":"\\n<p>The number of consecutive characters in <em>string2</em> to compare."},{"content":"&lt;/p&gt;\\n","pos":[12484,12490],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 32-bit signed integer indicating the lexical relationship between the two comparands.&lt;/p&gt;\\n&lt;p&gt;Value &lt;/p&gt;\\n&lt;p&gt;Condition &lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;The two strings are equal.","pos":[13613,13823],"source":"\\n<p>A 32-bit signed integer indicating the lexical relationship between the two comparands.</p>\\n<p>Value </p>\\n<p>Condition </p>\\n<table><tbody><tr><td>\\n<p>zero </p>\\n</td><td>\\n<p>The two strings are equal."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;less than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;The specified section of &lt;em&gt;string1&lt;/em&gt; is less than the specified section of &lt;em&gt;string2&lt;/em&gt;.","pos":[13824,13985],"source":" </p>\\n</td></tr><tr><td>\\n<p>less than zero </p>\\n</td><td>\\n<p>The specified section of <em>string1</em> is less than the specified section of <em>string2</em>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;greater than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;The specified section of &lt;em&gt;string1&lt;/em&gt; is greater than the specified section of &lt;em&gt;string2&lt;/em&gt;.","pos":[13986,14153],"source":" </p>\\n</td></tr><tr><td>\\n<p>greater than zero </p>\\n</td><td>\\n<p>The specified section of <em>string1</em> is greater than the specified section of <em>string2</em>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[14154,14188],"source":" </p>\\n</td></tr></tbody></table>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset1&lt;/em&gt; or &lt;em&gt;length1&lt;/em&gt; or &lt;em&gt;offset2&lt;/em&gt; or &lt;em&gt;length2&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;offset1&lt;/em&gt; is greater than or equal to the number of characters in &lt;em&gt;string1&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;offset2&lt;/em&gt; is greater than or equal to the number of characters in &lt;em&gt;string2&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;length1&lt;/em&gt; is greater than the number of characters from &lt;em&gt;offset1&lt;/em&gt; to the end of &lt;em&gt;string1&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;length2&lt;/em&gt; is greater than the number of characters from &lt;em&gt;offset2&lt;/em&gt; to the end of &lt;em&gt;string2&lt;/em&gt;.","pos":[14319,14923],"source":"\\n<p>\\n<em>offset1</em> or <em>length1</em> or <em>offset2</em> or <em>length2</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>offset1</em> is greater than or equal to the number of characters in <em>string1</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>offset2</em> is greater than or equal to the number of characters in <em>string2</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>length1</em> is greater than the number of characters from <em>offset1</em> to the end of <em>string1</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>length2</em> is greater than the number of characters from <em>offset2</em> to the end of <em>string2</em>."},{"content":"&lt;/p&gt;\\n","pos":[14924,14930],"source":" </p>\\n"},{"pos":[15835,15872],"content":"Compare(String, Int32, String, Int32)","needQuote":true,"nodes":[{"content":"Compare(String, Int32, String, Int32)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;The first string to compare.","pos":[16758,16791],"source":"\\n<p>The first string to compare."},{"content":"&lt;/p&gt;\\n","pos":[16792,16798],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index of the character in &lt;em&gt;string1&lt;/em&gt; at which to start comparing.","pos":[16863,16954],"source":"\\n<p>The zero-based index of the character in <em>string1</em> at which to start comparing."},{"content":"&lt;/p&gt;\\n","pos":[16955,16961],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second string to compare.","pos":[17027,17061],"source":"\\n<p>The second string to compare."},{"content":"&lt;/p&gt;\\n","pos":[17062,17068],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index of the character in &lt;em&gt;string2&lt;/em&gt; at which to start comparing.","pos":[17133,17224],"source":"\\n<p>The zero-based index of the character in <em>string2</em> at which to start comparing."},{"content":"&lt;/p&gt;\\n","pos":[17225,17231],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 32-bit signed integer indicating the lexical relationship between the two comparands.&lt;/p&gt;\\n&lt;p&gt;Value &lt;/p&gt;\\n&lt;p&gt;Condition &lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;The two strings are equal.","pos":[17290,17500],"source":"\\n<p>A 32-bit signed integer indicating the lexical relationship between the two comparands.</p>\\n<p>Value </p>\\n<p>Condition </p>\\n<table><tbody><tr><td>\\n<p>zero </p>\\n</td><td>\\n<p>The two strings are equal."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;less than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;The specified section of &lt;em&gt;string1&lt;/em&gt; is less than the specified section of &lt;em&gt;string2&lt;/em&gt;.","pos":[17501,17662],"source":" </p>\\n</td></tr><tr><td>\\n<p>less than zero </p>\\n</td><td>\\n<p>The specified section of <em>string1</em> is less than the specified section of <em>string2</em>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;greater than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;The specified section of &lt;em&gt;string1&lt;/em&gt; is greater than the specified section of &lt;em&gt;string2&lt;/em&gt;.","pos":[17663,17830],"source":" </p>\\n</td></tr><tr><td>\\n<p>greater than zero </p>\\n</td><td>\\n<p>The specified section of <em>string1</em> is greater than the specified section of <em>string2</em>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[17831,17865],"source":" </p>\\n</td></tr></tbody></table>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset1&lt;/em&gt; or &lt;em&gt;offset2&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;offset1&lt;/em&gt; is greater than or equal to the number of characters in &lt;em&gt;string1&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;offset2&lt;/em&gt; is greater than or equal to the number of characters in &lt;em&gt;string2&lt;/em&gt;.","pos":[17996,18288],"source":"\\n<p>\\n<em>offset1</em> or <em>offset2</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>offset1</em> is greater than or equal to the number of characters in <em>string1</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>offset2</em> is greater than or equal to the number of characters in <em>string2</em>."},{"content":"&lt;/p&gt;\\n","pos":[18289,18295],"source":" </p>\\n"},{"pos":[18918,18971],"content":"Compare(String, Int32, String, Int32, CompareOptions)","needQuote":true,"nodes":[{"content":"Compare(String, Int32, String, Int32, CompareOptions)","pos":[0,53]}]},{"content":"\\n&lt;p&gt;The first string to compare.","pos":[20067,20100],"source":"\\n<p>The first string to compare."},{"content":"&lt;/p&gt;\\n","pos":[20101,20107],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index of the character in &lt;em&gt;string1&lt;/em&gt; at which to start comparing.","pos":[20172,20263],"source":"\\n<p>The zero-based index of the character in <em>string1</em> at which to start comparing."},{"content":"&lt;/p&gt;\\n","pos":[20264,20270],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second string to compare.","pos":[20336,20370],"source":"\\n<p>The second string to compare."},{"content":"&lt;/p&gt;\\n","pos":[20371,20377],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index of the character in &lt;em&gt;string2&lt;/em&gt; at which to start comparing.","pos":[20442,20533],"source":"\\n<p>The zero-based index of the character in <em>string2</em> at which to start comparing."},{"content":"&lt;/p&gt;\\n","pos":[20534,20540],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 32-bit signed integer indicating the lexical relationship between the two comparands.&lt;/p&gt;\\n&lt;p&gt;Value &lt;/p&gt;\\n&lt;p&gt;Condition &lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;The two strings are equal.","pos":[21663,21873],"source":"\\n<p>A 32-bit signed integer indicating the lexical relationship between the two comparands.</p>\\n<p>Value </p>\\n<p>Condition </p>\\n<table><tbody><tr><td>\\n<p>zero </p>\\n</td><td>\\n<p>The two strings are equal."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;less than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;The specified section of &lt;em&gt;string1&lt;/em&gt; is less than the specified section of &lt;em&gt;string2&lt;/em&gt;.","pos":[21874,22035],"source":" </p>\\n</td></tr><tr><td>\\n<p>less than zero </p>\\n</td><td>\\n<p>The specified section of <em>string1</em> is less than the specified section of <em>string2</em>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;greater than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;The specified section of &lt;em&gt;string1&lt;/em&gt; is greater than the specified section of &lt;em&gt;string2&lt;/em&gt;.","pos":[22036,22203],"source":" </p>\\n</td></tr><tr><td>\\n<p>greater than zero </p>\\n</td><td>\\n<p>The specified section of <em>string1</em> is greater than the specified section of <em>string2</em>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[22204,22238],"source":" </p>\\n</td></tr></tbody></table>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset1&lt;/em&gt; or &lt;em&gt;offset2&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;offset1&lt;/em&gt; is greater than or equal to the number of characters in &lt;em&gt;string1&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;offset2&lt;/em&gt; is greater than or equal to the number of characters in &lt;em&gt;string2&lt;/em&gt;.","pos":[22369,22661],"source":"\\n<p>\\n<em>offset1</em> or <em>offset2</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>offset1</em> is greater than or equal to the number of characters in <em>string1</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>offset2</em> is greater than or equal to the number of characters in <em>string2</em>."},{"content":"&lt;/p&gt;\\n","pos":[22662,22668],"source":" </p>\\n"},{"pos":[23481,23504],"content":"Compare(String, String)","needQuote":true,"nodes":[{"content":"Compare(String, String)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The first string to compare.","pos":[24242,24275],"source":"\\n<p>The first string to compare."},{"content":"&lt;/p&gt;\\n","pos":[24276,24282],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second string to compare.","pos":[24348,24382],"source":"\\n<p>The second string to compare."},{"content":"&lt;/p&gt;\\n","pos":[24383,24389],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 32-bit signed integer indicating the lexical relationship between the two comparands.&lt;/p&gt;\\n&lt;p&gt;Value &lt;/p&gt;\\n&lt;p&gt;Condition &lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;The two strings are equal.","pos":[24448,24658],"source":"\\n<p>A 32-bit signed integer indicating the lexical relationship between the two comparands.</p>\\n<p>Value </p>\\n<p>Condition </p>\\n<table><tbody><tr><td>\\n<p>zero </p>\\n</td><td>\\n<p>The two strings are equal."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;less than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;string1&lt;/em&gt; is less than &lt;em&gt;string2&lt;/em&gt;.","pos":[24659,24772],"source":" </p>\\n</td></tr><tr><td>\\n<p>less than zero </p>\\n</td><td>\\n<p>\\n<em>string1</em> is less than <em>string2</em>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;greater than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;string1&lt;/em&gt; is greater than &lt;em&gt;string2&lt;/em&gt;.","pos":[24773,24892],"source":" </p>\\n</td></tr><tr><td>\\n<p>greater than zero </p>\\n</td><td>\\n<p>\\n<em>string1</em> is greater than <em>string2</em>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[24893,24927],"source":" </p>\\n</td></tr></tbody></table>\\n"},{"pos":[25458,25497],"content":"Compare(String, String, CompareOptions)","needQuote":true,"nodes":[{"content":"Compare(String, String, CompareOptions)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;The first string to compare.","pos":[26522,26555],"source":"\\n<p>The first string to compare."},{"content":"&lt;/p&gt;\\n","pos":[26556,26562],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second string to compare.","pos":[26628,26662],"source":"\\n<p>The second string to compare."},{"content":"&lt;/p&gt;\\n","pos":[26663,26669],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 32-bit signed integer indicating the lexical relationship between the two comparands.&lt;/p&gt;\\n&lt;p&gt;Value &lt;/p&gt;\\n&lt;p&gt;Condition &lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;The two strings are equal.","pos":[27792,28002],"source":"\\n<p>A 32-bit signed integer indicating the lexical relationship between the two comparands.</p>\\n<p>Value </p>\\n<p>Condition </p>\\n<table><tbody><tr><td>\\n<p>zero </p>\\n</td><td>\\n<p>The two strings are equal."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;less than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;string1&lt;/em&gt; is less than &lt;em&gt;string2&lt;/em&gt;.","pos":[28003,28116],"source":" </p>\\n</td></tr><tr><td>\\n<p>less than zero </p>\\n</td><td>\\n<p>\\n<em>string1</em> is less than <em>string2</em>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;greater than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;string1&lt;/em&gt; is greater than &lt;em&gt;string2&lt;/em&gt;.","pos":[28117,28236],"source":" </p>\\n</td></tr><tr><td>\\n<p>greater than zero </p>\\n</td><td>\\n<p>\\n<em>string1</em> is greater than <em>string2</em>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[28237,28271],"source":" </p>\\n</td></tr></tbody></table>\\n"},{"pos":[29039,29053],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[30842,30864],"content":"GetCompareInfo(String)","needQuote":true,"nodes":[{"content":"GetCompareInfo(String)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;A string representing the culture name.","pos":[31733,31777],"source":"\\n<p>A string representing the culture name."},{"content":"&lt;/p&gt;\\n","pos":[31778,31784],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[32295,32341],"source":"\\n<p>\\n<em>name</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[32342,32348],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is an invalid culture name.","pos":[32445,32493],"source":"\\n<p>\\n<em>name</em> is an invalid culture name."},{"content":"&lt;/p&gt;\\n","pos":[32494,32500],"source":" </p>\\n"},{"pos":[32841,32854],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[34641,34676],"content":"GetHashCode(String, CompareOptions)","needQuote":true,"nodes":[{"content":"GetHashCode(String, CompareOptions)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The string whose hash code is to be returned.","pos":[35515,35565],"source":"\\n<p>The string whose hash code is to be returned."},{"content":"&lt;/p&gt;\\n","pos":[35566,35572],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A value that determines how strings are compared.","pos":[35660,35714],"source":"\\n<p>A value that determines how strings are compared."},{"content":"&lt;/p&gt;\\n","pos":[35715,35721],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 32-bit signed integer hash code.","pos":[35780,35819],"source":"\\n<p>A 32-bit signed integer hash code."},{"content":"&lt;/p&gt;\\n","pos":[35820,35826],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[35945,35993],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[35994,36000],"source":" </p>\\n"},{"pos":[36519,36540],"content":"IndexOf(String, Char)","needQuote":true,"nodes":[{"content":"IndexOf(String, Char)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The string to search.","pos":[37369,37395],"source":"\\n<p>The string to search."},{"content":"&lt;/p&gt;\\n","pos":[37396,37402],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The character to locate within &lt;em&gt;source&lt;/em&gt;.","pos":[37464,37516],"source":"\\n<p>The character to locate within <em>source</em>."},{"content":"&lt;/p&gt;\\n","pos":[37517,37523],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index of the first occurrence of &lt;em&gt;value&lt;/em&gt;, if found, within &lt;em&gt;source&lt;/em&gt;; otherwise, -1.","pos":[37582,37699],"source":"\\n<p>The zero-based index of the first occurrence of <em>value</em>, if found, within <em>source</em>; otherwise, -1."},{"content":"Returns 0 (zero) if &lt;em&gt;value&lt;/em&gt; is an ignorable character.&lt;/p&gt;\\n","pos":[37700,37767],"source":" Returns 0 (zero) if <em>value</em> is an ignorable character.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[37886,37934],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[37935,37941],"source":" </p>\\n"},{"pos":[38743,38780],"content":"IndexOf(String, Char, CompareOptions)","needQuote":true,"nodes":[{"content":"IndexOf(String, Char, CompareOptions)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;The string to search.","pos":[39819,39845],"source":"\\n<p>The string to search."},{"content":"&lt;/p&gt;\\n","pos":[39846,39852],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The character to locate within &lt;em&gt;source&lt;/em&gt;.","pos":[39914,39966],"source":"\\n<p>The character to locate within <em>source</em>."},{"content":"&lt;/p&gt;\\n","pos":[39967,39973],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index of the first occurrence of &lt;em&gt;value&lt;/em&gt;, if found, within &lt;em&gt;source&lt;/em&gt;, using the specified comparison options; otherwise, -1.","pos":[40962,41119],"source":"\\n<p>The zero-based index of the first occurrence of <em>value</em>, if found, within <em>source</em>, using the specified comparison options; otherwise, -1."},{"content":"Returns 0 (zero) if &lt;em&gt;value&lt;/em&gt; is an ignorable character.&lt;/p&gt;\\n","pos":[41120,41187],"source":" Returns 0 (zero) if <em>value</em> is an ignorable character.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[41306,41354],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[41355,41361],"source":" </p>\\n"},{"pos":[42470,42514],"content":"IndexOf(String, Char, Int32, CompareOptions)","needQuote":true,"nodes":[{"content":"IndexOf(String, Char, Int32, CompareOptions)","pos":[0,44]}]},{"content":"\\n&lt;p&gt;The string to search.","pos":[43677,43703],"source":"\\n<p>The string to search."},{"content":"&lt;/p&gt;\\n","pos":[43704,43710],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The character to locate within &lt;em&gt;source&lt;/em&gt;.","pos":[43772,43824],"source":"\\n<p>The character to locate within <em>source</em>."},{"content":"&lt;/p&gt;\\n","pos":[43825,43831],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based starting index of the search.","pos":[43899,43948],"source":"\\n<p>The zero-based starting index of the search."},{"content":"&lt;/p&gt;\\n","pos":[43949,43955],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index of the first occurrence of &lt;em&gt;value&lt;/em&gt;, if found, within the section of &lt;em&gt;source&lt;/em&gt; that extends from &lt;em&gt;startIndex&lt;/em&gt; to the end of &lt;em&gt;source&lt;/em&gt;, using the specified comparison options; otherwise, -1.","pos":[44967,45207],"source":"\\n<p>The zero-based index of the first occurrence of <em>value</em>, if found, within the section of <em>source</em> that extends from <em>startIndex</em> to the end of <em>source</em>, using the specified comparison options; otherwise, -1."},{"content":"Returns &lt;em&gt;startIndex&lt;/em&gt; if &lt;em&gt;value&lt;/em&gt; is an ignorable character.&lt;/p&gt;\\n","pos":[45208,45286],"source":" Returns <em>startIndex</em> if <em>value</em> is an ignorable character.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[45405,45453],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[45454,45460],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; is outside the range of valid indexes for &lt;em&gt;source&lt;/em&gt;.","pos":[45577,45662],"source":"\\n<p>\\n<em>startIndex</em> is outside the range of valid indexes for <em>source</em>."},{"content":"&lt;/p&gt;\\n","pos":[45663,45669],"source":" </p>\\n"},{"pos":[46716,46751],"content":"IndexOf(String, Char, Int32, Int32)","needQuote":true,"nodes":[{"content":"IndexOf(String, Char, Int32, Int32)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The string to search.","pos":[47765,47791],"source":"\\n<p>The string to search."},{"content":"&lt;/p&gt;\\n","pos":[47792,47798],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The character to locate within &lt;em&gt;source&lt;/em&gt;.","pos":[47860,47912],"source":"\\n<p>The character to locate within <em>source</em>."},{"content":"&lt;/p&gt;\\n","pos":[47913,47919],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based starting index of the search.","pos":[47987,48036],"source":"\\n<p>The zero-based starting index of the search."},{"content":"&lt;/p&gt;\\n","pos":[48037,48043],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of elements in the section to search.","pos":[48106,48159],"source":"\\n<p>The number of elements in the section to search."},{"content":"&lt;/p&gt;\\n","pos":[48160,48166],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index of the first occurrence of &lt;em&gt;value&lt;/em&gt;, if found, within the section of &lt;em&gt;source&lt;/em&gt; that starts at &lt;em&gt;startIndex&lt;/em&gt; and contains the number of elements specified by &lt;em&gt;count&lt;/em&gt;; otherwise, -1.","pos":[48225,48456],"source":"\\n<p>The zero-based index of the first occurrence of <em>value</em>, if found, within the section of <em>source</em> that starts at <em>startIndex</em> and contains the number of elements specified by <em>count</em>; otherwise, -1."},{"content":"Returns &lt;em&gt;startIndex&lt;/em&gt; if &lt;em&gt;value&lt;/em&gt; is an ignorable character.&lt;/p&gt;\\n","pos":[48457,48535],"source":" Returns <em>startIndex</em> if <em>value</em> is an ignorable character.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[48654,48702],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[48703,48709],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; is outside the range of valid indexes for &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; do not specify a valid section in &lt;em&gt;source&lt;/em&gt;.","pos":[48826,49083],"source":"\\n<p>\\n<em>startIndex</em> is outside the range of valid indexes for <em>source</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>source</em>."},{"content":"&lt;/p&gt;\\n","pos":[49084,49090],"source":" </p>\\n"},{"pos":[49887,49938],"content":"IndexOf(String, Char, Int32, Int32, CompareOptions)","needQuote":true,"nodes":[{"content":"IndexOf(String, Char, Int32, Int32, CompareOptions)","pos":[0,51]}]},{"content":"\\n&lt;p&gt;The string to search.","pos":[51240,51266],"source":"\\n<p>The string to search."},{"content":"&lt;/p&gt;\\n","pos":[51267,51273],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The character to locate within &lt;em&gt;source&lt;/em&gt;.","pos":[51335,51387],"source":"\\n<p>The character to locate within <em>source</em>."},{"content":"&lt;/p&gt;\\n","pos":[51388,51394],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based starting index of the search.","pos":[51462,51511],"source":"\\n<p>The zero-based starting index of the search."},{"content":"&lt;/p&gt;\\n","pos":[51512,51518],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of elements in the section to search.","pos":[51581,51634],"source":"\\n<p>The number of elements in the section to search."},{"content":"&lt;/p&gt;\\n","pos":[51635,51641],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index of the first occurrence of &lt;em&gt;value&lt;/em&gt;, if found, within the section of &lt;em&gt;source&lt;/em&gt; that starts at &lt;em&gt;startIndex&lt;/em&gt; and contains the number of elements specified by &lt;em&gt;count&lt;/em&gt;, using the specified comparison options; otherwise, -1.","pos":[52653,52924],"source":"\\n<p>The zero-based index of the first occurrence of <em>value</em>, if found, within the section of <em>source</em> that starts at <em>startIndex</em> and contains the number of elements specified by <em>count</em>, using the specified comparison options; otherwise, -1."},{"content":"Returns &lt;em&gt;startIndex&lt;/em&gt; if &lt;em&gt;value&lt;/em&gt; is an ignorable character.&lt;/p&gt;\\n","pos":[52925,53003],"source":" Returns <em>startIndex</em> if <em>value</em> is an ignorable character.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[53122,53170],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[53171,53177],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; is outside the range of valid indexes for &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; do not specify a valid section in &lt;em&gt;source&lt;/em&gt;.","pos":[53294,53551],"source":"\\n<p>\\n<em>startIndex</em> is outside the range of valid indexes for <em>source</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>source</em>."},{"content":"&lt;/p&gt;\\n","pos":[53552,53558],"source":" </p>\\n"},{"pos":[54540,54563],"content":"IndexOf(String, String)","needQuote":true,"nodes":[{"content":"IndexOf(String, String)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The string to search.","pos":[55398,55424],"source":"\\n<p>The string to search."},{"content":"&lt;/p&gt;\\n","pos":[55425,55431],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string to locate within &lt;em&gt;source&lt;/em&gt;.","pos":[55495,55544],"source":"\\n<p>The string to locate within <em>source</em>."},{"content":"&lt;/p&gt;\\n","pos":[55545,55551],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index of the first occurrence of &lt;em&gt;value&lt;/em&gt;, if found, within &lt;em&gt;source&lt;/em&gt;; otherwise, -1.","pos":[55610,55727],"source":"\\n<p>The zero-based index of the first occurrence of <em>value</em>, if found, within <em>source</em>; otherwise, -1."},{"content":"Returns 0 (zero) if &lt;em&gt;value&lt;/em&gt; is an ignorable character.&lt;/p&gt;\\n","pos":[55728,55795],"source":" Returns 0 (zero) if <em>value</em> is an ignorable character.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[55914,56027],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[56028,56034],"source":" </p>\\n"},{"pos":[56747,56786],"content":"IndexOf(String, String, CompareOptions)","needQuote":true,"nodes":[{"content":"IndexOf(String, String, CompareOptions)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;The string to search.","pos":[57831,57857],"source":"\\n<p>The string to search."},{"content":"&lt;/p&gt;\\n","pos":[57858,57864],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string to locate within &lt;em&gt;source&lt;/em&gt;.","pos":[57928,57977],"source":"\\n<p>The string to locate within <em>source</em>."},{"content":"&lt;/p&gt;\\n","pos":[57978,57984],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index of the first occurrence of &lt;em&gt;value&lt;/em&gt;, if found, within &lt;em&gt;source&lt;/em&gt;, using the specified comparison options; otherwise, -1.","pos":[58996,59153],"source":"\\n<p>The zero-based index of the first occurrence of <em>value</em>, if found, within <em>source</em>, using the specified comparison options; otherwise, -1."},{"content":"Returns 0 (zero) if &lt;em&gt;value&lt;/em&gt; is an ignorable character.&lt;/p&gt;\\n","pos":[59154,59221],"source":" Returns 0 (zero) if <em>value</em> is an ignorable character.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[59340,59453],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[59454,59460],"source":" </p>\\n"},{"pos":[60577,60623],"content":"IndexOf(String, String, Int32, CompareOptions)","needQuote":true,"nodes":[{"content":"IndexOf(String, String, Int32, CompareOptions)","pos":[0,46]}]},{"content":"\\n&lt;p&gt;The string to search.","pos":[61792,61818],"source":"\\n<p>The string to search."},{"content":"&lt;/p&gt;\\n","pos":[61819,61825],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string to locate within &lt;em&gt;source&lt;/em&gt;.","pos":[61889,61938],"source":"\\n<p>The string to locate within <em>source</em>."},{"content":"&lt;/p&gt;\\n","pos":[61939,61945],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based starting index of the search.","pos":[62013,62062],"source":"\\n<p>The zero-based starting index of the search."},{"content":"&lt;/p&gt;\\n","pos":[62063,62069],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index of the first occurrence of &lt;em&gt;value&lt;/em&gt;, if found, within the section of &lt;em&gt;source&lt;/em&gt; that extends from &lt;em&gt;startIndex&lt;/em&gt; to the end of &lt;em&gt;source&lt;/em&gt;, using the specified comparison options; otherwise, -1.","pos":[63081,63321],"source":"\\n<p>The zero-based index of the first occurrence of <em>value</em>, if found, within the section of <em>source</em> that extends from <em>startIndex</em> to the end of <em>source</em>, using the specified comparison options; otherwise, -1."},{"content":"Returns &lt;em&gt;startIndex&lt;/em&gt; if &lt;em&gt;value&lt;/em&gt; is an ignorable character.&lt;/p&gt;\\n","pos":[63322,63400],"source":" Returns <em>startIndex</em> if <em>value</em> is an ignorable character.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[63519,63632],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[63633,63639],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; is outside the range of valid indexes for &lt;em&gt;source&lt;/em&gt;.","pos":[63756,63841],"source":"\\n<p>\\n<em>startIndex</em> is outside the range of valid indexes for <em>source</em>."},{"content":"&lt;/p&gt;\\n","pos":[63842,63848],"source":" </p>\\n"},{"pos":[64903,64940],"content":"IndexOf(String, String, Int32, Int32)","needQuote":true,"nodes":[{"content":"IndexOf(String, String, Int32, Int32)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;The string to search.","pos":[65960,65986],"source":"\\n<p>The string to search."},{"content":"&lt;/p&gt;\\n","pos":[65987,65993],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string to locate within &lt;em&gt;source&lt;/em&gt;.","pos":[66057,66106],"source":"\\n<p>The string to locate within <em>source</em>."},{"content":"&lt;/p&gt;\\n","pos":[66107,66113],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based starting index of the search.","pos":[66181,66230],"source":"\\n<p>The zero-based starting index of the search."},{"content":"&lt;/p&gt;\\n","pos":[66231,66237],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of elements in the section to search.","pos":[66300,66353],"source":"\\n<p>The number of elements in the section to search."},{"content":"&lt;/p&gt;\\n","pos":[66354,66360],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index of the first occurrence of &lt;em&gt;value&lt;/em&gt;, if found, within the section of &lt;em&gt;source&lt;/em&gt; that starts at &lt;em&gt;startIndex&lt;/em&gt; and contains the number of elements specified by &lt;em&gt;count&lt;/em&gt;; otherwise, -1.","pos":[66419,66650],"source":"\\n<p>The zero-based index of the first occurrence of <em>value</em>, if found, within the section of <em>source</em> that starts at <em>startIndex</em> and contains the number of elements specified by <em>count</em>; otherwise, -1."},{"content":"Returns &lt;em&gt;startIndex&lt;/em&gt; if &lt;em&gt;value&lt;/em&gt; is an ignorable character.&lt;/p&gt;\\n","pos":[66651,66729],"source":" Returns <em>startIndex</em> if <em>value</em> is an ignorable character.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[66848,66961],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[66962,66968],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; is outside the range of valid indexes for &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; do not specify a valid section in &lt;em&gt;source&lt;/em&gt;.","pos":[67085,67342],"source":"\\n<p>\\n<em>startIndex</em> is outside the range of valid indexes for <em>source</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>source</em>."},{"content":"&lt;/p&gt;\\n","pos":[67343,67349],"source":" </p>\\n"},{"pos":[68154,68207],"content":"IndexOf(String, String, Int32, Int32, CompareOptions)","needQuote":true,"nodes":[{"content":"IndexOf(String, String, Int32, Int32, CompareOptions)","pos":[0,53]}]},{"content":"\\n&lt;p&gt;The string to search.","pos":[69515,69541],"source":"\\n<p>The string to search."},{"content":"&lt;/p&gt;\\n","pos":[69542,69548],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string to locate within &lt;em&gt;source&lt;/em&gt;.","pos":[69612,69661],"source":"\\n<p>The string to locate within <em>source</em>."},{"content":"&lt;/p&gt;\\n","pos":[69662,69668],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based starting index of the search.","pos":[69736,69785],"source":"\\n<p>The zero-based starting index of the search."},{"content":"&lt;/p&gt;\\n","pos":[69786,69792],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of elements in the section to search.","pos":[69855,69908],"source":"\\n<p>The number of elements in the section to search."},{"content":"&lt;/p&gt;\\n","pos":[69909,69915],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index of the first occurrence of &lt;em&gt;value&lt;/em&gt;, if found, within the section of &lt;em&gt;source&lt;/em&gt; that starts at &lt;em&gt;startIndex&lt;/em&gt; and contains the number of elements specified by &lt;em&gt;count&lt;/em&gt;, using the specified comparison options; otherwise, -1.","pos":[70927,71198],"source":"\\n<p>The zero-based index of the first occurrence of <em>value</em>, if found, within the section of <em>source</em> that starts at <em>startIndex</em> and contains the number of elements specified by <em>count</em>, using the specified comparison options; otherwise, -1."},{"content":"Returns &lt;em&gt;startIndex&lt;/em&gt; if &lt;em&gt;value&lt;/em&gt; is an ignorable character.&lt;/p&gt;\\n","pos":[71199,71277],"source":" Returns <em>startIndex</em> if <em>value</em> is an ignorable character.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[71396,71509],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[71510,71516],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; is outside the range of valid indexes for &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; do not specify a valid section in &lt;em&gt;source&lt;/em&gt;.","pos":[71633,71890],"source":"\\n<p>\\n<em>startIndex</em> is outside the range of valid indexes for <em>source</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>source</em>."},{"content":"&lt;/p&gt;\\n","pos":[71891,71897],"source":" </p>\\n"},{"pos":[72884,72908],"content":"IsPrefix(String, String)","needQuote":true,"nodes":[{"content":"IsPrefix(String, String)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The string to search in.","pos":[73704,73733],"source":"\\n<p>The string to search in."},{"content":"&lt;/p&gt;\\n","pos":[73734,73740],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string to compare with the beginning of &lt;em&gt;source&lt;/em&gt;.","pos":[73805,73870],"source":"\\n<p>The string to compare with the beginning of <em>source</em>."},{"content":"&lt;/p&gt;\\n","pos":[73871,73877],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the length of &lt;em&gt;prefix&lt;/em&gt; is less than or equal to the length of &lt;em&gt;source&lt;/em&gt; and &lt;em&gt;source&lt;/em&gt; starts with &lt;em&gt;prefix&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[73938,74144],"source":"\\n<p>\\n<strong>true</strong> if the length of <em>prefix</em> is less than or equal to the length of <em>source</em> and <em>source</em> starts with <em>prefix</em>; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;prefix&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[74263,74377],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>prefix</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[74378,74384],"source":" </p>\\n"},{"pos":[75171,75211],"content":"IsPrefix(String, String, CompareOptions)","needQuote":true,"nodes":[{"content":"IsPrefix(String, String, CompareOptions)","pos":[0,40]}]},{"content":"\\n&lt;p&gt;The string to search in.","pos":[76295,76324],"source":"\\n<p>The string to search in."},{"content":"&lt;/p&gt;\\n","pos":[76325,76331],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string to compare with the beginning of &lt;em&gt;source&lt;/em&gt;.","pos":[76396,76461],"source":"\\n<p>The string to compare with the beginning of <em>source</em>."},{"content":"&lt;/p&gt;\\n","pos":[76462,76468],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the length of &lt;em&gt;prefix&lt;/em&gt; is less than or equal to the length of &lt;em&gt;source&lt;/em&gt; and &lt;em&gt;source&lt;/em&gt; starts with &lt;em&gt;prefix&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[77483,77689],"source":"\\n<p>\\n<strong>true</strong> if the length of <em>prefix</em> is less than or equal to the length of <em>source</em> and <em>source</em> starts with <em>prefix</em>; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;prefix&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[77808,77922],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>prefix</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[77923,77929],"source":" </p>\\n"},{"pos":[78973,78997],"content":"IsSuffix(String, String)","needQuote":true,"nodes":[{"content":"IsSuffix(String, String)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The string to search in.","pos":[79791,79820],"source":"\\n<p>The string to search in."},{"content":"&lt;/p&gt;\\n","pos":[79821,79827],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string to compare with the end of &lt;em&gt;source&lt;/em&gt;.","pos":[79892,79951],"source":"\\n<p>The string to compare with the end of <em>source</em>."},{"content":"&lt;/p&gt;\\n","pos":[79952,79958],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the length of &lt;em&gt;suffix&lt;/em&gt; is less than or equal to the length of &lt;em&gt;source&lt;/em&gt; and &lt;em&gt;source&lt;/em&gt; ends with &lt;em&gt;suffix&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[80019,80223],"source":"\\n<p>\\n<strong>true</strong> if the length of <em>suffix</em> is less than or equal to the length of <em>source</em> and <em>source</em> ends with <em>suffix</em>; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;suffix&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[80342,80456],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>suffix</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[80457,80463],"source":" </p>\\n"},{"pos":[81250,81290],"content":"IsSuffix(String, String, CompareOptions)","needQuote":true,"nodes":[{"content":"IsSuffix(String, String, CompareOptions)","pos":[0,40]}]},{"content":"\\n&lt;p&gt;The string to search in.","pos":[82372,82401],"source":"\\n<p>The string to search in."},{"content":"&lt;/p&gt;\\n","pos":[82402,82408],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string to compare with the end of &lt;em&gt;source&lt;/em&gt;.","pos":[82473,82532],"source":"\\n<p>The string to compare with the end of <em>source</em>."},{"content":"&lt;/p&gt;\\n","pos":[82533,82539],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the length of &lt;em&gt;suffix&lt;/em&gt; is less than or equal to the length of &lt;em&gt;source&lt;/em&gt; and &lt;em&gt;source&lt;/em&gt; ends with &lt;em&gt;suffix&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[83571,83775],"source":"\\n<p>\\n<strong>true</strong> if the length of <em>suffix</em> is less than or equal to the length of <em>source</em> and <em>source</em> ends with <em>suffix</em>; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;suffix&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[83894,84008],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>suffix</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[84009,84015],"source":" </p>\\n"},{"pos":[85062,85087],"content":"LastIndexOf(String, Char)","needQuote":true,"nodes":[{"content":"LastIndexOf(String, Char)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The string to search.","pos":[85931,85957],"source":"\\n<p>The string to search."},{"content":"&lt;/p&gt;\\n","pos":[85958,85964],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The character to locate within &lt;em&gt;source&lt;/em&gt;.","pos":[86026,86078],"source":"\\n<p>The character to locate within <em>source</em>."},{"content":"&lt;/p&gt;\\n","pos":[86079,86085],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index of the last occurrence of &lt;em&gt;value&lt;/em&gt;, if found, within &lt;em&gt;source&lt;/em&gt;; otherwise, -1.&lt;/p&gt;\\n","pos":[86144,86266],"source":"\\n<p>The zero-based index of the last occurrence of <em>value</em>, if found, within <em>source</em>; otherwise, -1.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[86385,86433],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[86434,86440],"source":" </p>\\n"},{"pos":[87153,87194],"content":"LastIndexOf(String, Char, CompareOptions)","needQuote":true,"nodes":[{"content":"LastIndexOf(String, Char, CompareOptions)","pos":[0,41]}]},{"content":"\\n&lt;p&gt;The string to search.","pos":[88248,88274],"source":"\\n<p>The string to search."},{"content":"&lt;/p&gt;\\n","pos":[88275,88281],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The character to locate within &lt;em&gt;source&lt;/em&gt;.","pos":[88343,88395],"source":"\\n<p>The character to locate within <em>source</em>."},{"content":"&lt;/p&gt;\\n","pos":[88396,88402],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index of the last occurrence of &lt;em&gt;value&lt;/em&gt;, if found, within &lt;em&gt;source&lt;/em&gt;, using the specified comparison options; otherwise, -1.&lt;/p&gt;\\n","pos":[89414,89576],"source":"\\n<p>The zero-based index of the last occurrence of <em>value</em>, if found, within <em>source</em>, using the specified comparison options; otherwise, -1.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[89695,89743],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[89744,89750],"source":" </p>\\n"},{"pos":[90867,90915],"content":"LastIndexOf(String, Char, Int32, CompareOptions)","needQuote":true,"nodes":[{"content":"LastIndexOf(String, Char, Int32, CompareOptions)","pos":[0,48]}]},{"content":"\\n&lt;p&gt;The string to search.","pos":[92099,92125],"source":"\\n<p>The string to search."},{"content":"&lt;/p&gt;\\n","pos":[92126,92132],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The character to locate within &lt;em&gt;source&lt;/em&gt;.","pos":[92194,92246],"source":"\\n<p>The character to locate within <em>source</em>."},{"content":"&lt;/p&gt;\\n","pos":[92247,92253],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based starting index of the backward search.","pos":[92321,92379],"source":"\\n<p>The zero-based starting index of the backward search."},{"content":"&lt;/p&gt;\\n","pos":[92380,92386],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index of the last occurrence of &lt;em&gt;value&lt;/em&gt;, if found, within the section of &lt;em&gt;source&lt;/em&gt; that extends from the beginning of &lt;em&gt;source&lt;/em&gt; to &lt;em&gt;startIndex&lt;/em&gt;, using the specified comparison options; otherwise, -1.","pos":[93398,93643],"source":"\\n<p>The zero-based index of the last occurrence of <em>value</em>, if found, within the section of <em>source</em> that extends from the beginning of <em>source</em> to <em>startIndex</em>, using the specified comparison options; otherwise, -1."},{"content":"Returns &lt;em&gt;startIndex&lt;/em&gt; if &lt;em&gt;value&lt;/em&gt; is an ignorable character.&lt;/p&gt;\\n","pos":[93644,93722],"source":" Returns <em>startIndex</em> if <em>value</em> is an ignorable character.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[93841,93889],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[93890,93896],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; is outside the range of valid indexes for &lt;em&gt;source&lt;/em&gt;.","pos":[94013,94098],"source":"\\n<p>\\n<em>startIndex</em> is outside the range of valid indexes for <em>source</em>."},{"content":"&lt;/p&gt;\\n","pos":[94099,94105],"source":" </p>\\n"},{"pos":[95160,95199],"content":"LastIndexOf(String, Char, Int32, Int32)","needQuote":true,"nodes":[{"content":"LastIndexOf(String, Char, Int32, Int32)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;The string to search.","pos":[96226,96252],"source":"\\n<p>The string to search."},{"content":"&lt;/p&gt;\\n","pos":[96253,96259],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The character to locate within &lt;em&gt;source&lt;/em&gt;.","pos":[96321,96373],"source":"\\n<p>The character to locate within <em>source</em>."},{"content":"&lt;/p&gt;\\n","pos":[96374,96380],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based starting index of the backward search.","pos":[96448,96506],"source":"\\n<p>The zero-based starting index of the backward search."},{"content":"&lt;/p&gt;\\n","pos":[96507,96513],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of elements in the section to search.","pos":[96576,96629],"source":"\\n<p>The number of elements in the section to search."},{"content":"&lt;/p&gt;\\n","pos":[96630,96636],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index of the last occurrence of &lt;em&gt;value&lt;/em&gt;, if found, within the section of &lt;em&gt;source&lt;/em&gt; that contains the number of elements specified by &lt;em&gt;count&lt;/em&gt; and that ends at &lt;em&gt;startIndex&lt;/em&gt;; otherwise, -1.","pos":[96695,96928],"source":"\\n<p>The zero-based index of the last occurrence of <em>value</em>, if found, within the section of <em>source</em> that contains the number of elements specified by <em>count</em> and that ends at <em>startIndex</em>; otherwise, -1."},{"content":"Returns &lt;em&gt;startIndex&lt;/em&gt; if &lt;em&gt;value&lt;/em&gt; is an ignorable character.&lt;/p&gt;\\n","pos":[96929,97007],"source":" Returns <em>startIndex</em> if <em>value</em> is an ignorable character.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[97126,97174],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[97175,97181],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; is outside the range of valid indexes for &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; do not specify a valid section in &lt;em&gt;source&lt;/em&gt;.","pos":[97298,97555],"source":"\\n<p>\\n<em>startIndex</em> is outside the range of valid indexes for <em>source</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>source</em>."},{"content":"&lt;/p&gt;\\n","pos":[97556,97562],"source":" </p>\\n"},{"pos":[98367,98422],"content":"LastIndexOf(String, Char, Int32, Int32, CompareOptions)","needQuote":true,"nodes":[{"content":"LastIndexOf(String, Char, Int32, Int32, CompareOptions)","pos":[0,55]}]},{"content":"\\n&lt;p&gt;The string to search.","pos":[99737,99763],"source":"\\n<p>The string to search."},{"content":"&lt;/p&gt;\\n","pos":[99764,99770],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The character to locate within &lt;em&gt;source&lt;/em&gt;.","pos":[99832,99884],"source":"\\n<p>The character to locate within <em>source</em>."},{"content":"&lt;/p&gt;\\n","pos":[99885,99891],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based starting index of the backward search.","pos":[99959,100017],"source":"\\n<p>The zero-based starting index of the backward search."},{"content":"&lt;/p&gt;\\n","pos":[100018,100024],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of elements in the section to search.","pos":[100087,100140],"source":"\\n<p>The number of elements in the section to search."},{"content":"&lt;/p&gt;\\n","pos":[100141,100147],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index of the last occurrence of &lt;em&gt;value&lt;/em&gt;, if found, within the section of &lt;em&gt;source&lt;/em&gt; that contains the number of elements specified by &lt;em&gt;count&lt;/em&gt; and that ends at &lt;em&gt;startIndex&lt;/em&gt;, using the specified comparison options; otherwise, -1.","pos":[101159,101432],"source":"\\n<p>The zero-based index of the last occurrence of <em>value</em>, if found, within the section of <em>source</em> that contains the number of elements specified by <em>count</em> and that ends at <em>startIndex</em>, using the specified comparison options; otherwise, -1."},{"content":"Returns &lt;em&gt;startIndex&lt;/em&gt; if &lt;em&gt;value&lt;/em&gt; is an ignorable character.&lt;/p&gt;\\n","pos":[101433,101511],"source":" Returns <em>startIndex</em> if <em>value</em> is an ignorable character.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[101630,101678],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[101679,101685],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; is outside the range of valid indexes for &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; do not specify a valid section in &lt;em&gt;source&lt;/em&gt;.","pos":[101802,102059],"source":"\\n<p>\\n<em>startIndex</em> is outside the range of valid indexes for <em>source</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>source</em>."},{"content":"&lt;/p&gt;\\n","pos":[102060,102066],"source":" </p>\\n"},{"pos":[103056,103083],"content":"LastIndexOf(String, String)","needQuote":true,"nodes":[{"content":"LastIndexOf(String, String)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The string to search.","pos":[103933,103959],"source":"\\n<p>The string to search."},{"content":"&lt;/p&gt;\\n","pos":[103960,103966],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string to locate within &lt;em&gt;source&lt;/em&gt;.","pos":[104030,104079],"source":"\\n<p>The string to locate within <em>source</em>."},{"content":"&lt;/p&gt;\\n","pos":[104080,104086],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index of the last occurrence of &lt;em&gt;value&lt;/em&gt;, if found, within &lt;em&gt;source&lt;/em&gt;; otherwise, -1.&lt;/p&gt;\\n","pos":[104145,104267],"source":"\\n<p>The zero-based index of the last occurrence of <em>value</em>, if found, within <em>source</em>; otherwise, -1.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[104386,104499],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[104500,104506],"source":" </p>\\n"},{"pos":[105227,105270],"content":"LastIndexOf(String, String, CompareOptions)","needQuote":true,"nodes":[{"content":"LastIndexOf(String, String, CompareOptions)","pos":[0,43]}]},{"content":"\\n&lt;p&gt;The string to search.","pos":[106330,106356],"source":"\\n<p>The string to search."},{"content":"&lt;/p&gt;\\n","pos":[106357,106363],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string to locate within &lt;em&gt;source&lt;/em&gt;.","pos":[106427,106476],"source":"\\n<p>The string to locate within <em>source</em>."},{"content":"&lt;/p&gt;\\n","pos":[106477,106483],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index of the last occurrence of &lt;em&gt;value&lt;/em&gt;, if found, within &lt;em&gt;source&lt;/em&gt;, using the specified comparison options; otherwise, -1.&lt;/p&gt;\\n","pos":[107495,107657],"source":"\\n<p>The zero-based index of the last occurrence of <em>value</em>, if found, within <em>source</em>, using the specified comparison options; otherwise, -1.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[107776,107889],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[107890,107896],"source":" </p>\\n"},{"pos":[109021,109071],"content":"LastIndexOf(String, String, Int32, CompareOptions)","needQuote":true,"nodes":[{"content":"LastIndexOf(String, String, Int32, CompareOptions)","pos":[0,50]}]},{"content":"\\n&lt;p&gt;The string to search.","pos":[110261,110287],"source":"\\n<p>The string to search."},{"content":"&lt;/p&gt;\\n","pos":[110288,110294],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string to locate within &lt;em&gt;source&lt;/em&gt;.","pos":[110358,110407],"source":"\\n<p>The string to locate within <em>source</em>."},{"content":"&lt;/p&gt;\\n","pos":[110408,110414],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based starting index of the backward search.","pos":[110482,110540],"source":"\\n<p>The zero-based starting index of the backward search."},{"content":"&lt;/p&gt;\\n","pos":[110541,110547],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index of the last occurrence of &lt;em&gt;value&lt;/em&gt;, if found, within the section of &lt;em&gt;source&lt;/em&gt; that extends from the beginning of &lt;em&gt;source&lt;/em&gt; to &lt;em&gt;startIndex&lt;/em&gt;, using the specified comparison options; otherwise, -1.","pos":[111559,111804],"source":"\\n<p>The zero-based index of the last occurrence of <em>value</em>, if found, within the section of <em>source</em> that extends from the beginning of <em>source</em> to <em>startIndex</em>, using the specified comparison options; otherwise, -1."},{"content":"Returns &lt;em&gt;startIndex&lt;/em&gt; if &lt;em&gt;value&lt;/em&gt; is an ignorable character.&lt;/p&gt;\\n","pos":[111805,111883],"source":" Returns <em>startIndex</em> if <em>value</em> is an ignorable character.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[112002,112115],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[112116,112122],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; is outside the range of valid indexes for &lt;em&gt;source&lt;/em&gt;.","pos":[112239,112324],"source":"\\n<p>\\n<em>startIndex</em> is outside the range of valid indexes for <em>source</em>."},{"content":"&lt;/p&gt;\\n","pos":[112325,112331],"source":" </p>\\n"},{"pos":[113394,113435],"content":"LastIndexOf(String, String, Int32, Int32)","needQuote":true,"nodes":[{"content":"LastIndexOf(String, String, Int32, Int32)","pos":[0,41]}]},{"content":"\\n&lt;p&gt;The string to search.","pos":[114468,114494],"source":"\\n<p>The string to search."},{"content":"&lt;/p&gt;\\n","pos":[114495,114501],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string to locate within &lt;em&gt;source&lt;/em&gt;.","pos":[114565,114614],"source":"\\n<p>The string to locate within <em>source</em>."},{"content":"&lt;/p&gt;\\n","pos":[114615,114621],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based starting index of the backward search.","pos":[114689,114747],"source":"\\n<p>The zero-based starting index of the backward search."},{"content":"&lt;/p&gt;\\n","pos":[114748,114754],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of elements in the section to search.","pos":[114817,114870],"source":"\\n<p>The number of elements in the section to search."},{"content":"&lt;/p&gt;\\n","pos":[114871,114877],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index of the last occurrence of &lt;em&gt;value&lt;/em&gt;, if found, within the section of &lt;em&gt;source&lt;/em&gt; that contains the number of elements specified by &lt;em&gt;count&lt;/em&gt; and that ends at &lt;em&gt;startIndex&lt;/em&gt;; otherwise, -1.","pos":[114936,115169],"source":"\\n<p>The zero-based index of the last occurrence of <em>value</em>, if found, within the section of <em>source</em> that contains the number of elements specified by <em>count</em> and that ends at <em>startIndex</em>; otherwise, -1."},{"content":"Returns &lt;em&gt;startIndex&lt;/em&gt; if &lt;em&gt;value&lt;/em&gt; is an ignorable character.&lt;/p&gt;\\n","pos":[115170,115248],"source":" Returns <em>startIndex</em> if <em>value</em> is an ignorable character.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[115367,115480],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[115481,115487],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; is outside the range of valid indexes for &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; do not specify a valid section in &lt;em&gt;source&lt;/em&gt;.","pos":[115604,115861],"source":"\\n<p>\\n<em>startIndex</em> is outside the range of valid indexes for <em>source</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>source</em>."},{"content":"&lt;/p&gt;\\n","pos":[115862,115868],"source":" </p>\\n"},{"pos":[116681,116738],"content":"LastIndexOf(String, String, Int32, Int32, CompareOptions)","needQuote":true,"nodes":[{"content":"LastIndexOf(String, String, Int32, Int32, CompareOptions)","pos":[0,57]}]},{"content":"\\n&lt;p&gt;The string to search.","pos":[118059,118085],"source":"\\n<p>The string to search."},{"content":"&lt;/p&gt;\\n","pos":[118086,118092],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string to locate within &lt;em&gt;source&lt;/em&gt;.","pos":[118156,118205],"source":"\\n<p>The string to locate within <em>source</em>."},{"content":"&lt;/p&gt;\\n","pos":[118206,118212],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based starting index of the backward search.","pos":[118280,118338],"source":"\\n<p>The zero-based starting index of the backward search."},{"content":"&lt;/p&gt;\\n","pos":[118339,118345],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of elements in the section to search.","pos":[118408,118461],"source":"\\n<p>The number of elements in the section to search."},{"content":"&lt;/p&gt;\\n","pos":[118462,118468],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index of the last occurrence of &lt;em&gt;value&lt;/em&gt;, if found, within the section of &lt;em&gt;source&lt;/em&gt; that contains the number of elements specified by &lt;em&gt;count&lt;/em&gt; and that ends at &lt;em&gt;startIndex&lt;/em&gt;, using the specified comparison options; otherwise, -1.","pos":[119480,119753],"source":"\\n<p>The zero-based index of the last occurrence of <em>value</em>, if found, within the section of <em>source</em> that contains the number of elements specified by <em>count</em> and that ends at <em>startIndex</em>, using the specified comparison options; otherwise, -1."},{"content":"Returns &lt;em&gt;startIndex&lt;/em&gt; if &lt;em&gt;value&lt;/em&gt; is an ignorable character.","pos":[119754,119826],"source":" Returns <em>startIndex</em> if <em>value</em> is an ignorable character."},{"content":"&lt;/p&gt;\\n","pos":[119827,119833],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[119952,120065],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[120066,120072],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; is outside the range of valid indexes for &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; do not specify a valid section in &lt;em&gt;source&lt;/em&gt;.","pos":[120189,120446],"source":"\\n<p>\\n<em>startIndex</em> is outside the range of valid indexes for <em>source</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>source</em>."},{"content":"&lt;/p&gt;\\n","pos":[120447,120453],"source":" </p>\\n"},{"pos":[121349,121359],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[122571,122591],"content":"System.Globalization","needQuote":true,"nodes":[{"content":"System.Globalization","pos":[0,20]}]},{"pos":[122764,122770],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[122957,122979],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[123127,123133],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[123200,123201],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[123251,123257],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[123318,123319]},{"pos":[123374,123380],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[123440,123441],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[123538,123544],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[123611,123612],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[123662,123668],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[123729,123730]},{"pos":[123785,123791],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[123851,123852],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[124097,124128],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[124294,124309],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[124385,124386],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[124436,124442],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[124503,124504]},{"pos":[124559,124565],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[124625,124626],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[124732,124747],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[124823,124824],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[124874,124880],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[124941,124942]},{"pos":[124997,125003],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[125063,125064],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[125290,125299],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[125392,125399],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[125467,125468],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[125495,125496],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[125565,125572],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[125640,125641],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[125668,125669],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[125844,125861],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[125970,125985],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[126061,126062],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[126089,126090],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[126167,126182],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[126258,126259],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[126286,126287],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[126432,126438],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[126569,126575],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[126719,126724],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[126902,126916],"content":"CompareOptions","needQuote":true,"nodes":[{"content":"CompareOptions","pos":[0,14]}]},{"pos":[127141,127155],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[127274,127280],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[127347,127348],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[127398,127404],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[127464,127465],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[127548,127554],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[127621,127622],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[127672,127678],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[127738,127739],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[127912,127919],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[128100,128111],"content":"CompareInfo","needQuote":true,"nodes":[{"content":"CompareInfo","pos":[0,11]}]},{"pos":[128317,128330],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[128431,128442],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[128514,128515],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[128542,128543],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[128616,128627],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[128699,128700],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[128727,128728],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[128887,128891],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[129045,129055],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[129150,129158],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[129227,129228],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[129255,129256],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[129326,129334],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[129403,129404],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[129431,129432],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[129591,129618],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[129837,129854],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[130030,130051],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]}],"content":"items:\n- uid: System.Globalization.CompareInfo\n  commentId: T:System.Globalization.CompareInfo\n  id: CompareInfo\n  parent: System.Globalization\n  children:\n  - System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)\n  - System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)\n  - System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32)\n  - System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)\n  - System.Globalization.CompareInfo.Compare(System.String,System.String)\n  - System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)\n  - System.Globalization.CompareInfo.Equals(System.Object)\n  - System.Globalization.CompareInfo.GetCompareInfo(System.String)\n  - System.Globalization.CompareInfo.GetHashCode\n  - System.Globalization.CompareInfo.GetHashCode(System.String,System.Globalization.CompareOptions)\n  - System.Globalization.CompareInfo.IndexOf(System.String,System.Char)\n  - System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)\n  - System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)\n  - System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)\n  - System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)\n  - System.Globalization.CompareInfo.IndexOf(System.String,System.String)\n  - System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)\n  - System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)\n  - System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)\n  - System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)\n  - System.Globalization.CompareInfo.IsPrefix(System.String,System.String)\n  - System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)\n  - System.Globalization.CompareInfo.IsSuffix(System.String,System.String)\n  - System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)\n  - System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)\n  - System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)\n  - System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)\n  - System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)\n  - System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)\n  - System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)\n  - System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)\n  - System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)\n  - System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)\n  - System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)\n  - System.Globalization.CompareInfo.Name\n  - System.Globalization.CompareInfo.ToString\n  langs:\n  - csharp\n  - vb\n  name: CompareInfo\n  fullName: System.Globalization.CompareInfo\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CompareInfo\n    path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n    startLine: 66\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Implements a set of methods for culture-sensitive string comparisons.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ComVisible(true)]\n\n      public class CompareInfo\n    content.vb: >-\n      <Serializable>\n\n      <ComVisible(True)>\n\n      Public Class CompareInfo\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: CompareInfo\n- uid: System.Globalization.CompareInfo.Name\n  commentId: P:System.Globalization.CompareInfo.Name\n  id: Name\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  - vb\n  name: Name\n  fullName: System.Globalization.CompareInfo.Name\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Name\n    path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n    startLine: 319\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Gets the name of the culture used for sorting operations by this <xref href=\\\"System.Globalization.CompareInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public virtual string Name { get; }\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Overridable ReadOnly Property Name As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The name of a culture.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: CompareInfo.Name\n- uid: System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)\n  commentId: M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)\n  id: Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  - vb\n  name: Compare(String, Int32, Int32, String, Int32, Int32)\n  fullName: System.Globalization.CompareInfo.Compare(System.String, System.Int32, System.Int32, System.String, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Compare\n    path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n    startLine: 453\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Compares a section of one string with a section of another string.</p>\\n\"\n  syntax:\n    content: public virtual int Compare(string string1, int offset1, int length1, string string2, int offset2, int length2)\n    content.vb: Public Overridable Function Compare(string1 As String, offset1 As Integer, length1 As Integer, string2 As String, offset2 As Integer, length2 As Integer) As Integer\n    parameters:\n    - id: string1\n      type: System.String\n      description: \"\\n<p>The first string to compare. </p>\\n\"\n    - id: offset1\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the character in <em>string1</em> at which to start comparing. </p>\\n\"\n    - id: length1\n      type: System.Int32\n      description: \"\\n<p>The number of consecutive characters in <em>string1</em> to compare. </p>\\n\"\n    - id: string2\n      type: System.String\n      description: \"\\n<p>The second string to compare. </p>\\n\"\n    - id: offset2\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the character in <em>string2</em> at which to start comparing. </p>\\n\"\n    - id: length2\n      type: System.Int32\n      description: \"\\n<p>The number of consecutive characters in <em>string2</em> to compare. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer indicating the lexical relationship between the two comparands.</p>\\n<p>Value </p>\\n<p>Condition </p>\\n<table><tbody><tr><td>\\n<p>zero </p>\\n</td><td>\\n<p>The two strings are equal. </p>\\n</td></tr><tr><td>\\n<p>less than zero </p>\\n</td><td>\\n<p>The specified section of <em>string1</em> is less than the specified section of <em>string2</em>. </p>\\n</td></tr><tr><td>\\n<p>greater than zero </p>\\n</td><td>\\n<p>The specified section of <em>string1</em> is greater than the specified section of <em>string2</em>. </p>\\n</td></tr></tbody></table>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset1</em> or <em>length1</em> or <em>offset2</em> or <em>length2</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>offset1</em> is greater than or equal to the number of characters in <em>string1</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>offset2</em> is greater than or equal to the number of characters in <em>string2</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>length1</em> is greater than the number of characters from <em>offset1</em> to the end of <em>string1</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>length2</em> is greater than the number of characters from <em>offset2</em> to the end of <em>string2</em>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: CompareInfo.Compare(String, Int32, Int32, String, Int32, Int32)\n- uid: System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)\n  commentId: M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)\n  id: Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  - vb\n  name: Compare(String, Int32, Int32, String, Int32, Int32, CompareOptions)\n  fullName: System.Globalization.CompareInfo.Compare(System.String, System.Int32, System.Int32, System.String, System.Int32, System.Int32, System.Globalization.CompareOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Compare\n    path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n    startLine: 472\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Compares a section of one string with a section of another string using the specified <xref href=\\\"System.Globalization.CompareOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public virtual int Compare(string string1, int offset1, int length1, string string2, int offset2, int length2, CompareOptions options)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overridable Function Compare(string1 As String, offset1 As Integer, length1 As Integer, string2 As String, offset2 As Integer, length2 As Integer, options As CompareOptions) As Integer\n    parameters:\n    - id: string1\n      type: System.String\n      description: \"\\n<p>The first string to compare. </p>\\n\"\n    - id: offset1\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the character in <em>string1</em> at which to start comparing. </p>\\n\"\n    - id: length1\n      type: System.Int32\n      description: \"\\n<p>The number of consecutive characters in <em>string1</em> to compare. </p>\\n\"\n    - id: string2\n      type: System.String\n      description: \"\\n<p>The second string to compare. </p>\\n\"\n    - id: offset2\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the character in <em>string2</em> at which to start comparing. </p>\\n\"\n    - id: length2\n      type: System.Int32\n      description: \"\\n<p>The number of consecutive characters in <em>string2</em> to compare. </p>\\n\"\n    - id: options\n      type: System.Globalization.CompareOptions\n      description: \"\\n<p>A value that defines how <em>string1</em> and <em>string2</em> should be compared. <em>options</em> is either the enumeration value <xref href=\\\"System.Globalization.CompareOptions.Ordinal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\\\"System.Globalization.CompareOptions.IgnoreCase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreSymbols\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreNonSpace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreWidth\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreKanaType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Globalization.CompareOptions.StringSort\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer indicating the lexical relationship between the two comparands.</p>\\n<p>Value </p>\\n<p>Condition </p>\\n<table><tbody><tr><td>\\n<p>zero </p>\\n</td><td>\\n<p>The two strings are equal. </p>\\n</td></tr><tr><td>\\n<p>less than zero </p>\\n</td><td>\\n<p>The specified section of <em>string1</em> is less than the specified section of <em>string2</em>. </p>\\n</td></tr><tr><td>\\n<p>greater than zero </p>\\n</td><td>\\n<p>The specified section of <em>string1</em> is greater than the specified section of <em>string2</em>. </p>\\n</td></tr></tbody></table>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset1</em> or <em>length1</em> or <em>offset2</em> or <em>length2</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>offset1</em> is greater than or equal to the number of characters in <em>string1</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>offset2</em> is greater than or equal to the number of characters in <em>string2</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>length1</em> is greater than the number of characters from <em>offset1</em> to the end of <em>string1</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>length2</em> is greater than the number of characters from <em>offset2</em> to the end of <em>string2</em>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>options</em> contains an invalid <xref href=\\\"System.Globalization.CompareOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value. </p>\\n\"\n  seealso:\n  - type: System.Globalization.CompareOptions\n    commentId: T:System.Globalization.CompareOptions\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: CompareInfo.Compare(String, Int32, Int32, String, Int32, Int32, CompareOptions)\n- uid: System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32)\n  commentId: M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32)\n  id: Compare(System.String,System.Int32,System.String,System.Int32)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  - vb\n  name: Compare(String, Int32, String, Int32)\n  fullName: System.Globalization.CompareInfo.Compare(System.String, System.Int32, System.String, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Compare\n    path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n    startLine: 466\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Compares the end section of a string with the end section of another string.</p>\\n\"\n  syntax:\n    content: public virtual int Compare(string string1, int offset1, string string2, int offset2)\n    content.vb: Public Overridable Function Compare(string1 As String, offset1 As Integer, string2 As String, offset2 As Integer) As Integer\n    parameters:\n    - id: string1\n      type: System.String\n      description: \"\\n<p>The first string to compare. </p>\\n\"\n    - id: offset1\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the character in <em>string1</em> at which to start comparing. </p>\\n\"\n    - id: string2\n      type: System.String\n      description: \"\\n<p>The second string to compare. </p>\\n\"\n    - id: offset2\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the character in <em>string2</em> at which to start comparing. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer indicating the lexical relationship between the two comparands.</p>\\n<p>Value </p>\\n<p>Condition </p>\\n<table><tbody><tr><td>\\n<p>zero </p>\\n</td><td>\\n<p>The two strings are equal. </p>\\n</td></tr><tr><td>\\n<p>less than zero </p>\\n</td><td>\\n<p>The specified section of <em>string1</em> is less than the specified section of <em>string2</em>. </p>\\n</td></tr><tr><td>\\n<p>greater than zero </p>\\n</td><td>\\n<p>The specified section of <em>string1</em> is greater than the specified section of <em>string2</em>. </p>\\n</td></tr></tbody></table>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset1</em> or <em>offset2</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>offset1</em> is greater than or equal to the number of characters in <em>string1</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>offset2</em> is greater than or equal to the number of characters in <em>string2</em>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: CompareInfo.Compare(String, Int32, String, Int32)\n- uid: System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)\n  commentId: M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)\n  id: Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  - vb\n  name: Compare(String, Int32, String, Int32, CompareOptions)\n  fullName: System.Globalization.CompareInfo.Compare(System.String, System.Int32, System.String, System.Int32, System.Globalization.CompareOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Compare\n    path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n    startLine: 459\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Compares the end section of a string with the end section of another string using the specified <xref href=\\\"System.Globalization.CompareOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public virtual int Compare(string string1, int offset1, string string2, int offset2, CompareOptions options)\n    content.vb: Public Overridable Function Compare(string1 As String, offset1 As Integer, string2 As String, offset2 As Integer, options As CompareOptions) As Integer\n    parameters:\n    - id: string1\n      type: System.String\n      description: \"\\n<p>The first string to compare. </p>\\n\"\n    - id: offset1\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the character in <em>string1</em> at which to start comparing. </p>\\n\"\n    - id: string2\n      type: System.String\n      description: \"\\n<p>The second string to compare. </p>\\n\"\n    - id: offset2\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the character in <em>string2</em> at which to start comparing. </p>\\n\"\n    - id: options\n      type: System.Globalization.CompareOptions\n      description: \"\\n<p>A value that defines how <em>string1</em> and <em>string2</em> should be compared. <em>options</em> is either the enumeration value <xref href=\\\"System.Globalization.CompareOptions.Ordinal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\\\"System.Globalization.CompareOptions.IgnoreCase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreSymbols\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreNonSpace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreWidth\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreKanaType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Globalization.CompareOptions.StringSort\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer indicating the lexical relationship between the two comparands.</p>\\n<p>Value </p>\\n<p>Condition </p>\\n<table><tbody><tr><td>\\n<p>zero </p>\\n</td><td>\\n<p>The two strings are equal. </p>\\n</td></tr><tr><td>\\n<p>less than zero </p>\\n</td><td>\\n<p>The specified section of <em>string1</em> is less than the specified section of <em>string2</em>. </p>\\n</td></tr><tr><td>\\n<p>greater than zero </p>\\n</td><td>\\n<p>The specified section of <em>string1</em> is greater than the specified section of <em>string2</em>. </p>\\n</td></tr></tbody></table>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset1</em> or <em>offset2</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>offset1</em> is greater than or equal to the number of characters in <em>string1</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>offset2</em> is greater than or equal to the number of characters in <em>string2</em>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>options</em> contains an invalid <xref href=\\\"System.Globalization.CompareOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value. </p>\\n\"\n  seealso:\n  - type: System.Globalization.CompareOptions\n    commentId: T:System.Globalization.CompareOptions\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: CompareInfo.Compare(String, Int32, String, Int32, CompareOptions)\n- uid: System.Globalization.CompareInfo.Compare(System.String,System.String)\n  commentId: M:System.Globalization.CompareInfo.Compare(System.String,System.String)\n  id: Compare(System.String,System.String)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  - vb\n  name: Compare(String, String)\n  fullName: System.Globalization.CompareInfo.Compare(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Compare\n    path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n    startLine: 396\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Compares two strings. </p>\\n\"\n  syntax:\n    content: public virtual int Compare(string string1, string string2)\n    content.vb: Public Overridable Function Compare(string1 As String, string2 As String) As Integer\n    parameters:\n    - id: string1\n      type: System.String\n      description: \"\\n<p>The first string to compare. </p>\\n\"\n    - id: string2\n      type: System.String\n      description: \"\\n<p>The second string to compare. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer indicating the lexical relationship between the two comparands.</p>\\n<p>Value </p>\\n<p>Condition </p>\\n<table><tbody><tr><td>\\n<p>zero </p>\\n</td><td>\\n<p>The two strings are equal. </p>\\n</td></tr><tr><td>\\n<p>less than zero </p>\\n</td><td>\\n<p>\\n<em>string1</em> is less than <em>string2</em>. </p>\\n</td></tr><tr><td>\\n<p>greater than zero </p>\\n</td><td>\\n<p>\\n<em>string1</em> is greater than <em>string2</em>. </p>\\n</td></tr></tbody></table>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: CompareInfo.Compare(String, String)\n- uid: System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)\n  commentId: M:System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)\n  id: Compare(System.String,System.String,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  - vb\n  name: Compare(String, String, CompareOptions)\n  fullName: System.Globalization.CompareInfo.Compare(System.String, System.String, System.Globalization.CompareOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Compare\n    path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n    startLine: 401\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Compares two strings using the specified <xref href=\\\"System.Globalization.CompareOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public virtual int Compare(string string1, string string2, CompareOptions options)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overridable Function Compare(string1 As String, string2 As String, options As CompareOptions) As Integer\n    parameters:\n    - id: string1\n      type: System.String\n      description: \"\\n<p>The first string to compare. </p>\\n\"\n    - id: string2\n      type: System.String\n      description: \"\\n<p>The second string to compare. </p>\\n\"\n    - id: options\n      type: System.Globalization.CompareOptions\n      description: \"\\n<p>A value that defines how <em>string1</em> and <em>string2</em> should be compared. <em>options</em> is either the enumeration value <xref href=\\\"System.Globalization.CompareOptions.Ordinal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\\\"System.Globalization.CompareOptions.IgnoreCase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreSymbols\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreNonSpace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreWidth\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreKanaType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Globalization.CompareOptions.StringSort\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer indicating the lexical relationship between the two comparands.</p>\\n<p>Value </p>\\n<p>Condition </p>\\n<table><tbody><tr><td>\\n<p>zero </p>\\n</td><td>\\n<p>The two strings are equal. </p>\\n</td></tr><tr><td>\\n<p>less than zero </p>\\n</td><td>\\n<p>\\n<em>string1</em> is less than <em>string2</em>. </p>\\n</td></tr><tr><td>\\n<p>greater than zero </p>\\n</td><td>\\n<p>\\n<em>string1</em> is greater than <em>string2</em>. </p>\\n</td></tr></tbody></table>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>options</em> contains an invalid <xref href=\\\"System.Globalization.CompareOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value. </p>\\n\"\n  seealso:\n  - type: System.Globalization.CompareOptions\n    commentId: T:System.Globalization.CompareOptions\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: CompareInfo.Compare(String, String, CompareOptions)\n- uid: System.Globalization.CompareInfo.Equals(System.Object)\n  commentId: M:System.Globalization.CompareInfo.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Globalization.CompareInfo.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n    startLine: 1136\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Determines whether the specified object is equal to the current <xref href=\\\"System.Globalization.CompareInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object value)\n    content.vb: Public Overrides Function Equals(value As Object) As Boolean\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The object to compare with the current <xref href=\\\"System.Globalization.CompareInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the specified object is equal to the current <xref href=\\\"System.Globalization.CompareInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Object.Equals(System.Object)\n  seealso:\n  - type: System.Object.Equals(System.Object)\n    commentId: M:System.Object.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: CompareInfo.Equals(Object)\n- uid: System.Globalization.CompareInfo.GetCompareInfo(System.String)\n  commentId: M:System.Globalization.CompareInfo.GetCompareInfo(System.String)\n  id: GetCompareInfo(System.String)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  - vb\n  name: GetCompareInfo(String)\n  fullName: System.Globalization.CompareInfo.GetCompareInfo(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetCompareInfo\n    path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n    startLine: 211\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Initializes a new <xref href=\\\"System.Globalization.CompareInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that is associated with the culture with the specified name.</p>\\n\"\n  syntax:\n    content: public static CompareInfo GetCompareInfo(string name)\n    content.vb: Public Shared Function GetCompareInfo(name As String) As CompareInfo\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>A string representing the culture name. </p>\\n\"\n    return:\n      type: System.Globalization.CompareInfo\n      description: \"\\n<p>A new <xref href=\\\"System.Globalization.CompareInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object associated with the culture with the specified identifier and using string comparison methods in the current <xref href=\\\"System.Reflection.Assembly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>name</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>name</em> is an invalid culture name. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CompareInfo.GetCompareInfo(String)\n- uid: System.Globalization.CompareInfo.GetHashCode\n  commentId: M:System.Globalization.CompareInfo.GetHashCode\n  id: GetHashCode\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Globalization.CompareInfo.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHashCode\n    path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n    startLine: 1160\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Serves as a hash function for the current <xref href=\\\"System.Globalization.CompareInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for hashing algorithms and data structures, such as a hash table.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A hash code for the current <xref href=\\\"System.Globalization.CompareInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.Object.GetHashCode\n  seealso:\n  - type: System.Object.GetHashCode\n    commentId: M:System.Object.GetHashCode\n  - type: System.Collections.Hashtable\n    commentId: T:System.Collections.Hashtable\n  - type: System.Globalization.CompareInfo.Equals(System.Object)\n    commentId: M:System.Globalization.CompareInfo.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: CompareInfo.GetHashCode()\n- uid: System.Globalization.CompareInfo.GetHashCode(System.String,System.Globalization.CompareOptions)\n  commentId: M:System.Globalization.CompareInfo.GetHashCode(System.String,System.Globalization.CompareOptions)\n  id: GetHashCode(System.String,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode(String, CompareOptions)\n  fullName: System.Globalization.CompareInfo.GetHashCode(System.String, System.Globalization.CompareOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHashCode\n    path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n    startLine: 1169\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Gets the hash code for a string based on specified comparison options. </p>\\n\"\n  syntax:\n    content: public virtual int GetHashCode(string source, CompareOptions options)\n    content.vb: Public Overridable Function GetHashCode(source As String, options As CompareOptions) As Integer\n    parameters:\n    - id: source\n      type: System.String\n      description: \"\\n<p>The string whose hash code is to be returned. </p>\\n\"\n    - id: options\n      type: System.Globalization.CompareOptions\n      description: \"\\n<p>A value that determines how strings are compared. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer hash code. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Object.GetHashCode\n    commentId: M:System.Object.GetHashCode\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: CompareInfo.GetHashCode(String, CompareOptions)\n- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.Char)\n  commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)\n  id: IndexOf(System.String,System.Char)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  - vb\n  name: IndexOf(String, Char)\n  fullName: System.Globalization.CompareInfo.IndexOf(System.String, System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IndexOf\n    path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n    startLine: 672\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Searches for the specified character and returns the zero-based index of the first occurrence within the entire source string.</p>\\n\"\n  syntax:\n    content: public virtual int IndexOf(string source, char value)\n    content.vb: Public Overridable Function IndexOf(source As String, value As Char) As Integer\n    parameters:\n    - id: source\n      type: System.String\n      description: \"\\n<p>The string to search. </p>\\n\"\n    - id: value\n      type: System.Char\n      description: \"\\n<p>The character to locate within <em>source</em>. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the first occurrence of <em>value</em>, if found, within <em>source</em>; otherwise, -1. Returns 0 (zero) if <em>value</em> is an ignorable character.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.String.IndexOf(System.Char)\n    commentId: M:System.String.IndexOf(System.Char)\n  - type: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)\n    commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: CompareInfo.IndexOf(String, Char)\n- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)\n  commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)\n  id: IndexOf(System.String,System.Char,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  - vb\n  name: IndexOf(String, Char, CompareOptions)\n  fullName: System.Globalization.CompareInfo.IndexOf(System.String, System.Char, System.Globalization.CompareOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IndexOf\n    path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n    startLine: 692\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Searches for the specified character and returns the zero-based index of the first occurrence within the entire source string using the specified <xref href=\\\"System.Globalization.CompareOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public virtual int IndexOf(string source, char value, CompareOptions options)\n    content.vb: Public Overridable Function IndexOf(source As String, value As Char, options As CompareOptions) As Integer\n    parameters:\n    - id: source\n      type: System.String\n      description: \"\\n<p>The string to search. </p>\\n\"\n    - id: value\n      type: System.Char\n      description: \"\\n<p>The character to locate within <em>source</em>. </p>\\n\"\n    - id: options\n      type: System.Globalization.CompareOptions\n      description: \"\\n<p>A value that defines how the strings should be compared. <em>options</em> is either the enumeration value <xref href=\\\"System.Globalization.CompareOptions.Ordinal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\\\"System.Globalization.CompareOptions.IgnoreCase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreSymbols\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreNonSpace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreWidth\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Globalization.CompareOptions.IgnoreKanaType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the first occurrence of <em>value</em>, if found, within <em>source</em>, using the specified comparison options; otherwise, -1. Returns 0 (zero) if <em>value</em> is an ignorable character.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>options</em> contains an invalid <xref href=\\\"System.Globalization.CompareOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value. </p>\\n\"\n  seealso:\n  - type: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)\n    commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)\n  - type: System.Globalization.CompareOptions\n    commentId: T:System.Globalization.CompareOptions\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: CompareInfo.IndexOf(String, Char, CompareOptions)\n- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)\n  commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)\n  id: IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  - vb\n  name: IndexOf(String, Char, Int32, CompareOptions)\n  fullName: System.Globalization.CompareInfo.IndexOf(System.String, System.Char, System.Int32, System.Globalization.CompareOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IndexOf\n    path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n    startLine: 732\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that extends from the specified index to the end of the string using the specified <xref href=\\\"System.Globalization.CompareOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public virtual int IndexOf(string source, char value, int startIndex, CompareOptions options)\n    content.vb: Public Overridable Function IndexOf(source As String, value As Char, startIndex As Integer, options As CompareOptions) As Integer\n    parameters:\n    - id: source\n      type: System.String\n      description: \"\\n<p>The string to search. </p>\\n\"\n    - id: value\n      type: System.Char\n      description: \"\\n<p>The character to locate within <em>source</em>. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The zero-based starting index of the search. </p>\\n\"\n    - id: options\n      type: System.Globalization.CompareOptions\n      description: \"\\n<p>A value that defines how <em>source</em> and <em>value</em> should be compared. <em>options</em> is either the enumeration value <xref href=\\\"System.Globalization.CompareOptions.Ordinal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\\\"System.Globalization.CompareOptions.IgnoreCase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreSymbols\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreNonSpace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreWidth\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Globalization.CompareOptions.IgnoreKanaType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the first occurrence of <em>value</em>, if found, within the section of <em>source</em> that extends from <em>startIndex</em> to the end of <em>source</em>, using the specified comparison options; otherwise, -1. Returns <em>startIndex</em> if <em>value</em> is an ignorable character.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> is outside the range of valid indexes for <em>source</em>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>options</em> contains an invalid <xref href=\\\"System.Globalization.CompareOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value. </p>\\n\"\n  seealso:\n  - type: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)\n    commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)\n  - type: System.Globalization.CompareOptions\n    commentId: T:System.Globalization.CompareOptions\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: CompareInfo.IndexOf(String, Char, Int32, CompareOptions)\n- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)\n  commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)\n  id: IndexOf(System.String,System.Char,System.Int32,System.Int32)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  - vb\n  name: IndexOf(String, Char, Int32, Int32)\n  fullName: System.Globalization.CompareInfo.IndexOf(System.String, System.Char, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IndexOf\n    path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n    startLine: 752\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements.</p>\\n\"\n  syntax:\n    content: public virtual int IndexOf(string source, char value, int startIndex, int count)\n    content.vb: Public Overridable Function IndexOf(source As String, value As Char, startIndex As Integer, count As Integer) As Integer\n    parameters:\n    - id: source\n      type: System.String\n      description: \"\\n<p>The string to search. </p>\\n\"\n    - id: value\n      type: System.Char\n      description: \"\\n<p>The character to locate within <em>source</em>. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The zero-based starting index of the search. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of elements in the section to search. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the first occurrence of <em>value</em>, if found, within the section of <em>source</em> that starts at <em>startIndex</em> and contains the number of elements specified by <em>count</em>; otherwise, -1. Returns <em>startIndex</em> if <em>value</em> is an ignorable character.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> is outside the range of valid indexes for <em>source</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>source</em>. </p>\\n\"\n  seealso:\n  - type: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)\n    commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: CompareInfo.IndexOf(String, Char, Int32, Int32)\n- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)\n  commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)\n  id: IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  - vb\n  name: IndexOf(String, Char, Int32, Int32, CompareOptions)\n  fullName: System.Globalization.CompareInfo.IndexOf(System.String, System.Char, System.Int32, System.Int32, System.Globalization.CompareOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IndexOf\n    path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n    startLine: 763\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements using the specified <xref href=\\\"System.Globalization.CompareOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public virtual int IndexOf(string source, char value, int startIndex, int count, CompareOptions options)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overridable Function IndexOf(source As String, value As Char, startIndex As Integer, count As Integer, options As CompareOptions) As Integer\n    parameters:\n    - id: source\n      type: System.String\n      description: \"\\n<p>The string to search. </p>\\n\"\n    - id: value\n      type: System.Char\n      description: \"\\n<p>The character to locate within <em>source</em>. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The zero-based starting index of the search. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of elements in the section to search. </p>\\n\"\n    - id: options\n      type: System.Globalization.CompareOptions\n      description: \"\\n<p>A value that defines how <em>source</em> and <em>value</em> should be compared. <em>options</em> is either the enumeration value <xref href=\\\"System.Globalization.CompareOptions.Ordinal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\\\"System.Globalization.CompareOptions.IgnoreCase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreSymbols\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreNonSpace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreWidth\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Globalization.CompareOptions.IgnoreKanaType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the first occurrence of <em>value</em>, if found, within the section of <em>source</em> that starts at <em>startIndex</em> and contains the number of elements specified by <em>count</em>, using the specified comparison options; otherwise, -1. Returns <em>startIndex</em> if <em>value</em> is an ignorable character.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> is outside the range of valid indexes for <em>source</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>source</em>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>options</em> contains an invalid <xref href=\\\"System.Globalization.CompareOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value. </p>\\n\"\n  seealso:\n  - type: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)\n    commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)\n  - type: System.Globalization.CompareOptions\n    commentId: T:System.Globalization.CompareOptions\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: CompareInfo.IndexOf(String, Char, Int32, Int32, CompareOptions)\n- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.String)\n  commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.String)\n  id: IndexOf(System.String,System.String)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  - vb\n  name: IndexOf(String, String)\n  fullName: System.Globalization.CompareInfo.IndexOf(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IndexOf\n    path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n    startLine: 682\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Searches for the specified substring and returns the zero-based index of the first occurrence within the entire source string.</p>\\n\"\n  syntax:\n    content: public virtual int IndexOf(string source, string value)\n    content.vb: Public Overridable Function IndexOf(source As String, value As String) As Integer\n    parameters:\n    - id: source\n      type: System.String\n      description: \"\\n<p>The string to search. </p>\\n\"\n    - id: value\n      type: System.String\n      description: \"\\n<p>The string to locate within <em>source</em>. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the first occurrence of <em>value</em>, if found, within <em>source</em>; otherwise, -1. Returns 0 (zero) if <em>value</em> is an ignorable character.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)\n    commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: CompareInfo.IndexOf(String, String)\n- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)\n  commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)\n  id: IndexOf(System.String,System.String,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  - vb\n  name: IndexOf(String, String, CompareOptions)\n  fullName: System.Globalization.CompareInfo.IndexOf(System.String, System.String, System.Globalization.CompareOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IndexOf\n    path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n    startLine: 702\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Searches for the specified substring and returns the zero-based index of the first occurrence within the entire source string using the specified <xref href=\\\"System.Globalization.CompareOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public virtual int IndexOf(string source, string value, CompareOptions options)\n    content.vb: Public Overridable Function IndexOf(source As String, value As String, options As CompareOptions) As Integer\n    parameters:\n    - id: source\n      type: System.String\n      description: \"\\n<p>The string to search. </p>\\n\"\n    - id: value\n      type: System.String\n      description: \"\\n<p>The string to locate within <em>source</em>. </p>\\n\"\n    - id: options\n      type: System.Globalization.CompareOptions\n      description: \"\\n<p>A value that defines how <em>source</em> and <em>value</em> should be compared. <em>options</em> is either the enumeration value <xref href=\\\"System.Globalization.CompareOptions.Ordinal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\\\"System.Globalization.CompareOptions.IgnoreCase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreSymbols\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreNonSpace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreWidth\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Globalization.CompareOptions.IgnoreKanaType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the first occurrence of <em>value</em>, if found, within <em>source</em>, using the specified comparison options; otherwise, -1. Returns 0 (zero) if <em>value</em> is an ignorable character.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>options</em> contains an invalid <xref href=\\\"System.Globalization.CompareOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value. </p>\\n\"\n  seealso:\n  - type: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)\n    commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)\n  - type: System.Globalization.CompareOptions\n    commentId: T:System.Globalization.CompareOptions\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: CompareInfo.IndexOf(String, String, CompareOptions)\n- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)\n  commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)\n  id: IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  - vb\n  name: IndexOf(String, String, Int32, CompareOptions)\n  fullName: System.Globalization.CompareInfo.IndexOf(System.String, System.String, System.Int32, System.Globalization.CompareOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IndexOf\n    path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n    startLine: 742\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that extends from the specified index to the end of the string using the specified <xref href=\\\"System.Globalization.CompareOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public virtual int IndexOf(string source, string value, int startIndex, CompareOptions options)\n    content.vb: Public Overridable Function IndexOf(source As String, value As String, startIndex As Integer, options As CompareOptions) As Integer\n    parameters:\n    - id: source\n      type: System.String\n      description: \"\\n<p>The string to search. </p>\\n\"\n    - id: value\n      type: System.String\n      description: \"\\n<p>The string to locate within <em>source</em>. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The zero-based starting index of the search. </p>\\n\"\n    - id: options\n      type: System.Globalization.CompareOptions\n      description: \"\\n<p>A value that defines how <em>source</em> and <em>value</em> should be compared. <em>options</em> is either the enumeration value <xref href=\\\"System.Globalization.CompareOptions.Ordinal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\\\"System.Globalization.CompareOptions.IgnoreCase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreSymbols\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreNonSpace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreWidth\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Globalization.CompareOptions.IgnoreKanaType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the first occurrence of <em>value</em>, if found, within the section of <em>source</em> that extends from <em>startIndex</em> to the end of <em>source</em>, using the specified comparison options; otherwise, -1. Returns <em>startIndex</em> if <em>value</em> is an ignorable character.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> is outside the range of valid indexes for <em>source</em>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>options</em> contains an invalid <xref href=\\\"System.Globalization.CompareOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value. </p>\\n\"\n  seealso:\n  - type: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)\n    commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)\n  - type: System.Globalization.CompareOptions\n    commentId: T:System.Globalization.CompareOptions\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: CompareInfo.IndexOf(String, String, Int32, CompareOptions)\n- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)\n  commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)\n  id: IndexOf(System.String,System.String,System.Int32,System.Int32)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  - vb\n  name: IndexOf(String, String, Int32, Int32)\n  fullName: System.Globalization.CompareInfo.IndexOf(System.String, System.String, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IndexOf\n    path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n    startLine: 758\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements.</p>\\n\"\n  syntax:\n    content: public virtual int IndexOf(string source, string value, int startIndex, int count)\n    content.vb: Public Overridable Function IndexOf(source As String, value As String, startIndex As Integer, count As Integer) As Integer\n    parameters:\n    - id: source\n      type: System.String\n      description: \"\\n<p>The string to search. </p>\\n\"\n    - id: value\n      type: System.String\n      description: \"\\n<p>The string to locate within <em>source</em>. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The zero-based starting index of the search. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of elements in the section to search. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the first occurrence of <em>value</em>, if found, within the section of <em>source</em> that starts at <em>startIndex</em> and contains the number of elements specified by <em>count</em>; otherwise, -1. Returns <em>startIndex</em> if <em>value</em> is an ignorable character.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> is outside the range of valid indexes for <em>source</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>source</em>. </p>\\n\"\n  seealso:\n  - type: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)\n    commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: CompareInfo.IndexOf(String, String, Int32, Int32)\n- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)\n  commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)\n  id: IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  - vb\n  name: IndexOf(String, String, Int32, Int32, CompareOptions)\n  fullName: System.Globalization.CompareInfo.IndexOf(System.String, System.String, System.Int32, System.Int32, System.Globalization.CompareOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IndexOf\n    path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n    startLine: 796\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements using the specified <xref href=\\\"System.Globalization.CompareOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public virtual int IndexOf(string source, string value, int startIndex, int count, CompareOptions options)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overridable Function IndexOf(source As String, value As String, startIndex As Integer, count As Integer, options As CompareOptions) As Integer\n    parameters:\n    - id: source\n      type: System.String\n      description: \"\\n<p>The string to search. </p>\\n\"\n    - id: value\n      type: System.String\n      description: \"\\n<p>The string to locate within <em>source</em>. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The zero-based starting index of the search. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of elements in the section to search. </p>\\n\"\n    - id: options\n      type: System.Globalization.CompareOptions\n      description: \"\\n<p>A value that defines how <em>source</em> and <em>value</em> should be compared. <em>options</em> is either the enumeration value <xref href=\\\"System.Globalization.CompareOptions.Ordinal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\\\"System.Globalization.CompareOptions.IgnoreCase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreSymbols\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreNonSpace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreWidth\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Globalization.CompareOptions.IgnoreKanaType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the first occurrence of <em>value</em>, if found, within the section of <em>source</em> that starts at <em>startIndex</em> and contains the number of elements specified by <em>count</em>, using the specified comparison options; otherwise, -1. Returns <em>startIndex</em> if <em>value</em> is an ignorable character.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> is outside the range of valid indexes for <em>source</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>source</em>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>options</em> contains an invalid <xref href=\\\"System.Globalization.CompareOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value. </p>\\n\"\n  seealso:\n  - type: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)\n    commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)\n  - type: System.Globalization.CompareOptions\n    commentId: T:System.Globalization.CompareOptions\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: CompareInfo.IndexOf(String, String, Int32, Int32, CompareOptions)\n- uid: System.Globalization.CompareInfo.IsPrefix(System.String,System.String)\n  commentId: M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String)\n  id: IsPrefix(System.String,System.String)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  - vb\n  name: IsPrefix(String, String)\n  fullName: System.Globalization.CompareInfo.IsPrefix(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsPrefix\n    path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n    startLine: 601\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Determines whether the specified source string starts with the specified prefix.</p>\\n\"\n  syntax:\n    content: public virtual bool IsPrefix(string source, string prefix)\n    content.vb: Public Overridable Function IsPrefix(source As String, prefix As String) As Boolean\n    parameters:\n    - id: source\n      type: System.String\n      description: \"\\n<p>The string to search in. </p>\\n\"\n    - id: prefix\n      type: System.String\n      description: \"\\n<p>The string to compare with the beginning of <em>source</em>. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the length of <em>prefix</em> is less than or equal to the length of <em>source</em> and <em>source</em> starts with <em>prefix</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>prefix</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)\n    commentId: M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: CompareInfo.IsPrefix(String, String)\n- uid: System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)\n  commentId: M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)\n  id: IsPrefix(System.String,System.String,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  - vb\n  name: IsPrefix(String, String, CompareOptions)\n  fullName: System.Globalization.CompareInfo.IsPrefix(System.String, System.String, System.Globalization.CompareOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsPrefix\n    path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n    startLine: 562\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Determines whether the specified source string starts with the specified prefix using the specified <xref href=\\\"System.Globalization.CompareOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public virtual bool IsPrefix(string source, string prefix, CompareOptions options)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overridable Function IsPrefix(source As String, prefix As String, options As CompareOptions) As Boolean\n    parameters:\n    - id: source\n      type: System.String\n      description: \"\\n<p>The string to search in. </p>\\n\"\n    - id: prefix\n      type: System.String\n      description: \"\\n<p>The string to compare with the beginning of <em>source</em>. </p>\\n\"\n    - id: options\n      type: System.Globalization.CompareOptions\n      description: \"\\n<p>A value that defines how <em>source</em> and <em>prefix</em> should be compared. <em>options</em> is either the enumeration value <xref href=\\\"System.Globalization.CompareOptions.Ordinal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\\\"System.Globalization.CompareOptions.IgnoreCase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreSymbols\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreNonSpace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreWidth\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Globalization.CompareOptions.IgnoreKanaType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the length of <em>prefix</em> is less than or equal to the length of <em>source</em> and <em>source</em> starts with <em>prefix</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>prefix</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>options</em> contains an invalid <xref href=\\\"System.Globalization.CompareOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value. </p>\\n\"\n  seealso:\n  - type: System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)\n    commentId: M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)\n  - type: System.Globalization.CompareOptions\n    commentId: T:System.Globalization.CompareOptions\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: CompareInfo.IsPrefix(String, String, CompareOptions)\n- uid: System.Globalization.CompareInfo.IsSuffix(System.String,System.String)\n  commentId: M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String)\n  id: IsSuffix(System.String,System.String)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  - vb\n  name: IsSuffix(String, String)\n  fullName: System.Globalization.CompareInfo.IsSuffix(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsSuffix\n    path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n    startLine: 653\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Determines whether the specified source string ends with the specified suffix.</p>\\n\"\n  syntax:\n    content: public virtual bool IsSuffix(string source, string suffix)\n    content.vb: Public Overridable Function IsSuffix(source As String, suffix As String) As Boolean\n    parameters:\n    - id: source\n      type: System.String\n      description: \"\\n<p>The string to search in. </p>\\n\"\n    - id: suffix\n      type: System.String\n      description: \"\\n<p>The string to compare with the end of <em>source</em>. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the length of <em>suffix</em> is less than or equal to the length of <em>source</em> and <em>source</em> ends with <em>suffix</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>suffix</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)\n    commentId: M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: CompareInfo.IsSuffix(String, String)\n- uid: System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)\n  commentId: M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)\n  id: IsSuffix(System.String,System.String,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  - vb\n  name: IsSuffix(String, String, CompareOptions)\n  fullName: System.Globalization.CompareInfo.IsSuffix(System.String, System.String, System.Globalization.CompareOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsSuffix\n    path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n    startLine: 617\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Determines whether the specified source string ends with the specified suffix using the specified <xref href=\\\"System.Globalization.CompareOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public virtual bool IsSuffix(string source, string suffix, CompareOptions options)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overridable Function IsSuffix(source As String, suffix As String, options As CompareOptions) As Boolean\n    parameters:\n    - id: source\n      type: System.String\n      description: \"\\n<p>The string to search in. </p>\\n\"\n    - id: suffix\n      type: System.String\n      description: \"\\n<p>The string to compare with the end of <em>source</em>. </p>\\n\"\n    - id: options\n      type: System.Globalization.CompareOptions\n      description: \"\\n<p>A value that defines how <em>source</em> and <em>suffix</em> should be compared. <em>options</em> is either the enumeration value <xref href=\\\"System.Globalization.CompareOptions.Ordinal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> used by itself, or the bitwise combination of one or more of the following values: <xref href=\\\"System.Globalization.CompareOptions.IgnoreCase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreSymbols\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreNonSpace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreWidth\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Globalization.CompareOptions.IgnoreKanaType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the length of <em>suffix</em> is less than or equal to the length of <em>source</em> and <em>source</em> ends with <em>suffix</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>suffix</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>options</em> contains an invalid <xref href=\\\"System.Globalization.CompareOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value. </p>\\n\"\n  seealso:\n  - type: System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)\n    commentId: M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)\n  - type: System.Globalization.CompareOptions\n    commentId: T:System.Globalization.CompareOptions\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: CompareInfo.IsSuffix(String, String, CompareOptions)\n- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)\n  commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)\n  id: LastIndexOf(System.String,System.Char)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  - vb\n  name: LastIndexOf(String, Char)\n  fullName: System.Globalization.CompareInfo.LastIndexOf(System.String, System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: LastIndexOf\n    path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n    startLine: 862\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Searches for the specified character and returns the zero-based index of the last occurrence within the entire source string.</p>\\n\"\n  syntax:\n    content: public virtual int LastIndexOf(string source, char value)\n    content.vb: Public Overridable Function LastIndexOf(source As String, value As Char) As Integer\n    parameters:\n    - id: source\n      type: System.String\n      description: \"\\n<p>The string to search. </p>\\n\"\n    - id: value\n      type: System.Char\n      description: \"\\n<p>The character to locate within <em>source</em>. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the last occurrence of <em>value</em>, if found, within <em>source</em>; otherwise, -1.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Globalization.CompareInfo.IndexOf(System.String,System.Char)\n    commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: CompareInfo.LastIndexOf(String, Char)\n- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)\n  commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)\n  id: LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  - vb\n  name: LastIndexOf(String, Char, CompareOptions)\n  fullName: System.Globalization.CompareInfo.LastIndexOf(System.String, System.Char, System.Globalization.CompareOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: LastIndexOf\n    path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n    startLine: 886\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Searches for the specified character and returns the zero-based index of the last occurrence within the entire source string using the specified <xref href=\\\"System.Globalization.CompareOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public virtual int LastIndexOf(string source, char value, CompareOptions options)\n    content.vb: Public Overridable Function LastIndexOf(source As String, value As Char, options As CompareOptions) As Integer\n    parameters:\n    - id: source\n      type: System.String\n      description: \"\\n<p>The string to search. </p>\\n\"\n    - id: value\n      type: System.Char\n      description: \"\\n<p>The character to locate within <em>source</em>. </p>\\n\"\n    - id: options\n      type: System.Globalization.CompareOptions\n      description: \"\\n<p>A value that defines how <em>source</em> and <em>value</em> should be compared. <em>options</em> is either the enumeration value <xref href=\\\"System.Globalization.CompareOptions.Ordinal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\\\"System.Globalization.CompareOptions.IgnoreCase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreSymbols\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreNonSpace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreWidth\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Globalization.CompareOptions.IgnoreKanaType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the last occurrence of <em>value</em>, if found, within <em>source</em>, using the specified comparison options; otherwise, -1.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>options</em> contains an invalid <xref href=\\\"System.Globalization.CompareOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value. </p>\\n\"\n  seealso:\n  - type: System.Globalization.CompareInfo.IndexOf(System.String,System.Char)\n    commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)\n  - type: System.Globalization.CompareOptions\n    commentId: T:System.Globalization.CompareOptions\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: CompareInfo.LastIndexOf(String, Char, CompareOptions)\n- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)\n  commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)\n  id: LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  - vb\n  name: LastIndexOf(String, Char, Int32, CompareOptions)\n  fullName: System.Globalization.CompareInfo.LastIndexOf(System.String, System.Char, System.Int32, System.Globalization.CompareOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: LastIndexOf\n    path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n    startLine: 921\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that extends from the beginning of the string to the specified index using the specified <xref href=\\\"System.Globalization.CompareOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public virtual int LastIndexOf(string source, char value, int startIndex, CompareOptions options)\n    content.vb: Public Overridable Function LastIndexOf(source As String, value As Char, startIndex As Integer, options As CompareOptions) As Integer\n    parameters:\n    - id: source\n      type: System.String\n      description: \"\\n<p>The string to search. </p>\\n\"\n    - id: value\n      type: System.Char\n      description: \"\\n<p>The character to locate within <em>source</em>. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The zero-based starting index of the backward search. </p>\\n\"\n    - id: options\n      type: System.Globalization.CompareOptions\n      description: \"\\n<p>A value that defines how <em>source</em> and <em>value</em> should be compared. <em>options</em> is either the enumeration value <xref href=\\\"System.Globalization.CompareOptions.Ordinal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\\\"System.Globalization.CompareOptions.IgnoreCase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreSymbols\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreNonSpace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreWidth\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Globalization.CompareOptions.IgnoreKanaType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the last occurrence of <em>value</em>, if found, within the section of <em>source</em> that extends from the beginning of <em>source</em> to <em>startIndex</em>, using the specified comparison options; otherwise, -1. Returns <em>startIndex</em> if <em>value</em> is an ignorable character.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> is outside the range of valid indexes for <em>source</em>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>options</em> contains an invalid <xref href=\\\"System.Globalization.CompareOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value. </p>\\n\"\n  seealso:\n  - type: System.Globalization.CompareInfo.IndexOf(System.String,System.Char)\n    commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)\n  - type: System.Globalization.CompareOptions\n    commentId: T:System.Globalization.CompareOptions\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: CompareInfo.LastIndexOf(String, Char, Int32, CompareOptions)\n- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)\n  commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)\n  id: LastIndexOf(System.String,System.Char,System.Int32,System.Int32)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  - vb\n  name: LastIndexOf(String, Char, Int32, Int32)\n  fullName: System.Globalization.CompareInfo.LastIndexOf(System.String, System.Char, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: LastIndexOf\n    path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n    startLine: 933\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index.</p>\\n\"\n  syntax:\n    content: public virtual int LastIndexOf(string source, char value, int startIndex, int count)\n    content.vb: Public Overridable Function LastIndexOf(source As String, value As Char, startIndex As Integer, count As Integer) As Integer\n    parameters:\n    - id: source\n      type: System.String\n      description: \"\\n<p>The string to search. </p>\\n\"\n    - id: value\n      type: System.Char\n      description: \"\\n<p>The character to locate within <em>source</em>. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The zero-based starting index of the backward search. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of elements in the section to search. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the last occurrence of <em>value</em>, if found, within the section of <em>source</em> that contains the number of elements specified by <em>count</em> and that ends at <em>startIndex</em>; otherwise, -1. Returns <em>startIndex</em> if <em>value</em> is an ignorable character.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> is outside the range of valid indexes for <em>source</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>source</em>. </p>\\n\"\n  seealso:\n  - type: System.Globalization.CompareInfo.IndexOf(System.String,System.Char)\n    commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: CompareInfo.LastIndexOf(String, Char, Int32, Int32)\n- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)\n  commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)\n  id: LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  - vb\n  name: LastIndexOf(String, Char, Int32, Int32, CompareOptions)\n  fullName: System.Globalization.CompareInfo.LastIndexOf(System.String, System.Char, System.Int32, System.Int32, System.Globalization.CompareOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: LastIndexOf\n    path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n    startLine: 945\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index using the specified <xref href=\\\"System.Globalization.CompareOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public virtual int LastIndexOf(string source, char value, int startIndex, int count, CompareOptions options)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overridable Function LastIndexOf(source As String, value As Char, startIndex As Integer, count As Integer, options As CompareOptions) As Integer\n    parameters:\n    - id: source\n      type: System.String\n      description: \"\\n<p>The string to search. </p>\\n\"\n    - id: value\n      type: System.Char\n      description: \"\\n<p>The character to locate within <em>source</em>. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The zero-based starting index of the backward search. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of elements in the section to search. </p>\\n\"\n    - id: options\n      type: System.Globalization.CompareOptions\n      description: \"\\n<p>A value that defines how <em>source</em> and <em>value</em> should be compared. <em>options</em> is either the enumeration value <xref href=\\\"System.Globalization.CompareOptions.Ordinal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\\\"System.Globalization.CompareOptions.IgnoreCase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreSymbols\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreNonSpace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreWidth\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Globalization.CompareOptions.IgnoreKanaType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the last occurrence of <em>value</em>, if found, within the section of <em>source</em> that contains the number of elements specified by <em>count</em> and that ends at <em>startIndex</em>, using the specified comparison options; otherwise, -1. Returns <em>startIndex</em> if <em>value</em> is an ignorable character.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> is outside the range of valid indexes for <em>source</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>source</em>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>options</em> contains an invalid <xref href=\\\"System.Globalization.CompareOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value. </p>\\n\"\n  seealso:\n  - type: System.Globalization.CompareInfo.IndexOf(System.String,System.Char)\n    commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)\n  - type: System.Globalization.CompareOptions\n    commentId: T:System.Globalization.CompareOptions\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: CompareInfo.LastIndexOf(String, Char, Int32, Int32, CompareOptions)\n- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)\n  commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)\n  id: LastIndexOf(System.String,System.String)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  - vb\n  name: LastIndexOf(String, String)\n  fullName: System.Globalization.CompareInfo.LastIndexOf(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: LastIndexOf\n    path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n    startLine: 874\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Searches for the specified substring and returns the zero-based index of the last occurrence within the entire source string.</p>\\n\"\n  syntax:\n    content: public virtual int LastIndexOf(string source, string value)\n    content.vb: Public Overridable Function LastIndexOf(source As String, value As String) As Integer\n    parameters:\n    - id: source\n      type: System.String\n      description: \"\\n<p>The string to search. </p>\\n\"\n    - id: value\n      type: System.String\n      description: \"\\n<p>The string to locate within <em>source</em>. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the last occurrence of <em>value</em>, if found, within <em>source</em>; otherwise, -1.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Globalization.CompareInfo.IndexOf(System.String,System.Char)\n    commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: CompareInfo.LastIndexOf(String, String)\n- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)\n  commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)\n  id: LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  - vb\n  name: LastIndexOf(String, String, CompareOptions)\n  fullName: System.Globalization.CompareInfo.LastIndexOf(System.String, System.String, System.Globalization.CompareOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: LastIndexOf\n    path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n    startLine: 897\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Searches for the specified substring and returns the zero-based index of the last occurrence within the entire source string using the specified <xref href=\\\"System.Globalization.CompareOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public virtual int LastIndexOf(string source, string value, CompareOptions options)\n    content.vb: Public Overridable Function LastIndexOf(source As String, value As String, options As CompareOptions) As Integer\n    parameters:\n    - id: source\n      type: System.String\n      description: \"\\n<p>The string to search. </p>\\n\"\n    - id: value\n      type: System.String\n      description: \"\\n<p>The string to locate within <em>source</em>. </p>\\n\"\n    - id: options\n      type: System.Globalization.CompareOptions\n      description: \"\\n<p>A value that defines how <em>source</em> and <em>value</em> should be compared. <em>options</em> is either the enumeration value <xref href=\\\"System.Globalization.CompareOptions.Ordinal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\\\"System.Globalization.CompareOptions.IgnoreCase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreSymbols\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreNonSpace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreWidth\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Globalization.CompareOptions.IgnoreKanaType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the last occurrence of <em>value</em>, if found, within <em>source</em>, using the specified comparison options; otherwise, -1.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>options</em> contains an invalid <xref href=\\\"System.Globalization.CompareOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value. </p>\\n\"\n  seealso:\n  - type: System.Globalization.CompareInfo.IndexOf(System.String,System.Char)\n    commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)\n  - type: System.Globalization.CompareOptions\n    commentId: T:System.Globalization.CompareOptions\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: CompareInfo.LastIndexOf(String, String, CompareOptions)\n- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)\n  commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)\n  id: LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  - vb\n  name: LastIndexOf(String, String, Int32, CompareOptions)\n  fullName: System.Globalization.CompareInfo.LastIndexOf(System.String, System.String, System.Int32, System.Globalization.CompareOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: LastIndexOf\n    path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n    startLine: 927\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that extends from the beginning of the string to the specified index using the specified <xref href=\\\"System.Globalization.CompareOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public virtual int LastIndexOf(string source, string value, int startIndex, CompareOptions options)\n    content.vb: Public Overridable Function LastIndexOf(source As String, value As String, startIndex As Integer, options As CompareOptions) As Integer\n    parameters:\n    - id: source\n      type: System.String\n      description: \"\\n<p>The string to search. </p>\\n\"\n    - id: value\n      type: System.String\n      description: \"\\n<p>The string to locate within <em>source</em>. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The zero-based starting index of the backward search. </p>\\n\"\n    - id: options\n      type: System.Globalization.CompareOptions\n      description: \"\\n<p>A value that defines how <em>source</em> and <em>value</em> should be compared. <em>options</em> is either the enumeration value <xref href=\\\"System.Globalization.CompareOptions.Ordinal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\\\"System.Globalization.CompareOptions.IgnoreCase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreSymbols\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreNonSpace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreWidth\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Globalization.CompareOptions.IgnoreKanaType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the last occurrence of <em>value</em>, if found, within the section of <em>source</em> that extends from the beginning of <em>source</em> to <em>startIndex</em>, using the specified comparison options; otherwise, -1. Returns <em>startIndex</em> if <em>value</em> is an ignorable character.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> is outside the range of valid indexes for <em>source</em>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>options</em> contains an invalid <xref href=\\\"System.Globalization.CompareOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value. </p>\\n\"\n  seealso:\n  - type: System.Globalization.CompareInfo.IndexOf(System.String,System.Char)\n    commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)\n  - type: System.Globalization.CompareOptions\n    commentId: T:System.Globalization.CompareOptions\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: CompareInfo.LastIndexOf(String, String, Int32, CompareOptions)\n- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)\n  commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)\n  id: LastIndexOf(System.String,System.String,System.Int32,System.Int32)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  - vb\n  name: LastIndexOf(String, String, Int32, Int32)\n  fullName: System.Globalization.CompareInfo.LastIndexOf(System.String, System.String, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: LastIndexOf\n    path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n    startLine: 939\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index.</p>\\n\"\n  syntax:\n    content: public virtual int LastIndexOf(string source, string value, int startIndex, int count)\n    content.vb: Public Overridable Function LastIndexOf(source As String, value As String, startIndex As Integer, count As Integer) As Integer\n    parameters:\n    - id: source\n      type: System.String\n      description: \"\\n<p>The string to search. </p>\\n\"\n    - id: value\n      type: System.String\n      description: \"\\n<p>The string to locate within <em>source</em>. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The zero-based starting index of the backward search. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of elements in the section to search. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the last occurrence of <em>value</em>, if found, within the section of <em>source</em> that contains the number of elements specified by <em>count</em> and that ends at <em>startIndex</em>; otherwise, -1. Returns <em>startIndex</em> if <em>value</em> is an ignorable character.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> is outside the range of valid indexes for <em>source</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>source</em>. </p>\\n\"\n  seealso:\n  - type: System.Globalization.CompareInfo.IndexOf(System.String,System.Char)\n    commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: CompareInfo.LastIndexOf(String, String, Int32, Int32)\n- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)\n  commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)\n  id: LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  - vb\n  name: LastIndexOf(String, String, Int32, Int32, CompareOptions)\n  fullName: System.Globalization.CompareInfo.LastIndexOf(System.String, System.String, System.Int32, System.Int32, System.Globalization.CompareOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: LastIndexOf\n    path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n    startLine: 994\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index using the specified <xref href=\\\"System.Globalization.CompareOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public virtual int LastIndexOf(string source, string value, int startIndex, int count, CompareOptions options)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overridable Function LastIndexOf(source As String, value As String, startIndex As Integer, count As Integer, options As CompareOptions) As Integer\n    parameters:\n    - id: source\n      type: System.String\n      description: \"\\n<p>The string to search. </p>\\n\"\n    - id: value\n      type: System.String\n      description: \"\\n<p>The string to locate within <em>source</em>. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The zero-based starting index of the backward search. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of elements in the section to search. </p>\\n\"\n    - id: options\n      type: System.Globalization.CompareOptions\n      description: \"\\n<p>A value that defines how <em>source</em> and <em>value</em> should be compared. <em>options</em> is either the enumeration value <xref href=\\\"System.Globalization.CompareOptions.Ordinal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\\\"System.Globalization.CompareOptions.IgnoreCase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreSymbols\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreNonSpace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Globalization.CompareOptions.IgnoreWidth\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Globalization.CompareOptions.IgnoreKanaType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the last occurrence of <em>value</em>, if found, within the section of <em>source</em> that contains the number of elements specified by <em>count</em> and that ends at <em>startIndex</em>, using the specified comparison options; otherwise, -1. Returns <em>startIndex</em> if <em>value</em> is an ignorable character. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> is outside the range of valid indexes for <em>source</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>source</em>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>options</em> contains an invalid <xref href=\\\"System.Globalization.CompareOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value. </p>\\n\"\n  seealso:\n  - type: System.Globalization.CompareInfo.IndexOf(System.String,System.Char)\n    commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)\n  - type: System.Globalization.CompareOptions\n    commentId: T:System.Globalization.CompareOptions\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: CompareInfo.LastIndexOf(String, String, Int32, Int32, CompareOptions)\n- uid: System.Globalization.CompareInfo.ToString\n  commentId: M:System.Globalization.CompareInfo.ToString\n  id: ToString\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Globalization.CompareInfo.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Globalization/CompareInfo.cs\n    startLine: 1260\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns a string that represents the current <xref href=\\\"System.Globalization.CompareInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>A string that represents the current <xref href=\\\"System.Globalization.CompareInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  overridden: System.Object.ToString\n  seealso:\n  - type: System.Object.ToString\n    commentId: M:System.Object.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: CompareInfo.ToString()\nreferences:\n- uid: System.Globalization\n  isExternal: false\n  name: System.Globalization\n  fullName: System.Globalization\n  nameWithType: System.Globalization\n  commentId: N:System.Globalization\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Globalization.CompareOptions\n  parent: System.Globalization\n  isExternal: false\n  name: CompareOptions\n  fullName: System.Globalization.CompareOptions\n  nameWithType: CompareOptions\n  commentId: T:System.Globalization.CompareOptions\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Globalization.CompareInfo\n  parent: System.Globalization\n  isExternal: false\n  name: CompareInfo\n  fullName: System.Globalization.CompareInfo\n  nameWithType: CompareInfo\n  commentId: T:System.Globalization.CompareInfo\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Char\n  parent: System\n  isExternal: false\n  name: Char\n  fullName: System.Char\n  nameWithType: Char\n  commentId: T:System.Char\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n"}