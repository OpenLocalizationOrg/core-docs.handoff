{"nodes":[{"pos":[2334,2339],"content":"Trace","needQuote":true,"nodes":[{"content":"Trace","pos":[0,5]}]},{"pos":[4637,4646],"content":"AutoFlush","needQuote":true,"nodes":[{"content":"AutoFlush","pos":[0,9]}]},{"pos":[6944,6955],"content":"IndentLevel","needQuote":true,"nodes":[{"content":"IndentLevel","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The indent level.","pos":[7649,7671],"source":"\\n<p>The indent level."},{"content":"The default is zero.&lt;/p&gt;\\n","pos":[7672,7698],"source":" The default is zero.</p>\\n"},{"pos":[8764,8774],"content":"IndentSize","needQuote":true,"nodes":[{"content":"IndentSize","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The number of spaces in an indent.","pos":[9481,9520],"source":"\\n<p>The number of spaces in an indent."},{"content":"The default is four.&lt;/p&gt;\\n","pos":[9521,9547],"source":" The default is four.</p>\\n"},{"pos":[10611,10620],"content":"Listeners","needQuote":true,"nodes":[{"content":"Listeners","pos":[0,9]}]},{"pos":[12796,12809],"content":"UseGlobalLock","needQuote":true,"nodes":[{"content":"UseGlobalLock","pos":[0,13]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the global lock is to be used; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[13557,13654],"source":"\\n<p>\\n<strong>true</strong> if the global lock is to be used; otherwise, <strong>false</strong>."},{"content":"The default is &lt;strong&gt;true&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[13655,13698],"source":" The default is <strong>true</strong>.</p>\\n"},{"pos":[14177,14192],"content":"Assert(Boolean)","needQuote":true,"nodes":[{"content":"Assert(Boolean)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The conditional expression to evaluate.","pos":[15062,15106],"source":"\\n<p>The conditional expression to evaluate."},{"content":"If the condition is &lt;strong&gt;true&lt;/strong&gt;, a failure message is not sent and the message box is not displayed.&lt;/p&gt;\\n","pos":[15107,15223],"source":" If the condition is <strong>true</strong>, a failure message is not sent and the message box is not displayed.</p>\\n"},{"pos":[16772,16795],"content":"Assert(Boolean, String)","needQuote":true,"nodes":[{"content":"Assert(Boolean, String)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The conditional expression to evaluate.","pos":[17747,17791],"source":"\\n<p>The conditional expression to evaluate."},{"content":"If the condition is &lt;strong&gt;true&lt;/strong&gt;, the specified message is not sent and the message box is not displayed.","pos":[17792,17906],"source":" If the condition is <strong>true</strong>, the specified message is not sent and the message box is not displayed."},{"content":"&lt;/p&gt;\\n","pos":[17908,17914],"source":"  </p>\\n"},{"pos":[19403,19434],"content":"Assert(Boolean, String, String)","needQuote":true,"nodes":[{"content":"Assert(Boolean, String, String)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The conditional expression to evaluate.","pos":[20451,20495],"source":"\\n<p>The conditional expression to evaluate."},{"content":"If the condition is &lt;strong&gt;true&lt;/strong&gt;, the specified messages are not sent and the message box is not displayed.","pos":[20496,20612],"source":" If the condition is <strong>true</strong>, the specified messages are not sent and the message box is not displayed."},{"content":"&lt;/p&gt;\\n","pos":[20614,20620],"source":"  </p>\\n"},{"pos":[22208,22215],"content":"Close()","needQuote":true,"nodes":[{"content":"Close()","pos":[0,7]}]},{"pos":[24267,24279],"content":"Fail(String)","needQuote":true,"nodes":[{"content":"Fail(String)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;A message to emit.","pos":[25051,25074],"source":"\\n<p>A message to emit."},{"content":"&lt;/p&gt;\\n","pos":[25075,25081],"source":" </p>\\n"},{"pos":[26297,26317],"content":"Fail(String, String)","needQuote":true,"nodes":[{"content":"Fail(String, String)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;A message to emit.","pos":[27170,27193],"source":"\\n<p>A message to emit."},{"content":"&lt;/p&gt;\\n","pos":[27194,27200],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A detailed message to emit.","pos":[27272,27304],"source":"\\n<p>A detailed message to emit."},{"content":"&lt;/p&gt;\\n","pos":[27305,27311],"source":" </p>\\n"},{"pos":[28451,28458],"content":"Flush()","needQuote":true,"nodes":[{"content":"Flush()","pos":[0,7]}]},{"pos":[30369,30377],"content":"Indent()","needQuote":true,"nodes":[{"content":"Indent()","pos":[0,8]}]},{"pos":[31907,31916],"content":"Refresh()","needQuote":true,"nodes":[{"content":"Refresh()","pos":[0,9]}]},{"pos":[32839,32857],"content":"TraceError(String)","needQuote":true,"nodes":[{"content":"TraceError(String)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The informative message to write.&lt;/p&gt;\\n","pos":[33807,33851],"source":"\\n<p>The informative message to write.</p>\\n"},{"pos":[35097,35125],"content":"TraceError(String, Object[])","needQuote":true,"nodes":[{"content":"TraceError(String, Object[])","pos":[0,28]}]},{"content":"\\n&lt;p&gt;A format string that contains zero or more format items, which correspond to objects in the &lt;em&gt;args&lt;/em&gt; array.&lt;/p&gt;\\n","pos":[36176,36299],"source":"\\n<p>A format string that contains zero or more format items, which correspond to objects in the <em>args</em> array.</p>\\n"},{"content":"\\n&lt;p&gt;An &lt;strong&gt;object&lt;/strong&gt; array containing zero or more objects to format.&lt;/p&gt;\\n","pos":[36364,36450],"source":"\\n<p>An <strong>object</strong> array containing zero or more objects to format.</p>\\n"},{"pos":[37853,37877],"content":"TraceInformation(String)","needQuote":true,"nodes":[{"content":"TraceInformation(String)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The informative message to write.&lt;/p&gt;\\n","pos":[38859,38903],"source":"\\n<p>The informative message to write.</p>\\n"},{"pos":[40173,40207],"content":"TraceInformation(String, Object[])","needQuote":true,"nodes":[{"content":"TraceInformation(String, Object[])","pos":[0,34]}]},{"content":"\\n&lt;p&gt;A format string that contains zero or more format items, which correspond to objects in the &lt;em&gt;args&lt;/em&gt; array.&lt;/p&gt;\\n","pos":[41290,41413],"source":"\\n<p>A format string that contains zero or more format items, which correspond to objects in the <em>args</em> array.</p>\\n"},{"content":"\\n&lt;p&gt;An &lt;strong&gt;object&lt;/strong&gt; array containing zero or more objects to format.&lt;/p&gt;\\n","pos":[41478,41564],"source":"\\n<p>An <strong>object</strong> array containing zero or more objects to format.</p>\\n"},{"pos":[42979,42999],"content":"TraceWarning(String)","needQuote":true,"nodes":[{"content":"TraceWarning(String)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The informative message to write.&lt;/p&gt;\\n","pos":[43958,44002],"source":"\\n<p>The informative message to write.</p>\\n"},{"pos":[45256,45286],"content":"TraceWarning(String, Object[])","needQuote":true,"nodes":[{"content":"TraceWarning(String, Object[])","pos":[0,30]}]},{"content":"\\n&lt;p&gt;A format string that contains zero or more format items, which correspond to objects in the &lt;em&gt;args&lt;/em&gt; array.&lt;/p&gt;\\n","pos":[46346,46469],"source":"\\n<p>A format string that contains zero or more format items, which correspond to objects in the <em>args</em> array.</p>\\n"},{"content":"\\n&lt;p&gt;An &lt;strong&gt;object&lt;/strong&gt; array containing zero or more objects to format.&lt;/p&gt;\\n","pos":[46534,46620],"source":"\\n<p>An <strong>object</strong> array containing zero or more objects to format.</p>\\n"},{"pos":[47962,47972],"content":"Unindent()","needQuote":true,"nodes":[{"content":"Unindent()","pos":[0,10]}]},{"pos":[49547,49560],"content":"Write(Object)","needQuote":true,"nodes":[{"content":"Write(Object)","pos":[0,13]}]},{"pos":[51985,52006],"content":"Write(Object, String)","needQuote":true,"nodes":[{"content":"Write(Object, String)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;A category name used to organize the output.","pos":[53344,53393],"source":"\\n<p>A category name used to organize the output."},{"content":"&lt;/p&gt;\\n","pos":[53394,53400],"source":" </p>\\n"},{"pos":[54586,54599],"content":"Write(String)","needQuote":true,"nodes":[{"content":"Write(String)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A message to write.","pos":[55494,55518],"source":"\\n<p>A message to write."},{"content":"&lt;/p&gt;\\n","pos":[55519,55525],"source":" </p>\\n"},{"pos":[56745,56766],"content":"Write(String, String)","needQuote":true,"nodes":[{"content":"Write(String, String)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;A message to write.","pos":[57733,57757],"source":"\\n<p>A message to write."},{"content":"&lt;/p&gt;\\n","pos":[57758,57764],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A category name used to organize the output.","pos":[57831,57880],"source":"\\n<p>A category name used to organize the output."},{"content":"&lt;/p&gt;\\n","pos":[57881,57887],"source":" </p>\\n"},{"pos":[59124,59148],"content":"WriteIf(Boolean, Object)","needQuote":true,"nodes":[{"content":"WriteIf(Boolean, Object)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to cause a message to be written; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[60250,60347],"source":"\\n<p>\\n<strong>true</strong> to cause a message to be written; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[60348,60354],"source":" </p>\\n"},{"pos":[61910,61942],"content":"WriteIf(Boolean, Object, String)","needQuote":true,"nodes":[{"content":"WriteIf(Boolean, Object, String)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to cause a message to be written; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[63116,63213],"source":"\\n<p>\\n<strong>true</strong> to cause a message to be written; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[63214,63220],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A category name used to organize the output.","pos":[63561,63610],"source":"\\n<p>A category name used to organize the output."},{"content":"&lt;/p&gt;\\n","pos":[63611,63617],"source":" </p>\\n"},{"pos":[64865,64889],"content":"WriteIf(Boolean, String)","needQuote":true,"nodes":[{"content":"WriteIf(Boolean, String)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to cause a message to be written; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[65889,65986],"source":"\\n<p>\\n<strong>true</strong> to cause a message to be written; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[65987,65993],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A message to write.","pos":[66059,66083],"source":"\\n<p>A message to write."},{"content":"&lt;/p&gt;\\n","pos":[66084,66090],"source":" </p>\\n"},{"pos":[67372,67404],"content":"WriteIf(Boolean, String, String)","needQuote":true,"nodes":[{"content":"WriteIf(Boolean, String, String)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to cause a message to be written; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[68474,68571],"source":"\\n<p>\\n<strong>true</strong> to cause a message to be written; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[68572,68578],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A message to write.","pos":[68644,68668],"source":"\\n<p>A message to write."},{"content":"&lt;/p&gt;\\n","pos":[68669,68675],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A category name used to organize the output.","pos":[68742,68791],"source":"\\n<p>A category name used to organize the output."},{"content":"&lt;/p&gt;\\n","pos":[68792,68798],"source":" </p>\\n"},{"pos":[70007,70024],"content":"WriteLine(Object)","needQuote":true,"nodes":[{"content":"WriteLine(Object)","pos":[0,17]}]},{"pos":[72481,72506],"content":"WriteLine(Object, String)","needQuote":true,"nodes":[{"content":"WriteLine(Object, String)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;A category name used to organize the output.","pos":[73866,73915],"source":"\\n<p>A category name used to organize the output."},{"content":"&lt;/p&gt;\\n","pos":[73916,73922],"source":" </p>\\n"},{"pos":[75124,75141],"content":"WriteLine(String)","needQuote":true,"nodes":[{"content":"WriteLine(String)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;A message to write.","pos":[76052,76076],"source":"\\n<p>A message to write."},{"content":"&lt;/p&gt;\\n","pos":[76077,76083],"source":" </p>\\n"},{"pos":[77319,77344],"content":"WriteLine(String, String)","needQuote":true,"nodes":[{"content":"WriteLine(String, String)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;A message to write.","pos":[78325,78349],"source":"\\n<p>A message to write."},{"content":"&lt;/p&gt;\\n","pos":[78350,78356],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A category name used to organize the output.","pos":[78423,78472],"source":"\\n<p>A category name used to organize the output."},{"content":"&lt;/p&gt;\\n","pos":[78473,78479],"source":" </p>\\n"},{"pos":[79732,79760],"content":"WriteLineIf(Boolean, Object)","needQuote":true,"nodes":[{"content":"WriteLineIf(Boolean, Object)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to cause a message to be written; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[80878,80975],"source":"\\n<p>\\n<strong>true</strong> to cause a message to be written; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[80976,80982],"source":" </p>\\n"},{"pos":[82554,82590],"content":"WriteLineIf(Boolean, Object, String)","needQuote":true,"nodes":[{"content":"WriteLineIf(Boolean, Object, String)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to cause a message to be written; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[83780,83877],"source":"\\n<p>\\n<strong>true</strong> to cause a message to be written; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[83878,83884],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A category name used to organize the output.","pos":[84225,84274],"source":"\\n<p>A category name used to organize the output."},{"content":"&lt;/p&gt;\\n","pos":[84275,84281],"source":" </p>\\n"},{"pos":[85545,85573],"content":"WriteLineIf(Boolean, String)","needQuote":true,"nodes":[{"content":"WriteLineIf(Boolean, String)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to cause a message to be written; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[86589,86686],"source":"\\n<p>\\n<strong>true</strong> to cause a message to be written; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[86687,86693],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A message to write.","pos":[86759,86783],"source":"\\n<p>A message to write."},{"content":"&lt;/p&gt;\\n","pos":[86784,86790],"source":" </p>\\n"},{"pos":[88088,88124],"content":"WriteLineIf(Boolean, String, String)","needQuote":true,"nodes":[{"content":"WriteLineIf(Boolean, String, String)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to cause a message to be written; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[89210,89307],"source":"\\n<p>\\n<strong>true</strong> to cause a message to be written; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[89308,89314],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A message to write.","pos":[89380,89404],"source":"\\n<p>A message to write."},{"content":"&lt;/p&gt;\\n","pos":[89405,89411],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A category name used to organize the output.","pos":[89478,89527],"source":"\\n<p>A category name used to organize the output."},{"content":"&lt;/p&gt;\\n","pos":[89528,89534],"source":" </p>\\n"},{"pos":[90590,90608],"content":"System.Diagnostics","needQuote":true,"nodes":[{"content":"System.Diagnostics","pos":[0,18]}]},{"pos":[90775,90781],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[90941,90951],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[91046,91054],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[91123,91124],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[91151,91152],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[91222,91230],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[91299,91300],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[91327,91328],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[91511,91525],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[91644,91650],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[91717,91718],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[91768,91774],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[91834,91835],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[91918,91924],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[91991,91992],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[92042,92048],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[92108,92109],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[92323,92345],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[92493,92499],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[92566,92567],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[92617,92623],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[92684,92685]},{"pos":[92740,92746],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[92806,92807],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[92904,92910],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[92977,92978],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[93028,93034],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[93095,93096]},{"pos":[93151,93157],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[93217,93218],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[93463,93494],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[93660,93675],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[93751,93752],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[93802,93808],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[93869,93870]},{"pos":[93925,93931],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[93991,93992],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[94098,94113],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[94189,94190],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[94240,94246],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[94307,94308]},{"pos":[94363,94369],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[94429,94430],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[94660,94673],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[94774,94785],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[94857,94858],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[94885,94886],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[94959,94970],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[95042,95043],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[95070,95071],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[95246,95255],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[95348,95355],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[95423,95424],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[95451,95452],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[95521,95528],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[95596,95597],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[95624,95625],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[95800,95817],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[95926,95941],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[96017,96018],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[96045,96046],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[96123,96138],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[96214,96215],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[96242,96243],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[96388,96394],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[96526,96533],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[96680,96685],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[96868,96891],"content":"TraceListenerCollection","needQuote":true,"nodes":[{"content":"TraceListenerCollection","pos":[0,23]}]},{"pos":[97111,97117],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[97227,97235],"content":"Object[]","needQuote":true,"nodes":[{"content":"Object[]","pos":[0,8]}]},{"pos":[97363,97369],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":"[]","pos":[97430,97432]},{"pos":[97497,97503],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[97563,97565],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]}],"content":"items:\n- uid: System.Diagnostics.Trace\n  commentId: T:System.Diagnostics.Trace\n  id: Trace\n  parent: System.Diagnostics\n  children:\n  - System.Diagnostics.Trace.Assert(System.Boolean)\n  - System.Diagnostics.Trace.Assert(System.Boolean,System.String)\n  - System.Diagnostics.Trace.Assert(System.Boolean,System.String,System.String)\n  - System.Diagnostics.Trace.AutoFlush\n  - System.Diagnostics.Trace.Close\n  - System.Diagnostics.Trace.Fail(System.String)\n  - System.Diagnostics.Trace.Fail(System.String,System.String)\n  - System.Diagnostics.Trace.Flush\n  - System.Diagnostics.Trace.Indent\n  - System.Diagnostics.Trace.IndentLevel\n  - System.Diagnostics.Trace.IndentSize\n  - System.Diagnostics.Trace.Listeners\n  - System.Diagnostics.Trace.Refresh\n  - System.Diagnostics.Trace.TraceError(System.String)\n  - System.Diagnostics.Trace.TraceError(System.String,System.Object[])\n  - System.Diagnostics.Trace.TraceInformation(System.String)\n  - System.Diagnostics.Trace.TraceInformation(System.String,System.Object[])\n  - System.Diagnostics.Trace.TraceWarning(System.String)\n  - System.Diagnostics.Trace.TraceWarning(System.String,System.Object[])\n  - System.Diagnostics.Trace.Unindent\n  - System.Diagnostics.Trace.UseGlobalLock\n  - System.Diagnostics.Trace.Write(System.Object)\n  - System.Diagnostics.Trace.Write(System.Object,System.String)\n  - System.Diagnostics.Trace.Write(System.String)\n  - System.Diagnostics.Trace.Write(System.String,System.String)\n  - System.Diagnostics.Trace.WriteIf(System.Boolean,System.Object)\n  - System.Diagnostics.Trace.WriteIf(System.Boolean,System.Object,System.String)\n  - System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)\n  - System.Diagnostics.Trace.WriteIf(System.Boolean,System.String,System.String)\n  - System.Diagnostics.Trace.WriteLine(System.Object)\n  - System.Diagnostics.Trace.WriteLine(System.Object,System.String)\n  - System.Diagnostics.Trace.WriteLine(System.String)\n  - System.Diagnostics.Trace.WriteLine(System.String,System.String)\n  - System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.Object)\n  - System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.Object,System.String)\n  - System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)\n  - System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String,System.String)\n  langs:\n  - csharp\n  - vb\n  name: Trace\n  fullName: System.Diagnostics.Trace\n  type: Class\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Trace\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n    startLine: 13\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Provides a set of methods and properties that help you trace the execution of your code. This class cannot be inherited.</p>\\n\"\n  syntax:\n    content: public sealed class Trace\n    content.vb: Public NotInheritable Class Trace\n  seealso:\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Switch\n    commentId: T:System.Diagnostics.Switch\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.EventLogTraceListener\n    commentId: T:System.Diagnostics.EventLogTraceListener\n  - type: System.Diagnostics.TraceListenerCollection\n    commentId: T:System.Diagnostics.TraceListenerCollection\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: Trace\n- uid: System.Diagnostics.Trace.AutoFlush\n  commentId: P:System.Diagnostics.Trace.AutoFlush\n  id: AutoFlush\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  - vb\n  name: AutoFlush\n  fullName: System.Diagnostics.Trace.AutoFlush\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AutoFlush\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n    startLine: 37\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets or sets whether <xref href=\\\"System.Diagnostics.Trace.Flush\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> should be called on the <xref href=\\\"System.Diagnostics.Trace.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> after every write.</p>\\n\"\n  syntax:\n    content: public static bool AutoFlush { get; set; }\n    content.vb: Public Shared Property AutoFlush As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <xref href=\\\"System.Diagnostics.Trace.Flush\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is called on the <xref href=\\\"System.Diagnostics.Trace.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> after every write; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Trace.AutoFlush\n- uid: System.Diagnostics.Trace.IndentLevel\n  commentId: P:System.Diagnostics.Trace.IndentLevel\n  id: IndentLevel\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  - vb\n  name: IndentLevel\n  fullName: System.Diagnostics.Trace.IndentLevel\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IndentLevel\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n    startLine: 64\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets or sets the indent level.</p>\\n\"\n  syntax:\n    content: public static int IndentLevel { get; set; }\n    content.vb: Public Shared Property IndentLevel As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The indent level. The default is zero.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Trace.IndentSize\n    commentId: P:System.Diagnostics.Trace.IndentSize\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Trace.IndentLevel\n- uid: System.Diagnostics.Trace.IndentSize\n  commentId: P:System.Diagnostics.Trace.IndentSize\n  id: IndentSize\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  - vb\n  name: IndentSize\n  fullName: System.Diagnostics.Trace.IndentSize\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IndentSize\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n    startLine: 77\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets or sets the number of spaces in an indent.</p>\\n\"\n  syntax:\n    content: public static int IndentSize { get; set; }\n    content.vb: Public Shared Property IndentSize As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of spaces in an indent. The default is four.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Trace.IndentLevel\n    commentId: P:System.Diagnostics.Trace.IndentLevel\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Trace.IndentSize\n- uid: System.Diagnostics.Trace.Listeners\n  commentId: P:System.Diagnostics.Trace.Listeners\n  id: Listeners\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  - vb\n  name: Listeners\n  fullName: System.Diagnostics.Trace.Listeners\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Listeners\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n    startLine: 24\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets the collection of listeners that is monitoring the trace output.</p>\\n\"\n  syntax:\n    content: public static TraceListenerCollection Listeners { get; }\n    content.vb: Public Shared ReadOnly Property Listeners As TraceListenerCollection\n    parameters: []\n    return:\n      type: System.Diagnostics.TraceListenerCollection\n      description: \"\\n<p>A <xref href=\\\"System.Diagnostics.TraceListenerCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a collection of type <xref href=\\\"System.Diagnostics.TraceListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> monitoring the trace output.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Trace.Listeners\n- uid: System.Diagnostics.Trace.UseGlobalLock\n  commentId: P:System.Diagnostics.Trace.UseGlobalLock\n  id: UseGlobalLock\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  - vb\n  name: UseGlobalLock\n  fullName: System.Diagnostics.Trace.UseGlobalLock\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: UseGlobalLock\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n    startLine: 49\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets or sets a value indicating whether the global lock should be used.  </p>\\n\"\n  syntax:\n    content: public static bool UseGlobalLock { get; set; }\n    content.vb: Public Shared Property UseGlobalLock As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the global lock is to be used; otherwise, <strong>false</strong>. The default is <strong>true</strong>.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Trace.UseGlobalLock\n- uid: System.Diagnostics.Trace.Assert(System.Boolean)\n  commentId: M:System.Diagnostics.Trace.Assert(System.Boolean)\n  id: Assert(System.Boolean)\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  - vb\n  name: Assert(Boolean)\n  fullName: System.Diagnostics.Trace.Assert(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Assert\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n    startLine: 109\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Checks for a condition; if the condition is <strong>false</strong>, displays a message box that shows the call stack.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"TRACE\")]\n\n      public static void Assert(bool condition)\n    content.vb: >-\n      <Conditional(\"TRACE\")>\n\n      Public Shared Sub Assert(condition As Boolean)\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: \"\\n<p>The conditional expression to evaluate. If the condition is <strong>true</strong>, a failure message is not sent and the message box is not displayed.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: TRACE\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Trace.Assert(Boolean)\n- uid: System.Diagnostics.Trace.Assert(System.Boolean,System.String)\n  commentId: M:System.Diagnostics.Trace.Assert(System.Boolean,System.String)\n  id: Assert(System.Boolean,System.String)\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  - vb\n  name: Assert(Boolean, String)\n  fullName: System.Diagnostics.Trace.Assert(System.Boolean, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Assert\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n    startLine: 119\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Checks for a condition; if the condition is <strong>false</strong>, outputs a specified message and displays a message box that shows the call stack.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"TRACE\")]\n\n      public static void Assert(bool condition, string message)\n    content.vb: >-\n      <Conditional(\"TRACE\")>\n\n      Public Shared Sub Assert(condition As Boolean, message As String)\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: \"\\n<p>The conditional expression to evaluate. If the condition is <strong>true</strong>, the specified message is not sent and the message box is not displayed.  </p>\\n\"\n    - id: message\n      type: System.String\n      description: \"\\n<p>The message to send to the <xref href=\\\"System.Diagnostics.Trace.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: TRACE\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Trace.Assert(Boolean, String)\n- uid: System.Diagnostics.Trace.Assert(System.Boolean,System.String,System.String)\n  commentId: M:System.Diagnostics.Trace.Assert(System.Boolean,System.String,System.String)\n  id: Assert(System.Boolean,System.String,System.String)\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  - vb\n  name: Assert(Boolean, String, String)\n  fullName: System.Diagnostics.Trace.Assert(System.Boolean, System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Assert\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n    startLine: 129\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Checks for a condition; if the condition is <strong>false</strong>, outputs two specified messages and displays a message box that shows the call stack.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"TRACE\")]\n\n      public static void Assert(bool condition, string message, string detailMessage)\n    content.vb: >-\n      <Conditional(\"TRACE\")>\n\n      Public Shared Sub Assert(condition As Boolean, message As String, detailMessage As String)\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: \"\\n<p>The conditional expression to evaluate. If the condition is <strong>true</strong>, the specified messages are not sent and the message box is not displayed.  </p>\\n\"\n    - id: message\n      type: System.String\n      description: \"\\n<p>The message to send to the <xref href=\\\"System.Diagnostics.Trace.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection. </p>\\n\"\n    - id: detailMessage\n      type: System.String\n      description: \"\\n<p>The detailed message to send to the <xref href=\\\"System.Diagnostics.Trace.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: TRACE\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Trace.Assert(Boolean, String, String)\n- uid: System.Diagnostics.Trace.Close\n  commentId: M:System.Diagnostics.Trace.Close\n  id: Close\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  - vb\n  name: Close()\n  fullName: System.Diagnostics.Trace.Close()\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Close\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n    startLine: 98\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Flushes the output buffer, and then closes the <xref href=\\\"System.Diagnostics.Trace.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"TRACE\")]\n\n      public static void Close()\n    content.vb: >-\n      <Conditional(\"TRACE\")>\n\n      Public Shared Sub Close\n  seealso:\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: TRACE\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Trace.Close()\n- uid: System.Diagnostics.Trace.Fail(System.String)\n  commentId: M:System.Diagnostics.Trace.Fail(System.String)\n  id: Fail(System.String)\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  - vb\n  name: Fail(String)\n  fullName: System.Diagnostics.Trace.Fail(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Fail\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n    startLine: 138\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Emits the specified error message.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"TRACE\")]\n\n      public static void Fail(string message)\n    content.vb: >-\n      <Conditional(\"TRACE\")>\n\n      Public Shared Sub Fail(message As String)\n    parameters:\n    - id: message\n      type: System.String\n      description: \"\\n<p>A message to emit. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: TRACE\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Trace.Fail(String)\n- uid: System.Diagnostics.Trace.Fail(System.String,System.String)\n  commentId: M:System.Diagnostics.Trace.Fail(System.String,System.String)\n  id: Fail(System.String,System.String)\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  - vb\n  name: Fail(String, String)\n  fullName: System.Diagnostics.Trace.Fail(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Fail\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n    startLine: 147\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Emits an error message, and a detailed error message.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"TRACE\")]\n\n      public static void Fail(string message, string detailMessage)\n    content.vb: >-\n      <Conditional(\"TRACE\")>\n\n      Public Shared Sub Fail(message As String, detailMessage As String)\n    parameters:\n    - id: message\n      type: System.String\n      description: \"\\n<p>A message to emit. </p>\\n\"\n    - id: detailMessage\n      type: System.String\n      description: \"\\n<p>A detailed message to emit. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: TRACE\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Trace.Fail(String, String)\n- uid: System.Diagnostics.Trace.Flush\n  commentId: M:System.Diagnostics.Trace.Flush\n  id: Flush\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  - vb\n  name: Flush()\n  fullName: System.Diagnostics.Trace.Flush()\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Flush\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n    startLine: 88\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Flushes the output buffer, and causes buffered data to be written to the <xref href=\\\"System.Diagnostics.Trace.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"TRACE\")]\n\n      public static void Flush()\n    content.vb: >-\n      <Conditional(\"TRACE\")>\n\n      Public Shared Sub Flush\n  seealso:\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: TRACE\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Trace.Flush()\n- uid: System.Diagnostics.Trace.Indent\n  commentId: M:System.Diagnostics.Trace.Indent\n  id: Indent\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  - vb\n  name: Indent()\n  fullName: System.Diagnostics.Trace.Indent()\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Indent\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n    startLine: 373\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Increases the current <xref href=\\\"System.Diagnostics.Trace.IndentLevel\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> by one.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"TRACE\")]\n\n      public static void Indent()\n    content.vb: >-\n      <Conditional(\"TRACE\")>\n\n      Public Shared Sub Indent\n  seealso:\n  - type: System.Diagnostics.Trace.Unindent\n    commentId: M:System.Diagnostics.Trace.Unindent\n  - type: System.Diagnostics.Trace.IndentLevel\n    commentId: P:System.Diagnostics.Trace.IndentLevel\n  - type: System.Diagnostics.Trace.IndentSize\n    commentId: P:System.Diagnostics.Trace.IndentSize\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: TRACE\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Trace.Indent()\n- uid: System.Diagnostics.Trace.Refresh\n  commentId: M:System.Diagnostics.Trace.Refresh\n  id: Refresh\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  - vb\n  name: Refresh()\n  fullName: System.Diagnostics.Trace.Refresh()\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Refresh\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n    startLine: 153\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Refreshes the trace configuration data.</p>\\n\"\n  syntax:\n    content: public static void Refresh()\n    content.vb: Public Shared Sub Refresh\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Trace.Refresh()\n- uid: System.Diagnostics.Trace.TraceError(System.String)\n  commentId: M:System.Diagnostics.Trace.TraceError(System.String)\n  id: TraceError(System.String)\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  - vb\n  name: TraceError(String)\n  fullName: System.Diagnostics.Trace.TraceError(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TraceError\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n    startLine: 184\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes an error message to the trace listeners in the <xref href=\\\"System.Diagnostics.Trace.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection using the specified message.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"TRACE\")]\n\n      public static void TraceError(string message)\n    content.vb: >-\n      <Conditional(\"TRACE\")>\n\n      Public Shared Sub TraceError(message As String)\n    parameters:\n    - id: message\n      type: System.String\n      description: \"\\n<p>The informative message to write.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: TRACE\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Trace.TraceError(String)\n- uid: System.Diagnostics.Trace.TraceError(System.String,System.Object[])\n  commentId: M:System.Diagnostics.Trace.TraceError(System.String,System.Object[])\n  id: TraceError(System.String,System.Object[])\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  - vb\n  name: TraceError(String, Object[])\n  fullName: System.Diagnostics.Trace.TraceError(System.String, System.Object[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TraceError\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n    startLine: 190\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes an error message to the trace listeners in the <xref href=\\\"System.Diagnostics.Trace.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection using the specified array of objects and formatting information.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"TRACE\")]\n\n      public static void TraceError(string format, params object[] args)\n    content.vb: >-\n      <Conditional(\"TRACE\")>\n\n      Public Shared Sub TraceError(format As String, ParamArray args As Object())\n    parameters:\n    - id: format\n      type: System.String\n      description: \"\\n<p>A format string that contains zero or more format items, which correspond to objects in the <em>args</em> array.</p>\\n\"\n    - id: args\n      type: System.Object[]\n      description: \"\\n<p>An <strong>object</strong> array containing zero or more objects to format.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: TRACE\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Diagnostics.Trace.TraceError(System.String, System.Object())\n  name.vb: TraceError(String, Object())\n  nameWithType: Trace.TraceError(String, Object[])\n  nameWithType.vb: Trace.TraceError(String, Object())\n- uid: System.Diagnostics.Trace.TraceInformation(System.String)\n  commentId: M:System.Diagnostics.Trace.TraceInformation(System.String)\n  id: TraceInformation(System.String)\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  - vb\n  name: TraceInformation(String)\n  fullName: System.Diagnostics.Trace.TraceInformation(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TraceInformation\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n    startLine: 160\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes an informational message to the trace listeners in the <xref href=\\\"System.Diagnostics.Trace.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection using the specified message.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"TRACE\")]\n\n      public static void TraceInformation(string message)\n    content.vb: >-\n      <Conditional(\"TRACE\")>\n\n      Public Shared Sub TraceInformation(message As String)\n    parameters:\n    - id: message\n      type: System.String\n      description: \"\\n<p>The informative message to write.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: TRACE\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Trace.TraceInformation(String)\n- uid: System.Diagnostics.Trace.TraceInformation(System.String,System.Object[])\n  commentId: M:System.Diagnostics.Trace.TraceInformation(System.String,System.Object[])\n  id: TraceInformation(System.String,System.Object[])\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  - vb\n  name: TraceInformation(String, Object[])\n  fullName: System.Diagnostics.Trace.TraceInformation(System.String, System.Object[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TraceInformation\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n    startLine: 166\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes an informational message to the trace listeners in the <xref href=\\\"System.Diagnostics.Trace.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection using the specified array of objects and formatting information.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"TRACE\")]\n\n      public static void TraceInformation(string format, params object[] args)\n    content.vb: >-\n      <Conditional(\"TRACE\")>\n\n      Public Shared Sub TraceInformation(format As String, ParamArray args As Object())\n    parameters:\n    - id: format\n      type: System.String\n      description: \"\\n<p>A format string that contains zero or more format items, which correspond to objects in the <em>args</em> array.</p>\\n\"\n    - id: args\n      type: System.Object[]\n      description: \"\\n<p>An <strong>object</strong> array containing zero or more objects to format.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: TRACE\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Diagnostics.Trace.TraceInformation(System.String, System.Object())\n  name.vb: TraceInformation(String, Object())\n  nameWithType: Trace.TraceInformation(String, Object[])\n  nameWithType.vb: Trace.TraceInformation(String, Object())\n- uid: System.Diagnostics.Trace.TraceWarning(System.String)\n  commentId: M:System.Diagnostics.Trace.TraceWarning(System.String)\n  id: TraceWarning(System.String)\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  - vb\n  name: TraceWarning(String)\n  fullName: System.Diagnostics.Trace.TraceWarning(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TraceWarning\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n    startLine: 172\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes a warning message to the trace listeners in the <xref href=\\\"System.Diagnostics.Trace.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection using the specified message.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"TRACE\")]\n\n      public static void TraceWarning(string message)\n    content.vb: >-\n      <Conditional(\"TRACE\")>\n\n      Public Shared Sub TraceWarning(message As String)\n    parameters:\n    - id: message\n      type: System.String\n      description: \"\\n<p>The informative message to write.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: TRACE\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Trace.TraceWarning(String)\n- uid: System.Diagnostics.Trace.TraceWarning(System.String,System.Object[])\n  commentId: M:System.Diagnostics.Trace.TraceWarning(System.String,System.Object[])\n  id: TraceWarning(System.String,System.Object[])\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  - vb\n  name: TraceWarning(String, Object[])\n  fullName: System.Diagnostics.Trace.TraceWarning(System.String, System.Object[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TraceWarning\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n    startLine: 178\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes a warning message to the trace listeners in the <xref href=\\\"System.Diagnostics.Trace.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection using the specified array of objects and formatting information.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"TRACE\")]\n\n      public static void TraceWarning(string format, params object[] args)\n    content.vb: >-\n      <Conditional(\"TRACE\")>\n\n      Public Shared Sub TraceWarning(format As String, ParamArray args As Object())\n    parameters:\n    - id: format\n      type: System.String\n      description: \"\\n<p>A format string that contains zero or more format items, which correspond to objects in the <em>args</em> array.</p>\\n\"\n    - id: args\n      type: System.Object[]\n      description: \"\\n<p>An <strong>object</strong> array containing zero or more objects to format.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: TRACE\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Diagnostics.Trace.TraceWarning(System.String, System.Object())\n  name.vb: TraceWarning(String, Object())\n  nameWithType: Trace.TraceWarning(String, Object[])\n  nameWithType.vb: Trace.TraceWarning(String, Object())\n- uid: System.Diagnostics.Trace.Unindent\n  commentId: M:System.Diagnostics.Trace.Unindent\n  id: Unindent\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  - vb\n  name: Unindent()\n  fullName: System.Diagnostics.Trace.Unindent()\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Unindent\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n    startLine: 382\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Decreases the current <xref href=\\\"System.Diagnostics.Trace.IndentLevel\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> by one.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"TRACE\")]\n\n      public static void Unindent()\n    content.vb: >-\n      <Conditional(\"TRACE\")>\n\n      Public Shared Sub Unindent\n  seealso:\n  - type: System.Diagnostics.Trace.Indent\n    commentId: M:System.Diagnostics.Trace.Indent\n  - type: System.Diagnostics.Trace.IndentLevel\n    commentId: P:System.Diagnostics.Trace.IndentLevel\n  - type: System.Diagnostics.Trace.IndentSize\n    commentId: P:System.Diagnostics.Trace.IndentSize\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: TRACE\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Trace.Unindent()\n- uid: System.Diagnostics.Trace.Write(System.Object)\n  commentId: M:System.Diagnostics.Trace.Write(System.Object)\n  id: Write(System.Object)\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  - vb\n  name: Write(Object)\n  fullName: System.Diagnostics.Trace.Write(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Write\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n    startLine: 210\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes the value of the object's <xref href=\\\"System.Object.ToString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method to the trace listeners in the <xref href=\\\"System.Diagnostics.Trace.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"TRACE\")]\n\n      public static void Write(object value)\n    content.vb: >-\n      <Conditional(\"TRACE\")>\n\n      Public Shared Sub Write(value As Object)\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose name is sent to the <xref href=\\\"System.Diagnostics.Trace.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: TRACE\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Trace.Write(Object)\n- uid: System.Diagnostics.Trace.Write(System.Object,System.String)\n  commentId: M:System.Diagnostics.Trace.Write(System.Object,System.String)\n  id: Write(System.Object,System.String)\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  - vb\n  name: Write(Object, String)\n  fullName: System.Diagnostics.Trace.Write(System.Object, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Write\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n    startLine: 230\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes a category name and the value of the object's <xref href=\\\"System.Object.ToString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method to the trace listeners in the <xref href=\\\"System.Diagnostics.Trace.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"TRACE\")]\n\n      public static void Write(object value, string category)\n    content.vb: >-\n      <Conditional(\"TRACE\")>\n\n      Public Shared Sub Write(value As Object, category As String)\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> name is sent to the <xref href=\\\"System.Diagnostics.Trace.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    - id: category\n      type: System.String\n      description: \"\\n<p>A category name used to organize the output. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: TRACE\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Trace.Write(Object, String)\n- uid: System.Diagnostics.Trace.Write(System.String)\n  commentId: M:System.Diagnostics.Trace.Write(System.String)\n  id: Write(System.String)\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  - vb\n  name: Write(String)\n  fullName: System.Diagnostics.Trace.Write(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Write\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n    startLine: 200\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes a message to the trace listeners in the <xref href=\\\"System.Diagnostics.Trace.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"TRACE\")]\n\n      public static void Write(string message)\n    content.vb: >-\n      <Conditional(\"TRACE\")>\n\n      Public Shared Sub Write(message As String)\n    parameters:\n    - id: message\n      type: System.String\n      description: \"\\n<p>A message to write. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: TRACE\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Trace.Write(String)\n- uid: System.Diagnostics.Trace.Write(System.String,System.String)\n  commentId: M:System.Diagnostics.Trace.Write(System.String,System.String)\n  id: Write(System.String,System.String)\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  - vb\n  name: Write(String, String)\n  fullName: System.Diagnostics.Trace.Write(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Write\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n    startLine: 220\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes a category name and a message to the trace listeners in the <xref href=\\\"System.Diagnostics.Trace.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"TRACE\")]\n\n      public static void Write(string message, string category)\n    content.vb: >-\n      <Conditional(\"TRACE\")>\n\n      Public Shared Sub Write(message As String, category As String)\n    parameters:\n    - id: message\n      type: System.String\n      description: \"\\n<p>A message to write. </p>\\n\"\n    - id: category\n      type: System.String\n      description: \"\\n<p>A category name used to organize the output. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: TRACE\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Trace.Write(String, String)\n- uid: System.Diagnostics.Trace.WriteIf(System.Boolean,System.Object)\n  commentId: M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.Object)\n  id: WriteIf(System.Boolean,System.Object)\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  - vb\n  name: WriteIf(Boolean, Object)\n  fullName: System.Diagnostics.Trace.WriteIf(System.Boolean, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteIf\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n    startLine: 295\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes the value of the object's <xref href=\\\"System.Object.ToString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method to the trace listeners in the <xref href=\\\"System.Diagnostics.Trace.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection if a condition is <strong>true</strong>.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"TRACE\")]\n\n      public static void WriteIf(bool condition, object value)\n    content.vb: >-\n      <Conditional(\"TRACE\")>\n\n      Public Shared Sub WriteIf(condition As Boolean, value As Object)\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to cause a message to be written; otherwise, <strong>false</strong>. </p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose name is sent to the <xref href=\\\"System.Diagnostics.Trace.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: TRACE\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Trace.WriteIf(Boolean, Object)\n- uid: System.Diagnostics.Trace.WriteIf(System.Boolean,System.Object,System.String)\n  commentId: M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.Object,System.String)\n  id: WriteIf(System.Boolean,System.Object,System.String)\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  - vb\n  name: WriteIf(Boolean, Object, String)\n  fullName: System.Diagnostics.Trace.WriteIf(System.Boolean, System.Object, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteIf\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n    startLine: 316\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes a category name and the value of the object's <xref href=\\\"System.Object.ToString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method to the trace listeners in the <xref href=\\\"System.Diagnostics.Trace.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection if a condition is <strong>true</strong>.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"TRACE\")]\n\n      public static void WriteIf(bool condition, object value, string category)\n    content.vb: >-\n      <Conditional(\"TRACE\")>\n\n      Public Shared Sub WriteIf(condition As Boolean, value As Object, category As String)\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to cause a message to be written; otherwise, <strong>false</strong>. </p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose name is sent to the <xref href=\\\"System.Diagnostics.Trace.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    - id: category\n      type: System.String\n      description: \"\\n<p>A category name used to organize the output. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: TRACE\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Trace.WriteIf(Boolean, Object, String)\n- uid: System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)\n  commentId: M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)\n  id: WriteIf(System.Boolean,System.String)\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  - vb\n  name: WriteIf(Boolean, String)\n  fullName: System.Diagnostics.Trace.WriteIf(System.Boolean, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteIf\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n    startLine: 284\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes a message to the trace listeners in the <xref href=\\\"System.Diagnostics.Trace.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection if a condition is <strong>true</strong>.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"TRACE\")]\n\n      public static void WriteIf(bool condition, string message)\n    content.vb: >-\n      <Conditional(\"TRACE\")>\n\n      Public Shared Sub WriteIf(condition As Boolean, message As String)\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to cause a message to be written; otherwise, <strong>false</strong>. </p>\\n\"\n    - id: message\n      type: System.String\n      description: \"\\n<p>A message to write. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: TRACE\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Trace.WriteIf(Boolean, String)\n- uid: System.Diagnostics.Trace.WriteIf(System.Boolean,System.String,System.String)\n  commentId: M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.String,System.String)\n  id: WriteIf(System.Boolean,System.String,System.String)\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  - vb\n  name: WriteIf(Boolean, String, String)\n  fullName: System.Diagnostics.Trace.WriteIf(System.Boolean, System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteIf\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n    startLine: 305\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes a category name and message to the trace listeners in the <xref href=\\\"System.Diagnostics.Trace.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection if a condition is <strong>true</strong>.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"TRACE\")]\n\n      public static void WriteIf(bool condition, string message, string category)\n    content.vb: >-\n      <Conditional(\"TRACE\")>\n\n      Public Shared Sub WriteIf(condition As Boolean, message As String, category As String)\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to cause a message to be written; otherwise, <strong>false</strong>. </p>\\n\"\n    - id: message\n      type: System.String\n      description: \"\\n<p>A message to write. </p>\\n\"\n    - id: category\n      type: System.String\n      description: \"\\n<p>A category name used to organize the output. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: TRACE\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Trace.WriteIf(Boolean, String, String)\n- uid: System.Diagnostics.Trace.WriteLine(System.Object)\n  commentId: M:System.Diagnostics.Trace.WriteLine(System.Object)\n  id: WriteLine(System.Object)\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  - vb\n  name: WriteLine(Object)\n  fullName: System.Diagnostics.Trace.WriteLine(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteLine\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n    startLine: 251\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes the value of the object's <xref href=\\\"System.Object.ToString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method to the trace listeners in the <xref href=\\\"System.Diagnostics.Trace.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"TRACE\")]\n\n      public static void WriteLine(object value)\n    content.vb: >-\n      <Conditional(\"TRACE\")>\n\n      Public Shared Sub WriteLine(value As Object)\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose name is sent to the <xref href=\\\"System.Diagnostics.Trace.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: TRACE\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Trace.WriteLine(Object)\n- uid: System.Diagnostics.Trace.WriteLine(System.Object,System.String)\n  commentId: M:System.Diagnostics.Trace.WriteLine(System.Object,System.String)\n  id: WriteLine(System.Object,System.String)\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  - vb\n  name: WriteLine(Object, String)\n  fullName: System.Diagnostics.Trace.WriteLine(System.Object, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteLine\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n    startLine: 274\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes a category name and the value of the object's <xref href=\\\"System.Object.ToString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method to the trace listeners in the <xref href=\\\"System.Diagnostics.Trace.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"TRACE\")]\n\n      public static void WriteLine(object value, string category)\n    content.vb: >-\n      <Conditional(\"TRACE\")>\n\n      Public Shared Sub WriteLine(value As Object, category As String)\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose name is sent to the <xref href=\\\"System.Diagnostics.Trace.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    - id: category\n      type: System.String\n      description: \"\\n<p>A category name used to organize the output. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: TRACE\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Trace.WriteLine(Object, String)\n- uid: System.Diagnostics.Trace.WriteLine(System.String)\n  commentId: M:System.Diagnostics.Trace.WriteLine(System.String)\n  id: WriteLine(System.String)\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  - vb\n  name: WriteLine(String)\n  fullName: System.Diagnostics.Trace.WriteLine(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteLine\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n    startLine: 241\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes a message to the trace listeners in the <xref href=\\\"System.Diagnostics.Trace.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"TRACE\")]\n\n      public static void WriteLine(string message)\n    content.vb: >-\n      <Conditional(\"TRACE\")>\n\n      Public Shared Sub WriteLine(message As String)\n    parameters:\n    - id: message\n      type: System.String\n      description: \"\\n<p>A message to write. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: TRACE\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Trace.WriteLine(String)\n- uid: System.Diagnostics.Trace.WriteLine(System.String,System.String)\n  commentId: M:System.Diagnostics.Trace.WriteLine(System.String,System.String)\n  id: WriteLine(System.String,System.String)\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  - vb\n  name: WriteLine(String, String)\n  fullName: System.Diagnostics.Trace.WriteLine(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteLine\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n    startLine: 263\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes a category name and message to the trace listeners in the <xref href=\\\"System.Diagnostics.Trace.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"TRACE\")]\n\n      public static void WriteLine(string message, string category)\n    content.vb: >-\n      <Conditional(\"TRACE\")>\n\n      Public Shared Sub WriteLine(message As String, category As String)\n    parameters:\n    - id: message\n      type: System.String\n      description: \"\\n<p>A message to write. </p>\\n\"\n    - id: category\n      type: System.String\n      description: \"\\n<p>A category name used to organize the output. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: TRACE\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Trace.WriteLine(String, String)\n- uid: System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.Object)\n  commentId: M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.Object)\n  id: WriteLineIf(System.Boolean,System.Object)\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  - vb\n  name: WriteLineIf(Boolean, Object)\n  fullName: System.Diagnostics.Trace.WriteLineIf(System.Boolean, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteLineIf\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n    startLine: 341\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes the value of the object's <xref href=\\\"System.Object.ToString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method to the trace listeners in the <xref href=\\\"System.Diagnostics.Trace.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection if a condition is <strong>true</strong>.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"TRACE\")]\n\n      public static void WriteLineIf(bool condition, object value)\n    content.vb: >-\n      <Conditional(\"TRACE\")>\n\n      Public Shared Sub WriteLineIf(condition As Boolean, value As Object)\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to cause a message to be written; otherwise, <strong>false</strong>. </p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose name is sent to the <xref href=\\\"System.Diagnostics.Trace.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: TRACE\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Trace.WriteLineIf(Boolean, Object)\n- uid: System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.Object,System.String)\n  commentId: M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.Object,System.String)\n  id: WriteLineIf(System.Boolean,System.Object,System.String)\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  - vb\n  name: WriteLineIf(Boolean, Object, String)\n  fullName: System.Diagnostics.Trace.WriteLineIf(System.Boolean, System.Object, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteLineIf\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n    startLine: 364\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes a category name and the value of the object's <xref href=\\\"System.Object.ToString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method to the trace listeners in the <xref href=\\\"System.Diagnostics.Trace.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection if a condition is <strong>true</strong>.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"TRACE\")]\n\n      public static void WriteLineIf(bool condition, object value, string category)\n    content.vb: >-\n      <Conditional(\"TRACE\")>\n\n      Public Shared Sub WriteLineIf(condition As Boolean, value As Object, category As String)\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to cause a message to be written; otherwise, <strong>false</strong>. </p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose name is sent to the <xref href=\\\"System.Diagnostics.Trace.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    - id: category\n      type: System.String\n      description: \"\\n<p>A category name used to organize the output. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: TRACE\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Trace.WriteLineIf(Boolean, Object, String)\n- uid: System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)\n  commentId: M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)\n  id: WriteLineIf(System.Boolean,System.String)\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  - vb\n  name: WriteLineIf(Boolean, String)\n  fullName: System.Diagnostics.Trace.WriteLineIf(System.Boolean, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteLineIf\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n    startLine: 328\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes a message to the trace listeners in the <xref href=\\\"System.Diagnostics.Trace.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection if a condition is <strong>true</strong>.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"TRACE\")]\n\n      public static void WriteLineIf(bool condition, string message)\n    content.vb: >-\n      <Conditional(\"TRACE\")>\n\n      Public Shared Sub WriteLineIf(condition As Boolean, message As String)\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to cause a message to be written; otherwise, <strong>false</strong>. </p>\\n\"\n    - id: message\n      type: System.String\n      description: \"\\n<p>A message to write. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: TRACE\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Trace.WriteLineIf(Boolean, String)\n- uid: System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String,System.String)\n  commentId: M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String,System.String)\n  id: WriteLineIf(System.Boolean,System.String,System.String)\n  parent: System.Diagnostics.Trace\n  langs:\n  - csharp\n  - vb\n  name: WriteLineIf(Boolean, String, String)\n  fullName: System.Diagnostics.Trace.WriteLineIf(System.Boolean, System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteLineIf\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/Trace.cs\n    startLine: 352\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes a category name and message to the trace listeners in the <xref href=\\\"System.Diagnostics.Trace.Listeners\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection if a condition is <strong>true</strong>.</p>\\n\"\n  syntax:\n    content: >-\n      [Conditional(\"TRACE\")]\n\n      public static void WriteLineIf(bool condition, string message, string category)\n    content.vb: >-\n      <Conditional(\"TRACE\")>\n\n      Public Shared Sub WriteLineIf(condition As Boolean, message As String, category As String)\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to cause a message to be written; otherwise, <strong>false</strong>. </p>\\n\"\n    - id: message\n      type: System.String\n      description: \"\\n<p>A message to write. </p>\\n\"\n    - id: category\n      type: System.String\n      description: \"\\n<p>A category name used to organize the output. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Debug\n    commentId: T:System.Diagnostics.Debug\n  - type: System.Diagnostics.Trace\n    commentId: T:System.Diagnostics.Trace\n  - type: System.Diagnostics.BooleanSwitch\n    commentId: T:System.Diagnostics.BooleanSwitch\n  - type: System.Diagnostics.TraceSwitch\n    commentId: T:System.Diagnostics.TraceSwitch\n  - type: System.Diagnostics.TraceListener\n    commentId: T:System.Diagnostics.TraceListener\n  - type: System.Diagnostics.DefaultTraceListener\n    commentId: T:System.Diagnostics.DefaultTraceListener\n  - type: System.Diagnostics.ConditionalAttribute\n    commentId: T:System.Diagnostics.ConditionalAttribute\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: TRACE\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Trace.WriteLineIf(Boolean, String, String)\nreferences:\n- uid: System.Diagnostics\n  isExternal: false\n  name: System.Diagnostics\n  fullName: System.Diagnostics\n  nameWithType: System.Diagnostics\n  commentId: N:System.Diagnostics\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Diagnostics.TraceListenerCollection\n  parent: System.Diagnostics\n  isExternal: false\n  name: TraceListenerCollection\n  fullName: System.Diagnostics.TraceListenerCollection\n  nameWithType: TraceListenerCollection\n  commentId: T:System.Diagnostics.TraceListenerCollection\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Object[]\n  name: Object[]\n  fullName: System.Object[]\n  fullname.vb: System.Object()\n  name.vb: Object()\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Object[]\n  nameWithType.vb: Object()\n"}