{"nodes":[{"pos":[344,368],"content":"AssemblyKeyNameAttribute","needQuote":true,"nodes":[{"content":"AssemblyKeyNameAttribute","pos":[0,24]}]},{"pos":[1926,1935],"content":"Inherited","needQuote":true,"nodes":[{"content":"Inherited","pos":[0,9]}]},{"pos":[2398,2430],"content":"AssemblyKeyNameAttribute(String)","needQuote":true,"nodes":[{"content":"AssemblyKeyNameAttribute(String)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The name of the container containing the key pair.","pos":[3358,3413],"source":"\\n<p>The name of the container containing the key pair."},{"content":"&lt;/p&gt;\\n","pos":[3414,3420],"source":" </p>\\n"},{"pos":[3780,3787],"content":"KeyName","needQuote":true,"nodes":[{"content":"KeyName","pos":[0,7]}]},{"content":"\\n&lt;p&gt;A string containing the name of the container that has the relevant key pair.&lt;/p&gt;\\n","pos":[4529,4617],"source":"\\n<p>A string containing the name of the container that has the relevant key pair.</p>\\n"},{"pos":[4812,4829],"content":"System.Reflection","needQuote":true,"nodes":[{"content":"System.Reflection","pos":[0,17]}]},{"pos":[4993,4999],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[5147,5156],"content":"Attribute","needQuote":true,"nodes":[{"content":"Attribute","pos":[0,9]}]},{"pos":[5344,5358],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[5483,5489],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[5538,5539],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[5589,5595],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[5655,5656],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[5742,5748],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[5797,5798],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[5848,5854],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[5914,5915],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6118,6131],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[6238,6249],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[6303,6304],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6331,6332],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6408,6419],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[6473,6474],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6501,6502],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6684,6694],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[6789,6797],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[6866,6867],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6894,6895],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6965,6973],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[7042,7043],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7070,7071],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7268,7290],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[7438,7444],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7511,7512],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7562,7568],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[7629,7630]},{"pos":[7685,7691],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7751,7752],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7849,7855],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7922,7923],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7973,7979],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[8040,8041]},{"pos":[8096,8102],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8162,8163],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8408,8439],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[8605,8620],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[8696,8697],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8747,8753],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[8814,8815]},{"pos":[8870,8876],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8936,8937],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9043,9058],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[9134,9135],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9185,9191],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9252,9253]},{"pos":[9308,9314],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9374,9375],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9601,9610],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[9703,9710],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[9778,9779],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9806,9807],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9876,9883],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[9951,9952],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9979,9980],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10155,10172],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[10281,10296],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[10372,10373],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10400,10401],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10478,10493],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[10569,10570],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10597,10598],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10743,10749],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[10880,10886],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]}],"content":"items:\n- uid: System.Reflection.AssemblyKeyNameAttribute\n  commentId: T:System.Reflection.AssemblyKeyNameAttribute\n  id: AssemblyKeyNameAttribute\n  parent: System.Reflection\n  children:\n  - System.Reflection.AssemblyKeyNameAttribute.#ctor(System.String)\n  - System.Reflection.AssemblyKeyNameAttribute.KeyName\n  langs:\n  - csharp\n  - vb\n  name: AssemblyKeyNameAttribute\n  fullName: System.Reflection.AssemblyKeyNameAttribute\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/AssemblyAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AssemblyKeyNameAttribute\n    path: src/mscorlib/src/System/Reflection/AssemblyAttributes.cs\n    startLine: 387\n  assemblies:\n  - System.Runtime\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies the name of a key container within the CSP containing the key pair used to generate a strong name.</p>\\n\"\n  syntax:\n    content: >-\n      [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]\n\n      [ComVisible(true)]\n\n      public sealed class AssemblyKeyNameAttribute : Attribute, _Attribute\n    content.vb: >-\n      <AttributeUsage(AttributeTargets.Assembly, Inherited:=False)>\n\n      <ComVisible(True)>\n\n      Public NotInheritable Class AssemblyKeyNameAttribute\n          Inherits Attribute\n          Implements _Attribute\n  inheritance:\n  - System.Object\n  - System.Attribute\n  inheritedMembers:\n  - System.Attribute.Equals(System.Object)\n  - System.Attribute.GetHashCode\n  - System.Object.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  attributes:\n  - type: System.AttributeUsageAttribute\n    ctor: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)\n    arguments:\n    - type: System.AttributeTargets\n      value: 1\n    namedArguments:\n    - name: Inherited\n      type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: AssemblyKeyNameAttribute\n- uid: System.Reflection.AssemblyKeyNameAttribute.#ctor(System.String)\n  commentId: M:System.Reflection.AssemblyKeyNameAttribute.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Reflection.AssemblyKeyNameAttribute\n  langs:\n  - csharp\n  - vb\n  name: AssemblyKeyNameAttribute(String)\n  fullName: System.Reflection.AssemblyKeyNameAttribute.AssemblyKeyNameAttribute(System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/AssemblyAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Reflection/AssemblyAttributes.cs\n    startLine: 393\n  assemblies:\n  - System.Runtime\n  namespace: System.Reflection\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Reflection.AssemblyKeyNameAttribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the name of the container holding the key pair used to generate a strong name for the assembly being attributed.</p>\\n\"\n  syntax:\n    content: public AssemblyKeyNameAttribute(string keyName)\n    content.vb: Public Sub New(keyName As String)\n    parameters:\n    - id: keyName\n      type: System.String\n      description: \"\\n<p>The name of the container containing the key pair. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: AssemblyKeyNameAttribute.AssemblyKeyNameAttribute(String)\n- uid: System.Reflection.AssemblyKeyNameAttribute.KeyName\n  commentId: P:System.Reflection.AssemblyKeyNameAttribute.KeyName\n  id: KeyName\n  parent: System.Reflection.AssemblyKeyNameAttribute\n  langs:\n  - csharp\n  - vb\n  name: KeyName\n  fullName: System.Reflection.AssemblyKeyNameAttribute.KeyName\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/AssemblyAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: KeyName\n    path: src/mscorlib/src/System/Reflection/AssemblyAttributes.cs\n    startLine: 398\n  assemblies:\n  - System.Runtime\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets the name of the container having the key pair that is used to generate a strong name for the attributed assembly.</p>\\n\"\n  syntax:\n    content: public string KeyName { get; }\n    content.vb: Public ReadOnly Property KeyName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>A string containing the name of the container that has the relevant key pair.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: AssemblyKeyNameAttribute.KeyName\nreferences:\n- uid: System.Reflection\n  isExternal: false\n  name: System.Reflection\n  fullName: System.Reflection\n  nameWithType: System.Reflection\n  commentId: N:System.Reflection\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Attribute\n  parent: System\n  isExternal: false\n  name: Attribute\n  fullName: System.Attribute\n  nameWithType: Attribute\n  commentId: T:System.Attribute\n- uid: System.Attribute.Equals(System.Object)\n  parent: System.Attribute\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Attribute.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Attribute.Equals(System.Object)\n    name: Equals\n    fullName: System.Attribute.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Attribute.Equals(System.Object)\n    name: Equals\n    fullName: System.Attribute.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Attribute.Equals(Object)\n  commentId: M:System.Attribute.Equals(System.Object)\n- uid: System.Attribute.GetHashCode\n  parent: System.Attribute\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.Attribute.GetHashCode()\n  spec.csharp:\n  - uid: System.Attribute.GetHashCode\n    name: GetHashCode\n    fullName: System.Attribute.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Attribute.GetHashCode\n    name: GetHashCode\n    fullName: System.Attribute.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Attribute.GetHashCode()\n  commentId: M:System.Attribute.GetHashCode\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n"}