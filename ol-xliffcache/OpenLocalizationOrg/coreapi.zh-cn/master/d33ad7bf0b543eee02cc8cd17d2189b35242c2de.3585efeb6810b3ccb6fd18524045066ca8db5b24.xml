{"nodes":[{"pos":[1211,1218],"content":"UIntPtr","needQuote":true,"nodes":[{"content":"UIntPtr","pos":[0,7]}]},{"pos":[2843,2847],"content":"Zero","needQuote":true,"nodes":[{"content":"Zero","pos":[0,4]}]},{"pos":[3747,3762],"content":"UIntPtr(UInt32)","needQuote":true,"nodes":[{"content":"UIntPtr(UInt32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;A pointer or handle contained in a 32-bit unsigned integer.","pos":[4596,4660],"source":"\\n<p>A pointer or handle contained in a 32-bit unsigned integer."},{"content":"&lt;/p&gt;\\n","pos":[4661,4667],"source":" </p>\\n"},{"pos":[4950,4965],"content":"UIntPtr(UInt64)","needQuote":true,"nodes":[{"content":"UIntPtr(UInt64)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;A pointer or handle contained in a 64-bit unsigned integer.","pos":[5783,5847],"source":"\\n<p>A pointer or handle contained in a 64-bit unsigned integer."},{"content":"&lt;/p&gt;\\n","pos":[5848,5854],"source":" </p>\\n"},{"pos":[6401,6415],"content":"UIntPtr(Void*)","needQuote":true,"nodes":[{"content":"UIntPtr(Void*)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;A pointer to an unspecified type.","pos":[7284,7322],"source":"\\n<p>A pointer to an unspecified type."},{"content":"&lt;/p&gt;\\n","pos":[7323,7329],"source":" </p>\\n"},{"pos":[8044,8048],"content":"Size","needQuote":true,"nodes":[{"content":"Size","pos":[0,4]}]},{"content":"\\n&lt;p&gt;The size of a pointer or handle on this platform, measured in bytes.","pos":[8678,8751],"source":"\\n<p>The size of a pointer or handle on this platform, measured in bytes."},{"content":"The value of this property is 4 on a 32-bit platform, and 8 on a 64-bit platform.&lt;/p&gt;\\n","pos":[8752,8839],"source":" The value of this property is 4 on a 32-bit platform, and 8 on a 64-bit platform.</p>\\n"},{"pos":[9188,9207],"content":"Add(UIntPtr, Int32)","needQuote":true,"nodes":[{"content":"Add(UIntPtr, Int32)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The unsigned pointer to add the offset to.&lt;/p&gt;\\n","pos":[9947,10000],"source":"\\n<p>The unsigned pointer to add the offset to.</p>\\n"},{"content":"\\n&lt;p&gt;The offset to add.&lt;/p&gt;\\n","pos":[10064,10093],"source":"\\n<p>The offset to add.</p>\\n"},{"content":"\\n&lt;p&gt;A new unsigned pointer that reflects the addition of &lt;em&gt;offset&lt;/em&gt; to &lt;em&gt;pointer&lt;/em&gt;.&lt;/p&gt;\\n","pos":[10154,10254],"source":"\\n<p>A new unsigned pointer that reflects the addition of <em>offset</em> to <em>pointer</em>.</p>\\n"},{"pos":[10714,10728],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;An object to compare with this instance or &lt;strong&gt;null&lt;/strong&gt;.","pos":[11461,11531],"source":"\\n<p>An object to compare with this instance or <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[11532,11538],"source":" </p>\\n"},{"pos":[12149,12162],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A 32-bit signed integer hash code.&lt;/p&gt;\\n","pos":[12817,12862],"source":"\\n<p>A 32-bit signed integer hash code.</p>\\n"},{"pos":[13271,13295],"content":"Addition(UIntPtr, Int32)","needQuote":true,"nodes":[{"content":"Addition(UIntPtr, Int32)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The unsigned pointer to add the offset to.&lt;/p&gt;\\n","pos":[14055,14108],"source":"\\n<p>The unsigned pointer to add the offset to.</p>\\n"},{"content":"\\n&lt;p&gt;The offset to add.&lt;/p&gt;\\n","pos":[14172,14201],"source":"\\n<p>The offset to add.</p>\\n"},{"content":"\\n&lt;p&gt;A new unsigned pointer that reflects the addition of &lt;em&gt;offset&lt;/em&gt; to &lt;em&gt;pointer&lt;/em&gt;.&lt;/p&gt;\\n","pos":[14262,14362],"source":"\\n<p>A new unsigned pointer that reflects the addition of <em>offset</em> to <em>pointer</em>.</p>\\n"},{"pos":[14874,14900],"content":"Equality(UIntPtr, UIntPtr)","needQuote":true,"nodes":[{"content":"Equality(UIntPtr, UIntPtr)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The first pointer or handle to compare.","pos":[15801,15845],"source":"\\n<p>The first pointer or handle to compare."},{"content":"&lt;/p&gt;\\n","pos":[15846,15852],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second pointer or handle to compare.","pos":[15918,15963],"source":"\\n<p>The second pointer or handle to compare."},{"content":"&lt;/p&gt;\\n","pos":[15964,15970],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;value1&lt;/em&gt; equals &lt;em&gt;value2&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[16031,16143],"source":"\\n<p>\\n<strong>true</strong> if <em>value1</em> equals <em>value2</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[16520,16547],"content":"Explicit(UInt32 to UIntPtr)","needQuote":true,"nodes":[{"content":"Explicit(UInt32 to UIntPtr)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;A 32-bit unsigned integer.","pos":[17369,17400],"source":"\\n<p>A 32-bit unsigned integer."},{"content":"&lt;/p&gt;\\n","pos":[17401,17407],"source":" </p>\\n"},{"pos":[18259,18286],"content":"Explicit(UInt64 to UIntPtr)","needQuote":true,"nodes":[{"content":"Explicit(UInt64 to UIntPtr)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;A 64-bit unsigned integer.","pos":[19106,19137],"source":"\\n<p>A 64-bit unsigned integer."},{"content":"&lt;/p&gt;\\n","pos":[19138,19144],"source":" </p>\\n"},{"pos":[20263,20290],"content":"Explicit(UIntPtr to UInt32)","needQuote":true,"nodes":[{"content":"Explicit(UIntPtr to UInt32)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The pointer or handle to convert.","pos":[21185,21223],"source":"\\n<p>The pointer or handle to convert."},{"content":"&lt;/p&gt;\\n","pos":[21224,21230],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The contents of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[21290,21332],"source":"\\n<p>The contents of <em>value</em>.</p>\\n"},{"content":"\\n&lt;p&gt;On a 64-bit platform, the value of &lt;em&gt;value&lt;/em&gt; is too large to represent as a 32-bit unsigned integer.","pos":[21443,21553],"source":"\\n<p>On a 64-bit platform, the value of <em>value</em> is too large to represent as a 32-bit unsigned integer."},{"content":"&lt;/p&gt;\\n","pos":[21554,21560],"source":" </p>\\n"},{"pos":[22193,22220],"content":"Explicit(UIntPtr to UInt64)","needQuote":true,"nodes":[{"content":"Explicit(UIntPtr to UInt64)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The pointer or handle to convert.","pos":[23113,23151],"source":"\\n<p>The pointer or handle to convert."},{"content":"&lt;/p&gt;\\n","pos":[23152,23158],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The contents of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[23218,23260],"source":"\\n<p>The contents of <em>value</em>.</p>\\n"},{"pos":[23890,23916],"content":"Explicit(UIntPtr to Void*)","needQuote":true,"nodes":[{"content":"Explicit(UIntPtr to Void*)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The pointer or handle to convert.","pos":[24835,24873],"source":"\\n<p>The pointer or handle to convert."},{"content":"&lt;/p&gt;\\n","pos":[24874,24880],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The contents of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[24939,24981],"source":"\\n<p>The contents of <em>value</em>.</p>\\n"},{"pos":[26030,26056],"content":"Explicit(Void* to UIntPtr)","needQuote":true,"nodes":[{"content":"Explicit(Void* to UIntPtr)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;A pointer to an unspecified type.","pos":[26986,27024],"source":"\\n<p>A pointer to an unspecified type."},{"content":"&lt;/p&gt;\\n","pos":[27025,27031],"source":" </p>\\n"},{"pos":[28309,28337],"content":"Inequality(UIntPtr, UIntPtr)","needQuote":true,"nodes":[{"content":"Inequality(UIntPtr, UIntPtr)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The first pointer or handle to compare.","pos":[29247,29291],"source":"\\n<p>The first pointer or handle to compare."},{"content":"&lt;/p&gt;\\n","pos":[29292,29298],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second pointer or handle to compare.","pos":[29364,29409],"source":"\\n<p>The second pointer or handle to compare."},{"content":"&lt;/p&gt;\\n","pos":[29410,29416],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;value1&lt;/em&gt; does not equal &lt;em&gt;value2&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[29477,29597],"source":"\\n<p>\\n<strong>true</strong> if <em>value1</em> does not equal <em>value2</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[29982,30009],"content":"Subtraction(UIntPtr, Int32)","needQuote":true,"nodes":[{"content":"Subtraction(UIntPtr, Int32)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The unsigned pointer to subtract the offset from.&lt;/p&gt;\\n","pos":[30782,30842],"source":"\\n<p>The unsigned pointer to subtract the offset from.</p>\\n"},{"content":"\\n&lt;p&gt;The offset to subtract.&lt;/p&gt;\\n","pos":[30906,30940],"source":"\\n<p>The offset to subtract.</p>\\n"},{"content":"\\n&lt;p&gt;A new unsigned pointer that reflects the subtraction of &lt;em&gt;offset&lt;/em&gt; from &lt;em&gt;pointer&lt;/em&gt;.&lt;/p&gt;\\n","pos":[31001,31106],"source":"\\n<p>A new unsigned pointer that reflects the subtraction of <em>offset</em> from <em>pointer</em>.</p>\\n"},{"pos":[31616,31640],"content":"Subtract(UIntPtr, Int32)","needQuote":true,"nodes":[{"content":"Subtract(UIntPtr, Int32)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The unsigned pointer to subtract the offset from.&lt;/p&gt;\\n","pos":[32407,32467],"source":"\\n<p>The unsigned pointer to subtract the offset from.</p>\\n"},{"content":"\\n&lt;p&gt;The offset to subtract.&lt;/p&gt;\\n","pos":[32531,32565],"source":"\\n<p>The offset to subtract.</p>\\n"},{"content":"\\n&lt;p&gt;A new unsigned pointer that reflects the subtraction of &lt;em&gt;offset&lt;/em&gt; from &lt;em&gt;pointer&lt;/em&gt;.&lt;/p&gt;\\n","pos":[32626,32731],"source":"\\n<p>A new unsigned pointer that reflects the subtraction of <em>offset</em> from <em>pointer</em>.</p>\\n"},{"pos":[33166,33177],"content":"ToPointer()","needQuote":true,"nodes":[{"content":"ToPointer()","pos":[0,11]}]},{"pos":[34495,34505],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The string representation of the value of this instance.&lt;/p&gt;\\n","pos":[35196,35263],"source":"\\n<p>The string representation of the value of this instance.</p>\\n"},{"pos":[35570,35580],"content":"ToUInt32()","needQuote":true,"nodes":[{"content":"ToUInt32()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;A 32-bit unsigned integer equal to the value of this instance.&lt;/p&gt;\\n","pos":[36281,36354],"source":"\\n<p>A 32-bit unsigned integer equal to the value of this instance.</p>\\n"},{"content":"\\n&lt;p&gt;On a 64-bit platform, the value of this instance is too large to represent as a 32-bit unsigned integer.","pos":[36465,36574],"source":"\\n<p>On a 64-bit platform, the value of this instance is too large to represent as a 32-bit unsigned integer."},{"content":"&lt;/p&gt;\\n","pos":[36575,36581],"source":" </p>\\n"},{"pos":[36821,36831],"content":"ToUInt64()","needQuote":true,"nodes":[{"content":"ToUInt64()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;A 64-bit unsigned integer equal to the value of this instance.&lt;/p&gt;\\n","pos":[37530,37603],"source":"\\n<p>A 64-bit unsigned integer equal to the value of this instance.</p>\\n"},{"pos":[37752,37758],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[37931,37953],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[38101,38107],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[38174,38175],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38225,38231],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[38292,38293]},{"pos":[38348,38354],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[38414,38415],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38512,38518],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[38585,38586],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38636,38642],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[38703,38704]},{"pos":[38759,38765],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[38825,38826],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39071,39102],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[39268,39283],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[39359,39360],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39410,39416],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[39477,39478]},{"pos":[39533,39539],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[39599,39600],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39706,39721],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[39797,39798],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39848,39854],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[39915,39916]},{"pos":[39971,39977],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[40037,40038],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40264,40273],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[40366,40373],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[40441,40442],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40469,40470],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40539,40546],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[40614,40615],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40642,40643],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40796,40802],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[40948,40955],"content":"UIntPtr","needQuote":true,"nodes":[{"content":"UIntPtr","pos":[0,7]}]},{"pos":[41103,41109],"content":"UInt32","needQuote":true,"nodes":[{"content":"UInt32","pos":[0,6]}]},{"pos":[41254,41260],"content":"UInt64","needQuote":true,"nodes":[{"content":"UInt64","pos":[0,6]}]},{"pos":[41367,41372],"content":"Void*","needQuote":true,"nodes":[{"content":"Void*","pos":[0,5]}]},{"pos":[41444,41448],"content":"Void","needQuote":true,"nodes":[{"content":"Void","pos":[0,4]}]},{"pos":[41570,41574],"content":"Void","needQuote":true,"nodes":[{"content":"Void","pos":[0,4]}]},{"pos":[41741,41746],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[41922,41936],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[42061,42067],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[42116,42117],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42167,42173],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[42233,42234],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42320,42326],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[42375,42376],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42426,42432],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[42492,42493],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42672,42679],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[42830,42839],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[43018,43031],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[43138,43149],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[43203,43204],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43231,43232],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43308,43319],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[43373,43374],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43401,43402],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43591,43601],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[43702,43710],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[43761,43762],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43789,43790],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43863,43871],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[43922,43923],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43950,43951],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44112,44118],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[44257,44274],"content":"OverflowException","needQuote":true,"nodes":[{"content":"OverflowException","pos":[0,17]}]}],"content":"items:\n- uid: System.UIntPtr\n  commentId: T:System.UIntPtr\n  id: UIntPtr\n  parent: System\n  children:\n  - System.UIntPtr.#ctor(System.UInt32)\n  - System.UIntPtr.#ctor(System.UInt64)\n  - System.UIntPtr.#ctor(System.Void*)\n  - System.UIntPtr.Add(System.UIntPtr,System.Int32)\n  - System.UIntPtr.Equals(System.Object)\n  - System.UIntPtr.GetHashCode\n  - System.UIntPtr.op_Addition(System.UIntPtr,System.Int32)\n  - System.UIntPtr.op_Equality(System.UIntPtr,System.UIntPtr)\n  - System.UIntPtr.op_Explicit(System.UInt32)~System.UIntPtr\n  - System.UIntPtr.op_Explicit(System.UInt64)~System.UIntPtr\n  - System.UIntPtr.op_Explicit(System.UIntPtr)~System.UInt32\n  - System.UIntPtr.op_Explicit(System.UIntPtr)~System.UInt64\n  - System.UIntPtr.op_Explicit(System.UIntPtr)~System.Void*\n  - System.UIntPtr.op_Explicit(System.Void*)~System.UIntPtr\n  - System.UIntPtr.op_Inequality(System.UIntPtr,System.UIntPtr)\n  - System.UIntPtr.op_Subtraction(System.UIntPtr,System.Int32)\n  - System.UIntPtr.Size\n  - System.UIntPtr.Subtract(System.UIntPtr,System.Int32)\n  - System.UIntPtr.ToPointer\n  - System.UIntPtr.ToString\n  - System.UIntPtr.ToUInt32\n  - System.UIntPtr.ToUInt64\n  - System.UIntPtr.Zero\n  langs:\n  - csharp\n  - vb\n  name: UIntPtr\n  fullName: System.UIntPtr\n  type: Struct\n  source:\n    remote:\n      path: src/mscorlib/src/System/UIntPtr.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: UIntPtr\n    path: src/mscorlib/src/System/UIntPtr.cs\n    startLine: 21\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>A platform-specific type that is used to represent a pointer or a handle.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [CLSCompliant(false)]\n\n      [ComVisible(true)]\n\n      public struct UIntPtr : ISerializable\n    content.vb: >-\n      <Serializable>\n\n      <CLSCompliant(False)>\n\n      <ComVisible(True)>\n\n      Public Structure UIntPtr\n          Implements ISerializable\n  seealso:\n  - type: System.IntPtr\n    commentId: T:System.IntPtr\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  nameWithType: UIntPtr\n- uid: System.UIntPtr.Zero\n  commentId: F:System.UIntPtr.Zero\n  id: Zero\n  parent: System.UIntPtr\n  langs:\n  - csharp\n  - vb\n  name: Zero\n  fullName: System.UIntPtr.Zero\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/UIntPtr.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Zero\n    path: src/mscorlib/src/System/UIntPtr.cs\n    startLine: 29\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>A read-only field that represents a pointer or handle that has been initialized to zero.</p>\\n\"\n  syntax:\n    content: public static readonly UIntPtr Zero\n    content.vb: Public Shared ReadOnly Zero As UIntPtr\n    return:\n      type: System.UIntPtr\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: UIntPtr.Zero\n- uid: System.UIntPtr.#ctor(System.UInt32)\n  commentId: M:System.UIntPtr.#ctor(System.UInt32)\n  id: '#ctor(System.UInt32)'\n  parent: System.UIntPtr\n  langs:\n  - csharp\n  - vb\n  name: UIntPtr(UInt32)\n  fullName: System.UIntPtr.UIntPtr(System.UInt32)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/UIntPtr.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/UIntPtr.cs\n    startLine: 32\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.UIntPtr\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure using the specified 32-bit pointer or handle.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [NonVersionable]\n\n      public UIntPtr(uint value)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <NonVersionable>\n\n      Public Sub New(value As UInteger)\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: \"\\n<p>A pointer or handle contained in a 32-bit unsigned integer. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: UIntPtr.UIntPtr(UInt32)\n- uid: System.UIntPtr.#ctor(System.UInt64)\n  commentId: M:System.UIntPtr.#ctor(System.UInt64)\n  id: '#ctor(System.UInt64)'\n  parent: System.UIntPtr\n  langs:\n  - csharp\n  - vb\n  name: UIntPtr(UInt64)\n  fullName: System.UIntPtr.UIntPtr(System.UInt64)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/UIntPtr.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/UIntPtr.cs\n    startLine: 39\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of <xref href=\\\"System.UIntPtr\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> using the specified 64-bit pointer or handle.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [NonVersionable]\n\n      public UIntPtr(ulong value)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <NonVersionable>\n\n      Public Sub New(value As ULong)\n    parameters:\n    - id: value\n      type: System.UInt64\n      description: \"\\n<p>A pointer or handle contained in a 64-bit unsigned integer. </p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>On a 32-bit platform, <em>value</em> is too large to represent as an <xref href=\\\"System.UIntPtr\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: UIntPtr.UIntPtr(UInt64)\n- uid: System.UIntPtr.#ctor(System.Void*)\n  commentId: M:System.UIntPtr.#ctor(System.Void*)\n  id: '#ctor(System.Void*)'\n  parent: System.UIntPtr\n  langs:\n  - csharp\n  - vb\n  name: UIntPtr(Void*)\n  fullName: System.UIntPtr.UIntPtr(System.Void*)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/UIntPtr.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/UIntPtr.cs\n    startLine: 50\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of <xref href=\\\"System.UIntPtr\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> using the specified pointer to an unspecified type.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [CLSCompliant(false)]\n\n      [NonVersionable]\n\n      public UIntPtr(void *value)\n    content.vb: >-\n      <SecurityCritical>\n\n      <CLSCompliant(False)>\n\n      <NonVersionable>\n\n      Public Sub New(value As  *)\n    parameters:\n    - id: value\n      type: System.Void*\n      description: \"\\n<p>A pointer to an unspecified type. </p>\\n\"\n  seealso:\n  - type: System.Void\n    commentId: T:System.Void\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: UIntPtr.UIntPtr(Void*)\n- uid: System.UIntPtr.Size\n  commentId: P:System.UIntPtr.Size\n  id: Size\n  parent: System.UIntPtr\n  langs:\n  - csharp\n  - vb\n  name: Size\n  fullName: System.UIntPtr.Size\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/UIntPtr.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Size\n    path: src/mscorlib/src/System/UIntPtr.cs\n    startLine: 220\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the size of this instance.</p>\\n\"\n  syntax:\n    content: >-\n      public static int Size\n\n      {\n          [NonVersionable]\n          get;\n      }\n    content.vb: Public Shared ReadOnly Property Size As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The size of a pointer or handle on this platform, measured in bytes. The value of this property is 4 on a 32-bit platform, and 8 on a 64-bit platform.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: UIntPtr.Size\n- uid: System.UIntPtr.Add(System.UIntPtr,System.Int32)\n  commentId: M:System.UIntPtr.Add(System.UIntPtr,System.Int32)\n  id: Add(System.UIntPtr,System.Int32)\n  parent: System.UIntPtr\n  langs:\n  - csharp\n  - vb\n  name: Add(UIntPtr, Int32)\n  fullName: System.UIntPtr.Add(System.UIntPtr, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/UIntPtr.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Add\n    path: src/mscorlib/src/System/UIntPtr.cs\n    startLine: 192\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Adds an offset to the value of an unsigned pointer.</p>\\n\"\n  syntax:\n    content: >-\n      [NonVersionable]\n\n      public static UIntPtr Add(UIntPtr pointer, int offset)\n    content.vb: >-\n      <NonVersionable>\n\n      Public Shared Function Add(pointer As UIntPtr, offset As Integer) As UIntPtr\n    parameters:\n    - id: pointer\n      type: System.UIntPtr\n      description: \"\\n<p>The unsigned pointer to add the offset to.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The offset to add.</p>\\n\"\n    return:\n      type: System.UIntPtr\n      description: \"\\n<p>A new unsigned pointer that reflects the addition of <em>offset</em> to <em>pointer</em>.</p>\\n\"\n  seealso:\n  - type: System.UIntPtr.op_Addition(System.UIntPtr,System.Int32)\n    commentId: M:System.UIntPtr.op_Addition(System.UIntPtr,System.Int32)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: UIntPtr.Add(UIntPtr, Int32)\n- uid: System.UIntPtr.Equals(System.Object)\n  commentId: M:System.UIntPtr.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.UIntPtr\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.UIntPtr.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/UIntPtr.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/UIntPtr.cs\n    startLine: 81\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a value indicating whether this instance is equal to a specified object.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override bool Equals(object obj)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>An object to compare with this instance or <strong>null</strong>. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>obj</em> is an instance of <xref href=\\\"System.UIntPtr\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and equals the value of this instance; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.ValueType.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: UIntPtr.Equals(Object)\n- uid: System.UIntPtr.GetHashCode\n  commentId: M:System.UIntPtr.GetHashCode\n  id: GetHashCode\n  parent: System.UIntPtr\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.UIntPtr.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/UIntPtr.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHashCode\n    path: src/mscorlib/src/System/UIntPtr.cs\n    startLine: 89\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns the hash code for this instance.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override int GetHashCode()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer hash code.</p>\\n\"\n  overridden: System.ValueType.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: UIntPtr.GetHashCode()\n- uid: System.UIntPtr.op_Addition(System.UIntPtr,System.Int32)\n  commentId: M:System.UIntPtr.op_Addition(System.UIntPtr,System.Int32)\n  id: op_Addition(System.UIntPtr,System.Int32)\n  parent: System.UIntPtr\n  langs:\n  - csharp\n  - vb\n  name: Addition(UIntPtr, Int32)\n  fullName: System.UIntPtr.Addition(System.UIntPtr, System.Int32)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/UIntPtr.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Addition\n    path: src/mscorlib/src/System/UIntPtr.cs\n    startLine: 197\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Adds an offset to the value of an unsigned pointer.</p>\\n\"\n  syntax:\n    content: >-\n      [NonVersionable]\n\n      public static UIntPtr operator +(UIntPtr pointer, int offset)\n    content.vb: >-\n      <NonVersionable>\n\n      Public Shared Operator +(pointer As UIntPtr, offset As Integer) As UIntPtr\n    parameters:\n    - id: pointer\n      type: System.UIntPtr\n      description: \"\\n<p>The unsigned pointer to add the offset to.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The offset to add.</p>\\n\"\n    return:\n      type: System.UIntPtr\n      description: \"\\n<p>A new unsigned pointer that reflects the addition of <em>offset</em> to <em>pointer</em>.</p>\\n\"\n  seealso:\n  - type: System.UIntPtr.Add(System.UIntPtr,System.Int32)\n    commentId: M:System.UIntPtr.Add(System.UIntPtr,System.Int32)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: UIntPtr.Addition(UIntPtr, Int32)\n- uid: System.UIntPtr.op_Equality(System.UIntPtr,System.UIntPtr)\n  commentId: M:System.UIntPtr.op_Equality(System.UIntPtr,System.UIntPtr)\n  id: op_Equality(System.UIntPtr,System.UIntPtr)\n  parent: System.UIntPtr\n  langs:\n  - csharp\n  - vb\n  name: Equality(UIntPtr, UIntPtr)\n  fullName: System.UIntPtr.Equality(System.UIntPtr, System.UIntPtr)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/UIntPtr.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Equality\n    path: src/mscorlib/src/System/UIntPtr.cs\n    startLine: 177\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether two specified instances of <xref href=\\\"System.UIntPtr\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> are equal.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [NonVersionable]\n\n      public static bool operator ==(UIntPtr value1, UIntPtr value2)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <NonVersionable>\n\n      Public Shared Operator =(value1 As UIntPtr, value2 As UIntPtr) As Boolean\n    parameters:\n    - id: value1\n      type: System.UIntPtr\n      description: \"\\n<p>The first pointer or handle to compare. </p>\\n\"\n    - id: value2\n      type: System.UIntPtr\n      description: \"\\n<p>The second pointer or handle to compare. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>value1</em> equals <em>value2</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: UIntPtr.Equality(UIntPtr, UIntPtr)\n- uid: System.UIntPtr.op_Explicit(System.UInt32)~System.UIntPtr\n  commentId: M:System.UIntPtr.op_Explicit(System.UInt32)~System.UIntPtr\n  id: op_Explicit(System.UInt32)~System.UIntPtr\n  parent: System.UIntPtr\n  langs:\n  - csharp\n  - vb\n  name: Explicit(UInt32 to UIntPtr)\n  fullName: System.UIntPtr.Explicit(System.UInt32 to System.UIntPtr)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/UIntPtr.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Explicit\n    path: src/mscorlib/src/System/UIntPtr.cs\n    startLine: 130\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of a 32-bit unsigned integer to an <xref href=\\\"System.UIntPtr\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [NonVersionable]\n\n      public static explicit operator UIntPtr(uint value)\n    content.vb: >-\n      <NonVersionable>\n\n      Public Shared Narrowing Operator CType(value As UInteger) As UIntPtr\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: \"\\n<p>A 32-bit unsigned integer. </p>\\n\"\n    return:\n      type: System.UIntPtr\n      description: \"\\n<p>A new instance of <xref href=\\\"System.UIntPtr\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> initialized to <em>value</em>.</p>\\n\"\n  seealso:\n  - type: System.UIntPtr.#ctor(System.UInt32)\n    commentId: M:System.UIntPtr.#ctor(System.UInt32)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.UIntPtr.Narrowing(System.UInt32 to System.UIntPtr)\n  name.vb: Narrowing(UInt32 to UIntPtr)\n  nameWithType: UIntPtr.Explicit(UInt32 to UIntPtr)\n  nameWithType.vb: UIntPtr.Narrowing(UInt32 to UIntPtr)\n- uid: System.UIntPtr.op_Explicit(System.UInt64)~System.UIntPtr\n  commentId: M:System.UIntPtr.op_Explicit(System.UInt64)~System.UIntPtr\n  id: op_Explicit(System.UInt64)~System.UIntPtr\n  parent: System.UIntPtr\n  langs:\n  - csharp\n  - vb\n  name: Explicit(UInt64 to UIntPtr)\n  fullName: System.UIntPtr.Explicit(System.UInt64 to System.UIntPtr)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/UIntPtr.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Explicit\n    path: src/mscorlib/src/System/UIntPtr.cs\n    startLine: 136\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of a 64-bit unsigned integer to an <xref href=\\\"System.UIntPtr\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [NonVersionable]\n\n      public static explicit operator UIntPtr(ulong value)\n    content.vb: >-\n      <NonVersionable>\n\n      Public Shared Narrowing Operator CType(value As ULong) As UIntPtr\n    parameters:\n    - id: value\n      type: System.UInt64\n      description: \"\\n<p>A 64-bit unsigned integer. </p>\\n\"\n    return:\n      type: System.UIntPtr\n      description: \"\\n<p>A new instance of <xref href=\\\"System.UIntPtr\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> initialized to <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>On a 32-bit platform, <em>value</em> is too large to represent as an <xref href=\\\"System.UIntPtr\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.UIntPtr.#ctor(System.UInt32)\n    commentId: M:System.UIntPtr.#ctor(System.UInt32)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.UIntPtr.Narrowing(System.UInt64 to System.UIntPtr)\n  name.vb: Narrowing(UInt64 to UIntPtr)\n  nameWithType: UIntPtr.Explicit(UInt64 to UIntPtr)\n  nameWithType.vb: UIntPtr.Narrowing(UInt64 to UIntPtr)\n- uid: System.UIntPtr.op_Explicit(System.UIntPtr)~System.UInt32\n  commentId: M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.UInt32\n  id: op_Explicit(System.UIntPtr)~System.UInt32\n  parent: System.UIntPtr\n  langs:\n  - csharp\n  - vb\n  name: Explicit(UIntPtr to UInt32)\n  fullName: System.UIntPtr.Explicit(System.UIntPtr to System.UInt32)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/UIntPtr.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Explicit\n    path: src/mscorlib/src/System/UIntPtr.cs\n    startLine: 142\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified <xref href=\\\"System.UIntPtr\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a 32-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [NonVersionable]\n\n      public static explicit operator uint (UIntPtr value)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <NonVersionable>\n\n      Public Shared Narrowing Operator CType(value As UIntPtr) As UInteger\n    parameters:\n    - id: value\n      type: System.UIntPtr\n      description: \"\\n<p>The pointer or handle to convert. </p>\\n\"\n    return:\n      type: System.UInt32\n      description: \"\\n<p>The contents of <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>On a 64-bit platform, the value of <em>value</em> is too large to represent as a 32-bit unsigned integer. </p>\\n\"\n  seealso:\n  - type: System.UIntPtr.ToUInt32\n    commentId: M:System.UIntPtr.ToUInt32\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.UIntPtr.Narrowing(System.UIntPtr to System.UInt32)\n  name.vb: Narrowing(UIntPtr to UInt32)\n  nameWithType: UIntPtr.Explicit(UIntPtr to UInt32)\n  nameWithType.vb: UIntPtr.Narrowing(UIntPtr to UInt32)\n- uid: System.UIntPtr.op_Explicit(System.UIntPtr)~System.UInt64\n  commentId: M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.UInt64\n  id: op_Explicit(System.UIntPtr)~System.UInt64\n  parent: System.UIntPtr\n  langs:\n  - csharp\n  - vb\n  name: Explicit(UIntPtr to UInt64)\n  fullName: System.UIntPtr.Explicit(System.UIntPtr to System.UInt64)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/UIntPtr.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Explicit\n    path: src/mscorlib/src/System/UIntPtr.cs\n    startLine: 153\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified <xref href=\\\"System.UIntPtr\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a 64-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [NonVersionable]\n\n      public static explicit operator ulong (UIntPtr value)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <NonVersionable>\n\n      Public Shared Narrowing Operator CType(value As UIntPtr) As ULong\n    parameters:\n    - id: value\n      type: System.UIntPtr\n      description: \"\\n<p>The pointer or handle to convert. </p>\\n\"\n    return:\n      type: System.UInt64\n      description: \"\\n<p>The contents of <em>value</em>.</p>\\n\"\n  seealso:\n  - type: System.UIntPtr.ToUInt64\n    commentId: M:System.UIntPtr.ToUInt64\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.UIntPtr.Narrowing(System.UIntPtr to System.UInt64)\n  name.vb: Narrowing(UIntPtr to UInt64)\n  nameWithType: UIntPtr.Explicit(UIntPtr to UInt64)\n  nameWithType.vb: UIntPtr.Narrowing(UIntPtr to UInt64)\n- uid: System.UIntPtr.op_Explicit(System.UIntPtr)~System.Void*\n  commentId: M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.Void*\n  id: op_Explicit(System.UIntPtr)~System.Void*\n  parent: System.UIntPtr\n  langs:\n  - csharp\n  - vb\n  name: Explicit(UIntPtr to Void*)\n  fullName: System.UIntPtr.Explicit(System.UIntPtr to System.Void*)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/UIntPtr.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Explicit\n    path: src/mscorlib/src/System/UIntPtr.cs\n    startLine: 168\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified <xref href=\\\"System.UIntPtr\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a pointer to an unspecified type.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [CLSCompliant(false)]\n\n      [NonVersionable]\n\n      public static explicit operator void *(UIntPtr value)\n    content.vb: \"<SecurityCritical>\\n<CLSCompliant(False)>\\n<NonVersionable>\\nPublic Shared Narrowing Operator CType(value As UIntPtr) As \"\n    parameters:\n    - id: value\n      type: System.UIntPtr\n      description: \"\\n<p>The pointer or handle to convert. </p>\\n\"\n    return:\n      type: System.Void*\n      description: \"\\n<p>The contents of <em>value</em>.</p>\\n\"\n  seealso:\n  - type: System.UIntPtr.ToPointer\n    commentId: M:System.UIntPtr.ToPointer\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.UIntPtr.Narrowing(System.UIntPtr to System.Void*)\n  name.vb: Narrowing(UIntPtr to Void*)\n  nameWithType: UIntPtr.Explicit(UIntPtr to Void*)\n  nameWithType.vb: UIntPtr.Narrowing(UIntPtr to Void*)\n- uid: System.UIntPtr.op_Explicit(System.Void*)~System.UIntPtr\n  commentId: M:System.UIntPtr.op_Explicit(System.Void*)~System.UIntPtr\n  id: op_Explicit(System.Void*)~System.UIntPtr\n  parent: System.UIntPtr\n  langs:\n  - csharp\n  - vb\n  name: Explicit(Void* to UIntPtr)\n  fullName: System.UIntPtr.Explicit(System.Void* to System.UIntPtr)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/UIntPtr.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Explicit\n    path: src/mscorlib/src/System/UIntPtr.cs\n    startLine: 160\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the specified pointer to an unspecified type to a <xref href=\\\"System.UIntPtr\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [CLSCompliant(false)]\n\n      [NonVersionable]\n\n      public static explicit operator UIntPtr(void *value)\n    content.vb: >-\n      <SecurityCritical>\n\n      <CLSCompliant(False)>\n\n      <NonVersionable>\n\n      Public Shared Narrowing Operator CType(value As  *) As UIntPtr\n    parameters:\n    - id: value\n      type: System.Void*\n      description: \"\\n<p>A pointer to an unspecified type. </p>\\n\"\n    return:\n      type: System.UIntPtr\n      description: \"\\n<p>A new instance of <xref href=\\\"System.UIntPtr\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> initialized to <em>value</em>.</p>\\n\"\n  seealso:\n  - type: System.UIntPtr.#ctor(System.UInt32)\n    commentId: M:System.UIntPtr.#ctor(System.UInt32)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.UIntPtr.Narrowing(System.Void* to System.UIntPtr)\n  name.vb: Narrowing(Void* to UIntPtr)\n  nameWithType: UIntPtr.Explicit(Void* to UIntPtr)\n  nameWithType.vb: UIntPtr.Narrowing(Void* to UIntPtr)\n- uid: System.UIntPtr.op_Inequality(System.UIntPtr,System.UIntPtr)\n  commentId: M:System.UIntPtr.op_Inequality(System.UIntPtr,System.UIntPtr)\n  id: op_Inequality(System.UIntPtr,System.UIntPtr)\n  parent: System.UIntPtr\n  langs:\n  - csharp\n  - vb\n  name: Inequality(UIntPtr, UIntPtr)\n  fullName: System.UIntPtr.Inequality(System.UIntPtr, System.UIntPtr)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/UIntPtr.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Inequality\n    path: src/mscorlib/src/System/UIntPtr.cs\n    startLine: 185\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether two specified instances of <xref href=\\\"System.UIntPtr\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> are not equal.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [NonVersionable]\n\n      public static bool operator !=(UIntPtr value1, UIntPtr value2)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <NonVersionable>\n\n      Public Shared Operator <>(value1 As UIntPtr, value2 As UIntPtr) As Boolean\n    parameters:\n    - id: value1\n      type: System.UIntPtr\n      description: \"\\n<p>The first pointer or handle to compare. </p>\\n\"\n    - id: value2\n      type: System.UIntPtr\n      description: \"\\n<p>The second pointer or handle to compare. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>value1</em> does not equal <em>value2</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: UIntPtr.Inequality(UIntPtr, UIntPtr)\n- uid: System.UIntPtr.op_Subtraction(System.UIntPtr,System.Int32)\n  commentId: M:System.UIntPtr.op_Subtraction(System.UIntPtr,System.Int32)\n  id: op_Subtraction(System.UIntPtr,System.Int32)\n  parent: System.UIntPtr\n  langs:\n  - csharp\n  - vb\n  name: Subtraction(UIntPtr, Int32)\n  fullName: System.UIntPtr.Subtraction(System.UIntPtr, System.Int32)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/UIntPtr.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Subtraction\n    path: src/mscorlib/src/System/UIntPtr.cs\n    startLine: 211\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Subtracts an offset from the value of an unsigned pointer.</p>\\n\"\n  syntax:\n    content: >-\n      [NonVersionable]\n\n      public static UIntPtr operator -(UIntPtr pointer, int offset)\n    content.vb: >-\n      <NonVersionable>\n\n      Public Shared Operator -(pointer As UIntPtr, offset As Integer) As UIntPtr\n    parameters:\n    - id: pointer\n      type: System.UIntPtr\n      description: \"\\n<p>The unsigned pointer to subtract the offset from.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The offset to subtract.</p>\\n\"\n    return:\n      type: System.UIntPtr\n      description: \"\\n<p>A new unsigned pointer that reflects the subtraction of <em>offset</em> from <em>pointer</em>.</p>\\n\"\n  seealso:\n  - type: System.UIntPtr.Subtract(System.UIntPtr,System.Int32)\n    commentId: M:System.UIntPtr.Subtract(System.UIntPtr,System.Int32)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: UIntPtr.Subtraction(UIntPtr, Int32)\n- uid: System.UIntPtr.Subtract(System.UIntPtr,System.Int32)\n  commentId: M:System.UIntPtr.Subtract(System.UIntPtr,System.Int32)\n  id: Subtract(System.UIntPtr,System.Int32)\n  parent: System.UIntPtr\n  langs:\n  - csharp\n  - vb\n  name: Subtract(UIntPtr, Int32)\n  fullName: System.UIntPtr.Subtract(System.UIntPtr, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/UIntPtr.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Subtract\n    path: src/mscorlib/src/System/UIntPtr.cs\n    startLine: 206\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Subtracts an offset from the value of an unsigned pointer.</p>\\n\"\n  syntax:\n    content: >-\n      [NonVersionable]\n\n      public static UIntPtr Subtract(UIntPtr pointer, int offset)\n    content.vb: >-\n      <NonVersionable>\n\n      Public Shared Function Subtract(pointer As UIntPtr, offset As Integer) As UIntPtr\n    parameters:\n    - id: pointer\n      type: System.UIntPtr\n      description: \"\\n<p>The unsigned pointer to subtract the offset from.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The offset to subtract.</p>\\n\"\n    return:\n      type: System.UIntPtr\n      description: \"\\n<p>A new unsigned pointer that reflects the subtraction of <em>offset</em> from <em>pointer</em>.</p>\\n\"\n  seealso:\n  - type: System.UIntPtr.op_Subtraction(System.UIntPtr,System.Int32)\n    commentId: M:System.UIntPtr.op_Subtraction(System.UIntPtr,System.Int32)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: UIntPtr.Subtract(UIntPtr, Int32)\n- uid: System.UIntPtr.ToPointer\n  commentId: M:System.UIntPtr.ToPointer\n  id: ToPointer\n  parent: System.UIntPtr\n  langs:\n  - csharp\n  - vb\n  name: ToPointer()\n  fullName: System.UIntPtr.ToPointer()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/UIntPtr.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToPointer\n    path: src/mscorlib/src/System/UIntPtr.cs\n    startLine: 233\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of this instance to a pointer to an unspecified type.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [CLSCompliant(false)]\n\n      [NonVersionable]\n\n      public void *ToPointer()\n    content.vb: \"<SecuritySafeCritical>\\n<CLSCompliant(False)>\\n<NonVersionable>\\nPublic Function ToPointer As \"\n    return:\n      type: System.Void*\n      description: \"\\n<p>A pointer to <xref href=\\\"System.Void\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; that is, a pointer to memory containing data of an unspecified type.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: UIntPtr.ToPointer()\n- uid: System.UIntPtr.ToString\n  commentId: M:System.UIntPtr.ToString\n  id: ToString\n  parent: System.UIntPtr\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.UIntPtr.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/UIntPtr.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/UIntPtr.cs\n    startLine: 119\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the numeric value of this instance to its equivalent string representation.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override string ToString()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of the value of this instance.</p>\\n\"\n  overridden: System.ValueType.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: UIntPtr.ToString()\n- uid: System.UIntPtr.ToUInt32\n  commentId: M:System.UIntPtr.ToUInt32\n  id: ToUInt32\n  parent: System.UIntPtr\n  langs:\n  - csharp\n  - vb\n  name: ToUInt32()\n  fullName: System.UIntPtr.ToUInt32()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/UIntPtr.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt32\n    path: src/mscorlib/src/System/UIntPtr.cs\n    startLine: 103\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of this instance to a 32-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [NonVersionable]\n\n      public uint ToUInt32()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <NonVersionable>\n\n      Public Function ToUInt32 As UInteger\n    return:\n      type: System.UInt32\n      description: \"\\n<p>A 32-bit unsigned integer equal to the value of this instance.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>On a 64-bit platform, the value of this instance is too large to represent as a 32-bit unsigned integer. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: UIntPtr.ToUInt32()\n- uid: System.UIntPtr.ToUInt64\n  commentId: M:System.UIntPtr.ToUInt64\n  id: ToUInt64\n  parent: System.UIntPtr\n  langs:\n  - csharp\n  - vb\n  name: ToUInt64()\n  fullName: System.UIntPtr.ToUInt64()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/UIntPtr.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt64\n    path: src/mscorlib/src/System/UIntPtr.cs\n    startLine: 113\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of this instance to a 64-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [NonVersionable]\n\n      public ulong ToUInt64()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <NonVersionable>\n\n      Public Function ToUInt64 As ULong\n    return:\n      type: System.UInt64\n      description: \"\\n<p>A 64-bit unsigned integer equal to the value of this instance.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: UIntPtr.ToUInt64()\nreferences:\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.UIntPtr\n  parent: System\n  isExternal: false\n  name: UIntPtr\n  fullName: System.UIntPtr\n  nameWithType: UIntPtr\n  commentId: T:System.UIntPtr\n- uid: System.UInt32\n  parent: System\n  isExternal: false\n  name: UInt32\n  fullName: System.UInt32\n  nameWithType: UInt32\n  commentId: T:System.UInt32\n- uid: System.UInt64\n  parent: System\n  isExternal: false\n  name: UInt64\n  fullName: System.UInt64\n  nameWithType: UInt64\n  commentId: T:System.UInt64\n- uid: System.Void*\n  name: Void*\n  fullName: System.Void*\n  spec.csharp:\n  - uid: System.Void\n    name: Void\n    fullName: System.Void\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  spec.vb:\n  - uid: System.Void\n    name: Void\n    fullName: System.Void\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  nameWithType: Void*\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ValueType.Equals(Object)\n  commentId: M:System.ValueType.Equals(System.Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  nameWithType: ValueType\n  commentId: T:System.ValueType\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.GetHashCode()\n  commentId: M:System.ValueType.GetHashCode\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.ToString()\n  commentId: M:System.ValueType.ToString\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.OverflowException\n  isExternal: false\n  name: OverflowException\n  fullName: System.OverflowException\n  nameWithType: OverflowException\n  commentId: T:System.OverflowException\n"}