{"nodes":[{"pos":[630,656],"content":"ECDsaCertificateExtensions","needQuote":true,"nodes":[{"content":"ECDsaCertificateExtensions","pos":[0,26]}]},{"pos":[2737,2773],"content":"GetECDsaPrivateKey(X509Certificate2)","needQuote":true,"nodes":[{"content":"GetECDsaPrivateKey(X509Certificate2)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;The certificate.","pos":[4097,4118],"source":"\\n<p>The certificate."},{"content":"&lt;/p&gt;\\n","pos":[4119,4125],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The private key, or &lt;strong&gt;null&lt;/strong&gt; if the certificate does not have an ECDsa private key.","pos":[4206,4307],"source":"\\n<p>The private key, or <strong>null</strong> if the certificate does not have an ECDsa private key."},{"content":"&lt;/p&gt;\\n","pos":[4308,4314],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;certificate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[4433,4486],"source":"\\n<p>\\n<em>certificate</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[4487,4493],"source":" </p>\\n"},{"pos":[5219,5254],"content":"GetECDsaPublicKey(X509Certificate2)","needQuote":true,"nodes":[{"content":"GetECDsaPublicKey(X509Certificate2)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The certificate.","pos":[6573,6594],"source":"\\n<p>The certificate."},{"content":"&lt;/p&gt;\\n","pos":[6595,6601],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The public key, or &lt;strong&gt;null&lt;/strong&gt; if the certificate does not have an ECDsa public key.&lt;/p&gt;\\n","pos":[6682,6787],"source":"\\n<p>The public key, or <strong>null</strong> if the certificate does not have an ECDsa public key.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;certificate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[6906,6959],"source":"\\n<p>\\n<em>certificate</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[6960,6966],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The handle is invalid.","pos":[7117,7144],"source":"\\n<p>The handle is invalid."},{"content":"&lt;/p&gt;\\n","pos":[7145,7151],"source":" </p>\\n"},{"pos":[7405,7450],"content":"System.Security.Cryptography.X509Certificates","needQuote":true,"nodes":[{"content":"System.Security.Cryptography.X509Certificates","pos":[0,45]}]},{"pos":[7698,7704],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7864,7874],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[7969,7977],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[8046,8047],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8074,8075],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8145,8153],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[8222,8223],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8250,8251],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8434,8448],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[8567,8573],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8640,8641],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8691,8697],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8757,8758],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8841,8847],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8914,8915],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8965,8971],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9031,9032],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9246,9268],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[9416,9422],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[9489,9490],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9540,9546],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9607,9608]},{"pos":[9663,9669],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9729,9730],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9827,9833],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[9900,9901],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9951,9957],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10018,10019]},{"pos":[10074,10080],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10140,10141],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10386,10417],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[10583,10598],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[10674,10675],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10725,10731],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10792,10793]},{"pos":[10848,10854],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10914,10915],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11021,11036],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[11112,11113],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11163,11169],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[11230,11231]},{"pos":[11286,11292],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11352,11353],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11583,11596],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[11697,11708],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[11780,11781],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11808,11809],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11882,11893],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[11965,11966],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11993,11994],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12169,12178],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[12271,12278],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[12346,12347],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12374,12375],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12444,12451],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[12519,12520],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12547,12548],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12723,12740],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[12849,12864],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[12940,12941],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12968,12969],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13046,13061],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[13137,13138],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13165,13166],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13311,13317],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[13536,13552],"content":"X509Certificate2","needQuote":true,"nodes":[{"content":"X509Certificate2","pos":[0,16]}]},{"pos":[13848,13853],"content":"ECDsa","needQuote":true,"nodes":[{"content":"ECDsa","pos":[0,5]}]},{"pos":[14037,14065],"content":"System.Security.Cryptography","needQuote":true,"nodes":[{"content":"System.Security.Cryptography","pos":[0,28]}]},{"pos":[14260,14281],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[14492,14514],"content":"CryptographicException","needQuote":true,"nodes":[{"content":"CryptographicException","pos":[0,22]}]}],"content":"items:\n- uid: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions\n  commentId: T:System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions\n  id: ECDsaCertificateExtensions\n  parent: System.Security.Cryptography.X509Certificates\n  children:\n  - System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  - System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  langs:\n  - csharp\n  - vb\n  name: ECDsaCertificateExtensions\n  fullName: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ECDsaCertificateExtensions\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 18\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Provides extension methods for retrieving <xref href=\\\"System.Security.Cryptography.ECDsa\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> implementations for the\\npublic and private keys of a <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> certificate.</p>\\n\"\n  syntax:\n    content: public class ECDsaCertificateExtensions\n    content.vb: Public Class ECDsaCertificateExtensions\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: ECDsaCertificateExtensions\n- uid: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  commentId: M:System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  id: GetECDsaPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  isExtensionMethod: true\n  parent: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetECDsaPrivateKey(X509Certificate2)\n  fullName: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetECDsaPrivateKey\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 20\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Security.Cryptography.ECDsa\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> private key from the <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> certificate.</p>\\n\"\n  syntax:\n    content: public static ECDsa GetECDsaPrivateKey(this X509Certificate2 certificate)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetECDsaPrivateKey(certificate As X509Certificate2) As ECDsa\n    parameters:\n    - id: certificate\n      type: System.Security.Cryptography.X509Certificates.X509Certificate2\n      description: \"\\n<p>The certificate. </p>\\n\"\n    return:\n      type: System.Security.Cryptography.ECDsa\n      description: \"\\n<p>The private key, or <strong>null</strong> if the certificate does not have an ECDsa private key. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>certificate</em> is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: ECDsaCertificateExtensions.GetECDsaPrivateKey(X509Certificate2)\n- uid: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  commentId: M:System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  id: GetECDsaPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  isExtensionMethod: true\n  parent: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetECDsaPublicKey(X509Certificate2)\n  fullName: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetECDsaPublicKey\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 21\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Security.Cryptography.ECDsa\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> public key from the <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> certificate.</p>\\n\"\n  syntax:\n    content: public static ECDsa GetECDsaPublicKey(this X509Certificate2 certificate)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetECDsaPublicKey(certificate As X509Certificate2) As ECDsa\n    parameters:\n    - id: certificate\n      type: System.Security.Cryptography.X509Certificates.X509Certificate2\n      description: \"\\n<p>The certificate. </p>\\n\"\n    return:\n      type: System.Security.Cryptography.ECDsa\n      description: \"\\n<p>The public key, or <strong>null</strong> if the certificate does not have an ECDsa public key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>certificate</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>The handle is invalid. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: ECDsaCertificateExtensions.GetECDsaPublicKey(X509Certificate2)\nreferences:\n- uid: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: System.Security.Cryptography.X509Certificates\n  fullName: System.Security.Cryptography.X509Certificates\n  commentId: N:System.Security.Cryptography.X509Certificates\n  nameWithType: System.Security.Cryptography.X509Certificates\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: X509Certificate2\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2\n  commentId: T:System.Security.Cryptography.X509Certificates.X509Certificate2\n  nameWithType: X509Certificate2\n- uid: System.Security.Cryptography.ECDsa\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ECDsa\n  fullName: System.Security.Cryptography.ECDsa\n  commentId: T:System.Security.Cryptography.ECDsa\n  nameWithType: ECDsa\n- uid: System.Security.Cryptography\n  isExternal: false\n  name: System.Security.Cryptography\n  fullName: System.Security.Cryptography\n  commentId: N:System.Security.Cryptography\n  nameWithType: System.Security.Cryptography\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.Security.Cryptography.CryptographicException\n  isExternal: false\n  name: CryptographicException\n  fullName: System.Security.Cryptography.CryptographicException\n  commentId: T:System.Security.Cryptography.CryptographicException\n  nameWithType: CryptographicException\n"}