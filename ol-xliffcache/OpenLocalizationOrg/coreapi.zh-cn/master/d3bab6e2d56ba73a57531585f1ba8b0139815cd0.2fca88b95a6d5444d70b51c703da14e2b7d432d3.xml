{"nodes":[{"pos":[816,822],"content":"RawAcl","needQuote":true,"nodes":[{"content":"RawAcl","pos":[0,6]}]},{"pos":[3387,3406],"content":"RawAcl(Byte, Int32)","needQuote":true,"nodes":[{"content":"RawAcl(Byte, Int32)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The revision level of the new Access Control List (ACL).&lt;/p&gt;\\n","pos":[4301,4368],"source":"\\n<p>The revision level of the new Access Control List (ACL).</p>\\n"},{"pos":[5043,5064],"content":"RawAcl(Byte[], Int32)","needQuote":true,"nodes":[{"content":"RawAcl(Byte[], Int32)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;An array of byte values that represent an Access Control List (ACL).&lt;/p&gt;\\n","pos":[5966,6045],"source":"\\n<p>An array of byte values that represent an Access Control List (ACL).</p>\\n"},{"content":"\\n&lt;p&gt;The offset in the &lt;em&gt;binaryForm&lt;/em&gt; parameter at which to begin unmarshaling data.&lt;/p&gt;\\n","pos":[6109,6204],"source":"\\n<p>The offset in the <em>binaryForm</em> parameter at which to begin unmarshaling data.</p>\\n"},{"pos":[6701,6713],"content":"BinaryLength","needQuote":true,"nodes":[{"content":"BinaryLength","pos":[0,12]}]},{"pos":[8420,8425],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[9861,9872],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The zero-based index of the ACE to get or set.&lt;/p&gt;\\n","pos":[10667,10724],"source":"\\n<p>The zero-based index of the ACE to get or set.</p>\\n"},{"content":"\\n&lt;p&gt;The ACE at the specified index.&lt;/p&gt;\\n","pos":[10811,10853],"source":"\\n<p>The ACE at the specified index.</p>\\n"},{"pos":[11408,11416],"content":"Revision","needQuote":true,"nodes":[{"content":"Revision","pos":[0,8]}]},{"pos":[12909,12937],"content":"GetBinaryForm(Byte[], Int32)","needQuote":true,"nodes":[{"content":"GetBinaryForm(Byte[], Int32)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The offset at which to start marshaling.&lt;/p&gt;\\n","pos":[14150,14201],"source":"\\n<p>The offset at which to start marshaling.</p>\\n"},{"pos":[15340,15368],"content":"InsertAce(Int32, GenericAce)","needQuote":true,"nodes":[{"content":"InsertAce(Int32, GenericAce)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The ACE to insert.&lt;/p&gt;\\n","pos":[16621,16650],"source":"\\n<p>The ACE to insert.</p>\\n"},{"pos":[17356,17372],"content":"RemoveAce(Int32)","needQuote":true,"nodes":[{"content":"RemoveAce(Int32)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The zero-based index of the ACE to remove.&lt;/p&gt;\\n","pos":[18123,18176],"source":"\\n<p>The zero-based index of the ACE to remove.</p>\\n"},{"pos":[18706,18735],"content":"System.Security.AccessControl","needQuote":true,"nodes":[{"content":"System.Security.AccessControl","pos":[0,29]}]},{"pos":[18935,18941],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19136,19146],"content":"GenericAcl","needQuote":true,"nodes":[{"content":"GenericAcl","pos":[0,10]}]},{"pos":[19378,19389],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[19602,19613],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[19870,19881],"content":"AclRevision","needQuote":true,"nodes":[{"content":"AclRevision","pos":[0,11]}]},{"pos":[20195,20208],"content":"AclRevisionDS","needQuote":true,"nodes":[{"content":"AclRevisionDS","pos":[0,13]}]},{"pos":[20530,20545],"content":"MaxBinaryLength","needQuote":true,"nodes":[{"content":"MaxBinaryLength","pos":[0,15]}]},{"pos":[20872,20886],"content":"IsSynchronized","needQuote":true,"nodes":[{"content":"IsSynchronized","pos":[0,14]}]},{"pos":[21204,21212],"content":"SyncRoot","needQuote":true,"nodes":[{"content":"SyncRoot","pos":[0,8]}]},{"pos":[21566,21593],"content":"CopyTo(GenericAce[], Int32)","needQuote":true,"nodes":[{"content":"CopyTo(GenericAce[], Int32)","pos":[0,27]}]},{"pos":[22011,22017],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[22090,22091],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22168,22178],"content":"GenericAce","needQuote":true,"nodes":[{"content":"GenericAce","pos":[0,10]}]},{"content":"[]","pos":[22245,22247]},{"content":",","pos":[22279,22280]},{"pos":[22334,22339],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[22398,22399],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22551,22557],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[22630,22631],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22708,22718],"content":"GenericAce","needQuote":true,"nodes":[{"content":"GenericAce","pos":[0,10]}]},{"pos":[22784,22786],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[22815,22816]},{"pos":[22870,22875],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[22934,22935],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23326,23341],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[23500,23513],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[23593,23594],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23621,23622],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23724,23737],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[23817,23818],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23845,23846],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24167,24199],"content":"ICollection.CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"ICollection.CopyTo(Array, Int32)","pos":[0,32]}]},{"pos":[24522,24540],"content":"ICollection.CopyTo","needQuote":true,"nodes":[{"content":"ICollection.CopyTo","pos":[0,18]}]},{"pos":[24644,24645],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24694,24699],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[24759,24760]},{"pos":[24814,24819],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[24878,24879],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25032,25069],"content":"System.Collections.ICollection.CopyTo","needQuote":true,"nodes":[{"content":"System.Collections.ICollection.CopyTo","pos":[0,37]}]},{"pos":[25173,25174],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25223,25228],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[25288,25289]},{"pos":[25343,25348],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[25407,25408],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25860,25887],"content":"IEnumerable.GetEnumerator()","needQuote":true,"nodes":[{"content":"IEnumerable.GetEnumerator()","pos":[0,27]}]},{"pos":[26166,26191],"content":"IEnumerable.GetEnumerator","needQuote":true,"nodes":[{"content":"IEnumerable.GetEnumerator","pos":[0,25]}]},{"pos":[26302,26303],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26330,26331],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26464,26508],"content":"System.Collections.IEnumerable.GetEnumerator","needQuote":true,"nodes":[{"content":"System.Collections.IEnumerable.GetEnumerator","pos":[0,44]}]},{"pos":[26619,26620],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26647,26648],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26979,26989],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[27084,27092],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[27161,27162],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27189,27190],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27260,27268],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[27337,27338],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27365,27366],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27549,27563],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[27682,27688],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[27755,27756],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27806,27812],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27872,27873],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27956,27962],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[28029,28030],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28080,28086],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[28146,28147],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28361,28383],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[28531,28537],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[28604,28605],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28655,28661],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[28722,28723]},{"pos":[28778,28784],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[28844,28845],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28942,28948],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[29015,29016],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29066,29072],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[29133,29134]},{"pos":[29189,29195],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[29255,29256],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29501,29532],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[29698,29713],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[29789,29790],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29840,29846],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[29907,29908]},{"pos":[29963,29969],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[30029,30030],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30136,30151],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[30227,30228],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30278,30284],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[30345,30346]},{"pos":[30401,30407],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[30467,30468],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30698,30711],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[30812,30823],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[30895,30896],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30923,30924],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30997,31008],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[31080,31081],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31108,31109],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31284,31293],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[31386,31393],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[31461,31462],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31489,31490],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31559,31566],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[31634,31635],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31662,31663],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31838,31855],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[31964,31979],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[32055,32056],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32083,32084],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32161,32176],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[32252,32253],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32280,32281],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32576,32589],"content":"AsQueryable()","needQuote":true,"nodes":[{"content":"AsQueryable()","pos":[0,13]}]},{"pos":[32706,32717],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[32776,32777],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32804,32805],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32886,32897],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[32956,32957],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32984,32985],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33340,33352],"content":"AsParallel()","needQuote":true,"nodes":[{"content":"AsParallel()","pos":[0,12]}]},{"pos":[33485,33495],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[33562,33563],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33590,33591],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33680,33690],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[33757,33758],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33785,33786],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34127,34142],"content":"Cast<TResult>()","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;()","pos":[0,15],"source":"Cast<TResult>()"}]},{"pos":[34346,34359],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[34421,34422],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34449,34450],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34528,34544],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[34609,34610],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34637,34638],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35016,35033],"content":"OfType<TResult>()","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;()","pos":[0,17],"source":"OfType<TResult>()"}]},{"pos":[35245,35260],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[35324,35325],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35352,35353],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35433,35451],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[35518,35519],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35546,35547],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35782,35788],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[35907,35925],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[36126,36150],"content":"AsQueryable(IEnumerable)","needQuote":true,"nodes":[{"content":"AsQueryable(IEnumerable)","pos":[0,24]}]},{"pos":[36329,36340],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[36399,36400],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36467,36478],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[36555,36556],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36669,36680],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[36739,36740],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36807,36818],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[36895,36896],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37124,37133],"content":"Queryable","needQuote":true,"nodes":[{"content":"Queryable","pos":[0,9]}]},{"pos":[37339,37362],"content":"AsParallel(IEnumerable)","needQuote":true,"nodes":[{"content":"AsParallel(IEnumerable)","pos":[0,23]}]},{"pos":[37557,37567],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[37634,37635],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37702,37713],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[37790,37791],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37912,37922],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[37989,37990],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38057,38068],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[38145,38146],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38399,38417],"content":"ParallelEnumerable","needQuote":true,"nodes":[{"content":"ParallelEnumerable","pos":[0,18]}]},{"pos":[38639,38665],"content":"Cast<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;(IEnumerable)","pos":[0,26],"source":"Cast<TResult>(IEnumerable)"}]},{"pos":[38972,38985],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[39047,39048],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39115,39126],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[39203,39204],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39314,39330],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[39395,39396],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39463,39474],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[39551,39552],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39841,39851],"content":"Enumerable","needQuote":true,"nodes":[{"content":"Enumerable","pos":[0,10]}]},{"pos":[40051,40079],"content":"OfType<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;(IEnumerable)","pos":[0,28],"source":"OfType<TResult>(IEnumerable)"}]},{"pos":[40394,40409],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[40473,40474],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40541,40552],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[40629,40630],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40742,40760],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[40827,40828],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40895,40906],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[40983,40984],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41246,41257],"content":"System.Linq","needQuote":true,"nodes":[{"content":"System.Linq","pos":[0,11]}]},{"pos":[41401,41405],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[41543,41548],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[41653,41659],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[41779,41783],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[41842,41844]},{"pos":[41907,41911],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[41969,41971],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[42178,42190],"content":"BinaryLength","needQuote":true,"nodes":[{"content":"BinaryLength","pos":[0,12]}]},{"pos":[42499,42504],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[42804,42815],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"pos":[43080,43084],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"content":"[","pos":[43156,43157]},{"pos":[43209,43214],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":"]","pos":[43274,43275]},{"pos":[43385,43389],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"pos":[43460,43461],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43510,43515],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[43574,43575],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43864,43874],"content":"GenericAce","needQuote":true,"nodes":[{"content":"GenericAce","pos":[0,10]}]},{"pos":[44147,44155],"content":"Revision","needQuote":true,"nodes":[{"content":"Revision","pos":[0,8]}]},{"pos":[44487,44515],"content":"GetBinaryForm(Byte[], Int32)","needQuote":true,"nodes":[{"content":"GetBinaryForm(Byte[], Int32)","pos":[0,28]}]},{"pos":[44868,44881],"content":"GetBinaryForm","needQuote":true,"nodes":[{"content":"GetBinaryForm","pos":[0,13]}]},{"pos":[44961,44962],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45010,45014],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[45073,45075]},{"content":",","pos":[45107,45108]},{"pos":[45162,45167],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[45226,45227],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45357,45370],"content":"GetBinaryForm","needQuote":true,"nodes":[{"content":"GetBinaryForm","pos":[0,13]}]},{"pos":[45450,45451],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45499,45503],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[45561,45563],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[45592,45593]},{"pos":[45647,45652],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[45711,45712],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46012,46039],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]}],"content":"items:\n- uid: System.Security.AccessControl.RawAcl\n  commentId: T:System.Security.AccessControl.RawAcl\n  id: RawAcl\n  parent: System.Security.AccessControl\n  children:\n  - System.Security.AccessControl.RawAcl.#ctor(System.Byte,System.Int32)\n  - System.Security.AccessControl.RawAcl.#ctor(System.Byte[],System.Int32)\n  - System.Security.AccessControl.RawAcl.BinaryLength\n  - System.Security.AccessControl.RawAcl.Count\n  - System.Security.AccessControl.RawAcl.GetBinaryForm(System.Byte[],System.Int32)\n  - System.Security.AccessControl.RawAcl.InsertAce(System.Int32,System.Security.AccessControl.GenericAce)\n  - System.Security.AccessControl.RawAcl.Item(System.Int32)\n  - System.Security.AccessControl.RawAcl.RemoveAce(System.Int32)\n  - System.Security.AccessControl.RawAcl.Revision\n  langs:\n  - csharp\n  - vb\n  name: RawAcl\n  fullName: System.Security.AccessControl.RawAcl\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RawAcl\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 464\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Represents an Access Control List (ACL).</p>\\n\"\n  syntax:\n    content: 'public sealed class RawAcl : GenericAcl, ICollection, IEnumerable'\n    content.vb: >-\n      Public NotInheritable Class RawAcl\n          Inherits GenericAcl\n          Implements ICollection, IEnumerable\n  inheritance:\n  - System.Object\n  - System.Security.AccessControl.GenericAcl\n  implements:\n  - System.Collections.ICollection\n  - System.Collections.IEnumerable\n  inheritedMembers:\n  - System.Security.AccessControl.GenericAcl.AclRevision\n  - System.Security.AccessControl.GenericAcl.AclRevisionDS\n  - System.Security.AccessControl.GenericAcl.MaxBinaryLength\n  - System.Security.AccessControl.GenericAcl.IsSynchronized\n  - System.Security.AccessControl.GenericAcl.SyncRoot\n  - System.Security.AccessControl.GenericAcl.CopyTo(System.Security.AccessControl.GenericAce[],System.Int32)\n  - System.Security.AccessControl.GenericAcl.GetEnumerator\n  - System.Security.AccessControl.GenericAcl.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.Security.AccessControl.GenericAcl.System#Collections#IEnumerable#GetEnumerator\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: RawAcl\n  extensionMethods:\n  - System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  - System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  - System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  - System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n- uid: System.Security.AccessControl.RawAcl.#ctor(System.Byte,System.Int32)\n  commentId: M:System.Security.AccessControl.RawAcl.#ctor(System.Byte,System.Int32)\n  id: '#ctor(System.Byte,System.Int32)'\n  parent: System.Security.AccessControl.RawAcl\n  langs:\n  - csharp\n  - vb\n  name: RawAcl(Byte, Int32)\n  fullName: System.Security.AccessControl.RawAcl.RawAcl(System.Byte, System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 466\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.AccessControl.RawAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified revision level.</p>\\n\"\n  syntax:\n    content: public RawAcl(byte revision, int capacity)\n    content.vb: Public Sub New(revision As Byte, capacity As Integer)\n    parameters:\n    - id: revision\n      type: System.Byte\n      description: \"\\n<p>The revision level of the new Access Control List (ACL).</p>\\n\"\n    - id: capacity\n      type: System.Int32\n      description: \"\\n<p>The number of Access Control Entries (ACEs) this <xref href=\\\"System.Security.AccessControl.RawAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object can contain. This number is to be used only as a hint.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: RawAcl.RawAcl(Byte, Int32)\n- uid: System.Security.AccessControl.RawAcl.#ctor(System.Byte[],System.Int32)\n  commentId: M:System.Security.AccessControl.RawAcl.#ctor(System.Byte[],System.Int32)\n  id: '#ctor(System.Byte[],System.Int32)'\n  parent: System.Security.AccessControl.RawAcl\n  langs:\n  - csharp\n  - vb\n  name: RawAcl(Byte[], Int32)\n  fullName: System.Security.AccessControl.RawAcl.RawAcl(System.Byte[], System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 467\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.AccessControl.RawAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class from the specified binary form.</p>\\n\"\n  syntax:\n    content: public RawAcl(byte[] binaryForm, int offset)\n    content.vb: Public Sub New(binaryForm As Byte(), offset As Integer)\n    parameters:\n    - id: binaryForm\n      type: System.Byte[]\n      description: \"\\n<p>An array of byte values that represent an Access Control List (ACL).</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The offset in the <em>binaryForm</em> parameter at which to begin unmarshaling data.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.AccessControl.RawAcl.RawAcl(System.Byte(), System.Int32)\n  name.vb: RawAcl(Byte(), Int32)\n  nameWithType: RawAcl.RawAcl(Byte[], Int32)\n  nameWithType.vb: RawAcl.RawAcl(Byte(), Int32)\n- uid: System.Security.AccessControl.RawAcl.BinaryLength\n  commentId: P:System.Security.AccessControl.RawAcl.BinaryLength\n  id: BinaryLength\n  parent: System.Security.AccessControl.RawAcl\n  langs:\n  - csharp\n  - vb\n  name: BinaryLength\n  fullName: System.Security.AccessControl.RawAcl.BinaryLength\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BinaryLength\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 468\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets the length, in bytes, of the binary representation of the current <xref href=\\\"System.Security.AccessControl.RawAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. This length should be used before marshaling the ACL into a binary array with the <xref href=\\\"System.Security.AccessControl.RawAcl.GetBinaryForm(System.Byte[],System.Int32)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method.</p>\\n\"\n  syntax:\n    content: public override int BinaryLength { get; }\n    content.vb: Public Overrides ReadOnly Property BinaryLength As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The length, in bytes, of the binary representation of the current <xref href=\\\"System.Security.AccessControl.RawAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  overridden: System.Security.AccessControl.GenericAcl.BinaryLength\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: RawAcl.BinaryLength\n- uid: System.Security.AccessControl.RawAcl.Count\n  commentId: P:System.Security.AccessControl.RawAcl.Count\n  id: Count\n  parent: System.Security.AccessControl.RawAcl\n  langs:\n  - csharp\n  - vb\n  name: Count\n  fullName: System.Security.AccessControl.RawAcl.Count\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Count\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 469\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets the number of access control entries (ACEs) in the current <xref href=\\\"System.Security.AccessControl.RawAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override int Count { get; }\n    content.vb: Public Overrides ReadOnly Property Count As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of ACEs in the current <xref href=\\\"System.Security.AccessControl.RawAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  overridden: System.Security.AccessControl.GenericAcl.Count\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: RawAcl.Count\n- uid: System.Security.AccessControl.RawAcl.Item(System.Int32)\n  commentId: P:System.Security.AccessControl.RawAcl.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Security.AccessControl.RawAcl\n  langs:\n  - csharp\n  - vb\n  name: Item[Int32]\n  fullName: System.Security.AccessControl.RawAcl.Item[System.Int32]\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: this[]\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 470\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets or sets the Access Control Entry (ACE) at the specified index.</p>\\n\"\n  syntax:\n    content: public override GenericAce this[int index] { get; set; }\n    content.vb: Public Overrides Property Item(index As Integer) As GenericAce\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the ACE to get or set.</p>\\n\"\n    return:\n      type: System.Security.AccessControl.GenericAce\n      description: \"\\n<p>The ACE at the specified index.</p>\\n\"\n  overridden: System.Security.AccessControl.GenericAcl.Item(System.Int32)\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Security.AccessControl.RawAcl.Item(System.Int32)\n  name.vb: Item(Int32)\n  nameWithType: RawAcl.Item[Int32]\n  nameWithType.vb: RawAcl.Item(Int32)\n- uid: System.Security.AccessControl.RawAcl.Revision\n  commentId: P:System.Security.AccessControl.RawAcl.Revision\n  id: Revision\n  parent: System.Security.AccessControl.RawAcl\n  langs:\n  - csharp\n  - vb\n  name: Revision\n  fullName: System.Security.AccessControl.RawAcl.Revision\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Revision\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 471\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets the revision level of the <xref href=\\\"System.Security.AccessControl.RawAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override byte Revision { get; }\n    content.vb: Public Overrides ReadOnly Property Revision As Byte\n    parameters: []\n    return:\n      type: System.Byte\n      description: \"\\n<p>A byte value that specifies the revision level of the <xref href=\\\"System.Security.AccessControl.RawAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.Security.AccessControl.GenericAcl.Revision\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: RawAcl.Revision\n- uid: System.Security.AccessControl.RawAcl.GetBinaryForm(System.Byte[],System.Int32)\n  commentId: M:System.Security.AccessControl.RawAcl.GetBinaryForm(System.Byte[],System.Int32)\n  id: GetBinaryForm(System.Byte[],System.Int32)\n  parent: System.Security.AccessControl.RawAcl\n  langs:\n  - csharp\n  - vb\n  name: GetBinaryForm(Byte[], Int32)\n  fullName: System.Security.AccessControl.RawAcl.GetBinaryForm(System.Byte[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetBinaryForm\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 472\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Marshals the contents of the <xref href=\\\"System.Security.AccessControl.RawAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object into the specified byte array beginning at the specified offset.</p>\\n\"\n  syntax:\n    content: public override void GetBinaryForm(byte[] binaryForm, int offset)\n    content.vb: Public Overrides Sub GetBinaryForm(binaryForm As Byte(), offset As Integer)\n    parameters:\n    - id: binaryForm\n      type: System.Byte[]\n      description: \"\\n<p>The byte array into which the contents of the <xref href=\\\"System.Security.AccessControl.RawAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is marshaled.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The offset at which to start marshaling.</p>\\n\"\n  overridden: System.Security.AccessControl.GenericAcl.GetBinaryForm(System.Byte[],System.Int32)\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is negative or too high to allow the entire <xref href=\\\"System.Security.AccessControl.RawAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to be copied into <em>array</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Security.AccessControl.RawAcl.GetBinaryForm(System.Byte(), System.Int32)\n  name.vb: GetBinaryForm(Byte(), Int32)\n  nameWithType: RawAcl.GetBinaryForm(Byte[], Int32)\n  nameWithType.vb: RawAcl.GetBinaryForm(Byte(), Int32)\n- uid: System.Security.AccessControl.RawAcl.InsertAce(System.Int32,System.Security.AccessControl.GenericAce)\n  commentId: M:System.Security.AccessControl.RawAcl.InsertAce(System.Int32,System.Security.AccessControl.GenericAce)\n  id: InsertAce(System.Int32,System.Security.AccessControl.GenericAce)\n  parent: System.Security.AccessControl.RawAcl\n  langs:\n  - csharp\n  - vb\n  name: InsertAce(Int32, GenericAce)\n  fullName: System.Security.AccessControl.RawAcl.InsertAce(System.Int32, System.Security.AccessControl.GenericAce)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: InsertAce\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 473\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Inserts the specified Access Control Entry (ACE) at the specified index.</p>\\n\"\n  syntax:\n    content: public void InsertAce(int index, GenericAce ace)\n    content.vb: Public Sub InsertAce(index As Integer, ace As GenericAce)\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The position at which to add the new ACE. Specify the value of the <xref href=\\\"System.Security.AccessControl.RawAcl.Count\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property to insert an ACE at the end of the <xref href=\\\"System.Security.AccessControl.RawAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    - id: ace\n      type: System.Security.AccessControl.GenericAce\n      description: \"\\n<p>The ACE to insert.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is negative or too high to allow the entire <xref href=\\\"System.Security.AccessControl.GenericAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to be copied into <em>array</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: RawAcl.InsertAce(Int32, GenericAce)\n- uid: System.Security.AccessControl.RawAcl.RemoveAce(System.Int32)\n  commentId: M:System.Security.AccessControl.RawAcl.RemoveAce(System.Int32)\n  id: RemoveAce(System.Int32)\n  parent: System.Security.AccessControl.RawAcl\n  langs:\n  - csharp\n  - vb\n  name: RemoveAce(Int32)\n  fullName: System.Security.AccessControl.RawAcl.RemoveAce(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RemoveAce\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 474\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Removes the Access Control Entry (ACE) at the specified location.</p>\\n\"\n  syntax:\n    content: public void RemoveAce(int index)\n    content.vb: Public Sub RemoveAce(index As Integer)\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the ACE to remove.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The value of the <em>index</em> parameter is higher than the value of the <xref href=\\\"System.Security.AccessControl.RawAcl.Count\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property minus one or is negative.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: RawAcl.RemoveAce(Int32)\nreferences:\n- uid: System.Security.AccessControl\n  isExternal: false\n  name: System.Security.AccessControl\n  fullName: System.Security.AccessControl\n  commentId: N:System.Security.AccessControl\n  nameWithType: System.Security.AccessControl\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Security.AccessControl.GenericAcl\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: GenericAcl\n  fullName: System.Security.AccessControl.GenericAcl\n  commentId: T:System.Security.AccessControl.GenericAcl\n  nameWithType: GenericAcl\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  fullName: System.Collections.ICollection\n  commentId: T:System.Collections.ICollection\n  nameWithType: ICollection\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  fullName: System.Collections.IEnumerable\n  commentId: T:System.Collections.IEnumerable\n  nameWithType: IEnumerable\n- uid: System.Security.AccessControl.GenericAcl.AclRevision\n  parent: System.Security.AccessControl.GenericAcl\n  isExternal: false\n  name: AclRevision\n  fullName: System.Security.AccessControl.GenericAcl.AclRevision\n  commentId: F:System.Security.AccessControl.GenericAcl.AclRevision\n  nameWithType: GenericAcl.AclRevision\n- uid: System.Security.AccessControl.GenericAcl.AclRevisionDS\n  parent: System.Security.AccessControl.GenericAcl\n  isExternal: false\n  name: AclRevisionDS\n  fullName: System.Security.AccessControl.GenericAcl.AclRevisionDS\n  commentId: F:System.Security.AccessControl.GenericAcl.AclRevisionDS\n  nameWithType: GenericAcl.AclRevisionDS\n- uid: System.Security.AccessControl.GenericAcl.MaxBinaryLength\n  parent: System.Security.AccessControl.GenericAcl\n  isExternal: false\n  name: MaxBinaryLength\n  fullName: System.Security.AccessControl.GenericAcl.MaxBinaryLength\n  commentId: F:System.Security.AccessControl.GenericAcl.MaxBinaryLength\n  nameWithType: GenericAcl.MaxBinaryLength\n- uid: System.Security.AccessControl.GenericAcl.IsSynchronized\n  parent: System.Security.AccessControl.GenericAcl\n  isExternal: false\n  name: IsSynchronized\n  fullName: System.Security.AccessControl.GenericAcl.IsSynchronized\n  commentId: P:System.Security.AccessControl.GenericAcl.IsSynchronized\n  nameWithType: GenericAcl.IsSynchronized\n- uid: System.Security.AccessControl.GenericAcl.SyncRoot\n  parent: System.Security.AccessControl.GenericAcl\n  isExternal: false\n  name: SyncRoot\n  fullName: System.Security.AccessControl.GenericAcl.SyncRoot\n  commentId: P:System.Security.AccessControl.GenericAcl.SyncRoot\n  nameWithType: GenericAcl.SyncRoot\n- uid: System.Security.AccessControl.GenericAcl.CopyTo(System.Security.AccessControl.GenericAce[],System.Int32)\n  parent: System.Security.AccessControl.GenericAcl\n  isExternal: true\n  name: CopyTo(GenericAce[], Int32)\n  fullName: System.Security.AccessControl.GenericAcl.CopyTo(System.Security.AccessControl.GenericAce[], System.Int32)\n  fullname.vb: System.Security.AccessControl.GenericAcl.CopyTo(System.Security.AccessControl.GenericAce(), System.Int32)\n  name.vb: CopyTo(GenericAce(), Int32)\n  spec.csharp:\n  - uid: System.Security.AccessControl.GenericAcl.CopyTo(System.Security.AccessControl.GenericAce[],System.Int32)\n    name: CopyTo\n    fullName: System.Security.AccessControl.GenericAcl.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Security.AccessControl.GenericAce\n    name: GenericAce\n    fullName: System.Security.AccessControl.GenericAce\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.AccessControl.GenericAcl.CopyTo(System.Security.AccessControl.GenericAce[],System.Int32)\n    name: CopyTo\n    fullName: System.Security.AccessControl.GenericAcl.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Security.AccessControl.GenericAce\n    name: GenericAce\n    fullName: System.Security.AccessControl.GenericAce\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.AccessControl.GenericAcl.CopyTo(System.Security.AccessControl.GenericAce[],System.Int32)\n  nameWithType: GenericAcl.CopyTo(GenericAce[], Int32)\n  nameWithType.vb: GenericAcl.CopyTo(GenericAce(), Int32)\n- uid: System.Security.AccessControl.GenericAcl.GetEnumerator\n  parent: System.Security.AccessControl.GenericAcl\n  isExternal: false\n  name: GetEnumerator()\n  fullName: System.Security.AccessControl.GenericAcl.GetEnumerator()\n  spec.csharp:\n  - uid: System.Security.AccessControl.GenericAcl.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Security.AccessControl.GenericAcl.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.AccessControl.GenericAcl.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Security.AccessControl.GenericAcl.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.AccessControl.GenericAcl.GetEnumerator\n  nameWithType: GenericAcl.GetEnumerator()\n- uid: System.Security.AccessControl.GenericAcl.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  parent: System.Security.AccessControl.GenericAcl\n  isExternal: true\n  name: ICollection.CopyTo(Array, Int32)\n  fullName: System.Security.AccessControl.GenericAcl.System.Collections.ICollection.CopyTo(System.Array, System.Int32)\n  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)\n  spec.csharp:\n  - uid: System.Security.AccessControl.GenericAcl.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n    name: ICollection.CopyTo\n    fullName: System.Security.AccessControl.GenericAcl.System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.AccessControl.GenericAcl.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n    name: System.Collections.ICollection.CopyTo\n    fullName: System.Security.AccessControl.GenericAcl.System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.AccessControl.GenericAcl.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  nameWithType: GenericAcl.ICollection.CopyTo(Array, Int32)\n  nameWithType.vb: GenericAcl.System.Collections.ICollection.CopyTo(Array, Int32)\n- uid: System.Security.AccessControl.GenericAcl.System#Collections#IEnumerable#GetEnumerator\n  parent: System.Security.AccessControl.GenericAcl\n  isExternal: false\n  name: IEnumerable.GetEnumerator()\n  fullName: System.Security.AccessControl.GenericAcl.System.Collections.IEnumerable.GetEnumerator()\n  name.vb: System.Collections.IEnumerable.GetEnumerator()\n  spec.csharp:\n  - uid: System.Security.AccessControl.GenericAcl.System#Collections#IEnumerable#GetEnumerator\n    name: IEnumerable.GetEnumerator\n    fullName: System.Security.AccessControl.GenericAcl.System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.AccessControl.GenericAcl.System#Collections#IEnumerable#GetEnumerator\n    name: System.Collections.IEnumerable.GetEnumerator\n    fullName: System.Security.AccessControl.GenericAcl.System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.AccessControl.GenericAcl.System#Collections#IEnumerable#GetEnumerator\n  nameWithType: GenericAcl.IEnumerable.GetEnumerator()\n  nameWithType.vb: GenericAcl.System.Collections.IEnumerable.GetEnumerator()\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  parent: System.Linq.Queryable\n  definition: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  name: AsQueryable()\n  fullName: System.Linq.Queryable.AsQueryable()\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  nameWithType: Queryable.AsQueryable()\n- uid: System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  parent: System.Linq.ParallelEnumerable\n  definition: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  name: AsParallel()\n  fullName: System.Linq.ParallelEnumerable.AsParallel()\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  nameWithType: ParallelEnumerable.AsParallel()\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  name: Cast<TResult>()\n  fullName: System.Linq.Enumerable.Cast<TResult>()\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)()\n  name.vb: Cast(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>()\n  nameWithType.vb: Enumerable.Cast(Of TResult)()\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  name: OfType<TResult>()\n  fullName: System.Linq.Enumerable.OfType<TResult>()\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)()\n  name.vb: OfType(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>()\n  nameWithType.vb: Enumerable.OfType(Of TResult)()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  commentId: N:System.Collections\n  nameWithType: System.Collections\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsQueryable(IEnumerable)\n  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n- uid: System.Linq.Queryable\n  parent: System.Linq\n  isExternal: false\n  name: Queryable\n  fullName: System.Linq.Queryable\n  commentId: T:System.Linq.Queryable\n  nameWithType: Queryable\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsParallel(IEnumerable)\n  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n- uid: System.Linq.ParallelEnumerable\n  parent: System.Linq\n  isExternal: false\n  name: ParallelEnumerable\n  fullName: System.Linq.ParallelEnumerable\n  commentId: T:System.Linq.ParallelEnumerable\n  nameWithType: ParallelEnumerable\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: Cast<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)\n  name.vb: Cast(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.Cast(Of TResult)(IEnumerable)\n- uid: System.Linq.Enumerable\n  parent: System.Linq\n  isExternal: false\n  name: Enumerable\n  fullName: System.Linq.Enumerable\n  commentId: T:System.Linq.Enumerable\n  nameWithType: Enumerable\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: OfType<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)\n  name.vb: OfType(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.OfType(Of TResult)(IEnumerable)\n- uid: System.Linq\n  isExternal: false\n  name: System.Linq\n  fullName: System.Linq\n  commentId: N:System.Linq\n  nameWithType: System.Linq\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  fullName: System.Byte\n  commentId: T:System.Byte\n  nameWithType: Byte\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Security.AccessControl.GenericAcl.BinaryLength\n  parent: System.Security.AccessControl.GenericAcl\n  isExternal: false\n  name: BinaryLength\n  fullName: System.Security.AccessControl.GenericAcl.BinaryLength\n  commentId: P:System.Security.AccessControl.GenericAcl.BinaryLength\n  nameWithType: GenericAcl.BinaryLength\n- uid: System.Security.AccessControl.GenericAcl.Count\n  parent: System.Security.AccessControl.GenericAcl\n  isExternal: false\n  name: Count\n  fullName: System.Security.AccessControl.GenericAcl.Count\n  commentId: P:System.Security.AccessControl.GenericAcl.Count\n  nameWithType: GenericAcl.Count\n- uid: System.Security.AccessControl.GenericAcl.Item(System.Int32)\n  parent: System.Security.AccessControl.GenericAcl\n  isExternal: true\n  name: Item[Int32]\n  fullName: System.Security.AccessControl.GenericAcl.Item[System.Int32]\n  fullname.vb: System.Security.AccessControl.GenericAcl.Item(System.Int32)\n  name.vb: Item(Int32)\n  spec.csharp:\n  - uid: System.Security.AccessControl.GenericAcl.Item(System.Int32)\n    name: Item\n    fullName: System.Security.AccessControl.GenericAcl.Item\n  - name: '['\n    fullName: '['\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ']'\n    fullName: ']'\n  spec.vb:\n  - uid: System.Security.AccessControl.GenericAcl.Item(System.Int32)\n    name: Item\n    fullName: System.Security.AccessControl.GenericAcl.Item\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: P:System.Security.AccessControl.GenericAcl.Item(System.Int32)\n  nameWithType: GenericAcl.Item[Int32]\n  nameWithType.vb: GenericAcl.Item(Int32)\n- uid: System.Security.AccessControl.GenericAce\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: GenericAce\n  fullName: System.Security.AccessControl.GenericAce\n  commentId: T:System.Security.AccessControl.GenericAce\n  nameWithType: GenericAce\n- uid: System.Security.AccessControl.GenericAcl.Revision\n  parent: System.Security.AccessControl.GenericAcl\n  isExternal: false\n  name: Revision\n  fullName: System.Security.AccessControl.GenericAcl.Revision\n  commentId: P:System.Security.AccessControl.GenericAcl.Revision\n  nameWithType: GenericAcl.Revision\n- uid: System.Security.AccessControl.GenericAcl.GetBinaryForm(System.Byte[],System.Int32)\n  parent: System.Security.AccessControl.GenericAcl\n  isExternal: true\n  name: GetBinaryForm(Byte[], Int32)\n  fullName: System.Security.AccessControl.GenericAcl.GetBinaryForm(System.Byte[], System.Int32)\n  fullname.vb: System.Security.AccessControl.GenericAcl.GetBinaryForm(System.Byte(), System.Int32)\n  name.vb: GetBinaryForm(Byte(), Int32)\n  spec.csharp:\n  - uid: System.Security.AccessControl.GenericAcl.GetBinaryForm(System.Byte[],System.Int32)\n    name: GetBinaryForm\n    fullName: System.Security.AccessControl.GenericAcl.GetBinaryForm\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.AccessControl.GenericAcl.GetBinaryForm(System.Byte[],System.Int32)\n    name: GetBinaryForm\n    fullName: System.Security.AccessControl.GenericAcl.GetBinaryForm\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.AccessControl.GenericAcl.GetBinaryForm(System.Byte[],System.Int32)\n  nameWithType: GenericAcl.GetBinaryForm(Byte[], Int32)\n  nameWithType.vb: GenericAcl.GetBinaryForm(Byte(), Int32)\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n"}