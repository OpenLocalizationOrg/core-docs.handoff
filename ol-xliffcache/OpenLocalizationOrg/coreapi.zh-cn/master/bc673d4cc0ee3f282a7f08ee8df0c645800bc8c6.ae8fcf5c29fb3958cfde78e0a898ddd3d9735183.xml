{"nodes":[{"pos":[466,477],"content":"XmlNodeList","needQuote":true,"nodes":[{"content":"XmlNodeList","pos":[0,11]}]},{"pos":[2116,2129],"content":"XmlNodeList()","needQuote":true,"nodes":[{"content":"XmlNodeList()","pos":[0,13]}]},{"pos":[3020,3025],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"content":"\\n&lt;p&gt;The number of nodes in the &lt;strong&gt;XmlNodeList&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[3701,3768],"source":"\\n<p>The number of nodes in the <strong>XmlNodeList</strong>.</p>\\n"},{"pos":[4118,4131],"content":"ItemOf[Int32]","needQuote":true,"nodes":[{"content":"ItemOf[Int32]","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The zero-based index into the list of nodes.&lt;/p&gt;\\n","pos":[4893,4948],"source":"\\n<p>The zero-based index into the list of nodes.</p>\\n"},{"pos":[5942,5957],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"content":"\\n&lt;p&gt;An enumerator used to iterate through the collection of nodes.&lt;/p&gt;\\n","pos":[6664,6737],"source":"\\n<p>An enumerator used to iterate through the collection of nodes.</p>\\n"},{"pos":[7133,7144],"content":"Item(Int32)","needQuote":true,"nodes":[{"content":"Item(Int32)","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The zero-based index into the list of nodes.&lt;/p&gt;\\n","pos":[7819,7874],"source":"\\n<p>The zero-based index into the list of nodes.</p>\\n"},{"pos":[8532,8556],"content":"PrivateDisposeNodeList()","needQuote":true,"nodes":[{"content":"PrivateDisposeNodeList()","pos":[0,24]}]},{"pos":[9564,9585],"content":"IDisposable.Dispose()","needQuote":true,"nodes":[{"content":"IDisposable.Dispose()","pos":[0,21]}]},{"pos":[10542,10552],"content":"System.Xml","needQuote":true,"nodes":[{"content":"System.Xml","pos":[0,10]}]},{"pos":[10695,10701],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10875,10886],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[11075,11086],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[11261,11271],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[11366,11374],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[11443,11444],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11471,11472],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11542,11550],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[11619,11620],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11647,11648],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11831,11845],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[11964,11970],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[12037,12038],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12088,12094],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12154,12155],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12238,12244],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[12311,12312],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12362,12368],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12428,12429],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12643,12665],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[12813,12819],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[12886,12887],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12937,12943],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[13004,13005]},{"pos":[13060,13066],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13126,13127],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13224,13230],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[13297,13298],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13348,13354],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[13415,13416]},{"pos":[13471,13477],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13537,13538],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13783,13814],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[13980,13995],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[14071,14072],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14122,14128],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[14189,14190]},{"pos":[14245,14251],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14311,14312],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14418,14433],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[14509,14510],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14560,14566],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[14627,14628]},{"pos":[14683,14689],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14749,14750],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14980,14993],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[15094,15105],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[15177,15178],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15205,15206],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15279,15290],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[15362,15363],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15390,15391],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15566,15575],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[15668,15675],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[15743,15744],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15771,15772],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15841,15848],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[15916,15917],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15944,15945],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16120,16137],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[16246,16261],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[16337,16338],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16365,16366],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16443,16458],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[16534,16535],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16562,16563],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16858,16871],"content":"AsQueryable()","needQuote":true,"nodes":[{"content":"AsQueryable()","pos":[0,13]}]},{"pos":[16988,16999],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[17058,17059],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17086,17087],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17168,17179],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[17238,17239],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17266,17267],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17622,17634],"content":"AsParallel()","needQuote":true,"nodes":[{"content":"AsParallel()","pos":[0,12]}]},{"pos":[17767,17777],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[17844,17845],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17872,17873],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17962,17972],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[18039,18040],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18067,18068],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18409,18424],"content":"Cast<TResult>()","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;()","pos":[0,15],"source":"Cast<TResult>()"}]},{"pos":[18628,18641],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[18703,18704],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18731,18732],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18810,18826],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[18891,18892],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18919,18920],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19298,19315],"content":"OfType<TResult>()","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;()","pos":[0,17],"source":"OfType<TResult>()"}]},{"pos":[19527,19542],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[19606,19607],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19634,19635],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19715,19733],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[19800,19801],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19828,19829],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20064,20070],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[20189,20207],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[20408,20432],"content":"AsQueryable(IEnumerable)","needQuote":true,"nodes":[{"content":"AsQueryable(IEnumerable)","pos":[0,24]}]},{"pos":[20611,20622],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[20681,20682],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20749,20760],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[20837,20838],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20951,20962],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[21021,21022],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21089,21100],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[21177,21178],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21406,21415],"content":"Queryable","needQuote":true,"nodes":[{"content":"Queryable","pos":[0,9]}]},{"pos":[21621,21644],"content":"AsParallel(IEnumerable)","needQuote":true,"nodes":[{"content":"AsParallel(IEnumerable)","pos":[0,23]}]},{"pos":[21839,21849],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[21916,21917],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21984,21995],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[22072,22073],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22194,22204],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[22271,22272],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22339,22350],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[22427,22428],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22681,22699],"content":"ParallelEnumerable","needQuote":true,"nodes":[{"content":"ParallelEnumerable","pos":[0,18]}]},{"pos":[22921,22947],"content":"Cast<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;(IEnumerable)","pos":[0,26],"source":"Cast<TResult>(IEnumerable)"}]},{"pos":[23254,23267],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[23329,23330],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23397,23408],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[23485,23486],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23596,23612],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[23677,23678],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23745,23756],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[23833,23834],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24123,24133],"content":"Enumerable","needQuote":true,"nodes":[{"content":"Enumerable","pos":[0,10]}]},{"pos":[24333,24361],"content":"OfType<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;(IEnumerable)","pos":[0,28],"source":"OfType<TResult>(IEnumerable)"}]},{"pos":[24676,24691],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[24755,24756],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24823,24834],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[24911,24912],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25024,25042],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[25109,25110],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25177,25188],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[25265,25266],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25528,25539],"content":"System.Linq","needQuote":true,"nodes":[{"content":"System.Linq","pos":[0,11]}]},{"pos":[25684,25689],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[25840,25847],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"pos":[26058,26073],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[26212,26225],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[26295,26296],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26323,26324],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26416,26429],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[26499,26500],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26527,26528],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26744,26755],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[26964,26973],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[27076,27083],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[27135,27136],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27163,27164],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27238,27245],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[27297,27298],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27325,27326],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]}],"content":"items:\n- uid: System.Xml.XmlNodeList\n  commentId: T:System.Xml.XmlNodeList\n  id: XmlNodeList\n  parent: System.Xml\n  children:\n  - System.Xml.XmlNodeList.#ctor\n  - System.Xml.XmlNodeList.Count\n  - System.Xml.XmlNodeList.GetEnumerator\n  - System.Xml.XmlNodeList.Item(System.Int32)\n  - System.Xml.XmlNodeList.ItemOf(System.Int32)\n  - System.Xml.XmlNodeList.PrivateDisposeNodeList\n  - System.Xml.XmlNodeList.System#IDisposable#Dispose\n  langs:\n  - csharp\n  - vb\n  name: XmlNodeList\n  fullName: System.Xml.XmlNodeList\n  type: Class\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: XmlNodeList\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 301\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Represents an ordered collection of nodes.</p>\\n\"\n  syntax:\n    content: 'public abstract class XmlNodeList : IEnumerable, IDisposable'\n    content.vb: >-\n      Public MustInherit Class XmlNodeList\n          Implements IEnumerable, IDisposable\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.IEnumerable\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: XmlNodeList\n  extensionMethods:\n  - System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  - System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  - System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  - System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n- uid: System.Xml.XmlNodeList.#ctor\n  commentId: M:System.Xml.XmlNodeList.#ctor\n  id: '#ctor'\n  parent: System.Xml.XmlNodeList\n  langs:\n  - csharp\n  - vb\n  name: XmlNodeList()\n  fullName: System.Xml.XmlNodeList.XmlNodeList()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 303\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Xml.XmlNodeList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: protected XmlNodeList()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: XmlNodeList.XmlNodeList()\n- uid: System.Xml.XmlNodeList.Count\n  commentId: P:System.Xml.XmlNodeList.Count\n  id: Count\n  parent: System.Xml.XmlNodeList\n  langs:\n  - csharp\n  - vb\n  name: Count\n  fullName: System.Xml.XmlNodeList.Count\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Count\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 304\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the number of nodes in the <strong>XmlNodeList</strong>.</p>\\n\"\n  syntax:\n    content: public abstract int Count { get; }\n    content.vb: Public MustOverride ReadOnly Property Count As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of nodes in the <strong>XmlNodeList</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: XmlNodeList.Count\n- uid: System.Xml.XmlNodeList.ItemOf(System.Int32)\n  commentId: P:System.Xml.XmlNodeList.ItemOf(System.Int32)\n  id: ItemOf(System.Int32)\n  parent: System.Xml.XmlNodeList\n  langs:\n  - csharp\n  - vb\n  name: ItemOf[Int32]\n  fullName: System.Xml.XmlNodeList.ItemOf[System.Int32]\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: this[]\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 305\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets a node at the given index.</p>\\n\"\n  syntax:\n    content: >-\n      [IndexerName(\"ItemOf\")]\n\n      public virtual XmlNode this[int i] { get; }\n    content.vb: >-\n      <IndexerName(\"ItemOf\")>\n\n      Public Overridable ReadOnly Property ItemOf(i As Integer) As XmlNode\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The zero-based index into the list of nodes.</p>\\n\"\n    return:\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The <xref href=\\\"System.Xml.XmlNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the specified index in the collection. If index is greater than or equal to the number of nodes in the list, this returns <strong>null</strong>.</p>\\n\"\n  attributes:\n  - type: System.Runtime.CompilerServices.IndexerNameAttribute\n    ctor: System.Runtime.CompilerServices.IndexerNameAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: ItemOf\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  fullName.vb: System.Xml.XmlNodeList.ItemOf(System.Int32)\n  name.vb: ItemOf(Int32)\n  nameWithType: XmlNodeList.ItemOf[Int32]\n  nameWithType.vb: XmlNodeList.ItemOf(Int32)\n- uid: System.Xml.XmlNodeList.GetEnumerator\n  commentId: M:System.Xml.XmlNodeList.GetEnumerator\n  id: GetEnumerator\n  parent: System.Xml.XmlNodeList\n  langs:\n  - csharp\n  - vb\n  name: GetEnumerator()\n  fullName: System.Xml.XmlNodeList.GetEnumerator()\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetEnumerator\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 307\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets an enumerator that iterates through the collection of nodes.</p>\\n\"\n  syntax:\n    content: public abstract IEnumerator GetEnumerator()\n    content.vb: Public MustOverride Function GetEnumerator As IEnumerator\n    return:\n      type: System.Collections.IEnumerator\n      description: \"\\n<p>An enumerator used to iterate through the collection of nodes.</p>\\n\"\n  implements:\n  - System.Collections.IEnumerable.GetEnumerator\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: XmlNodeList.GetEnumerator()\n- uid: System.Xml.XmlNodeList.Item(System.Int32)\n  commentId: M:System.Xml.XmlNodeList.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Xml.XmlNodeList\n  langs:\n  - csharp\n  - vb\n  name: Item(Int32)\n  fullName: System.Xml.XmlNodeList.Item(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Item\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 308\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Retrieves a node at the given index.</p>\\n\"\n  syntax:\n    content: public abstract XmlNode Item(int index)\n    content.vb: Public MustOverride Function Item(index As Integer) As XmlNode\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index into the list of nodes.</p>\\n\"\n    return:\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The <xref href=\\\"System.Xml.XmlNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the specified index in the collection. If <em>index</em> is greater than or equal to the number of nodes in the list, this returns <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: XmlNodeList.Item(Int32)\n- uid: System.Xml.XmlNodeList.PrivateDisposeNodeList\n  commentId: M:System.Xml.XmlNodeList.PrivateDisposeNodeList\n  id: PrivateDisposeNodeList\n  parent: System.Xml.XmlNodeList\n  langs:\n  - csharp\n  - vb\n  name: PrivateDisposeNodeList()\n  fullName: System.Xml.XmlNodeList.PrivateDisposeNodeList()\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PrivateDisposeNodeList\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 309\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Disposes resources in the node list privately.</p>\\n\"\n  syntax:\n    content: protected virtual void PrivateDisposeNodeList()\n    content.vb: Protected Overridable Sub PrivateDisposeNodeList\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: XmlNodeList.PrivateDisposeNodeList()\n- uid: System.Xml.XmlNodeList.System#IDisposable#Dispose\n  commentId: M:System.Xml.XmlNodeList.System#IDisposable#Dispose\n  id: System#IDisposable#Dispose\n  isEii: true\n  parent: System.Xml.XmlNodeList\n  langs:\n  - csharp\n  - vb\n  name: IDisposable.Dispose()\n  fullName: System.Xml.XmlNodeList.System.IDisposable.Dispose()\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.IDisposable.Dispose\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 310\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Releases all resources used by the <xref href=\\\"System.Xml.XmlNodeList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: void IDisposable.Dispose()\n    content.vb: Sub System.IDisposable.Dispose Implements IDisposable.Dispose\n  implements:\n  - System.IDisposable.Dispose\n  name.vb: System.IDisposable.Dispose()\n  nameWithType: XmlNodeList.IDisposable.Dispose()\n  nameWithType.vb: XmlNodeList.System.IDisposable.Dispose()\nreferences:\n- uid: System.Xml\n  isExternal: false\n  name: System.Xml\n  fullName: System.Xml\n  commentId: N:System.Xml\n  nameWithType: System.Xml\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  fullName: System.Collections.IEnumerable\n  commentId: T:System.Collections.IEnumerable\n  nameWithType: IEnumerable\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  commentId: T:System.IDisposable\n  nameWithType: IDisposable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  parent: System.Linq.Queryable\n  definition: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  name: AsQueryable()\n  fullName: System.Linq.Queryable.AsQueryable()\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  nameWithType: Queryable.AsQueryable()\n- uid: System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  parent: System.Linq.ParallelEnumerable\n  definition: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  name: AsParallel()\n  fullName: System.Linq.ParallelEnumerable.AsParallel()\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  nameWithType: ParallelEnumerable.AsParallel()\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  name: Cast<TResult>()\n  fullName: System.Linq.Enumerable.Cast<TResult>()\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)()\n  name.vb: Cast(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>()\n  nameWithType.vb: Enumerable.Cast(Of TResult)()\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  name: OfType<TResult>()\n  fullName: System.Linq.Enumerable.OfType<TResult>()\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)()\n  name.vb: OfType(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>()\n  nameWithType.vb: Enumerable.OfType(Of TResult)()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  commentId: N:System.Collections\n  nameWithType: System.Collections\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsQueryable(IEnumerable)\n  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n- uid: System.Linq.Queryable\n  parent: System.Linq\n  isExternal: false\n  name: Queryable\n  fullName: System.Linq.Queryable\n  commentId: T:System.Linq.Queryable\n  nameWithType: Queryable\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsParallel(IEnumerable)\n  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n- uid: System.Linq.ParallelEnumerable\n  parent: System.Linq\n  isExternal: false\n  name: ParallelEnumerable\n  fullName: System.Linq.ParallelEnumerable\n  commentId: T:System.Linq.ParallelEnumerable\n  nameWithType: ParallelEnumerable\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: Cast<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)\n  name.vb: Cast(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.Cast(Of TResult)(IEnumerable)\n- uid: System.Linq.Enumerable\n  parent: System.Linq\n  isExternal: false\n  name: Enumerable\n  fullName: System.Linq.Enumerable\n  commentId: T:System.Linq.Enumerable\n  nameWithType: Enumerable\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: OfType<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)\n  name.vb: OfType(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.OfType(Of TResult)(IEnumerable)\n- uid: System.Linq\n  isExternal: false\n  name: System.Linq\n  fullName: System.Linq\n  commentId: N:System.Linq\n  nameWithType: System.Linq\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Xml.XmlNode\n  parent: System.Xml\n  isExternal: false\n  name: XmlNode\n  fullName: System.Xml.XmlNode\n  commentId: T:System.Xml.XmlNode\n  nameWithType: XmlNode\n- uid: System.Collections.IEnumerable.GetEnumerator\n  parent: System.Collections.IEnumerable\n  isExternal: false\n  name: GetEnumerator()\n  fullName: System.Collections.IEnumerable.GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Collections.IEnumerable.GetEnumerator\n  nameWithType: IEnumerable.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  fullName: System.Collections.IEnumerator\n  commentId: T:System.Collections.IEnumerator\n  nameWithType: IEnumerator\n- uid: System.IDisposable.Dispose\n  parent: System.IDisposable\n  isExternal: false\n  name: Dispose()\n  fullName: System.IDisposable.Dispose()\n  spec.csharp:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.IDisposable.Dispose\n  nameWithType: IDisposable.Dispose()\n"}