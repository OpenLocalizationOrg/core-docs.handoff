{"nodes":[{"pos":[3092,3103],"content":"XmlDocument","needQuote":true,"nodes":[{"content":"XmlDocument","pos":[0,11]}]},{"pos":[6081,6094],"content":"XmlDocument()","needQuote":true,"nodes":[{"content":"XmlDocument()","pos":[0,13]}]},{"pos":[7308,7338],"content":"XmlDocument(XmlImplementation)","needQuote":true,"nodes":[{"content":"XmlDocument(XmlImplementation)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The &lt;strong&gt;XmlImplementation&lt;/strong&gt; to use.","pos":[8183,8234],"source":"\\n<p>The <strong>XmlImplementation</strong> to use."},{"content":"&lt;/p&gt;\\n","pos":[8235,8241],"source":" </p>\\n"},{"pos":[8603,8628],"content":"XmlDocument(XmlNameTable)","needQuote":true,"nodes":[{"content":"XmlDocument(XmlNameTable)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The &lt;strong&gt;XmlNameTable&lt;/strong&gt; to use.","pos":[9439,9485],"source":"\\n<p>The <strong>XmlNameTable</strong> to use."},{"content":"&lt;/p&gt;\\n","pos":[9486,9492],"source":" </p>\\n"},{"pos":[9772,9779],"content":"BaseURI","needQuote":true,"nodes":[{"content":"BaseURI","pos":[0,7]}]},{"content":"\\n&lt;p&gt;The location from which the node was loaded.&lt;/p&gt;\\n","pos":[10440,10495],"source":"\\n<p>The location from which the node was loaded.</p>\\n"},{"pos":[10870,10885],"content":"DocumentElement","needQuote":true,"nodes":[{"content":"DocumentElement","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The &lt;strong&gt;XmlElement&lt;/strong&gt; that represents the root of the XML document tree.","pos":[11650,11737],"source":"\\n<p>The <strong>XmlElement</strong> that represents the root of the XML document tree."},{"content":"If no root exists, &lt;strong&gt;null&lt;/strong&gt; is returned.&lt;/p&gt;\\n","pos":[11738,11797],"source":" If no root exists, <strong>null</strong> is returned.</p>\\n"},{"pos":[12109,12123],"content":"Implementation","needQuote":true,"nodes":[{"content":"Implementation","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The &lt;strong&gt;XmlImplementation&lt;/strong&gt; object for the current document.&lt;/p&gt;\\n","pos":[12922,13004],"source":"\\n<p>The <strong>XmlImplementation</strong> object for the current document.</p>\\n"},{"pos":[13300,13309],"content":"InnerText","needQuote":true,"nodes":[{"content":"InnerText","pos":[0,9]}]},{"content":"\\n&lt;p&gt;The values of the node and all its child nodes.&lt;/p&gt;\\n","pos":[14057,14115],"source":"\\n<p>The values of the node and all its child nodes.</p>\\n"},{"content":"\\n&lt;p&gt;In all cases.&lt;/p&gt;\\n","pos":[14285,14309],"source":"\\n<p>In all cases.</p>\\n"},{"pos":[14625,14633],"content":"InnerXml","needQuote":true,"nodes":[{"content":"InnerXml","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The markup of the children of the current node.&lt;/p&gt;\\n","pos":[15326,15384],"source":"\\n<p>The markup of the children of the current node.</p>\\n"},{"content":"\\n&lt;p&gt;The XML specified when setting this property is not well-formed.","pos":[15535,15604],"source":"\\n<p>The XML specified when setting this property is not well-formed."},{"content":"&lt;/p&gt;\\n","pos":[15605,15611],"source":" </p>\\n"},{"pos":[15926,15936],"content":"IsReadOnly","needQuote":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the current node is read-only; otherwise &lt;strong&gt;false&lt;/strong&gt;.","pos":[16633,16729],"source":"\\n<p>\\n<strong>true</strong> if the current node is read-only; otherwise <strong>false</strong>."},{"content":"&lt;strong&gt;XmlDocument&lt;/strong&gt; nodes always return &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[16730,16808],"source":" <strong>XmlDocument</strong> nodes always return <strong>false</strong>.</p>\\n"},{"pos":[17171,17180],"content":"LocalName","needQuote":true,"nodes":[{"content":"LocalName","pos":[0,9]}]},{"content":"\\n&lt;p&gt;For &lt;strong&gt;XmlDocument&lt;/strong&gt; nodes, the local name is #document.&lt;/p&gt;\\n","pos":[17843,17922],"source":"\\n<p>For <strong>XmlDocument</strong> nodes, the local name is #document.</p>\\n"},{"pos":[18268,18272],"content":"Name","needQuote":true,"nodes":[{"content":"Name","pos":[0,4]}]},{"content":"\\n&lt;p&gt;For &lt;strong&gt;XmlDocument&lt;/strong&gt; nodes, the name is #document.&lt;/p&gt;\\n","pos":[18919,18992],"source":"\\n<p>For <strong>XmlDocument</strong> nodes, the name is #document.</p>\\n"},{"pos":[19343,19352],"content":"NameTable","needQuote":true,"nodes":[{"content":"NameTable","pos":[0,9]}]},{"content":"\\n&lt;p&gt;An &lt;strong&gt;XmlNameTable&lt;/strong&gt; enabling you to get the atomized version of a string within the document.&lt;/p&gt;\\n","pos":[20115,20232],"source":"\\n<p>An <strong>XmlNameTable</strong> enabling you to get the atomized version of a string within the document.</p>\\n"},{"pos":[20606,20614],"content":"NodeType","needQuote":true,"nodes":[{"content":"NodeType","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The node type.","pos":[21294,21313],"source":"\\n<p>The node type."},{"content":"For &lt;strong&gt;XmlDocument&lt;/strong&gt; nodes, this value is XmlNodeType.Document.&lt;/p&gt;\\n","pos":[21314,21395],"source":" For <strong>XmlDocument</strong> nodes, this value is XmlNodeType.Document.</p>\\n"},{"pos":[21850,21863],"content":"OwnerDocument","needQuote":true,"nodes":[{"content":"OwnerDocument","pos":[0,13]}]},{"pos":[23251,23261],"content":"ParentNode","needQuote":true,"nodes":[{"content":"ParentNode","pos":[0,10]}]},{"content":"\\n&lt;p&gt;Always returns &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[23971,24019],"source":"\\n<p>Always returns <strong>null</strong>.</p>\\n"},{"pos":[24409,24427],"content":"PreserveWhitespace","needQuote":true,"nodes":[{"content":"PreserveWhitespace","pos":[0,18]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to preserve white space; otherwise &lt;strong&gt;false&lt;/strong&gt;.","pos":[25154,25241],"source":"\\n<p>\\n<strong>true</strong> to preserve white space; otherwise <strong>false</strong>."},{"content":"The default is &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[25242,25286],"source":" The default is <strong>false</strong>.</p>\\n"},{"pos":[25587,25598],"content":"NodeChanged","needQuote":true,"nodes":[{"content":"NodeChanged","pos":[0,11]}]},{"pos":[26767,26779],"content":"NodeChanging","needQuote":true,"nodes":[{"content":"NodeChanging","pos":[0,12]}]},{"pos":[27959,27971],"content":"NodeInserted","needQuote":true,"nodes":[{"content":"NodeInserted","pos":[0,12]}]},{"pos":[29075,29088],"content":"NodeInserting","needQuote":true,"nodes":[{"content":"NodeInserting","pos":[0,13]}]},{"pos":[30197,30208],"content":"NodeRemoved","needQuote":true,"nodes":[{"content":"NodeRemoved","pos":[0,11]}]},{"pos":[31301,31313],"content":"NodeRemoving","needQuote":true,"nodes":[{"content":"NodeRemoving","pos":[0,12]}]},{"pos":[32458,32476],"content":"CloneNode(Boolean)","needQuote":true,"nodes":[{"content":"CloneNode(Boolean)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to recursively clone the subtree under the specified node; &lt;strong&gt;false&lt;/strong&gt; to clone only the node itself.","pos":[33167,33308],"source":"\\n<p>\\n<strong>true</strong> to recursively clone the subtree under the specified node; <strong>false</strong> to clone only the node itself."},{"content":"&lt;/p&gt;\\n","pos":[33309,33315],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The cloned &lt;strong&gt;XmlDocument&lt;/strong&gt; node.&lt;/p&gt;\\n","pos":[33380,33436],"source":"\\n<p>The cloned <strong>XmlDocument</strong> node.</p>\\n"},{"pos":[33864,33887],"content":"CreateAttribute(String)","needQuote":true,"nodes":[{"content":"CreateAttribute(String)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The new &lt;strong&gt;XmlAttribute&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[35495,35544],"source":"\\n<p>The new <strong>XmlAttribute</strong>.</p>\\n"},{"pos":[35933,35964],"content":"CreateAttribute(String, String)","needQuote":true,"nodes":[{"content":"CreateAttribute(String, String)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The namespaceURI of the attribute.","pos":[37415,37454],"source":"\\n<p>The namespaceURI of the attribute."},{"content":"If the qualified name includes a prefix of xmlns, then this parameter must be http://www.w3.org/2000/xmlns/.","pos":[37455,37563]},{"content":"&lt;/p&gt;\\n","pos":[37564,37570],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The new &lt;strong&gt;XmlAttribute&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[37640,37689],"source":"\\n<p>The new <strong>XmlAttribute</strong>.</p>\\n"},{"pos":[38128,38167],"content":"CreateAttribute(String, String, String)","needQuote":true,"nodes":[{"content":"CreateAttribute(String, String, String)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;The prefix of the attribute (if any).","pos":[39370,39412],"source":"\\n<p>The prefix of the attribute (if any)."},{"content":"String.Empty and &lt;strong&gt;null&lt;/strong&gt; are equivalent.","pos":[39413,39467],"source":" String.Empty and <strong>null</strong> are equivalent."},{"content":"&lt;/p&gt;\\n","pos":[39468,39474],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The local name of the attribute.","pos":[39542,39579],"source":"\\n<p>The local name of the attribute."},{"content":"&lt;/p&gt;\\n","pos":[39580,39586],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the attribute (if any).","pos":[39657,39706],"source":"\\n<p>The namespace URI of the attribute (if any)."},{"content":"String.Empty and &lt;strong&gt;null&lt;/strong&gt; are equivalent.","pos":[39707,39761],"source":" String.Empty and <strong>null</strong> are equivalent."},{"content":"If &lt;em&gt;prefix&lt;/em&gt; is xmlns, then this parameter must be http://www.w3.org/2000/xmlns/; otherwise an exception is thrown.","pos":[39762,39883],"source":" If <em>prefix</em> is xmlns, then this parameter must be http://www.w3.org/2000/xmlns/; otherwise an exception is thrown."},{"content":"&lt;/p&gt;\\n","pos":[39884,39890],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The new &lt;strong&gt;XmlAttribute&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[39960,40009],"source":"\\n<p>The new <strong>XmlAttribute</strong>.</p>\\n"},{"pos":[40409,40435],"content":"CreateCDataSection(String)","needQuote":true,"nodes":[{"content":"CreateCDataSection(String)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The content of the new &lt;strong&gt;XmlCDataSection&lt;/strong&gt;.","pos":[41273,41334],"source":"\\n<p>The content of the new <strong>XmlCDataSection</strong>."},{"content":"&lt;/p&gt;\\n","pos":[41335,41341],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The new &lt;strong&gt;XmlCDataSection&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[41414,41466],"source":"\\n<p>The new <strong>XmlCDataSection</strong>.</p>\\n"},{"pos":[41838,41859],"content":"CreateComment(String)","needQuote":true,"nodes":[{"content":"CreateComment(String)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The content of the new &lt;strong&gt;XmlComment&lt;/strong&gt;.","pos":[42662,42718],"source":"\\n<p>The content of the new <strong>XmlComment</strong>."},{"content":"&lt;/p&gt;\\n","pos":[42719,42725],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The new &lt;strong&gt;XmlComment&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[42793,42840],"source":"\\n<p>The new <strong>XmlComment</strong>.</p>\\n"},{"pos":[43189,43213],"content":"CreateDocumentFragment()","needQuote":true,"nodes":[{"content":"CreateDocumentFragment()","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The new &lt;strong&gt;XmlDocumentFragment&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[44007,44063],"source":"\\n<p>The new <strong>XmlDocumentFragment</strong>.</p>\\n"},{"pos":[44433,44454],"content":"CreateElement(String)","needQuote":true,"nodes":[{"content":"CreateElement(String)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The new &lt;strong&gt;XmlElement&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[45665,45712],"source":"\\n<p>The new <strong>XmlElement</strong>.</p>\\n"},{"pos":[46093,46122],"content":"CreateElement(String, String)","needQuote":true,"nodes":[{"content":"CreateElement(String, String)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The namespace URI of the element.","pos":[47601,47639],"source":"\\n<p>The namespace URI of the element."},{"content":"&lt;/p&gt;\\n","pos":[47640,47646],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The new &lt;strong&gt;XmlElement&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[47714,47761],"source":"\\n<p>The new <strong>XmlElement</strong>.</p>\\n"},{"pos":[48192,48229],"content":"CreateElement(String, String, String)","needQuote":true,"nodes":[{"content":"CreateElement(String, String, String)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;The prefix of the new element (if any).","pos":[49344,49388],"source":"\\n<p>The prefix of the new element (if any)."},{"content":"String.Empty and &lt;strong&gt;null&lt;/strong&gt; are equivalent.","pos":[49389,49443],"source":" String.Empty and <strong>null</strong> are equivalent."},{"content":"&lt;/p&gt;\\n","pos":[49444,49450],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The local name of the new element.","pos":[49518,49557],"source":"\\n<p>The local name of the new element."},{"content":"&lt;/p&gt;\\n","pos":[49558,49564],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the new element (if any).","pos":[49635,49686],"source":"\\n<p>The namespace URI of the new element (if any)."},{"content":"String.Empty and &lt;strong&gt;null&lt;/strong&gt; are equivalent.","pos":[49687,49741],"source":" String.Empty and <strong>null</strong> are equivalent."},{"content":"&lt;/p&gt;\\n","pos":[49742,49748],"source":" </p>\\n"},{"pos":[50375,50409],"content":"CreateNode(String, String, String)","needQuote":true,"nodes":[{"content":"CreateNode(String, String, String)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The namespace URI of the new node.","pos":[52135,52174],"source":"\\n<p>The namespace URI of the new node."},{"content":"&lt;/p&gt;\\n","pos":[52175,52181],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The new &lt;strong&gt;XmlNode&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[52246,52290],"source":"\\n<p>The new <strong>XmlNode</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The name was not provided and the &lt;strong&gt;XmlNodeType&lt;/strong&gt; requires a name; or &lt;em&gt;nodeTypeString&lt;/em&gt; is not one of the strings listed below.","pos":[52401,52552],"source":"\\n<p>The name was not provided and the <strong>XmlNodeType</strong> requires a name; or <em>nodeTypeString</em> is not one of the strings listed below."},{"content":"&lt;/p&gt;\\n","pos":[52553,52559],"source":" </p>\\n"},{"pos":[53041,53080],"content":"CreateNode(XmlNodeType, String, String)","needQuote":true,"nodes":[{"content":"CreateNode(XmlNodeType, String, String)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;The &lt;strong&gt;XmlNodeType&lt;/strong&gt; of the new node.","pos":[54252,54306],"source":"\\n<p>The <strong>XmlNodeType</strong> of the new node."},{"content":"&lt;/p&gt;\\n","pos":[54307,54313],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the new node.","pos":[54741,54780],"source":"\\n<p>The namespace URI of the new node."},{"content":"&lt;/p&gt;\\n","pos":[54781,54787],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The new &lt;strong&gt;XmlNode&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[54852,54896],"source":"\\n<p>The new <strong>XmlNode</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The name was not provided and the &lt;strong&gt;XmlNodeType&lt;/strong&gt; requires a name.","pos":[55007,55091],"source":"\\n<p>The name was not provided and the <strong>XmlNodeType</strong> requires a name."},{"content":"&lt;/p&gt;\\n","pos":[55092,55098],"source":" </p>\\n"},{"pos":[55627,55674],"content":"CreateNode(XmlNodeType, String, String, String)","needQuote":true,"nodes":[{"content":"CreateNode(XmlNodeType, String, String, String)","pos":[0,47]}]},{"content":"\\n&lt;p&gt;The &lt;strong&gt;XmlNodeType&lt;/strong&gt; of the new node.","pos":[56980,57034],"source":"\\n<p>The <strong>XmlNodeType</strong> of the new node."},{"content":"&lt;/p&gt;\\n","pos":[57035,57041],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The prefix of the new node.","pos":[57106,57138],"source":"\\n<p>The prefix of the new node."},{"content":"&lt;/p&gt;\\n","pos":[57139,57145],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The local name of the new node.","pos":[57208,57244],"source":"\\n<p>The local name of the new node."},{"content":"&lt;/p&gt;\\n","pos":[57245,57251],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the new node.","pos":[57322,57361],"source":"\\n<p>The namespace URI of the new node."},{"content":"&lt;/p&gt;\\n","pos":[57362,57368],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The new &lt;strong&gt;XmlNode&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[57433,57477],"source":"\\n<p>The new <strong>XmlNode</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The name was not provided and the &lt;strong&gt;XmlNodeType&lt;/strong&gt; requires a name.","pos":[57588,57672],"source":"\\n<p>The name was not provided and the <strong>XmlNodeType</strong> requires a name."},{"content":"&lt;/p&gt;\\n","pos":[57673,57679],"source":" </p>\\n"},{"pos":[58156,58199],"content":"CreateProcessingInstruction(String, String)","needQuote":true,"nodes":[{"content":"CreateProcessingInstruction(String, String)","pos":[0,43]}]},{"content":"\\n&lt;p&gt;The name of the processing instruction.","pos":[59153,59197],"source":"\\n<p>The name of the processing instruction."},{"content":"&lt;/p&gt;\\n","pos":[59198,59204],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The data for the processing instruction.","pos":[59267,59312],"source":"\\n<p>The data for the processing instruction."},{"content":"&lt;/p&gt;\\n","pos":[59313,59319],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The new &lt;strong&gt;XmlProcessingInstruction&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[59401,59462],"source":"\\n<p>The new <strong>XmlProcessingInstruction</strong>.</p>\\n"},{"pos":[59893,59928],"content":"CreateSignificantWhitespace(String)","needQuote":true,"nodes":[{"content":"CreateSignificantWhitespace(String)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The string must contain only the following characters &amp;#20; &amp;#10; &amp;#13; and &amp;#9; &lt;/p&gt;\\n","pos":[60804,60896],"source":"\\n<p>The string must contain only the following characters &#20; &#10; &#13; and &#9; </p>\\n"},{"content":"\\n&lt;p&gt;A new &lt;strong&gt;XmlSignificantWhitespace&lt;/strong&gt; node.&lt;/p&gt;\\n","pos":[60978,61042],"source":"\\n<p>A new <strong>XmlSignificantWhitespace</strong> node.</p>\\n"},{"pos":[61426,61448],"content":"CreateTextNode(String)","needQuote":true,"nodes":[{"content":"CreateTextNode(String)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The text for the Text node.","pos":[62240,62272],"source":"\\n<p>The text for the Text node."},{"content":"&lt;/p&gt;\\n","pos":[62273,62279],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The new &lt;strong&gt;XmlText&lt;/strong&gt; node.&lt;/p&gt;\\n","pos":[62344,62393],"source":"\\n<p>The new <strong>XmlText</strong> node.</p>\\n"},{"pos":[62770,62794],"content":"CreateWhitespace(String)","needQuote":true,"nodes":[{"content":"CreateWhitespace(String)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The string must contain only the following characters &amp;#20; &amp;#10; &amp;#13; and &amp;#9; &lt;/p&gt;\\n","pos":[63593,63685],"source":"\\n<p>The string must contain only the following characters &#20; &#10; &#13; and &#9; </p>\\n"},{"content":"\\n&lt;p&gt;A new &lt;strong&gt;XmlWhitespace&lt;/strong&gt; node.&lt;/p&gt;\\n","pos":[63756,63809],"source":"\\n<p>A new <strong>XmlWhitespace</strong> node.</p>\\n"},{"pos":[64284,64328],"content":"CreateXmlDeclaration(String, String, String)","needQuote":true,"nodes":[{"content":"CreateXmlDeclaration(String, String, String)","pos":[0,44]}]},{"content":"\\n&lt;p&gt;The new &lt;strong&gt;XmlDeclaration&lt;/strong&gt; node.&lt;/p&gt;\\n","pos":[66866,66922],"source":"\\n<p>The new <strong>XmlDeclaration</strong> node.</p>\\n"},{"content":"\\n&lt;p&gt;The values of &lt;em&gt;version&lt;/em&gt; or &lt;em&gt;standalone&lt;/em&gt; are something other than the ones specified above.","pos":[67033,67142],"source":"\\n<p>The values of <em>version</em> or <em>standalone</em> are something other than the ones specified above."},{"content":"&lt;/p&gt;\\n","pos":[67143,67149],"source":" </p>\\n"},{"pos":[67650,67678],"content":"GetElementsByTagName(String)","needQuote":true,"nodes":[{"content":"GetElementsByTagName(String)","pos":[0,28]}]},{"pos":[69516,69552],"content":"GetElementsByTagName(String, String)","needQuote":true,"nodes":[{"content":"GetElementsByTagName(String, String)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;NamespaceURI to match.","pos":[70838,70865],"source":"\\n<p>NamespaceURI to match."},{"content":"&lt;/p&gt;\\n","pos":[70866,70872],"source":" </p>\\n"},{"pos":[71628,71656],"content":"ImportNode(XmlNode, Boolean)","needQuote":true,"nodes":[{"content":"ImportNode(XmlNode, Boolean)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The node being imported.","pos":[72435,72464],"source":"\\n<p>The node being imported."},{"content":"&lt;/p&gt;\\n","pos":[72465,72471],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to perform a deep clone; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[72535,72623],"source":"\\n<p>\\n<strong>true</strong> to perform a deep clone; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[72624,72630],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Calling this method on a node type which cannot be imported.","pos":[72925,72990],"source":"\\n<p>Calling this method on a node type which cannot be imported."},{"content":"&lt;/p&gt;\\n","pos":[72991,72997],"source":" </p>\\n"},{"pos":[73353,73365],"content":"Load(Stream)","needQuote":true,"nodes":[{"content":"Load(Stream)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The stream containing the XML document to load.","pos":[74051,74103],"source":"\\n<p>The stream containing the XML document to load."},{"content":"&lt;/p&gt;\\n","pos":[74104,74110],"source":" </p>\\n"},{"pos":[75058,75074],"content":"Load(TextReader)","needQuote":true,"nodes":[{"content":"Load(TextReader)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The &lt;strong&gt;TextReader&lt;/strong&gt; used to feed the XML data into the document.","pos":[75853,75934],"source":"\\n<p>The <strong>TextReader</strong> used to feed the XML data into the document."},{"content":"&lt;/p&gt;\\n","pos":[75935,75941],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;There is a load or parse error in the XML.","pos":[76050,76097],"source":"\\n<p>There is a load or parse error in the XML."},{"content":"In this case, the document remains empty.","pos":[76098,76139]},{"content":"&lt;/p&gt;\\n","pos":[76140,76146],"source":" </p>\\n"},{"pos":[76889,76904],"content":"Load(XmlReader)","needQuote":true,"nodes":[{"content":"Load(XmlReader)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The &lt;strong&gt;XmlReader&lt;/strong&gt; used to feed the XML data into the document.","pos":[77672,77752],"source":"\\n<p>The <strong>XmlReader</strong> used to feed the XML data into the document."},{"content":"&lt;/p&gt;\\n","pos":[77753,77759],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;There is a load or parse error in the XML.","pos":[77868,77915],"source":"\\n<p>There is a load or parse error in the XML."},{"content":"In this case, the document remains empty.","pos":[77916,77957]},{"content":"&lt;/p&gt;\\n","pos":[77958,77964],"source":" </p>\\n"},{"pos":[78621,78636],"content":"LoadXml(String)","needQuote":true,"nodes":[{"content":"LoadXml(String)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;String containing the XML document to load.","pos":[79313,79361],"source":"\\n<p>String containing the XML document to load."},{"content":"&lt;/p&gt;\\n","pos":[79362,79368],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;There is a load or parse error in the XML.","pos":[79477,79524],"source":"\\n<p>There is a load or parse error in the XML."},{"content":"In this case, the document remains empty.","pos":[79525,79566]},{"content":"&lt;/p&gt;\\n","pos":[79567,79573],"source":" </p>\\n"},{"pos":[80062,80081],"content":"ReadNode(XmlReader)","needQuote":true,"nodes":[{"content":"ReadNode(XmlReader)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The XML source &lt;/p&gt;\\n","pos":[81025,81051],"source":"\\n<p>The XML source </p>\\n"},{"content":"\\n&lt;p&gt;The new &lt;strong&gt;XmlNode&lt;/strong&gt; or &lt;strong&gt;null&lt;/strong&gt; if no more nodes exist.&lt;/p&gt;\\n","pos":[81116,81208],"source":"\\n<p>The new <strong>XmlNode</strong> or <strong>null</strong> if no more nodes exist.</p>\\n"},{"content":"\\n&lt;p&gt;The reader is positioned on a node type that does not translate to a valid DOM node (for example, EndElement or EndEntity).","pos":[81329,81457],"source":"\\n<p>The reader is positioned on a node type that does not translate to a valid DOM node (for example, EndElement or EndEntity)."},{"content":"&lt;/p&gt;\\n","pos":[81458,81464],"source":" </p>\\n"},{"pos":[82056,82068],"content":"Save(Stream)","needQuote":true,"nodes":[{"content":"Save(Stream)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The stream to which you want to save.","pos":[82755,82797],"source":"\\n<p>The stream to which you want to save."},{"content":"&lt;/p&gt;\\n","pos":[82798,82804],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The operation would not result in a well formed XML document (for example, no document element or duplicate XML declarations).","pos":[82913,83044],"source":"\\n<p>The operation would not result in a well formed XML document (for example, no document element or duplicate XML declarations)."},{"content":"&lt;/p&gt;\\n","pos":[83045,83051],"source":" </p>\\n"},{"pos":[83403,83419],"content":"Save(TextWriter)","needQuote":true,"nodes":[{"content":"Save(TextWriter)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The &lt;strong&gt;TextWriter&lt;/strong&gt; to which you want to save.","pos":[84187,84250],"source":"\\n<p>The <strong>TextWriter</strong> to which you want to save."},{"content":"&lt;/p&gt;\\n","pos":[84251,84257],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The operation would not result in a well formed XML document (for example, no document element or duplicate XML declarations).","pos":[84366,84497],"source":"\\n<p>The operation would not result in a well formed XML document (for example, no document element or duplicate XML declarations)."},{"content":"&lt;/p&gt;\\n","pos":[84498,84504],"source":" </p>\\n"},{"pos":[84860,84875],"content":"Save(XmlWriter)","needQuote":true,"nodes":[{"content":"Save(XmlWriter)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The &lt;strong&gt;XmlWriter&lt;/strong&gt; to which you want to save.","pos":[85626,85688],"source":"\\n<p>The <strong>XmlWriter</strong> to which you want to save."},{"content":"&lt;/p&gt;\\n","pos":[85689,85695],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The operation would not result in a well formed XML document (for example, no document element or duplicate XML declarations).","pos":[85804,85935],"source":"\\n<p>The operation would not result in a well formed XML document (for example, no document element or duplicate XML declarations)."},{"content":"&lt;/p&gt;\\n","pos":[85936,85942],"source":" </p>\\n"},{"pos":[86437,86462],"content":"WriteContentTo(XmlWriter)","needQuote":true,"nodes":[{"content":"WriteContentTo(XmlWriter)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The &lt;strong&gt;XmlWriter&lt;/strong&gt; to which you want to save.","pos":[87296,87358],"source":"\\n<p>The <strong>XmlWriter</strong> to which you want to save."},{"content":"&lt;/p&gt;\\n","pos":[87359,87365],"source":" </p>\\n"},{"pos":[87808,87826],"content":"WriteTo(XmlWriter)","needQuote":true,"nodes":[{"content":"WriteTo(XmlWriter)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The &lt;strong&gt;XmlWriter&lt;/strong&gt; to which you want to save.","pos":[88609,88671],"source":"\\n<p>The <strong>XmlWriter</strong> to which you want to save."},{"content":"&lt;/p&gt;\\n","pos":[88672,88678],"source":" </p>\\n"},{"pos":[88933,88943],"content":"System.Xml","needQuote":true,"nodes":[{"content":"System.Xml","pos":[0,10]}]},{"pos":[89086,89092],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[89246,89253],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"pos":[89438,89449],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[89661,89671],"content":"Attributes","needQuote":true,"nodes":[{"content":"Attributes","pos":[0,10]}]},{"pos":[89888,89898],"content":"ChildNodes","needQuote":true,"nodes":[{"content":"ChildNodes","pos":[0,10]}]},{"pos":[90115,90125],"content":"FirstChild","needQuote":true,"nodes":[{"content":"FirstChild","pos":[0,10]}]},{"pos":[90345,90358],"content":"HasChildNodes","needQuote":true,"nodes":[{"content":"HasChildNodes","pos":[0,13]}]},{"pos":[90592,90604],"content":"Item[String]","needQuote":true,"nodes":[{"content":"Item[String]","pos":[0,12]}]},{"pos":[90807,90811],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"content":"[","pos":[90861,90862]},{"pos":[90915,90921],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":"]","pos":[90982,90983]},{"pos":[91072,91076],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"pos":[91125,91126],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[91176,91182],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[91242,91243],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[91507,91527],"content":"Item[String, String]","needQuote":true,"nodes":[{"content":"Item[String, String]","pos":[0,20]}]},{"pos":[91782,91786],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"content":"[","pos":[91836,91837]},{"pos":[91890,91896],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[91957,91958]},{"pos":[92013,92019],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":"]","pos":[92080,92081]},{"pos":[92184,92188],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"pos":[92237,92238],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[92288,92294],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[92355,92356]},{"pos":[92411,92417],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[92477,92478],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[92749,92758],"content":"LastChild","needQuote":true,"nodes":[{"content":"LastChild","pos":[0,9]}]},{"pos":[92974,92986],"content":"NamespaceURI","needQuote":true,"nodes":[{"content":"NamespaceURI","pos":[0,12]}]},{"pos":[93210,93221],"content":"NextSibling","needQuote":true,"nodes":[{"content":"NextSibling","pos":[0,11]}]},{"pos":[93439,93447],"content":"OuterXml","needQuote":true,"nodes":[{"content":"OuterXml","pos":[0,8]}]},{"pos":[93654,93660],"content":"Prefix","needQuote":true,"nodes":[{"content":"Prefix","pos":[0,6]}]},{"pos":[93870,93885],"content":"PreviousSibling","needQuote":true,"nodes":[{"content":"PreviousSibling","pos":[0,15]}]},{"pos":[94119,94131],"content":"PreviousText","needQuote":true,"nodes":[{"content":"PreviousText","pos":[0,12]}]},{"pos":[94349,94354],"content":"Value","needQuote":true,"nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[94577,94597],"content":"AppendChild(XmlNode)","needQuote":true,"nodes":[{"content":"AppendChild(XmlNode)","pos":[0,20]}]},{"pos":[94746,94757],"content":"AppendChild","needQuote":true,"nodes":[{"content":"AppendChild","pos":[0,11]}]},{"pos":[94813,94814],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[94869,94876],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"pos":[94920,94921],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[95019,95030],"content":"AppendChild","needQuote":true,"nodes":[{"content":"AppendChild","pos":[0,11]}]},{"pos":[95086,95087],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[95142,95149],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"pos":[95193,95194],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[95419,95434],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[95549,95562],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[95620,95621],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[95648,95649],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[95729,95742],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[95800,95801],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[95828,95829],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[96052,96080],"content":"GetNamespaceOfPrefix(String)","needQuote":true,"nodes":[{"content":"GetNamespaceOfPrefix(String)","pos":[0,28]}]},{"pos":[96237,96257],"content":"GetNamespaceOfPrefix","needQuote":true,"nodes":[{"content":"GetNamespaceOfPrefix","pos":[0,20]}]},{"pos":[96322,96323],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[96373,96379],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[96439,96440],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[96542,96562],"content":"GetNamespaceOfPrefix","needQuote":true,"nodes":[{"content":"GetNamespaceOfPrefix","pos":[0,20]}]},{"pos":[96627,96628],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[96678,96684],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[96744,96745],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[97003,97031],"content":"GetPrefixOfNamespace(String)","needQuote":true,"nodes":[{"content":"GetPrefixOfNamespace(String)","pos":[0,28]}]},{"pos":[97188,97208],"content":"GetPrefixOfNamespace","needQuote":true,"nodes":[{"content":"GetPrefixOfNamespace","pos":[0,20]}]},{"pos":[97273,97274],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[97324,97330],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[97390,97391],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[97493,97513],"content":"GetPrefixOfNamespace","needQuote":true,"nodes":[{"content":"GetPrefixOfNamespace","pos":[0,20]}]},{"pos":[97578,97579],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[97629,97635],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[97695,97696],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[97970,97999],"content":"InsertAfter(XmlNode, XmlNode)","needQuote":true,"nodes":[{"content":"InsertAfter(XmlNode, XmlNode)","pos":[0,29]}]},{"pos":[98187,98198],"content":"InsertAfter","needQuote":true,"nodes":[{"content":"InsertAfter","pos":[0,11]}]},{"pos":[98254,98255],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[98310,98317],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"content":",","pos":[98362,98363]},{"pos":[98423,98430],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"pos":[98474,98475],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[98592,98603],"content":"InsertAfter","needQuote":true,"nodes":[{"content":"InsertAfter","pos":[0,11]}]},{"pos":[98659,98660],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[98715,98722],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"content":",","pos":[98767,98768]},{"pos":[98828,98835],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"pos":[98879,98880],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[99171,99201],"content":"InsertBefore(XmlNode, XmlNode)","needQuote":true,"nodes":[{"content":"InsertBefore(XmlNode, XmlNode)","pos":[0,30]}]},{"pos":[99391,99403],"content":"InsertBefore","needQuote":true,"nodes":[{"content":"InsertBefore","pos":[0,12]}]},{"pos":[99460,99461],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[99516,99523],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"content":",","pos":[99568,99569]},{"pos":[99629,99636],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"pos":[99680,99681],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[99799,99811],"content":"InsertBefore","needQuote":true,"nodes":[{"content":"InsertBefore","pos":[0,12]}]},{"pos":[99868,99869],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[99924,99931],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"content":",","pos":[99976,99977]},{"pos":[100037,100044],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"pos":[100088,100089],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[100340,100351],"content":"Normalize()","needQuote":true,"nodes":[{"content":"Normalize()","pos":[0,11]}]},{"pos":[100458,100467],"content":"Normalize","needQuote":true,"nodes":[{"content":"Normalize","pos":[0,9]}]},{"pos":[100521,100522],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[100549,100550],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[100626,100635],"content":"Normalize","needQuote":true,"nodes":[{"content":"Normalize","pos":[0,9]}]},{"pos":[100689,100690],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[100717,100718],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[100931,100952],"content":"PrependChild(XmlNode)","needQuote":true,"nodes":[{"content":"PrependChild(XmlNode)","pos":[0,21]}]},{"pos":[101103,101115],"content":"PrependChild","needQuote":true,"nodes":[{"content":"PrependChild","pos":[0,12]}]},{"pos":[101172,101173],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[101228,101235],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"pos":[101279,101280],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[101379,101391],"content":"PrependChild","needQuote":true,"nodes":[{"content":"PrependChild","pos":[0,12]}]},{"pos":[101448,101449],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[101504,101511],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"pos":[101555,101556],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[101779,101790],"content":"RemoveAll()","needQuote":true,"nodes":[{"content":"RemoveAll()","pos":[0,11]}]},{"pos":[101897,101906],"content":"RemoveAll","needQuote":true,"nodes":[{"content":"RemoveAll","pos":[0,9]}]},{"pos":[101960,101961],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[101988,101989],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[102065,102074],"content":"RemoveAll","needQuote":true,"nodes":[{"content":"RemoveAll","pos":[0,9]}]},{"pos":[102128,102129],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[102156,102157],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[102369,102389],"content":"RemoveChild(XmlNode)","needQuote":true,"nodes":[{"content":"RemoveChild(XmlNode)","pos":[0,20]}]},{"pos":[102538,102549],"content":"RemoveChild","needQuote":true,"nodes":[{"content":"RemoveChild","pos":[0,11]}]},{"pos":[102605,102606],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[102661,102668],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"pos":[102712,102713],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[102811,102822],"content":"RemoveChild","needQuote":true,"nodes":[{"content":"RemoveChild","pos":[0,11]}]},{"pos":[102878,102879],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[102934,102941],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"pos":[102985,102986],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[103249,103279],"content":"ReplaceChild(XmlNode, XmlNode)","needQuote":true,"nodes":[{"content":"ReplaceChild(XmlNode, XmlNode)","pos":[0,30]}]},{"pos":[103469,103481],"content":"ReplaceChild","needQuote":true,"nodes":[{"content":"ReplaceChild","pos":[0,12]}]},{"pos":[103538,103539],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[103594,103601],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"content":",","pos":[103646,103647]},{"pos":[103707,103714],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"pos":[103758,103759],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[103877,103889],"content":"ReplaceChild","needQuote":true,"nodes":[{"content":"ReplaceChild","pos":[0,12]}]},{"pos":[103946,103947],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[104002,104009],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"content":",","pos":[104054,104055]},{"pos":[104115,104122],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"pos":[104166,104167],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[104445,104469],"content":"Supports(String, String)","needQuote":true,"nodes":[{"content":"Supports(String, String)","pos":[0,24]}]},{"pos":[104631,104639],"content":"Supports","needQuote":true,"nodes":[{"content":"Supports","pos":[0,8]}]},{"pos":[104692,104693],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[104743,104749],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[104810,104811]},{"pos":[104866,104872],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[104932,104933],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[105037,105045],"content":"Supports","needQuote":true,"nodes":[{"content":"Supports","pos":[0,8]}]},{"pos":[105098,105099],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[105149,105155],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[105216,105217]},{"pos":[105272,105278],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[105338,105339],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[105605,105632],"content":"IEnumerable.GetEnumerator()","needQuote":true,"nodes":[{"content":"IEnumerable.GetEnumerator()","pos":[0,27]}]},{"pos":[105867,105892],"content":"IEnumerable.GetEnumerator","needQuote":true,"nodes":[{"content":"IEnumerable.GetEnumerator","pos":[0,25]}]},{"pos":[105981,105982],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[106009,106010],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[106121,106165],"content":"System.Collections.IEnumerable.GetEnumerator","needQuote":true,"nodes":[{"content":"System.Collections.IEnumerable.GetEnumerator","pos":[0,44]}]},{"pos":[106254,106255],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[106282,106283],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[106586,106596],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[106691,106699],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[106768,106769],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[106796,106797],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[106867,106875],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[106944,106945],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[106972,106973],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[107156,107170],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[107289,107295],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[107362,107363],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[107413,107419],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[107479,107480],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[107563,107569],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[107636,107637],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[107687,107693],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[107753,107754],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[107968,107990],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[108138,108144],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[108211,108212],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[108262,108268],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[108329,108330]},{"pos":[108385,108391],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[108451,108452],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[108549,108555],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[108622,108623],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[108673,108679],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[108740,108741]},{"pos":[108796,108802],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[108862,108863],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[109108,109139],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[109305,109320],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[109396,109397],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[109447,109453],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[109514,109515]},{"pos":[109570,109576],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[109636,109637],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[109743,109758],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[109834,109835],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[109885,109891],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[109952,109953]},{"pos":[110008,110014],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[110074,110075],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[110305,110318],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[110419,110430],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[110502,110503],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[110530,110531],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[110604,110615],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[110687,110688],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[110715,110716],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[110891,110900],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[110993,111000],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[111068,111069],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[111096,111097],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[111166,111173],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[111241,111242],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[111269,111270],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[111445,111462],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[111571,111586],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[111662,111663],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[111690,111691],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[111768,111783],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[111859,111860],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[111887,111888],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[112183,112196],"content":"AsQueryable()","needQuote":true,"nodes":[{"content":"AsQueryable()","pos":[0,13]}]},{"pos":[112313,112324],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[112383,112384],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[112411,112412],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[112493,112504],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[112563,112564],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[112591,112592],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[112947,112959],"content":"AsParallel()","needQuote":true,"nodes":[{"content":"AsParallel()","pos":[0,12]}]},{"pos":[113092,113102],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[113169,113170],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[113197,113198],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[113287,113297],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[113364,113365],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[113392,113393],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[113734,113749],"content":"Cast<TResult>()","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;()","pos":[0,15],"source":"Cast<TResult>()"}]},{"pos":[113953,113966],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[114028,114029],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[114056,114057],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[114135,114151],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[114216,114217],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[114244,114245],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[114623,114640],"content":"OfType<TResult>()","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;()","pos":[0,17],"source":"OfType<TResult>()"}]},{"pos":[114852,114867],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[114931,114932],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[114959,114960],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[115040,115058],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[115125,115126],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[115153,115154],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[115389,115395],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[115514,115532],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[115733,115757],"content":"AsQueryable(IEnumerable)","needQuote":true,"nodes":[{"content":"AsQueryable(IEnumerable)","pos":[0,24]}]},{"pos":[115936,115947],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[116006,116007],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[116074,116085],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[116162,116163],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[116276,116287],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[116346,116347],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[116414,116425],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[116502,116503],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[116731,116740],"content":"Queryable","needQuote":true,"nodes":[{"content":"Queryable","pos":[0,9]}]},{"pos":[116946,116969],"content":"AsParallel(IEnumerable)","needQuote":true,"nodes":[{"content":"AsParallel(IEnumerable)","pos":[0,23]}]},{"pos":[117164,117174],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[117241,117242],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[117309,117320],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[117397,117398],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[117519,117529],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[117596,117597],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[117664,117675],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[117752,117753],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[118006,118024],"content":"ParallelEnumerable","needQuote":true,"nodes":[{"content":"ParallelEnumerable","pos":[0,18]}]},{"pos":[118246,118272],"content":"Cast<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;(IEnumerable)","pos":[0,26],"source":"Cast<TResult>(IEnumerable)"}]},{"pos":[118579,118592],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[118654,118655],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[118722,118733],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[118810,118811],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[118921,118937],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[119002,119003],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[119070,119081],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[119158,119159],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[119448,119458],"content":"Enumerable","needQuote":true,"nodes":[{"content":"Enumerable","pos":[0,10]}]},{"pos":[119658,119686],"content":"OfType<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;(IEnumerable)","pos":[0,28],"source":"OfType<TResult>(IEnumerable)"}]},{"pos":[120001,120016],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[120080,120081],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[120148,120159],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[120236,120237],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[120349,120367],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[120434,120435],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[120502,120513],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[120590,120591],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[120853,120864],"content":"System.Linq","needQuote":true,"nodes":[{"content":"System.Linq","pos":[0,11]}]},{"pos":[121029,121046],"content":"XmlImplementation","needQuote":true,"nodes":[{"content":"XmlImplementation","pos":[0,17]}]},{"pos":[121246,121258],"content":"XmlNameTable","needQuote":true,"nodes":[{"content":"XmlNameTable","pos":[0,12]}]},{"pos":[121454,121461],"content":"BaseURI","needQuote":true,"nodes":[{"content":"BaseURI","pos":[0,7]}]},{"pos":[121641,121647],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[121804,121814],"content":"XmlElement","needQuote":true,"nodes":[{"content":"XmlElement","pos":[0,10]}]},{"pos":[122006,122015],"content":"InnerText","needQuote":true,"nodes":[{"content":"InnerText","pos":[0,9]}]},{"pos":[122227,122235],"content":"InnerXml","needQuote":true,"nodes":[{"content":"InnerXml","pos":[0,8]}]},{"pos":[122446,122456],"content":"IsReadOnly","needQuote":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[122646,122653],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[122828,122837],"content":"LocalName","needQuote":true,"nodes":[{"content":"LocalName","pos":[0,9]}]},{"pos":[123045,123049],"content":"Name","needQuote":true,"nodes":[{"content":"Name","pos":[0,4]}]},{"pos":[123246,123254],"content":"NodeType","needQuote":true,"nodes":[{"content":"NodeType","pos":[0,8]}]},{"pos":[123450,123461],"content":"XmlNodeType","needQuote":true,"nodes":[{"content":"XmlNodeType","pos":[0,11]}]},{"pos":[123660,123673],"content":"OwnerDocument","needQuote":true,"nodes":[{"content":"OwnerDocument","pos":[0,13]}]},{"pos":[123884,123895],"content":"XmlDocument","needQuote":true,"nodes":[{"content":"XmlDocument","pos":[0,11]}]},{"pos":[124091,124101],"content":"ParentNode","needQuote":true,"nodes":[{"content":"ParentNode","pos":[0,10]}]},{"pos":[124318,124344],"content":"XmlNodeChangedEventHandler","needQuote":true,"nodes":[{"content":"XmlNodeChangedEventHandler","pos":[0,26]}]},{"pos":[124599,124617],"content":"CloneNode(Boolean)","needQuote":true,"nodes":[{"content":"CloneNode(Boolean)","pos":[0,18]}]},{"pos":[124754,124763],"content":"CloneNode","needQuote":true,"nodes":[{"content":"CloneNode","pos":[0,9]}]},{"pos":[124817,124818],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[124869,124876],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[124937,124938],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[125030,125039],"content":"CloneNode","needQuote":true,"nodes":[{"content":"CloneNode","pos":[0,9]}]},{"pos":[125093,125094],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[125145,125152],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[125213,125214],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[125414,125426],"content":"XmlAttribute","needQuote":true,"nodes":[{"content":"XmlAttribute","pos":[0,12]}]},{"pos":[125614,125629],"content":"XmlCDataSection","needQuote":true,"nodes":[{"content":"XmlCDataSection","pos":[0,15]}]},{"pos":[125821,125831],"content":"XmlComment","needQuote":true,"nodes":[{"content":"XmlComment","pos":[0,10]}]},{"pos":[126017,126036],"content":"XmlDocumentFragment","needQuote":true,"nodes":[{"content":"XmlDocumentFragment","pos":[0,19]}]},{"pos":[126254,126278],"content":"XmlProcessingInstruction","needQuote":true,"nodes":[{"content":"XmlProcessingInstruction","pos":[0,24]}]},{"pos":[126511,126535],"content":"XmlSignificantWhitespace","needQuote":true,"nodes":[{"content":"XmlSignificantWhitespace","pos":[0,24]}]},{"pos":[126751,126758],"content":"XmlText","needQuote":true,"nodes":[{"content":"XmlText","pos":[0,7]}]},{"pos":[126929,126942],"content":"XmlWhitespace","needQuote":true,"nodes":[{"content":"XmlWhitespace","pos":[0,13]}]},{"pos":[127132,127146],"content":"XmlDeclaration","needQuote":true,"nodes":[{"content":"XmlDeclaration","pos":[0,14]}]},{"pos":[127336,127347],"content":"XmlNodeList","needQuote":true,"nodes":[{"content":"XmlNodeList","pos":[0,11]}]},{"pos":[127521,127527],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[127657,127666],"content":"System.IO","needQuote":true,"nodes":[{"content":"System.IO","pos":[0,9]}]},{"pos":[127816,127826],"content":"TextReader","needQuote":true,"nodes":[{"content":"TextReader","pos":[0,10]}]},{"pos":[128000,128009],"content":"XmlReader","needQuote":true,"nodes":[{"content":"XmlReader","pos":[0,9]}]},{"pos":[128181,128191],"content":"TextWriter","needQuote":true,"nodes":[{"content":"TextWriter","pos":[0,10]}]},{"pos":[128365,128374],"content":"XmlWriter","needQuote":true,"nodes":[{"content":"XmlWriter","pos":[0,9]}]},{"pos":[128589,128614],"content":"WriteContentTo(XmlWriter)","needQuote":true,"nodes":[{"content":"WriteContentTo(XmlWriter)","pos":[0,25]}]},{"pos":[128773,128787],"content":"WriteContentTo","needQuote":true,"nodes":[{"content":"WriteContentTo","pos":[0,14]}]},{"pos":[128846,128847],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[128904,128913],"content":"XmlWriter","needQuote":true,"nodes":[{"content":"XmlWriter","pos":[0,9]}]},{"pos":[128980,128981],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[129084,129098],"content":"WriteContentTo","needQuote":true,"nodes":[{"content":"WriteContentTo","pos":[0,14]}]},{"pos":[129157,129158],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[129215,129224],"content":"XmlWriter","needQuote":true,"nodes":[{"content":"XmlWriter","pos":[0,9]}]},{"pos":[129291,129292],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[129542,129560],"content":"WriteTo(XmlWriter)","needQuote":true,"nodes":[{"content":"WriteTo(XmlWriter)","pos":[0,18]}]},{"pos":[129705,129712],"content":"WriteTo","needQuote":true,"nodes":[{"content":"WriteTo","pos":[0,7]}]},{"pos":[129764,129765],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[129822,129831],"content":"XmlWriter","needQuote":true,"nodes":[{"content":"XmlWriter","pos":[0,9]}]},{"pos":[129898,129899],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[129995,130002],"content":"WriteTo","needQuote":true,"nodes":[{"content":"WriteTo","pos":[0,7]}]},{"pos":[130054,130055],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[130112,130121],"content":"XmlWriter","needQuote":true,"nodes":[{"content":"XmlWriter","pos":[0,9]}]},{"pos":[130188,130189],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[130398,130423],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[130618,130630],"content":"XmlException","needQuote":true,"nodes":[{"content":"XmlException","pos":[0,12]}]},{"pos":[130812,130829],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[131006,131028],"content":"NullReferenceException","needQuote":true,"nodes":[{"content":"NullReferenceException","pos":[0,22]}]}],"content":"items:\n- uid: System.Xml.XmlDocument\n  commentId: T:System.Xml.XmlDocument\n  id: XmlDocument\n  parent: System.Xml\n  children:\n  - System.Xml.XmlDocument.#ctor\n  - System.Xml.XmlDocument.#ctor(System.Xml.XmlImplementation)\n  - System.Xml.XmlDocument.#ctor(System.Xml.XmlNameTable)\n  - System.Xml.XmlDocument.BaseURI\n  - System.Xml.XmlDocument.CloneNode(System.Boolean)\n  - System.Xml.XmlDocument.CreateAttribute(System.String)\n  - System.Xml.XmlDocument.CreateAttribute(System.String,System.String)\n  - System.Xml.XmlDocument.CreateAttribute(System.String,System.String,System.String)\n  - System.Xml.XmlDocument.CreateCDataSection(System.String)\n  - System.Xml.XmlDocument.CreateComment(System.String)\n  - System.Xml.XmlDocument.CreateDocumentFragment\n  - System.Xml.XmlDocument.CreateElement(System.String)\n  - System.Xml.XmlDocument.CreateElement(System.String,System.String)\n  - System.Xml.XmlDocument.CreateElement(System.String,System.String,System.String)\n  - System.Xml.XmlDocument.CreateNode(System.String,System.String,System.String)\n  - System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String)\n  - System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String,System.String)\n  - System.Xml.XmlDocument.CreateProcessingInstruction(System.String,System.String)\n  - System.Xml.XmlDocument.CreateSignificantWhitespace(System.String)\n  - System.Xml.XmlDocument.CreateTextNode(System.String)\n  - System.Xml.XmlDocument.CreateWhitespace(System.String)\n  - System.Xml.XmlDocument.CreateXmlDeclaration(System.String,System.String,System.String)\n  - System.Xml.XmlDocument.DocumentElement\n  - System.Xml.XmlDocument.GetElementsByTagName(System.String)\n  - System.Xml.XmlDocument.GetElementsByTagName(System.String,System.String)\n  - System.Xml.XmlDocument.Implementation\n  - System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)\n  - System.Xml.XmlDocument.InnerText\n  - System.Xml.XmlDocument.InnerXml\n  - System.Xml.XmlDocument.IsReadOnly\n  - System.Xml.XmlDocument.Load(System.IO.Stream)\n  - System.Xml.XmlDocument.Load(System.IO.TextReader)\n  - System.Xml.XmlDocument.Load(System.Xml.XmlReader)\n  - System.Xml.XmlDocument.LoadXml(System.String)\n  - System.Xml.XmlDocument.LocalName\n  - System.Xml.XmlDocument.Name\n  - System.Xml.XmlDocument.NameTable\n  - System.Xml.XmlDocument.NodeChanged\n  - System.Xml.XmlDocument.NodeChanging\n  - System.Xml.XmlDocument.NodeInserted\n  - System.Xml.XmlDocument.NodeInserting\n  - System.Xml.XmlDocument.NodeRemoved\n  - System.Xml.XmlDocument.NodeRemoving\n  - System.Xml.XmlDocument.NodeType\n  - System.Xml.XmlDocument.OwnerDocument\n  - System.Xml.XmlDocument.ParentNode\n  - System.Xml.XmlDocument.PreserveWhitespace\n  - System.Xml.XmlDocument.ReadNode(System.Xml.XmlReader)\n  - System.Xml.XmlDocument.Save(System.IO.Stream)\n  - System.Xml.XmlDocument.Save(System.IO.TextWriter)\n  - System.Xml.XmlDocument.Save(System.Xml.XmlWriter)\n  - System.Xml.XmlDocument.WriteContentTo(System.Xml.XmlWriter)\n  - System.Xml.XmlDocument.WriteTo(System.Xml.XmlWriter)\n  langs:\n  - csharp\n  - vb\n  name: XmlDocument\n  fullName: System.Xml.XmlDocument\n  type: Class\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: XmlDocument\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 108\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Represents an XML document. </p>\\n<p>You can use this class to load, validate, edit, add, and position XML in a document. For examples, see the Tasks section on this page. </p>\\n\"\n  syntax:\n    content: 'public class XmlDocument : XmlNode, IEnumerable'\n    content.vb: >-\n      Public Class XmlDocument\n          Inherits XmlNode\n          Implements IEnumerable\n  inheritance:\n  - System.Object\n  - System.Xml.XmlNode\n  implements:\n  - System.Collections.IEnumerable\n  inheritedMembers:\n  - System.Xml.XmlNode.Attributes\n  - System.Xml.XmlNode.ChildNodes\n  - System.Xml.XmlNode.FirstChild\n  - System.Xml.XmlNode.HasChildNodes\n  - System.Xml.XmlNode.Item(System.String)\n  - System.Xml.XmlNode.Item(System.String,System.String)\n  - System.Xml.XmlNode.LastChild\n  - System.Xml.XmlNode.NamespaceURI\n  - System.Xml.XmlNode.NextSibling\n  - System.Xml.XmlNode.OuterXml\n  - System.Xml.XmlNode.Prefix\n  - System.Xml.XmlNode.PreviousSibling\n  - System.Xml.XmlNode.PreviousText\n  - System.Xml.XmlNode.Value\n  - System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)\n  - System.Xml.XmlNode.GetEnumerator\n  - System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)\n  - System.Xml.XmlNode.GetPrefixOfNamespace(System.String)\n  - System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)\n  - System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)\n  - System.Xml.XmlNode.Normalize\n  - System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)\n  - System.Xml.XmlNode.RemoveAll\n  - System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)\n  - System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)\n  - System.Xml.XmlNode.Supports(System.String,System.String)\n  - System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: XmlDocument\n  extensionMethods:\n  - System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  - System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  - System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  - System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n- uid: System.Xml.XmlDocument.#ctor\n  commentId: M:System.Xml.XmlDocument.#ctor\n  id: '#ctor'\n  parent: System.Xml.XmlDocument\n  langs:\n  - csharp\n  - vb\n  name: XmlDocument()\n  fullName: System.Xml.XmlDocument.XmlDocument()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 110\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Xml.XmlDocument\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public XmlDocument()\n    content.vb: Public Sub New\n  seealso:\n  - type: System.Xml.XmlDocument.Load(System.String)\n    commentId: M:System.Xml.XmlDocument.Load(System.String)\n  - type: System.Xml.XmlDocument.LoadXml(System.String)\n    commentId: M:System.Xml.XmlDocument.LoadXml(System.String)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XmlDocument.XmlDocument()\n- uid: System.Xml.XmlDocument.#ctor(System.Xml.XmlImplementation)\n  commentId: M:System.Xml.XmlDocument.#ctor(System.Xml.XmlImplementation)\n  id: '#ctor(System.Xml.XmlImplementation)'\n  parent: System.Xml.XmlDocument\n  langs:\n  - csharp\n  - vb\n  name: XmlDocument(XmlImplementation)\n  fullName: System.Xml.XmlDocument.XmlDocument(System.Xml.XmlImplementation)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 111\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Initializes a new instance of the <strong>XmlDocument</strong> class with the specified <xref href=\\\"System.Xml.XmlImplementation\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected XmlDocument(XmlImplementation imp)\n    content.vb: Protected Sub New(imp As XmlImplementation)\n    parameters:\n    - id: imp\n      type: System.Xml.XmlImplementation\n      description: \"\\n<p>The <strong>XmlImplementation</strong> to use. </p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: XmlDocument.XmlDocument(XmlImplementation)\n- uid: System.Xml.XmlDocument.#ctor(System.Xml.XmlNameTable)\n  commentId: M:System.Xml.XmlDocument.#ctor(System.Xml.XmlNameTable)\n  id: '#ctor(System.Xml.XmlNameTable)'\n  parent: System.Xml.XmlDocument\n  langs:\n  - csharp\n  - vb\n  name: XmlDocument(XmlNameTable)\n  fullName: System.Xml.XmlDocument.XmlDocument(System.Xml.XmlNameTable)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 112\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Initializes a new instance of the <strong>XmlDocument</strong> class with the specified <xref href=\\\"System.Xml.XmlNameTable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public XmlDocument(XmlNameTable nt)\n    content.vb: Public Sub New(nt As XmlNameTable)\n    parameters:\n    - id: nt\n      type: System.Xml.XmlNameTable\n      description: \"\\n<p>The <strong>XmlNameTable</strong> to use. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XmlDocument.XmlDocument(XmlNameTable)\n- uid: System.Xml.XmlDocument.BaseURI\n  commentId: P:System.Xml.XmlDocument.BaseURI\n  id: BaseURI\n  parent: System.Xml.XmlDocument\n  langs:\n  - csharp\n  - vb\n  name: BaseURI\n  fullName: System.Xml.XmlDocument.BaseURI\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BaseURI\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 113\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the base URI of the current node.</p>\\n\"\n  syntax:\n    content: public override string BaseURI { get; }\n    content.vb: Public Overrides ReadOnly Property BaseURI As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The location from which the node was loaded.</p>\\n\"\n  overridden: System.Xml.XmlNode.BaseURI\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: XmlDocument.BaseURI\n- uid: System.Xml.XmlDocument.DocumentElement\n  commentId: P:System.Xml.XmlDocument.DocumentElement\n  id: DocumentElement\n  parent: System.Xml.XmlDocument\n  langs:\n  - csharp\n  - vb\n  name: DocumentElement\n  fullName: System.Xml.XmlDocument.DocumentElement\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DocumentElement\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 114\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the root <xref href=\\\"System.Xml.XmlElement\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for the document.</p>\\n\"\n  syntax:\n    content: public XmlElement DocumentElement { get; }\n    content.vb: Public ReadOnly Property DocumentElement As XmlElement\n    parameters: []\n    return:\n      type: System.Xml.XmlElement\n      description: \"\\n<p>The <strong>XmlElement</strong> that represents the root of the XML document tree. If no root exists, <strong>null</strong> is returned.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: XmlDocument.DocumentElement\n- uid: System.Xml.XmlDocument.Implementation\n  commentId: P:System.Xml.XmlDocument.Implementation\n  id: Implementation\n  parent: System.Xml.XmlDocument\n  langs:\n  - csharp\n  - vb\n  name: Implementation\n  fullName: System.Xml.XmlDocument.Implementation\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Implementation\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 115\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Xml.XmlImplementation\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object for the current document.</p>\\n\"\n  syntax:\n    content: public XmlImplementation Implementation { get; }\n    content.vb: Public ReadOnly Property Implementation As XmlImplementation\n    parameters: []\n    return:\n      type: System.Xml.XmlImplementation\n      description: \"\\n<p>The <strong>XmlImplementation</strong> object for the current document.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: XmlDocument.Implementation\n- uid: System.Xml.XmlDocument.InnerText\n  commentId: P:System.Xml.XmlDocument.InnerText\n  id: InnerText\n  parent: System.Xml.XmlDocument\n  langs:\n  - csharp\n  - vb\n  name: InnerText\n  fullName: System.Xml.XmlDocument.InnerText\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: InnerText\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 116\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Throws an <xref href=\\\"System.InvalidOperationException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in all cases.</p>\\n\"\n  syntax:\n    content: public override string InnerText { set; }\n    content.vb: Public Overrides WriteOnly Property InnerText As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The values of the node and all its child nodes.</p>\\n\"\n  overridden: System.Xml.XmlNode.InnerText\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>In all cases.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  - set\n  modifiers.vb:\n  - Public\n  - Overrides\n  - WriteOnly\n  nameWithType: XmlDocument.InnerText\n- uid: System.Xml.XmlDocument.InnerXml\n  commentId: P:System.Xml.XmlDocument.InnerXml\n  id: InnerXml\n  parent: System.Xml.XmlDocument\n  langs:\n  - csharp\n  - vb\n  name: InnerXml\n  fullName: System.Xml.XmlDocument.InnerXml\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: InnerXml\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 117\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets or sets the markup representing the children of the current node.</p>\\n\"\n  syntax:\n    content: public override string InnerXml { get; set; }\n    content.vb: Public Overrides Property InnerXml As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The markup of the children of the current node.</p>\\n\"\n  overridden: System.Xml.XmlNode.InnerXml\n  exceptions:\n  - type: System.Xml.XmlException\n    commentId: T:System.Xml.XmlException\n    description: \"\\n<p>The XML specified when setting this property is not well-formed. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: XmlDocument.InnerXml\n- uid: System.Xml.XmlDocument.IsReadOnly\n  commentId: P:System.Xml.XmlDocument.IsReadOnly\n  id: IsReadOnly\n  parent: System.Xml.XmlDocument\n  langs:\n  - csharp\n  - vb\n  name: IsReadOnly\n  fullName: System.Xml.XmlDocument.IsReadOnly\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsReadOnly\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 118\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets a value indicating whether the current node is read-only.</p>\\n\"\n  syntax:\n    content: public override bool IsReadOnly { get; }\n    content.vb: Public Overrides ReadOnly Property IsReadOnly As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current node is read-only; otherwise <strong>false</strong>. <strong>XmlDocument</strong> nodes always return <strong>false</strong>.</p>\\n\"\n  overridden: System.Xml.XmlNode.IsReadOnly\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: XmlDocument.IsReadOnly\n- uid: System.Xml.XmlDocument.LocalName\n  commentId: P:System.Xml.XmlDocument.LocalName\n  id: LocalName\n  parent: System.Xml.XmlDocument\n  langs:\n  - csharp\n  - vb\n  name: LocalName\n  fullName: System.Xml.XmlDocument.LocalName\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LocalName\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 119\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the local name of the node.</p>\\n\"\n  syntax:\n    content: public override string LocalName { get; }\n    content.vb: Public Overrides ReadOnly Property LocalName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>For <strong>XmlDocument</strong> nodes, the local name is #document.</p>\\n\"\n  overridden: System.Xml.XmlNode.LocalName\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: XmlDocument.LocalName\n- uid: System.Xml.XmlDocument.Name\n  commentId: P:System.Xml.XmlDocument.Name\n  id: Name\n  parent: System.Xml.XmlDocument\n  langs:\n  - csharp\n  - vb\n  name: Name\n  fullName: System.Xml.XmlDocument.Name\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Name\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 120\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the qualified name of the node.</p>\\n\"\n  syntax:\n    content: public override string Name { get; }\n    content.vb: Public Overrides ReadOnly Property Name As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>For <strong>XmlDocument</strong> nodes, the name is #document.</p>\\n\"\n  overridden: System.Xml.XmlNode.Name\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: XmlDocument.Name\n- uid: System.Xml.XmlDocument.NameTable\n  commentId: P:System.Xml.XmlDocument.NameTable\n  id: NameTable\n  parent: System.Xml.XmlDocument\n  langs:\n  - csharp\n  - vb\n  name: NameTable\n  fullName: System.Xml.XmlDocument.NameTable\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NameTable\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 121\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Xml.XmlNameTable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> associated with this implementation.</p>\\n\"\n  syntax:\n    content: public XmlNameTable NameTable { get; }\n    content.vb: Public ReadOnly Property NameTable As XmlNameTable\n    parameters: []\n    return:\n      type: System.Xml.XmlNameTable\n      description: \"\\n<p>An <strong>XmlNameTable</strong> enabling you to get the atomized version of a string within the document.</p>\\n\"\n  seealso:\n  - type: System.Xml.XmlNameTable\n    commentId: T:System.Xml.XmlNameTable\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: XmlDocument.NameTable\n- uid: System.Xml.XmlDocument.NodeType\n  commentId: P:System.Xml.XmlDocument.NodeType\n  id: NodeType\n  parent: System.Xml.XmlDocument\n  langs:\n  - csharp\n  - vb\n  name: NodeType\n  fullName: System.Xml.XmlDocument.NodeType\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NodeType\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 122\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the type of the current node.</p>\\n\"\n  syntax:\n    content: public override XmlNodeType NodeType { get; }\n    content.vb: Public Overrides ReadOnly Property NodeType As XmlNodeType\n    parameters: []\n    return:\n      type: System.Xml.XmlNodeType\n      description: \"\\n<p>The node type. For <strong>XmlDocument</strong> nodes, this value is XmlNodeType.Document.</p>\\n\"\n  overridden: System.Xml.XmlNode.NodeType\n  seealso:\n  - type: System.Xml.XmlNodeType\n    commentId: T:System.Xml.XmlNodeType\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: XmlDocument.NodeType\n- uid: System.Xml.XmlDocument.OwnerDocument\n  commentId: P:System.Xml.XmlDocument.OwnerDocument\n  id: OwnerDocument\n  parent: System.Xml.XmlDocument\n  langs:\n  - csharp\n  - vb\n  name: OwnerDocument\n  fullName: System.Xml.XmlDocument.OwnerDocument\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OwnerDocument\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 123\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Xml.XmlDocument\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to which the current node belongs.</p>\\n\"\n  syntax:\n    content: public override XmlDocument OwnerDocument { get; }\n    content.vb: Public Overrides ReadOnly Property OwnerDocument As XmlDocument\n    parameters: []\n    return:\n      type: System.Xml.XmlDocument\n      description: \"\\n<p>For <strong>XmlDocument</strong> nodes (<xref href=\\\"System.Xml.XmlDocument.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equals XmlNodeType.Document), this property always returns <strong>null</strong>.</p>\\n\"\n  overridden: System.Xml.XmlNode.OwnerDocument\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: XmlDocument.OwnerDocument\n- uid: System.Xml.XmlDocument.ParentNode\n  commentId: P:System.Xml.XmlDocument.ParentNode\n  id: ParentNode\n  parent: System.Xml.XmlDocument\n  langs:\n  - csharp\n  - vb\n  name: ParentNode\n  fullName: System.Xml.XmlDocument.ParentNode\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ParentNode\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 124\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the parent node of this node (for nodes that can have parents).</p>\\n\"\n  syntax:\n    content: public override XmlNode ParentNode { get; }\n    content.vb: Public Overrides ReadOnly Property ParentNode As XmlNode\n    parameters: []\n    return:\n      type: System.Xml.XmlNode\n      description: \"\\n<p>Always returns <strong>null</strong>.</p>\\n\"\n  overridden: System.Xml.XmlNode.ParentNode\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: XmlDocument.ParentNode\n- uid: System.Xml.XmlDocument.PreserveWhitespace\n  commentId: P:System.Xml.XmlDocument.PreserveWhitespace\n  id: PreserveWhitespace\n  parent: System.Xml.XmlDocument\n  langs:\n  - csharp\n  - vb\n  name: PreserveWhitespace\n  fullName: System.Xml.XmlDocument.PreserveWhitespace\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PreserveWhitespace\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 125\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets or sets a value indicating whether to preserve white space in element content.</p>\\n\"\n  syntax:\n    content: public bool PreserveWhitespace { get; set; }\n    content.vb: Public Property PreserveWhitespace As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to preserve white space; otherwise <strong>false</strong>. The default is <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: XmlDocument.PreserveWhitespace\n- uid: System.Xml.XmlDocument.NodeChanged\n  commentId: E:System.Xml.XmlDocument.NodeChanged\n  id: NodeChanged\n  parent: System.Xml.XmlDocument\n  langs:\n  - csharp\n  - vb\n  name: NodeChanged\n  fullName: System.Xml.XmlDocument.NodeChanged\n  type: Event\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NodeChanged\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 126\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Occurs when the <xref href=\\\"System.Xml.XmlNode.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of a node belonging to this document has been changed.</p>\\n\"\n  syntax:\n    content: public event XmlNodeChangedEventHandler NodeChanged\n    content.vb: Public Event NodeChanged As XmlNodeChangedEventHandler\n    return:\n      type: System.Xml.XmlNodeChangedEventHandler\n  seealso:\n  - type: System.Xml.XmlNodeChangedEventArgs\n    commentId: T:System.Xml.XmlNodeChangedEventArgs\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XmlDocument.NodeChanged\n- uid: System.Xml.XmlDocument.NodeChanging\n  commentId: E:System.Xml.XmlDocument.NodeChanging\n  id: NodeChanging\n  parent: System.Xml.XmlDocument\n  langs:\n  - csharp\n  - vb\n  name: NodeChanging\n  fullName: System.Xml.XmlDocument.NodeChanging\n  type: Event\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NodeChanging\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 127\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Occurs when the <xref href=\\\"System.Xml.XmlNode.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of a node belonging to this document is about to be changed.</p>\\n\"\n  syntax:\n    content: public event XmlNodeChangedEventHandler NodeChanging\n    content.vb: Public Event NodeChanging As XmlNodeChangedEventHandler\n    return:\n      type: System.Xml.XmlNodeChangedEventHandler\n  seealso:\n  - type: System.Xml.XmlNodeChangedEventArgs\n    commentId: T:System.Xml.XmlNodeChangedEventArgs\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XmlDocument.NodeChanging\n- uid: System.Xml.XmlDocument.NodeInserted\n  commentId: E:System.Xml.XmlDocument.NodeInserted\n  id: NodeInserted\n  parent: System.Xml.XmlDocument\n  langs:\n  - csharp\n  - vb\n  name: NodeInserted\n  fullName: System.Xml.XmlDocument.NodeInserted\n  type: Event\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NodeInserted\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 128\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Occurs when a node belonging to this document has been inserted into another node.</p>\\n\"\n  syntax:\n    content: public event XmlNodeChangedEventHandler NodeInserted\n    content.vb: Public Event NodeInserted As XmlNodeChangedEventHandler\n    return:\n      type: System.Xml.XmlNodeChangedEventHandler\n  seealso:\n  - type: System.Xml.XmlNodeChangedEventArgs\n    commentId: T:System.Xml.XmlNodeChangedEventArgs\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XmlDocument.NodeInserted\n- uid: System.Xml.XmlDocument.NodeInserting\n  commentId: E:System.Xml.XmlDocument.NodeInserting\n  id: NodeInserting\n  parent: System.Xml.XmlDocument\n  langs:\n  - csharp\n  - vb\n  name: NodeInserting\n  fullName: System.Xml.XmlDocument.NodeInserting\n  type: Event\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NodeInserting\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 129\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Occurs when a node belonging to this document is about to be inserted into another node.</p>\\n\"\n  syntax:\n    content: public event XmlNodeChangedEventHandler NodeInserting\n    content.vb: Public Event NodeInserting As XmlNodeChangedEventHandler\n    return:\n      type: System.Xml.XmlNodeChangedEventHandler\n  seealso:\n  - type: System.Xml.XmlNodeChangedEventArgs\n    commentId: T:System.Xml.XmlNodeChangedEventArgs\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XmlDocument.NodeInserting\n- uid: System.Xml.XmlDocument.NodeRemoved\n  commentId: E:System.Xml.XmlDocument.NodeRemoved\n  id: NodeRemoved\n  parent: System.Xml.XmlDocument\n  langs:\n  - csharp\n  - vb\n  name: NodeRemoved\n  fullName: System.Xml.XmlDocument.NodeRemoved\n  type: Event\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NodeRemoved\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 130\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Occurs when a node belonging to this document has been removed from its parent.</p>\\n\"\n  syntax:\n    content: public event XmlNodeChangedEventHandler NodeRemoved\n    content.vb: Public Event NodeRemoved As XmlNodeChangedEventHandler\n    return:\n      type: System.Xml.XmlNodeChangedEventHandler\n  seealso:\n  - type: System.Xml.XmlNodeChangedEventArgs\n    commentId: T:System.Xml.XmlNodeChangedEventArgs\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XmlDocument.NodeRemoved\n- uid: System.Xml.XmlDocument.NodeRemoving\n  commentId: E:System.Xml.XmlDocument.NodeRemoving\n  id: NodeRemoving\n  parent: System.Xml.XmlDocument\n  langs:\n  - csharp\n  - vb\n  name: NodeRemoving\n  fullName: System.Xml.XmlDocument.NodeRemoving\n  type: Event\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NodeRemoving\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 131\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Occurs when a node belonging to this document is about to be removed from the document.</p>\\n\"\n  syntax:\n    content: public event XmlNodeChangedEventHandler NodeRemoving\n    content.vb: Public Event NodeRemoving As XmlNodeChangedEventHandler\n    return:\n      type: System.Xml.XmlNodeChangedEventHandler\n  seealso:\n  - type: System.Xml.XmlNodeChangedEventArgs\n    commentId: T:System.Xml.XmlNodeChangedEventArgs\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XmlDocument.NodeRemoving\n- uid: System.Xml.XmlDocument.CloneNode(System.Boolean)\n  commentId: M:System.Xml.XmlDocument.CloneNode(System.Boolean)\n  id: CloneNode(System.Boolean)\n  parent: System.Xml.XmlDocument\n  langs:\n  - csharp\n  - vb\n  name: CloneNode(Boolean)\n  fullName: System.Xml.XmlDocument.CloneNode(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CloneNode\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 132\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Creates a duplicate of this node.</p>\\n\"\n  syntax:\n    content: public override XmlNode CloneNode(bool deep)\n    content.vb: Public Overrides Function CloneNode(deep As Boolean) As XmlNode\n    parameters:\n    - id: deep\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to recursively clone the subtree under the specified node; <strong>false</strong> to clone only the node itself. </p>\\n\"\n    return:\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The cloned <strong>XmlDocument</strong> node.</p>\\n\"\n  overridden: System.Xml.XmlNode.CloneNode(System.Boolean)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: XmlDocument.CloneNode(Boolean)\n- uid: System.Xml.XmlDocument.CreateAttribute(System.String)\n  commentId: M:System.Xml.XmlDocument.CreateAttribute(System.String)\n  id: CreateAttribute(System.String)\n  parent: System.Xml.XmlDocument\n  langs:\n  - csharp\n  - vb\n  name: CreateAttribute(String)\n  fullName: System.Xml.XmlDocument.CreateAttribute(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateAttribute\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 133\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Creates an <xref href=\\\"System.Xml.XmlAttribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the specified <xref href=\\\"System.Xml.XmlDocument.Name\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public XmlAttribute CreateAttribute(string name)\n    content.vb: Public Function CreateAttribute(name As String) As XmlAttribute\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The qualified name of the attribute. If the name contains a colon, the <xref href=\\\"System.Xml.XmlNode.Prefix\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property reflects the part of the name preceding the first colon and the <xref href=\\\"System.Xml.XmlDocument.LocalName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property reflects the part of the name following the first colon. The <xref href=\\\"System.Xml.XmlNode.NamespaceURI\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> remains empty unless the prefix is a recognized built-in prefix such as xmlns. In this case <strong>NamespaceURI</strong> has a value of http://www.w3.org/2000/xmlns/. </p>\\n\"\n    return:\n      type: System.Xml.XmlAttribute\n      description: \"\\n<p>The new <strong>XmlAttribute</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XmlDocument.CreateAttribute(String)\n- uid: System.Xml.XmlDocument.CreateAttribute(System.String,System.String)\n  commentId: M:System.Xml.XmlDocument.CreateAttribute(System.String,System.String)\n  id: CreateAttribute(System.String,System.String)\n  parent: System.Xml.XmlDocument\n  langs:\n  - csharp\n  - vb\n  name: CreateAttribute(String, String)\n  fullName: System.Xml.XmlDocument.CreateAttribute(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateAttribute\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 134\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Creates an <xref href=\\\"System.Xml.XmlAttribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the specified qualified name and <xref href=\\\"System.Xml.XmlNode.NamespaceURI\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public XmlAttribute CreateAttribute(string qualifiedName, string namespaceURI)\n    content.vb: Public Function CreateAttribute(qualifiedName As String, namespaceURI As String) As XmlAttribute\n    parameters:\n    - id: qualifiedName\n      type: System.String\n      description: \"\\n<p>The qualified name of the attribute. If the name contains a colon then the <xref href=\\\"System.Xml.XmlNode.Prefix\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property will reflect the part of the name preceding the colon and the <xref href=\\\"System.Xml.XmlDocument.LocalName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property will reflect the part of the name after the colon. </p>\\n\"\n    - id: namespaceURI\n      type: System.String\n      description: \"\\n<p>The namespaceURI of the attribute. If the qualified name includes a prefix of xmlns, then this parameter must be http://www.w3.org/2000/xmlns/. </p>\\n\"\n    return:\n      type: System.Xml.XmlAttribute\n      description: \"\\n<p>The new <strong>XmlAttribute</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XmlDocument.CreateAttribute(String, String)\n- uid: System.Xml.XmlDocument.CreateAttribute(System.String,System.String,System.String)\n  commentId: M:System.Xml.XmlDocument.CreateAttribute(System.String,System.String,System.String)\n  id: CreateAttribute(System.String,System.String,System.String)\n  parent: System.Xml.XmlDocument\n  langs:\n  - csharp\n  - vb\n  name: CreateAttribute(String, String, String)\n  fullName: System.Xml.XmlDocument.CreateAttribute(System.String, System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateAttribute\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 135\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Creates an <xref href=\\\"System.Xml.XmlAttribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the specified <xref href=\\\"System.Xml.XmlNode.Prefix\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Xml.XmlDocument.LocalName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Xml.XmlNode.NamespaceURI\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual XmlAttribute CreateAttribute(string prefix, string localName, string namespaceURI)\n    content.vb: Public Overridable Function CreateAttribute(prefix As String, localName As String, namespaceURI As String) As XmlAttribute\n    parameters:\n    - id: prefix\n      type: System.String\n      description: \"\\n<p>The prefix of the attribute (if any). String.Empty and <strong>null</strong> are equivalent. </p>\\n\"\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the attribute. </p>\\n\"\n    - id: namespaceURI\n      type: System.String\n      description: \"\\n<p>The namespace URI of the attribute (if any). String.Empty and <strong>null</strong> are equivalent. If <em>prefix</em> is xmlns, then this parameter must be http://www.w3.org/2000/xmlns/; otherwise an exception is thrown. </p>\\n\"\n    return:\n      type: System.Xml.XmlAttribute\n      description: \"\\n<p>The new <strong>XmlAttribute</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDocument.CreateAttribute(String, String, String)\n- uid: System.Xml.XmlDocument.CreateCDataSection(System.String)\n  commentId: M:System.Xml.XmlDocument.CreateCDataSection(System.String)\n  id: CreateCDataSection(System.String)\n  parent: System.Xml.XmlDocument\n  langs:\n  - csharp\n  - vb\n  name: CreateCDataSection(String)\n  fullName: System.Xml.XmlDocument.CreateCDataSection(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateCDataSection\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 136\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Creates an <xref href=\\\"System.Xml.XmlCDataSection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing the specified data.</p>\\n\"\n  syntax:\n    content: public virtual XmlCDataSection CreateCDataSection(string data)\n    content.vb: Public Overridable Function CreateCDataSection(data As String) As XmlCDataSection\n    parameters:\n    - id: data\n      type: System.String\n      description: \"\\n<p>The content of the new <strong>XmlCDataSection</strong>. </p>\\n\"\n    return:\n      type: System.Xml.XmlCDataSection\n      description: \"\\n<p>The new <strong>XmlCDataSection</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDocument.CreateCDataSection(String)\n- uid: System.Xml.XmlDocument.CreateComment(System.String)\n  commentId: M:System.Xml.XmlDocument.CreateComment(System.String)\n  id: CreateComment(System.String)\n  parent: System.Xml.XmlDocument\n  langs:\n  - csharp\n  - vb\n  name: CreateComment(String)\n  fullName: System.Xml.XmlDocument.CreateComment(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateComment\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 137\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Creates an <xref href=\\\"System.Xml.XmlComment\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing the specified data.</p>\\n\"\n  syntax:\n    content: public virtual XmlComment CreateComment(string data)\n    content.vb: Public Overridable Function CreateComment(data As String) As XmlComment\n    parameters:\n    - id: data\n      type: System.String\n      description: \"\\n<p>The content of the new <strong>XmlComment</strong>. </p>\\n\"\n    return:\n      type: System.Xml.XmlComment\n      description: \"\\n<p>The new <strong>XmlComment</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDocument.CreateComment(String)\n- uid: System.Xml.XmlDocument.CreateDocumentFragment\n  commentId: M:System.Xml.XmlDocument.CreateDocumentFragment\n  id: CreateDocumentFragment\n  parent: System.Xml.XmlDocument\n  langs:\n  - csharp\n  - vb\n  name: CreateDocumentFragment()\n  fullName: System.Xml.XmlDocument.CreateDocumentFragment()\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateDocumentFragment\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 138\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Creates an <xref href=\\\"System.Xml.XmlDocumentFragment\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual XmlDocumentFragment CreateDocumentFragment()\n    content.vb: Public Overridable Function CreateDocumentFragment As XmlDocumentFragment\n    return:\n      type: System.Xml.XmlDocumentFragment\n      description: \"\\n<p>The new <strong>XmlDocumentFragment</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDocument.CreateDocumentFragment()\n- uid: System.Xml.XmlDocument.CreateElement(System.String)\n  commentId: M:System.Xml.XmlDocument.CreateElement(System.String)\n  id: CreateElement(System.String)\n  parent: System.Xml.XmlDocument\n  langs:\n  - csharp\n  - vb\n  name: CreateElement(String)\n  fullName: System.Xml.XmlDocument.CreateElement(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateElement\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 139\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Creates an element with the specified name.</p>\\n\"\n  syntax:\n    content: public XmlElement CreateElement(string name)\n    content.vb: Public Function CreateElement(name As String) As XmlElement\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The qualified name of the element. If the name contains a colon then the <xref href=\\\"System.Xml.XmlNode.Prefix\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property reflects the part of the name preceding the colon and the <xref href=\\\"System.Xml.XmlDocument.LocalName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property reflects the part of the name after the colon. The qualified name cannot include a prefix of'xmlns'. </p>\\n\"\n    return:\n      type: System.Xml.XmlElement\n      description: \"\\n<p>The new <strong>XmlElement</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XmlDocument.CreateElement(String)\n- uid: System.Xml.XmlDocument.CreateElement(System.String,System.String)\n  commentId: M:System.Xml.XmlDocument.CreateElement(System.String,System.String)\n  id: CreateElement(System.String,System.String)\n  parent: System.Xml.XmlDocument\n  langs:\n  - csharp\n  - vb\n  name: CreateElement(String, String)\n  fullName: System.Xml.XmlDocument.CreateElement(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateElement\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 140\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Creates an <xref href=\\\"System.Xml.XmlElement\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the qualified name and <xref href=\\\"System.Xml.XmlNode.NamespaceURI\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public XmlElement CreateElement(string qualifiedName, string namespaceURI)\n    content.vb: Public Function CreateElement(qualifiedName As String, namespaceURI As String) As XmlElement\n    parameters:\n    - id: qualifiedName\n      type: System.String\n      description: \"\\n<p>The qualified name of the element. If the name contains a colon then the <xref href=\\\"System.Xml.XmlNode.Prefix\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property will reflect the part of the name preceding the colon and the <xref href=\\\"System.Xml.XmlDocument.LocalName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property will reflect the part of the name after the colon. The qualified name cannot include a prefix of'xmlns'. </p>\\n\"\n    - id: namespaceURI\n      type: System.String\n      description: \"\\n<p>The namespace URI of the element. </p>\\n\"\n    return:\n      type: System.Xml.XmlElement\n      description: \"\\n<p>The new <strong>XmlElement</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XmlDocument.CreateElement(String, String)\n- uid: System.Xml.XmlDocument.CreateElement(System.String,System.String,System.String)\n  commentId: M:System.Xml.XmlDocument.CreateElement(System.String,System.String,System.String)\n  id: CreateElement(System.String,System.String,System.String)\n  parent: System.Xml.XmlDocument\n  langs:\n  - csharp\n  - vb\n  name: CreateElement(String, String, String)\n  fullName: System.Xml.XmlDocument.CreateElement(System.String, System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateElement\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 141\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Creates an element with the specified <xref href=\\\"System.Xml.XmlNode.Prefix\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Xml.XmlDocument.LocalName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Xml.XmlNode.NamespaceURI\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual XmlElement CreateElement(string prefix, string localName, string namespaceURI)\n    content.vb: Public Overridable Function CreateElement(prefix As String, localName As String, namespaceURI As String) As XmlElement\n    parameters:\n    - id: prefix\n      type: System.String\n      description: \"\\n<p>The prefix of the new element (if any). String.Empty and <strong>null</strong> are equivalent. </p>\\n\"\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the new element. </p>\\n\"\n    - id: namespaceURI\n      type: System.String\n      description: \"\\n<p>The namespace URI of the new element (if any). String.Empty and <strong>null</strong> are equivalent. </p>\\n\"\n    return:\n      type: System.Xml.XmlElement\n      description: \"\\n<p>The new <xref href=\\\"System.Xml.XmlElement\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDocument.CreateElement(String, String, String)\n- uid: System.Xml.XmlDocument.CreateNode(System.String,System.String,System.String)\n  commentId: M:System.Xml.XmlDocument.CreateNode(System.String,System.String,System.String)\n  id: CreateNode(System.String,System.String,System.String)\n  parent: System.Xml.XmlDocument\n  langs:\n  - csharp\n  - vb\n  name: CreateNode(String, String, String)\n  fullName: System.Xml.XmlDocument.CreateNode(System.String, System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateNode\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 142\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Creates an <xref href=\\\"System.Xml.XmlNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the specified node type, <xref href=\\\"System.Xml.XmlDocument.Name\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Xml.XmlNode.NamespaceURI\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual XmlNode CreateNode(string nodeTypeString, string name, string namespaceURI)\n    content.vb: Public Overridable Function CreateNode(nodeTypeString As String, name As String, namespaceURI As String) As XmlNode\n    parameters:\n    - id: nodeTypeString\n      type: System.String\n      description: \"\\n<p>String version of the <xref href=\\\"System.Xml.XmlNodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the new node. This parameter must be one of the values listed in the table below. </p>\\n\"\n    - id: name\n      type: System.String\n      description: \"\\n<p>The qualified name of the new node. If the name contains a colon, it is parsed into <xref href=\\\"System.Xml.XmlNode.Prefix\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Xml.XmlDocument.LocalName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> components. </p>\\n\"\n    - id: namespaceURI\n      type: System.String\n      description: \"\\n<p>The namespace URI of the new node. </p>\\n\"\n    return:\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The new <strong>XmlNode</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The name was not provided and the <strong>XmlNodeType</strong> requires a name; or <em>nodeTypeString</em> is not one of the strings listed below. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDocument.CreateNode(String, String, String)\n- uid: System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String)\n  commentId: M:System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String)\n  id: CreateNode(System.Xml.XmlNodeType,System.String,System.String)\n  parent: System.Xml.XmlDocument\n  langs:\n  - csharp\n  - vb\n  name: CreateNode(XmlNodeType, String, String)\n  fullName: System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType, System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateNode\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 143\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Creates an <xref href=\\\"System.Xml.XmlNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the specified <xref href=\\\"System.Xml.XmlNodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Xml.XmlDocument.Name\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Xml.XmlNode.NamespaceURI\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual XmlNode CreateNode(XmlNodeType type, string name, string namespaceURI)\n    content.vb: Public Overridable Function CreateNode(type As XmlNodeType, name As String, namespaceURI As String) As XmlNode\n    parameters:\n    - id: type\n      type: System.Xml.XmlNodeType\n      description: \"\\n<p>The <strong>XmlNodeType</strong> of the new node. </p>\\n\"\n    - id: name\n      type: System.String\n      description: \"\\n<p>The qualified name of the new node. If the name contains a colon then it is parsed into <xref href=\\\"System.Xml.XmlNode.Prefix\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Xml.XmlDocument.LocalName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> components. </p>\\n\"\n    - id: namespaceURI\n      type: System.String\n      description: \"\\n<p>The namespace URI of the new node. </p>\\n\"\n    return:\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The new <strong>XmlNode</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The name was not provided and the <strong>XmlNodeType</strong> requires a name. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDocument.CreateNode(XmlNodeType, String, String)\n- uid: System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String,System.String)\n  commentId: M:System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String,System.String)\n  id: CreateNode(System.Xml.XmlNodeType,System.String,System.String,System.String)\n  parent: System.Xml.XmlDocument\n  langs:\n  - csharp\n  - vb\n  name: CreateNode(XmlNodeType, String, String, String)\n  fullName: System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType, System.String, System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateNode\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 144\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Xml.XmlNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the specified <xref href=\\\"System.Xml.XmlNodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Xml.XmlNode.Prefix\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Xml.XmlDocument.Name\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Xml.XmlNode.NamespaceURI\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual XmlNode CreateNode(XmlNodeType type, string prefix, string name, string namespaceURI)\n    content.vb: Public Overridable Function CreateNode(type As XmlNodeType, prefix As String, name As String, namespaceURI As String) As XmlNode\n    parameters:\n    - id: type\n      type: System.Xml.XmlNodeType\n      description: \"\\n<p>The <strong>XmlNodeType</strong> of the new node. </p>\\n\"\n    - id: prefix\n      type: System.String\n      description: \"\\n<p>The prefix of the new node. </p>\\n\"\n    - id: name\n      type: System.String\n      description: \"\\n<p>The local name of the new node. </p>\\n\"\n    - id: namespaceURI\n      type: System.String\n      description: \"\\n<p>The namespace URI of the new node. </p>\\n\"\n    return:\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The new <strong>XmlNode</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The name was not provided and the <strong>XmlNodeType</strong> requires a name. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDocument.CreateNode(XmlNodeType, String, String, String)\n- uid: System.Xml.XmlDocument.CreateProcessingInstruction(System.String,System.String)\n  commentId: M:System.Xml.XmlDocument.CreateProcessingInstruction(System.String,System.String)\n  id: CreateProcessingInstruction(System.String,System.String)\n  parent: System.Xml.XmlDocument\n  langs:\n  - csharp\n  - vb\n  name: CreateProcessingInstruction(String, String)\n  fullName: System.Xml.XmlDocument.CreateProcessingInstruction(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateProcessingInstruction\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 145\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Creates an <xref href=\\\"System.Xml.XmlProcessingInstruction\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the specified name and data.</p>\\n\"\n  syntax:\n    content: public virtual XmlProcessingInstruction CreateProcessingInstruction(string target, string data)\n    content.vb: Public Overridable Function CreateProcessingInstruction(target As String, data As String) As XmlProcessingInstruction\n    parameters:\n    - id: target\n      type: System.String\n      description: \"\\n<p>The name of the processing instruction. </p>\\n\"\n    - id: data\n      type: System.String\n      description: \"\\n<p>The data for the processing instruction. </p>\\n\"\n    return:\n      type: System.Xml.XmlProcessingInstruction\n      description: \"\\n<p>The new <strong>XmlProcessingInstruction</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDocument.CreateProcessingInstruction(String, String)\n- uid: System.Xml.XmlDocument.CreateSignificantWhitespace(System.String)\n  commentId: M:System.Xml.XmlDocument.CreateSignificantWhitespace(System.String)\n  id: CreateSignificantWhitespace(System.String)\n  parent: System.Xml.XmlDocument\n  langs:\n  - csharp\n  - vb\n  name: CreateSignificantWhitespace(String)\n  fullName: System.Xml.XmlDocument.CreateSignificantWhitespace(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateSignificantWhitespace\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 146\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Creates an <xref href=\\\"System.Xml.XmlSignificantWhitespace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> node.</p>\\n\"\n  syntax:\n    content: public virtual XmlSignificantWhitespace CreateSignificantWhitespace(string text)\n    content.vb: Public Overridable Function CreateSignificantWhitespace(text As String) As XmlSignificantWhitespace\n    parameters:\n    - id: text\n      type: System.String\n      description: \"\\n<p>The string must contain only the following characters &#20; &#10; &#13; and &#9; </p>\\n\"\n    return:\n      type: System.Xml.XmlSignificantWhitespace\n      description: \"\\n<p>A new <strong>XmlSignificantWhitespace</strong> node.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDocument.CreateSignificantWhitespace(String)\n- uid: System.Xml.XmlDocument.CreateTextNode(System.String)\n  commentId: M:System.Xml.XmlDocument.CreateTextNode(System.String)\n  id: CreateTextNode(System.String)\n  parent: System.Xml.XmlDocument\n  langs:\n  - csharp\n  - vb\n  name: CreateTextNode(String)\n  fullName: System.Xml.XmlDocument.CreateTextNode(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateTextNode\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 147\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Creates an <xref href=\\\"System.Xml.XmlText\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the specified text.</p>\\n\"\n  syntax:\n    content: public virtual XmlText CreateTextNode(string text)\n    content.vb: Public Overridable Function CreateTextNode(text As String) As XmlText\n    parameters:\n    - id: text\n      type: System.String\n      description: \"\\n<p>The text for the Text node. </p>\\n\"\n    return:\n      type: System.Xml.XmlText\n      description: \"\\n<p>The new <strong>XmlText</strong> node.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDocument.CreateTextNode(String)\n- uid: System.Xml.XmlDocument.CreateWhitespace(System.String)\n  commentId: M:System.Xml.XmlDocument.CreateWhitespace(System.String)\n  id: CreateWhitespace(System.String)\n  parent: System.Xml.XmlDocument\n  langs:\n  - csharp\n  - vb\n  name: CreateWhitespace(String)\n  fullName: System.Xml.XmlDocument.CreateWhitespace(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateWhitespace\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 148\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Creates an <xref href=\\\"System.Xml.XmlWhitespace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> node.</p>\\n\"\n  syntax:\n    content: public virtual XmlWhitespace CreateWhitespace(string text)\n    content.vb: Public Overridable Function CreateWhitespace(text As String) As XmlWhitespace\n    parameters:\n    - id: text\n      type: System.String\n      description: \"\\n<p>The string must contain only the following characters &#20; &#10; &#13; and &#9; </p>\\n\"\n    return:\n      type: System.Xml.XmlWhitespace\n      description: \"\\n<p>A new <strong>XmlWhitespace</strong> node.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDocument.CreateWhitespace(String)\n- uid: System.Xml.XmlDocument.CreateXmlDeclaration(System.String,System.String,System.String)\n  commentId: M:System.Xml.XmlDocument.CreateXmlDeclaration(System.String,System.String,System.String)\n  id: CreateXmlDeclaration(System.String,System.String,System.String)\n  parent: System.Xml.XmlDocument\n  langs:\n  - csharp\n  - vb\n  name: CreateXmlDeclaration(String, String, String)\n  fullName: System.Xml.XmlDocument.CreateXmlDeclaration(System.String, System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateXmlDeclaration\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 149\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Creates an <xref href=\\\"System.Xml.XmlDeclaration\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> node with the specified values.</p>\\n\"\n  syntax:\n    content: public virtual XmlDeclaration CreateXmlDeclaration(string version, string encoding, string standalone)\n    content.vb: Public Overridable Function CreateXmlDeclaration(version As String, encoding As String, standalone As String) As XmlDeclaration\n    parameters:\n    - id: version\n      type: System.String\n      description: \"\\n<p>The version must be \\\"1.0\\\". </p>\\n\"\n    - id: encoding\n      type: System.String\n      description: \"\\n<p>The value of the encoding attribute. This is the encoding that is used when you save the <xref href=\\\"System.Xml.XmlDocument\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a file or a stream; therefore, it must be set to a string supported by the <xref href=\\\"System.Text.Encoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class, otherwise <xref href=\\\"System.Xml.XmlDocument.Save(System.String)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> fails. If this is <strong>null</strong> or String.Empty, the <strong>Save</strong> method does not write an encoding attribute on the XML declaration and therefore the default encoding, UTF-8, is used.</p>\\n<p>Note: If the <strong>XmlDocument</strong> is saved to either a <xref href=\\\"System.IO.TextWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or an <xref href=\\\"System.Xml.XmlTextWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, this encoding value is discarded. Instead, the encoding of the <strong>TextWriter</strong> or the <strong>XmlTextWriter</strong> is used. This ensures that the XML written out can be read back using the correct encoding. </p>\\n\"\n    - id: standalone\n      type: System.String\n      description: \"\\n<p>The value must be either \\\"yes\\\" or \\\"no\\\". If this is <strong>null</strong> or String.Empty, the <strong>Save</strong> method does not write a standalone attribute on the XML declaration. </p>\\n\"\n    return:\n      type: System.Xml.XmlDeclaration\n      description: \"\\n<p>The new <strong>XmlDeclaration</strong> node.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The values of <em>version</em> or <em>standalone</em> are something other than the ones specified above. </p>\\n\"\n  seealso:\n  - type: System.Xml.XmlDeclaration\n    commentId: T:System.Xml.XmlDeclaration\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDocument.CreateXmlDeclaration(String, String, String)\n- uid: System.Xml.XmlDocument.GetElementsByTagName(System.String)\n  commentId: M:System.Xml.XmlDocument.GetElementsByTagName(System.String)\n  id: GetElementsByTagName(System.String)\n  parent: System.Xml.XmlDocument\n  langs:\n  - csharp\n  - vb\n  name: GetElementsByTagName(String)\n  fullName: System.Xml.XmlDocument.GetElementsByTagName(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetElementsByTagName\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 150\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Returns an <xref href=\\\"System.Xml.XmlNodeList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing a list of all descendant elements that match the specified <xref href=\\\"System.Xml.XmlDocument.Name\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual XmlNodeList GetElementsByTagName(string name)\n    content.vb: Public Overridable Function GetElementsByTagName(name As String) As XmlNodeList\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The qualified name to match. It is matched against the <strong>Name</strong> property of the matching node. The special value \\\"*\\\" matches all tags. </p>\\n\"\n    return:\n      type: System.Xml.XmlNodeList\n      description: \"\\n<p>An <xref href=\\\"System.Xml.XmlNodeList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing a list of all matching nodes. If no nodes match <em>name</em>, the returned collection will be empty.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDocument.GetElementsByTagName(String)\n- uid: System.Xml.XmlDocument.GetElementsByTagName(System.String,System.String)\n  commentId: M:System.Xml.XmlDocument.GetElementsByTagName(System.String,System.String)\n  id: GetElementsByTagName(System.String,System.String)\n  parent: System.Xml.XmlDocument\n  langs:\n  - csharp\n  - vb\n  name: GetElementsByTagName(String, String)\n  fullName: System.Xml.XmlDocument.GetElementsByTagName(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetElementsByTagName\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 151\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Returns an <xref href=\\\"System.Xml.XmlNodeList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing a list of all descendant elements that match the specified <xref href=\\\"System.Xml.XmlDocument.LocalName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Xml.XmlNode.NamespaceURI\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual XmlNodeList GetElementsByTagName(string localName, string namespaceURI)\n    content.vb: Public Overridable Function GetElementsByTagName(localName As String, namespaceURI As String) As XmlNodeList\n    parameters:\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The LocalName to match. The special value \\\"*\\\" matches all tags. </p>\\n\"\n    - id: namespaceURI\n      type: System.String\n      description: \"\\n<p>NamespaceURI to match. </p>\\n\"\n    return:\n      type: System.Xml.XmlNodeList\n      description: \"\\n<p>An <xref href=\\\"System.Xml.XmlNodeList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing a list of all matching nodes. If no nodes match the specified <em>localName</em> and <em>namespaceURI</em>, the returned collection will be empty.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDocument.GetElementsByTagName(String, String)\n- uid: System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)\n  commentId: M:System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)\n  id: ImportNode(System.Xml.XmlNode,System.Boolean)\n  parent: System.Xml.XmlDocument\n  langs:\n  - csharp\n  - vb\n  name: ImportNode(XmlNode, Boolean)\n  fullName: System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ImportNode\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 152\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Imports a node from another document to the current document.</p>\\n\"\n  syntax:\n    content: public virtual XmlNode ImportNode(XmlNode node, bool deep)\n    content.vb: Public Overridable Function ImportNode(node As XmlNode, deep As Boolean) As XmlNode\n    parameters:\n    - id: node\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The node being imported. </p>\\n\"\n    - id: deep\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to perform a deep clone; otherwise, <strong>false</strong>. </p>\\n\"\n    return:\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The imported <xref href=\\\"System.Xml.XmlNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>Calling this method on a node type which cannot be imported. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDocument.ImportNode(XmlNode, Boolean)\n- uid: System.Xml.XmlDocument.Load(System.IO.Stream)\n  commentId: M:System.Xml.XmlDocument.Load(System.IO.Stream)\n  id: Load(System.IO.Stream)\n  parent: System.Xml.XmlDocument\n  langs:\n  - csharp\n  - vb\n  name: Load(Stream)\n  fullName: System.Xml.XmlDocument.Load(System.IO.Stream)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Load\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 153\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Loads the XML document from the specified stream.</p>\\n\"\n  syntax:\n    content: public virtual void Load(Stream inStream)\n    content.vb: Public Overridable Sub Load(inStream As Stream)\n    parameters:\n    - id: inStream\n      type: System.IO.Stream\n      description: \"\\n<p>The stream containing the XML document to load. </p>\\n\"\n  exceptions:\n  - type: System.Xml.XmlException\n    commentId: T:System.Xml.XmlException\n    description: \"\\n<p>There is a load or parse error in the XML. In this case, a <xref href=\\\"System.IO.FileNotFoundException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is raised. </p>\\n\"\n  seealso:\n  - type: System.Xml.Schema.ValidationEventArgs\n    commentId: T:System.Xml.Schema.ValidationEventArgs\n  - type: System.Xml.Schema.XmlSeverityType\n    commentId: T:System.Xml.Schema.XmlSeverityType\n  - type: System.Xml.XmlValidatingReader.Schemas\n    commentId: P:System.Xml.XmlValidatingReader.Schemas\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDocument.Load(Stream)\n- uid: System.Xml.XmlDocument.Load(System.IO.TextReader)\n  commentId: M:System.Xml.XmlDocument.Load(System.IO.TextReader)\n  id: Load(System.IO.TextReader)\n  parent: System.Xml.XmlDocument\n  langs:\n  - csharp\n  - vb\n  name: Load(TextReader)\n  fullName: System.Xml.XmlDocument.Load(System.IO.TextReader)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Load\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 154\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Loads the XML document from the specified <xref href=\\\"System.IO.TextReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual void Load(TextReader txtReader)\n    content.vb: Public Overridable Sub Load(txtReader As TextReader)\n    parameters:\n    - id: txtReader\n      type: System.IO.TextReader\n      description: \"\\n<p>The <strong>TextReader</strong> used to feed the XML data into the document. </p>\\n\"\n  exceptions:\n  - type: System.Xml.XmlException\n    commentId: T:System.Xml.XmlException\n    description: \"\\n<p>There is a load or parse error in the XML. In this case, the document remains empty. </p>\\n\"\n  seealso:\n  - type: System.IO.StreamReader\n    commentId: T:System.IO.StreamReader\n  - type: System.Xml.Schema.ValidationEventArgs\n    commentId: T:System.Xml.Schema.ValidationEventArgs\n  - type: System.Xml.Schema.XmlSeverityType\n    commentId: T:System.Xml.Schema.XmlSeverityType\n  - type: System.Xml.XmlValidatingReader.Schemas\n    commentId: P:System.Xml.XmlValidatingReader.Schemas\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDocument.Load(TextReader)\n- uid: System.Xml.XmlDocument.Load(System.Xml.XmlReader)\n  commentId: M:System.Xml.XmlDocument.Load(System.Xml.XmlReader)\n  id: Load(System.Xml.XmlReader)\n  parent: System.Xml.XmlDocument\n  langs:\n  - csharp\n  - vb\n  name: Load(XmlReader)\n  fullName: System.Xml.XmlDocument.Load(System.Xml.XmlReader)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Load\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 155\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Loads the XML document from the specified <xref href=\\\"System.Xml.XmlReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual void Load(XmlReader reader)\n    content.vb: Public Overridable Sub Load(reader As XmlReader)\n    parameters:\n    - id: reader\n      type: System.Xml.XmlReader\n      description: \"\\n<p>The <strong>XmlReader</strong> used to feed the XML data into the document. </p>\\n\"\n  exceptions:\n  - type: System.Xml.XmlException\n    commentId: T:System.Xml.XmlException\n    description: \"\\n<p>There is a load or parse error in the XML. In this case, the document remains empty. </p>\\n\"\n  seealso:\n  - type: System.Xml.Schema.ValidationEventArgs\n    commentId: T:System.Xml.Schema.ValidationEventArgs\n  - type: System.Xml.Schema.XmlSeverityType\n    commentId: T:System.Xml.Schema.XmlSeverityType\n  - type: System.Xml.XmlValidatingReader.Schemas\n    commentId: P:System.Xml.XmlValidatingReader.Schemas\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDocument.Load(XmlReader)\n- uid: System.Xml.XmlDocument.LoadXml(System.String)\n  commentId: M:System.Xml.XmlDocument.LoadXml(System.String)\n  id: LoadXml(System.String)\n  parent: System.Xml.XmlDocument\n  langs:\n  - csharp\n  - vb\n  name: LoadXml(String)\n  fullName: System.Xml.XmlDocument.LoadXml(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LoadXml\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 156\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Loads the XML document from the specified string.</p>\\n\"\n  syntax:\n    content: public virtual void LoadXml(string xml)\n    content.vb: Public Overridable Sub LoadXml(xml As String)\n    parameters:\n    - id: xml\n      type: System.String\n      description: \"\\n<p>String containing the XML document to load. </p>\\n\"\n  exceptions:\n  - type: System.Xml.XmlException\n    commentId: T:System.Xml.XmlException\n    description: \"\\n<p>There is a load or parse error in the XML. In this case, the document remains empty. </p>\\n\"\n  seealso:\n  - type: System.Xml.XmlDocument.PreserveWhitespace\n    commentId: P:System.Xml.XmlDocument.PreserveWhitespace\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDocument.LoadXml(String)\n- uid: System.Xml.XmlDocument.ReadNode(System.Xml.XmlReader)\n  commentId: M:System.Xml.XmlDocument.ReadNode(System.Xml.XmlReader)\n  id: ReadNode(System.Xml.XmlReader)\n  parent: System.Xml.XmlDocument\n  langs:\n  - csharp\n  - vb\n  name: ReadNode(XmlReader)\n  fullName: System.Xml.XmlDocument.ReadNode(System.Xml.XmlReader)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadNode\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 157\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Creates an <xref href=\\\"System.Xml.XmlNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object based on the information in the <xref href=\\\"System.Xml.XmlReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The reader must be positioned on a node or attribute.</p>\\n\"\n  syntax:\n    content: public virtual XmlNode ReadNode(XmlReader reader)\n    content.vb: Public Overridable Function ReadNode(reader As XmlReader) As XmlNode\n    parameters:\n    - id: reader\n      type: System.Xml.XmlReader\n      description: \"\\n<p>The XML source </p>\\n\"\n    return:\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The new <strong>XmlNode</strong> or <strong>null</strong> if no more nodes exist.</p>\\n\"\n  exceptions:\n  - type: System.NullReferenceException\n    commentId: T:System.NullReferenceException\n    description: \"\\n<p>The reader is positioned on a node type that does not translate to a valid DOM node (for example, EndElement or EndEntity). </p>\\n\"\n  seealso:\n  - type: System.Xml.XmlReader\n    commentId: T:System.Xml.XmlReader\n  - type: System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)\n    commentId: M:System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDocument.ReadNode(XmlReader)\n- uid: System.Xml.XmlDocument.Save(System.IO.Stream)\n  commentId: M:System.Xml.XmlDocument.Save(System.IO.Stream)\n  id: Save(System.IO.Stream)\n  parent: System.Xml.XmlDocument\n  langs:\n  - csharp\n  - vb\n  name: Save(Stream)\n  fullName: System.Xml.XmlDocument.Save(System.IO.Stream)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Save\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 158\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Saves the XML document to the specified stream.</p>\\n\"\n  syntax:\n    content: public virtual void Save(Stream outStream)\n    content.vb: Public Overridable Sub Save(outStream As Stream)\n    parameters:\n    - id: outStream\n      type: System.IO.Stream\n      description: \"\\n<p>The stream to which you want to save. </p>\\n\"\n  exceptions:\n  - type: System.Xml.XmlException\n    commentId: T:System.Xml.XmlException\n    description: \"\\n<p>The operation would not result in a well formed XML document (for example, no document element or duplicate XML declarations). </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDocument.Save(Stream)\n- uid: System.Xml.XmlDocument.Save(System.IO.TextWriter)\n  commentId: M:System.Xml.XmlDocument.Save(System.IO.TextWriter)\n  id: Save(System.IO.TextWriter)\n  parent: System.Xml.XmlDocument\n  langs:\n  - csharp\n  - vb\n  name: Save(TextWriter)\n  fullName: System.Xml.XmlDocument.Save(System.IO.TextWriter)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Save\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 159\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Saves the XML document to the specified <xref href=\\\"System.IO.TextWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual void Save(TextWriter writer)\n    content.vb: Public Overridable Sub Save(writer As TextWriter)\n    parameters:\n    - id: writer\n      type: System.IO.TextWriter\n      description: \"\\n<p>The <strong>TextWriter</strong> to which you want to save. </p>\\n\"\n  exceptions:\n  - type: System.Xml.XmlException\n    commentId: T:System.Xml.XmlException\n    description: \"\\n<p>The operation would not result in a well formed XML document (for example, no document element or duplicate XML declarations). </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDocument.Save(TextWriter)\n- uid: System.Xml.XmlDocument.Save(System.Xml.XmlWriter)\n  commentId: M:System.Xml.XmlDocument.Save(System.Xml.XmlWriter)\n  id: Save(System.Xml.XmlWriter)\n  parent: System.Xml.XmlDocument\n  langs:\n  - csharp\n  - vb\n  name: Save(XmlWriter)\n  fullName: System.Xml.XmlDocument.Save(System.Xml.XmlWriter)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Save\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 160\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Saves the XML document to the specified <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual void Save(XmlWriter w)\n    content.vb: Public Overridable Sub Save(w As XmlWriter)\n    parameters:\n    - id: w\n      type: System.Xml.XmlWriter\n      description: \"\\n<p>The <strong>XmlWriter</strong> to which you want to save. </p>\\n\"\n  exceptions:\n  - type: System.Xml.XmlException\n    commentId: T:System.Xml.XmlException\n    description: \"\\n<p>The operation would not result in a well formed XML document (for example, no document element or duplicate XML declarations). </p>\\n\"\n  seealso:\n  - type: System.Xml.XmlTextWriter.Formatting\n    commentId: P:System.Xml.XmlTextWriter.Formatting\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDocument.Save(XmlWriter)\n- uid: System.Xml.XmlDocument.WriteContentTo(System.Xml.XmlWriter)\n  commentId: M:System.Xml.XmlDocument.WriteContentTo(System.Xml.XmlWriter)\n  id: WriteContentTo(System.Xml.XmlWriter)\n  parent: System.Xml.XmlDocument\n  langs:\n  - csharp\n  - vb\n  name: WriteContentTo(XmlWriter)\n  fullName: System.Xml.XmlDocument.WriteContentTo(System.Xml.XmlWriter)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteContentTo\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 161\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Saves all the children of the <strong>XmlDocument</strong> node to the specified <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override void WriteContentTo(XmlWriter xw)\n    content.vb: Public Overrides Sub WriteContentTo(xw As XmlWriter)\n    parameters:\n    - id: xw\n      type: System.Xml.XmlWriter\n      description: \"\\n<p>The <strong>XmlWriter</strong> to which you want to save. </p>\\n\"\n  overridden: System.Xml.XmlNode.WriteContentTo(System.Xml.XmlWriter)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: XmlDocument.WriteContentTo(XmlWriter)\n- uid: System.Xml.XmlDocument.WriteTo(System.Xml.XmlWriter)\n  commentId: M:System.Xml.XmlDocument.WriteTo(System.Xml.XmlWriter)\n  id: WriteTo(System.Xml.XmlWriter)\n  parent: System.Xml.XmlDocument\n  langs:\n  - csharp\n  - vb\n  name: WriteTo(XmlWriter)\n  fullName: System.Xml.XmlDocument.WriteTo(System.Xml.XmlWriter)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteTo\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 162\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Saves the <strong>XmlDocument</strong> node to the specified <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override void WriteTo(XmlWriter w)\n    content.vb: Public Overrides Sub WriteTo(w As XmlWriter)\n    parameters:\n    - id: w\n      type: System.Xml.XmlWriter\n      description: \"\\n<p>The <strong>XmlWriter</strong> to which you want to save. </p>\\n\"\n  overridden: System.Xml.XmlNode.WriteTo(System.Xml.XmlWriter)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: XmlDocument.WriteTo(XmlWriter)\nreferences:\n- uid: System.Xml\n  isExternal: false\n  name: System.Xml\n  fullName: System.Xml\n  commentId: N:System.Xml\n  nameWithType: System.Xml\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Xml.XmlNode\n  parent: System.Xml\n  isExternal: false\n  name: XmlNode\n  fullName: System.Xml.XmlNode\n  commentId: T:System.Xml.XmlNode\n  nameWithType: XmlNode\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  fullName: System.Collections.IEnumerable\n  commentId: T:System.Collections.IEnumerable\n  nameWithType: IEnumerable\n- uid: System.Xml.XmlNode.Attributes\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: Attributes\n  fullName: System.Xml.XmlNode.Attributes\n  commentId: P:System.Xml.XmlNode.Attributes\n  nameWithType: XmlNode.Attributes\n- uid: System.Xml.XmlNode.ChildNodes\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: ChildNodes\n  fullName: System.Xml.XmlNode.ChildNodes\n  commentId: P:System.Xml.XmlNode.ChildNodes\n  nameWithType: XmlNode.ChildNodes\n- uid: System.Xml.XmlNode.FirstChild\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: FirstChild\n  fullName: System.Xml.XmlNode.FirstChild\n  commentId: P:System.Xml.XmlNode.FirstChild\n  nameWithType: XmlNode.FirstChild\n- uid: System.Xml.XmlNode.HasChildNodes\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: HasChildNodes\n  fullName: System.Xml.XmlNode.HasChildNodes\n  commentId: P:System.Xml.XmlNode.HasChildNodes\n  nameWithType: XmlNode.HasChildNodes\n- uid: System.Xml.XmlNode.Item(System.String)\n  parent: System.Xml.XmlNode\n  isExternal: true\n  name: Item[String]\n  fullName: System.Xml.XmlNode.Item[System.String]\n  fullname.vb: System.Xml.XmlNode.Item(System.String)\n  name.vb: Item(String)\n  spec.csharp:\n  - uid: System.Xml.XmlNode.Item(System.String)\n    name: Item\n    fullName: System.Xml.XmlNode.Item\n  - name: '['\n    fullName: '['\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ']'\n    fullName: ']'\n  spec.vb:\n  - uid: System.Xml.XmlNode.Item(System.String)\n    name: Item\n    fullName: System.Xml.XmlNode.Item\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: P:System.Xml.XmlNode.Item(System.String)\n  nameWithType: XmlNode.Item[String]\n  nameWithType.vb: XmlNode.Item(String)\n- uid: System.Xml.XmlNode.Item(System.String,System.String)\n  parent: System.Xml.XmlNode\n  isExternal: true\n  name: Item[String, String]\n  fullName: System.Xml.XmlNode.Item[System.String, System.String]\n  fullname.vb: System.Xml.XmlNode.Item(System.String, System.String)\n  name.vb: Item(String, String)\n  spec.csharp:\n  - uid: System.Xml.XmlNode.Item(System.String,System.String)\n    name: Item\n    fullName: System.Xml.XmlNode.Item\n  - name: '['\n    fullName: '['\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ']'\n    fullName: ']'\n  spec.vb:\n  - uid: System.Xml.XmlNode.Item(System.String,System.String)\n    name: Item\n    fullName: System.Xml.XmlNode.Item\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: P:System.Xml.XmlNode.Item(System.String,System.String)\n  nameWithType: XmlNode.Item[String, String]\n  nameWithType.vb: XmlNode.Item(String, String)\n- uid: System.Xml.XmlNode.LastChild\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: LastChild\n  fullName: System.Xml.XmlNode.LastChild\n  commentId: P:System.Xml.XmlNode.LastChild\n  nameWithType: XmlNode.LastChild\n- uid: System.Xml.XmlNode.NamespaceURI\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: NamespaceURI\n  fullName: System.Xml.XmlNode.NamespaceURI\n  commentId: P:System.Xml.XmlNode.NamespaceURI\n  nameWithType: XmlNode.NamespaceURI\n- uid: System.Xml.XmlNode.NextSibling\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: NextSibling\n  fullName: System.Xml.XmlNode.NextSibling\n  commentId: P:System.Xml.XmlNode.NextSibling\n  nameWithType: XmlNode.NextSibling\n- uid: System.Xml.XmlNode.OuterXml\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: OuterXml\n  fullName: System.Xml.XmlNode.OuterXml\n  commentId: P:System.Xml.XmlNode.OuterXml\n  nameWithType: XmlNode.OuterXml\n- uid: System.Xml.XmlNode.Prefix\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: Prefix\n  fullName: System.Xml.XmlNode.Prefix\n  commentId: P:System.Xml.XmlNode.Prefix\n  nameWithType: XmlNode.Prefix\n- uid: System.Xml.XmlNode.PreviousSibling\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: PreviousSibling\n  fullName: System.Xml.XmlNode.PreviousSibling\n  commentId: P:System.Xml.XmlNode.PreviousSibling\n  nameWithType: XmlNode.PreviousSibling\n- uid: System.Xml.XmlNode.PreviousText\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: PreviousText\n  fullName: System.Xml.XmlNode.PreviousText\n  commentId: P:System.Xml.XmlNode.PreviousText\n  nameWithType: XmlNode.PreviousText\n- uid: System.Xml.XmlNode.Value\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: Value\n  fullName: System.Xml.XmlNode.Value\n  commentId: P:System.Xml.XmlNode.Value\n  nameWithType: XmlNode.Value\n- uid: System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: AppendChild(XmlNode)\n  fullName: System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)\n  spec.csharp:\n  - uid: System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)\n    name: AppendChild\n    fullName: System.Xml.XmlNode.AppendChild\n  - name: (\n    fullName: (\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)\n    name: AppendChild\n    fullName: System.Xml.XmlNode.AppendChild\n  - name: (\n    fullName: (\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)\n  nameWithType: XmlNode.AppendChild(XmlNode)\n- uid: System.Xml.XmlNode.GetEnumerator\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: GetEnumerator()\n  fullName: System.Xml.XmlNode.GetEnumerator()\n  spec.csharp:\n  - uid: System.Xml.XmlNode.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Xml.XmlNode.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.XmlNode.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Xml.XmlNode.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.XmlNode.GetEnumerator\n  nameWithType: XmlNode.GetEnumerator()\n- uid: System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)\n  parent: System.Xml.XmlNode\n  isExternal: true\n  name: GetNamespaceOfPrefix(String)\n  fullName: System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)\n  spec.csharp:\n  - uid: System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)\n    name: GetNamespaceOfPrefix\n    fullName: System.Xml.XmlNode.GetNamespaceOfPrefix\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)\n    name: GetNamespaceOfPrefix\n    fullName: System.Xml.XmlNode.GetNamespaceOfPrefix\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)\n  nameWithType: XmlNode.GetNamespaceOfPrefix(String)\n- uid: System.Xml.XmlNode.GetPrefixOfNamespace(System.String)\n  parent: System.Xml.XmlNode\n  isExternal: true\n  name: GetPrefixOfNamespace(String)\n  fullName: System.Xml.XmlNode.GetPrefixOfNamespace(System.String)\n  spec.csharp:\n  - uid: System.Xml.XmlNode.GetPrefixOfNamespace(System.String)\n    name: GetPrefixOfNamespace\n    fullName: System.Xml.XmlNode.GetPrefixOfNamespace\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.XmlNode.GetPrefixOfNamespace(System.String)\n    name: GetPrefixOfNamespace\n    fullName: System.Xml.XmlNode.GetPrefixOfNamespace\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.XmlNode.GetPrefixOfNamespace(System.String)\n  nameWithType: XmlNode.GetPrefixOfNamespace(String)\n- uid: System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: InsertAfter(XmlNode, XmlNode)\n  fullName: System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode, System.Xml.XmlNode)\n  spec.csharp:\n  - uid: System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)\n    name: InsertAfter\n    fullName: System.Xml.XmlNode.InsertAfter\n  - name: (\n    fullName: (\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: ', '\n    fullName: ', '\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)\n    name: InsertAfter\n    fullName: System.Xml.XmlNode.InsertAfter\n  - name: (\n    fullName: (\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: ', '\n    fullName: ', '\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)\n  nameWithType: XmlNode.InsertAfter(XmlNode, XmlNode)\n- uid: System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: InsertBefore(XmlNode, XmlNode)\n  fullName: System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode, System.Xml.XmlNode)\n  spec.csharp:\n  - uid: System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)\n    name: InsertBefore\n    fullName: System.Xml.XmlNode.InsertBefore\n  - name: (\n    fullName: (\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: ', '\n    fullName: ', '\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)\n    name: InsertBefore\n    fullName: System.Xml.XmlNode.InsertBefore\n  - name: (\n    fullName: (\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: ', '\n    fullName: ', '\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)\n  nameWithType: XmlNode.InsertBefore(XmlNode, XmlNode)\n- uid: System.Xml.XmlNode.Normalize\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: Normalize()\n  fullName: System.Xml.XmlNode.Normalize()\n  spec.csharp:\n  - uid: System.Xml.XmlNode.Normalize\n    name: Normalize\n    fullName: System.Xml.XmlNode.Normalize\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.XmlNode.Normalize\n    name: Normalize\n    fullName: System.Xml.XmlNode.Normalize\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.XmlNode.Normalize\n  nameWithType: XmlNode.Normalize()\n- uid: System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: PrependChild(XmlNode)\n  fullName: System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)\n  spec.csharp:\n  - uid: System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)\n    name: PrependChild\n    fullName: System.Xml.XmlNode.PrependChild\n  - name: (\n    fullName: (\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)\n    name: PrependChild\n    fullName: System.Xml.XmlNode.PrependChild\n  - name: (\n    fullName: (\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)\n  nameWithType: XmlNode.PrependChild(XmlNode)\n- uid: System.Xml.XmlNode.RemoveAll\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: RemoveAll()\n  fullName: System.Xml.XmlNode.RemoveAll()\n  spec.csharp:\n  - uid: System.Xml.XmlNode.RemoveAll\n    name: RemoveAll\n    fullName: System.Xml.XmlNode.RemoveAll\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.XmlNode.RemoveAll\n    name: RemoveAll\n    fullName: System.Xml.XmlNode.RemoveAll\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.XmlNode.RemoveAll\n  nameWithType: XmlNode.RemoveAll()\n- uid: System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: RemoveChild(XmlNode)\n  fullName: System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)\n  spec.csharp:\n  - uid: System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)\n    name: RemoveChild\n    fullName: System.Xml.XmlNode.RemoveChild\n  - name: (\n    fullName: (\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)\n    name: RemoveChild\n    fullName: System.Xml.XmlNode.RemoveChild\n  - name: (\n    fullName: (\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)\n  nameWithType: XmlNode.RemoveChild(XmlNode)\n- uid: System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: ReplaceChild(XmlNode, XmlNode)\n  fullName: System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode, System.Xml.XmlNode)\n  spec.csharp:\n  - uid: System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)\n    name: ReplaceChild\n    fullName: System.Xml.XmlNode.ReplaceChild\n  - name: (\n    fullName: (\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: ', '\n    fullName: ', '\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)\n    name: ReplaceChild\n    fullName: System.Xml.XmlNode.ReplaceChild\n  - name: (\n    fullName: (\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: ', '\n    fullName: ', '\n  - uid: System.Xml.XmlNode\n    name: XmlNode\n    fullName: System.Xml.XmlNode\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)\n  nameWithType: XmlNode.ReplaceChild(XmlNode, XmlNode)\n- uid: System.Xml.XmlNode.Supports(System.String,System.String)\n  parent: System.Xml.XmlNode\n  isExternal: true\n  name: Supports(String, String)\n  fullName: System.Xml.XmlNode.Supports(System.String, System.String)\n  spec.csharp:\n  - uid: System.Xml.XmlNode.Supports(System.String,System.String)\n    name: Supports\n    fullName: System.Xml.XmlNode.Supports\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.XmlNode.Supports(System.String,System.String)\n    name: Supports\n    fullName: System.Xml.XmlNode.Supports\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.XmlNode.Supports(System.String,System.String)\n  nameWithType: XmlNode.Supports(String, String)\n- uid: System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: IEnumerable.GetEnumerator()\n  fullName: System.Xml.XmlNode.System.Collections.IEnumerable.GetEnumerator()\n  name.vb: System.Collections.IEnumerable.GetEnumerator()\n  spec.csharp:\n  - uid: System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator\n    name: IEnumerable.GetEnumerator\n    fullName: System.Xml.XmlNode.System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator\n    name: System.Collections.IEnumerable.GetEnumerator\n    fullName: System.Xml.XmlNode.System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator\n  nameWithType: XmlNode.IEnumerable.GetEnumerator()\n  nameWithType.vb: XmlNode.System.Collections.IEnumerable.GetEnumerator()\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  parent: System.Linq.Queryable\n  definition: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  name: AsQueryable()\n  fullName: System.Linq.Queryable.AsQueryable()\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  nameWithType: Queryable.AsQueryable()\n- uid: System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  parent: System.Linq.ParallelEnumerable\n  definition: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  name: AsParallel()\n  fullName: System.Linq.ParallelEnumerable.AsParallel()\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  nameWithType: ParallelEnumerable.AsParallel()\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  name: Cast<TResult>()\n  fullName: System.Linq.Enumerable.Cast<TResult>()\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)()\n  name.vb: Cast(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>()\n  nameWithType.vb: Enumerable.Cast(Of TResult)()\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  name: OfType<TResult>()\n  fullName: System.Linq.Enumerable.OfType<TResult>()\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)()\n  name.vb: OfType(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>()\n  nameWithType.vb: Enumerable.OfType(Of TResult)()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  commentId: N:System.Collections\n  nameWithType: System.Collections\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsQueryable(IEnumerable)\n  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n- uid: System.Linq.Queryable\n  parent: System.Linq\n  isExternal: false\n  name: Queryable\n  fullName: System.Linq.Queryable\n  commentId: T:System.Linq.Queryable\n  nameWithType: Queryable\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsParallel(IEnumerable)\n  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n- uid: System.Linq.ParallelEnumerable\n  parent: System.Linq\n  isExternal: false\n  name: ParallelEnumerable\n  fullName: System.Linq.ParallelEnumerable\n  commentId: T:System.Linq.ParallelEnumerable\n  nameWithType: ParallelEnumerable\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: Cast<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)\n  name.vb: Cast(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.Cast(Of TResult)(IEnumerable)\n- uid: System.Linq.Enumerable\n  parent: System.Linq\n  isExternal: false\n  name: Enumerable\n  fullName: System.Linq.Enumerable\n  commentId: T:System.Linq.Enumerable\n  nameWithType: Enumerable\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: OfType<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)\n  name.vb: OfType(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.OfType(Of TResult)(IEnumerable)\n- uid: System.Linq\n  isExternal: false\n  name: System.Linq\n  fullName: System.Linq\n  commentId: N:System.Linq\n  nameWithType: System.Linq\n- uid: System.Xml.XmlImplementation\n  parent: System.Xml\n  isExternal: false\n  name: XmlImplementation\n  fullName: System.Xml.XmlImplementation\n  commentId: T:System.Xml.XmlImplementation\n  nameWithType: XmlImplementation\n- uid: System.Xml.XmlNameTable\n  parent: System.Xml\n  isExternal: false\n  name: XmlNameTable\n  fullName: System.Xml.XmlNameTable\n  commentId: T:System.Xml.XmlNameTable\n  nameWithType: XmlNameTable\n- uid: System.Xml.XmlNode.BaseURI\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: BaseURI\n  fullName: System.Xml.XmlNode.BaseURI\n  commentId: P:System.Xml.XmlNode.BaseURI\n  nameWithType: XmlNode.BaseURI\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Xml.XmlElement\n  parent: System.Xml\n  isExternal: false\n  name: XmlElement\n  fullName: System.Xml.XmlElement\n  commentId: T:System.Xml.XmlElement\n  nameWithType: XmlElement\n- uid: System.Xml.XmlNode.InnerText\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: InnerText\n  fullName: System.Xml.XmlNode.InnerText\n  commentId: P:System.Xml.XmlNode.InnerText\n  nameWithType: XmlNode.InnerText\n- uid: System.Xml.XmlNode.InnerXml\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: InnerXml\n  fullName: System.Xml.XmlNode.InnerXml\n  commentId: P:System.Xml.XmlNode.InnerXml\n  nameWithType: XmlNode.InnerXml\n- uid: System.Xml.XmlNode.IsReadOnly\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: IsReadOnly\n  fullName: System.Xml.XmlNode.IsReadOnly\n  commentId: P:System.Xml.XmlNode.IsReadOnly\n  nameWithType: XmlNode.IsReadOnly\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Xml.XmlNode.LocalName\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: LocalName\n  fullName: System.Xml.XmlNode.LocalName\n  commentId: P:System.Xml.XmlNode.LocalName\n  nameWithType: XmlNode.LocalName\n- uid: System.Xml.XmlNode.Name\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: Name\n  fullName: System.Xml.XmlNode.Name\n  commentId: P:System.Xml.XmlNode.Name\n  nameWithType: XmlNode.Name\n- uid: System.Xml.XmlNode.NodeType\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: NodeType\n  fullName: System.Xml.XmlNode.NodeType\n  commentId: P:System.Xml.XmlNode.NodeType\n  nameWithType: XmlNode.NodeType\n- uid: System.Xml.XmlNodeType\n  parent: System.Xml\n  isExternal: false\n  name: XmlNodeType\n  fullName: System.Xml.XmlNodeType\n  commentId: T:System.Xml.XmlNodeType\n  nameWithType: XmlNodeType\n- uid: System.Xml.XmlNode.OwnerDocument\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: OwnerDocument\n  fullName: System.Xml.XmlNode.OwnerDocument\n  commentId: P:System.Xml.XmlNode.OwnerDocument\n  nameWithType: XmlNode.OwnerDocument\n- uid: System.Xml.XmlDocument\n  parent: System.Xml\n  isExternal: false\n  name: XmlDocument\n  fullName: System.Xml.XmlDocument\n  commentId: T:System.Xml.XmlDocument\n  nameWithType: XmlDocument\n- uid: System.Xml.XmlNode.ParentNode\n  parent: System.Xml.XmlNode\n  isExternal: false\n  name: ParentNode\n  fullName: System.Xml.XmlNode.ParentNode\n  commentId: P:System.Xml.XmlNode.ParentNode\n  nameWithType: XmlNode.ParentNode\n- uid: System.Xml.XmlNodeChangedEventHandler\n  parent: System.Xml\n  isExternal: false\n  name: XmlNodeChangedEventHandler\n  fullName: System.Xml.XmlNodeChangedEventHandler\n  commentId: T:System.Xml.XmlNodeChangedEventHandler\n  nameWithType: XmlNodeChangedEventHandler\n- uid: System.Xml.XmlNode.CloneNode(System.Boolean)\n  parent: System.Xml.XmlNode\n  isExternal: true\n  name: CloneNode(Boolean)\n  fullName: System.Xml.XmlNode.CloneNode(System.Boolean)\n  spec.csharp:\n  - uid: System.Xml.XmlNode.CloneNode(System.Boolean)\n    name: CloneNode\n    fullName: System.Xml.XmlNode.CloneNode\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.XmlNode.CloneNode(System.Boolean)\n    name: CloneNode\n    fullName: System.Xml.XmlNode.CloneNode\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.XmlNode.CloneNode(System.Boolean)\n  nameWithType: XmlNode.CloneNode(Boolean)\n- uid: System.Xml.XmlAttribute\n  parent: System.Xml\n  isExternal: false\n  name: XmlAttribute\n  fullName: System.Xml.XmlAttribute\n  commentId: T:System.Xml.XmlAttribute\n  nameWithType: XmlAttribute\n- uid: System.Xml.XmlCDataSection\n  parent: System.Xml\n  isExternal: false\n  name: XmlCDataSection\n  fullName: System.Xml.XmlCDataSection\n  commentId: T:System.Xml.XmlCDataSection\n  nameWithType: XmlCDataSection\n- uid: System.Xml.XmlComment\n  parent: System.Xml\n  isExternal: false\n  name: XmlComment\n  fullName: System.Xml.XmlComment\n  commentId: T:System.Xml.XmlComment\n  nameWithType: XmlComment\n- uid: System.Xml.XmlDocumentFragment\n  parent: System.Xml\n  isExternal: false\n  name: XmlDocumentFragment\n  fullName: System.Xml.XmlDocumentFragment\n  commentId: T:System.Xml.XmlDocumentFragment\n  nameWithType: XmlDocumentFragment\n- uid: System.Xml.XmlProcessingInstruction\n  parent: System.Xml\n  isExternal: false\n  name: XmlProcessingInstruction\n  fullName: System.Xml.XmlProcessingInstruction\n  commentId: T:System.Xml.XmlProcessingInstruction\n  nameWithType: XmlProcessingInstruction\n- uid: System.Xml.XmlSignificantWhitespace\n  parent: System.Xml\n  isExternal: false\n  name: XmlSignificantWhitespace\n  fullName: System.Xml.XmlSignificantWhitespace\n  commentId: T:System.Xml.XmlSignificantWhitespace\n  nameWithType: XmlSignificantWhitespace\n- uid: System.Xml.XmlText\n  parent: System.Xml\n  isExternal: false\n  name: XmlText\n  fullName: System.Xml.XmlText\n  commentId: T:System.Xml.XmlText\n  nameWithType: XmlText\n- uid: System.Xml.XmlWhitespace\n  parent: System.Xml\n  isExternal: false\n  name: XmlWhitespace\n  fullName: System.Xml.XmlWhitespace\n  commentId: T:System.Xml.XmlWhitespace\n  nameWithType: XmlWhitespace\n- uid: System.Xml.XmlDeclaration\n  parent: System.Xml\n  isExternal: false\n  name: XmlDeclaration\n  fullName: System.Xml.XmlDeclaration\n  commentId: T:System.Xml.XmlDeclaration\n  nameWithType: XmlDeclaration\n- uid: System.Xml.XmlNodeList\n  parent: System.Xml\n  isExternal: false\n  name: XmlNodeList\n  fullName: System.Xml.XmlNodeList\n  commentId: T:System.Xml.XmlNodeList\n  nameWithType: XmlNodeList\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: false\n  name: Stream\n  fullName: System.IO.Stream\n  commentId: T:System.IO.Stream\n  nameWithType: Stream\n- uid: System.IO\n  isExternal: false\n  name: System.IO\n  fullName: System.IO\n  commentId: N:System.IO\n  nameWithType: System.IO\n- uid: System.IO.TextReader\n  parent: System.IO\n  isExternal: false\n  name: TextReader\n  fullName: System.IO.TextReader\n  commentId: T:System.IO.TextReader\n  nameWithType: TextReader\n- uid: System.Xml.XmlReader\n  parent: System.Xml\n  isExternal: false\n  name: XmlReader\n  fullName: System.Xml.XmlReader\n  commentId: T:System.Xml.XmlReader\n  nameWithType: XmlReader\n- uid: System.IO.TextWriter\n  parent: System.IO\n  isExternal: false\n  name: TextWriter\n  fullName: System.IO.TextWriter\n  commentId: T:System.IO.TextWriter\n  nameWithType: TextWriter\n- uid: System.Xml.XmlWriter\n  parent: System.Xml\n  isExternal: false\n  name: XmlWriter\n  fullName: System.Xml.XmlWriter\n  commentId: T:System.Xml.XmlWriter\n  nameWithType: XmlWriter\n- uid: System.Xml.XmlNode.WriteContentTo(System.Xml.XmlWriter)\n  parent: System.Xml.XmlNode\n  isExternal: true\n  name: WriteContentTo(XmlWriter)\n  fullName: System.Xml.XmlNode.WriteContentTo(System.Xml.XmlWriter)\n  spec.csharp:\n  - uid: System.Xml.XmlNode.WriteContentTo(System.Xml.XmlWriter)\n    name: WriteContentTo\n    fullName: System.Xml.XmlNode.WriteContentTo\n  - name: (\n    fullName: (\n  - uid: System.Xml.XmlWriter\n    name: XmlWriter\n    fullName: System.Xml.XmlWriter\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.XmlNode.WriteContentTo(System.Xml.XmlWriter)\n    name: WriteContentTo\n    fullName: System.Xml.XmlNode.WriteContentTo\n  - name: (\n    fullName: (\n  - uid: System.Xml.XmlWriter\n    name: XmlWriter\n    fullName: System.Xml.XmlWriter\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.XmlNode.WriteContentTo(System.Xml.XmlWriter)\n  nameWithType: XmlNode.WriteContentTo(XmlWriter)\n- uid: System.Xml.XmlNode.WriteTo(System.Xml.XmlWriter)\n  parent: System.Xml.XmlNode\n  isExternal: true\n  name: WriteTo(XmlWriter)\n  fullName: System.Xml.XmlNode.WriteTo(System.Xml.XmlWriter)\n  spec.csharp:\n  - uid: System.Xml.XmlNode.WriteTo(System.Xml.XmlWriter)\n    name: WriteTo\n    fullName: System.Xml.XmlNode.WriteTo\n  - name: (\n    fullName: (\n  - uid: System.Xml.XmlWriter\n    name: XmlWriter\n    fullName: System.Xml.XmlWriter\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.XmlNode.WriteTo(System.Xml.XmlWriter)\n    name: WriteTo\n    fullName: System.Xml.XmlNode.WriteTo\n  - name: (\n    fullName: (\n  - uid: System.Xml.XmlWriter\n    name: XmlWriter\n    fullName: System.Xml.XmlWriter\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.XmlNode.WriteTo(System.Xml.XmlWriter)\n  nameWithType: XmlNode.WriteTo(XmlWriter)\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.Xml.XmlException\n  isExternal: false\n  name: XmlException\n  fullName: System.Xml.XmlException\n  commentId: T:System.Xml.XmlException\n  nameWithType: XmlException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.NullReferenceException\n  isExternal: false\n  name: NullReferenceException\n  fullName: System.NullReferenceException\n  nameWithType: NullReferenceException\n  commentId: T:System.NullReferenceException\n"}