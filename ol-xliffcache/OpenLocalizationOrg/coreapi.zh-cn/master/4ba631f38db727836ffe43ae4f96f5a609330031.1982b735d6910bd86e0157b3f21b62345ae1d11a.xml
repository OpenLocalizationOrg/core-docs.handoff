{"nodes":[{"pos":[2991,3001],"content":"TextWriter","needQuote":true,"nodes":[{"content":"TextWriter","pos":[0,10]}]},{"pos":[4548,4559],"content":"CoreNewLine","needQuote":true,"nodes":[{"content":"CoreNewLine","pos":[0,11]}]},{"pos":[6594,6606],"content":"TextWriter()","needQuote":true,"nodes":[{"content":"TextWriter()","pos":[0,12]}]},{"pos":[7668,7695],"content":"TextWriter(IFormatProvider)","needQuote":true,"nodes":[{"content":"TextWriter(IFormatProvider)","pos":[0,27]}]},{"pos":[9057,9065],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The character encoding in which the output is written.&lt;/p&gt;\\n","pos":[9757,9822],"source":"\\n<p>The character encoding in which the output is written.</p>\\n"},{"pos":[10307,10321],"content":"FormatProvider","needQuote":true,"nodes":[{"content":"FormatProvider","pos":[0,14]}]},{"pos":[11662,11669],"content":"NewLine","needQuote":true,"nodes":[{"content":"NewLine","pos":[0,7]}]},{"content":"\\n&lt;p&gt;The line terminator string for the current &lt;strong&gt;TextWriter&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[12330,12412],"source":"\\n<p>The line terminator string for the current <strong>TextWriter</strong>.</p>\\n"},{"pos":[12868,12877],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[13794,13810],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to release both managed and unmanaged resources; &lt;strong&gt;false&lt;/strong&gt; to release only unmanaged resources.","pos":[14587,14724],"source":"\\n<p>\\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources."},{"content":"&lt;/p&gt;\\n","pos":[14725,14731],"source":" </p>\\n"},{"pos":[15023,15030],"content":"Flush()","needQuote":true,"nodes":[{"content":"Flush()","pos":[0,7]}]},{"pos":[16046,16058],"content":"FlushAsync()","needQuote":true,"nodes":[{"content":"FlushAsync()","pos":[0,12]}]},{"content":"\\n&lt;p&gt;A task that represents the asynchronous flush operation.","pos":[16919,16980],"source":"\\n<p>A task that represents the asynchronous flush operation."},{"content":"&lt;/p&gt;\\n","pos":[16981,16987],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The text writer is disposed.&lt;/p&gt;\\n","pos":[17110,17149],"source":"\\n<p>The text writer is disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The writer is currently in use by a previous write operation.","pos":[17262,17328],"source":"\\n<p>The writer is currently in use by a previous write operation."},{"content":"&lt;/p&gt;\\n","pos":[17329,17335],"source":" </p>\\n"},{"pos":[17822,17836],"content":"Write(Boolean)","needQuote":true,"nodes":[{"content":"Write(Boolean)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The &lt;strong&gt;Boolean&lt;/strong&gt; value to write.","pos":[18512,18561],"source":"\\n<p>The <strong>Boolean</strong> value to write."},{"content":"&lt;/p&gt;\\n","pos":[18562,18568],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[18889,18914],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[18915,18921],"source":" </p>\\n"},{"pos":[19401,19412],"content":"Write(Char)","needQuote":true,"nodes":[{"content":"Write(Char)","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The character to write to the text stream.","pos":[20031,20078],"source":"\\n<p>The character to write to the text stream."},{"content":"&lt;/p&gt;\\n","pos":[20079,20085],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[20406,20431],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[20432,20438],"source":" </p>\\n"},{"pos":[20999,21012],"content":"Write(Char[])","needQuote":true,"nodes":[{"content":"Write(Char[])","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The character array to write to the text stream.","pos":[21648,21701],"source":"\\n<p>The character array to write to the text stream."},{"content":"&lt;/p&gt;\\n","pos":[21702,21708],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[22029,22054],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[22055,22061],"source":" </p>\\n"},{"pos":[22719,22746],"content":"Write(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"Write(Char[], Int32, Int32)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The character array to write data from.","pos":[23475,23519],"source":"\\n<p>The character array to write data from."},{"content":"&lt;/p&gt;\\n","pos":[23520,23526],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The character position in the buffer at which to start retrieving data.","pos":[23589,23665],"source":"\\n<p>The character position in the buffer at which to start retrieving data."},{"content":"&lt;/p&gt;\\n","pos":[23666,23672],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters to write.","pos":[23735,23774],"source":"\\n<p>The number of characters to write."},{"content":"&lt;/p&gt;\\n","pos":[23775,23781],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The buffer length minus &lt;em&gt;index&lt;/em&gt; is less than &lt;em&gt;count&lt;/em&gt;.","pos":[23892,23964],"source":"\\n<p>The buffer length minus <em>index</em> is less than <em>count</em>."},{"content":"&lt;/p&gt;\\n","pos":[23965,23971],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;buffer&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.","pos":[24076,24136],"source":"\\n<p>The <em>buffer</em> parameter is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[24137,24143],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is negative.","pos":[24260,24312],"source":"\\n<p>\\n<em>index</em> or <em>count</em> is negative."},{"content":"&lt;/p&gt;\\n","pos":[24313,24319],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[24626,24651],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[24652,24658],"source":" </p>\\n"},{"pos":[25530,25544],"content":"Write(Decimal)","needQuote":true,"nodes":[{"content":"Write(Decimal)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The decimal value to write.","pos":[26206,26238],"source":"\\n<p>The decimal value to write."},{"content":"&lt;/p&gt;\\n","pos":[26239,26245],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[26566,26591],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[26592,26598],"source":" </p>\\n"},{"pos":[27157,27170],"content":"Write(Double)","needQuote":true,"nodes":[{"content":"Write(Double)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The 8-byte floating-point value to write.","pos":[27843,27889],"source":"\\n<p>The 8-byte floating-point value to write."},{"content":"&lt;/p&gt;\\n","pos":[27890,27896],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[28217,28242],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[28243,28249],"source":" </p>\\n"},{"pos":[28804,28816],"content":"Write(Int32)","needQuote":true,"nodes":[{"content":"Write(Int32)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The 4-byte signed integer to write.","pos":[29478,29518],"source":"\\n<p>The 4-byte signed integer to write."},{"content":"&lt;/p&gt;\\n","pos":[29519,29525],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[29846,29871],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[29872,29878],"source":" </p>\\n"},{"pos":[30432,30444],"content":"Write(Int64)","needQuote":true,"nodes":[{"content":"Write(Int64)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The 8-byte signed integer to write.","pos":[31105,31145],"source":"\\n<p>The 8-byte signed integer to write."},{"content":"&lt;/p&gt;\\n","pos":[31146,31152],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[31473,31498],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[31499,31505],"source":" </p>\\n"},{"pos":[32062,32075],"content":"Write(Object)","needQuote":true,"nodes":[{"content":"Write(Object)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The object to write.","pos":[32790,32815],"source":"\\n<p>The object to write."},{"content":"&lt;/p&gt;\\n","pos":[32816,32822],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[33143,33168],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[33169,33175],"source":" </p>\\n"},{"pos":[33733,33746],"content":"Write(Single)","needQuote":true,"nodes":[{"content":"Write(Single)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The 4-byte floating-point value to write.","pos":[34417,34463],"source":"\\n<p>The 4-byte floating-point value to write."},{"content":"&lt;/p&gt;\\n","pos":[34464,34470],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[34791,34816],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[34817,34823],"source":" </p>\\n"},{"pos":[35381,35394],"content":"Write(String)","needQuote":true,"nodes":[{"content":"Write(String)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The string to write.","pos":[36018,36043],"source":"\\n<p>The string to write."},{"content":"&lt;/p&gt;\\n","pos":[36044,36050],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[36371,36396],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[36397,36403],"source":" </p>\\n"},{"pos":[37014,37035],"content":"Write(String, Object)","needQuote":true,"nodes":[{"content":"Write(String, Object)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;A composite format string (see Remarks).","pos":[37866,37911],"source":"\\n<p>A composite format string (see Remarks)."},{"content":"&lt;/p&gt;\\n","pos":[37912,37918],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The object to format and write.","pos":[37981,38017],"source":"\\n<p>The object to format and write."},{"content":"&lt;/p&gt;\\n","pos":[38018,38024],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[38143,38191],"source":"\\n<p>\\n<em>format</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[38192,38198],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[38505,38530],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[38531,38537],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is not a valid composite format string.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is one).","pos":[38630,38873],"source":"\\n<p>\\n<em>format</em> is not a valid composite format string.</p>\\n<p>-or- </p>\\n<p>The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is one)."},{"content":"&lt;/p&gt;\\n","pos":[38874,38880],"source":" </p>\\n"},{"pos":[39530,39559],"content":"Write(String, Object, Object)","needQuote":true,"nodes":[{"content":"Write(String, Object, Object)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;A composite format string (see Remarks).","pos":[40448,40493],"source":"\\n<p>A composite format string (see Remarks)."},{"content":"&lt;/p&gt;\\n","pos":[40494,40500],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The first object to format and write.","pos":[40563,40605],"source":"\\n<p>The first object to format and write."},{"content":"&lt;/p&gt;\\n","pos":[40606,40612],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second object to format and write.","pos":[40675,40718],"source":"\\n<p>The second object to format and write."},{"content":"&lt;/p&gt;\\n","pos":[40719,40725],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[40844,40892],"source":"\\n<p>\\n<em>format</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[40893,40899],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[41206,41231],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[41232,41238],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is not a valid composite format string.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The index of a format item is less than 0 (zero) or greater than or equal to the number of objects to be formatted (which, for this method overload, is two).","pos":[41331,41573],"source":"\\n<p>\\n<em>format</em> is not a valid composite format string.</p>\\n<p>-or- </p>\\n<p>The index of a format item is less than 0 (zero) or greater than or equal to the number of objects to be formatted (which, for this method overload, is two)."},{"content":"&lt;/p&gt;\\n","pos":[41574,41580],"source":" </p>\\n"},{"pos":[42280,42317],"content":"Write(String, Object, Object, Object)","needQuote":true,"nodes":[{"content":"Write(String, Object, Object, Object)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;A composite format string (see Remarks).","pos":[43264,43309],"source":"\\n<p>A composite format string (see Remarks)."},{"content":"&lt;/p&gt;\\n","pos":[43310,43316],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The first object to format and write.","pos":[43379,43421],"source":"\\n<p>The first object to format and write."},{"content":"&lt;/p&gt;\\n","pos":[43422,43428],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second object to format and write.","pos":[43491,43534],"source":"\\n<p>The second object to format and write."},{"content":"&lt;/p&gt;\\n","pos":[43535,43541],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The third object to format and write.","pos":[43604,43646],"source":"\\n<p>The third object to format and write."},{"content":"&lt;/p&gt;\\n","pos":[43647,43653],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[43772,43820],"source":"\\n<p>\\n<em>format</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[43821,43827],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[44134,44159],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[44160,44166],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is not a valid composite format string.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is three).","pos":[44259,44504],"source":"\\n<p>\\n<em>format</em> is not a valid composite format string.</p>\\n<p>-or- </p>\\n<p>The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is three)."},{"content":"&lt;/p&gt;\\n","pos":[44505,44511],"source":" </p>\\n"},{"pos":[45141,45164],"content":"Write(String, Object[])","needQuote":true,"nodes":[{"content":"Write(String, Object[])","pos":[0,23]}]},{"content":"\\n&lt;p&gt;A composite format string (see Remarks).","pos":[46019,46064],"source":"\\n<p>A composite format string (see Remarks)."},{"content":"&lt;/p&gt;\\n","pos":[46065,46071],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object array that contains zero or more objects to format and write.","pos":[46135,46211],"source":"\\n<p>An object array that contains zero or more objects to format and write."},{"content":"&lt;/p&gt;\\n","pos":[46212,46218],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; or &lt;em&gt;arg&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[46337,46401],"source":"\\n<p>\\n<em>format</em> or <em>arg</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[46402,46408],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[46715,46740],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[46741,46747],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is not a valid composite format string.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The index of a format item is less than 0 (zero), or greater than or equal to the length of the &lt;em&gt;arg&lt;/em&gt; array.","pos":[46840,47040],"source":"\\n<p>\\n<em>format</em> is not a valid composite format string.</p>\\n<p>-or- </p>\\n<p>The index of a format item is less than 0 (zero), or greater than or equal to the length of the <em>arg</em> array."},{"content":"&lt;/p&gt;\\n","pos":[47041,47047],"source":" </p>\\n"},{"pos":[47778,47791],"content":"Write(UInt32)","needQuote":true,"nodes":[{"content":"Write(UInt32)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The 4-byte unsigned integer to write.","pos":[48535,48577],"source":"\\n<p>The 4-byte unsigned integer to write."},{"content":"&lt;/p&gt;\\n","pos":[48578,48584],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[48905,48930],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[48931,48937],"source":" </p>\\n"},{"pos":[49670,49683],"content":"Write(UInt64)","needQuote":true,"nodes":[{"content":"Write(UInt64)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The 8-byte unsigned integer to write.","pos":[50426,50468],"source":"\\n<p>The 8-byte unsigned integer to write."},{"content":"&lt;/p&gt;\\n","pos":[50469,50475],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[50796,50821],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[50822,50828],"source":" </p>\\n"},{"pos":[51570,51586],"content":"WriteAsync(Char)","needQuote":true,"nodes":[{"content":"WriteAsync(Char)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The character to write to the text stream.&lt;/p&gt;\\n","pos":[52424,52477],"source":"\\n<p>The character to write to the text stream.</p>\\n"},{"content":"\\n&lt;p&gt;A task that represents the asynchronous write operation.&lt;/p&gt;\\n","pos":[52551,52618],"source":"\\n<p>A task that represents the asynchronous write operation.</p>\\n"},{"content":"\\n&lt;p&gt;The text writer is disposed.&lt;/p&gt;\\n","pos":[52741,52780],"source":"\\n<p>The text writer is disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The text writer is currently in use by a previous write operation.","pos":[52893,52964],"source":"\\n<p>The text writer is currently in use by a previous write operation."},{"content":"&lt;/p&gt;\\n","pos":[52965,52971],"source":" </p>\\n"},{"pos":[53570,53588],"content":"WriteAsync(Char[])","needQuote":true,"nodes":[{"content":"WriteAsync(Char[])","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The character array to write to the text stream.","pos":[54423,54476],"source":"\\n<p>The character array to write to the text stream."},{"content":"If &lt;em&gt;buffer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;, nothing is written.&lt;/p&gt;\\n","pos":[54477,54547],"source":" If <em>buffer</em> is <strong>null</strong>, nothing is written.</p>\\n"},{"content":"\\n&lt;p&gt;A task that represents the asynchronous write operation.&lt;/p&gt;\\n","pos":[54621,54688],"source":"\\n<p>A task that represents the asynchronous write operation.</p>\\n"},{"content":"\\n&lt;p&gt;The text writer is disposed.&lt;/p&gt;\\n","pos":[54811,54850],"source":"\\n<p>The text writer is disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The text writer is currently in use by a previous write operation.","pos":[54963,55034],"source":"\\n<p>The text writer is currently in use by a previous write operation."},{"content":"&lt;/p&gt;\\n","pos":[55035,55041],"source":" </p>\\n"},{"pos":[55737,55769],"content":"WriteAsync(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"WriteAsync(Char[], Int32, Int32)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The character array to write data from.","pos":[56718,56762],"source":"\\n<p>The character array to write data from."},{"content":"&lt;/p&gt;\\n","pos":[56763,56769],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The character position in the buffer at which to start retrieving data.","pos":[56832,56908],"source":"\\n<p>The character position in the buffer at which to start retrieving data."},{"content":"&lt;/p&gt;\\n","pos":[56909,56915],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters to write.","pos":[56978,57017],"source":"\\n<p>The number of characters to write."},{"content":"&lt;/p&gt;\\n","pos":[57018,57024],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A task that represents the asynchronous write operation.&lt;/p&gt;\\n","pos":[57098,57165],"source":"\\n<p>A task that represents the asynchronous write operation.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;buffer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[57284,57338],"source":"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;index&lt;/em&gt; plus &lt;em&gt;count&lt;/em&gt; is greater than the buffer length.&lt;/p&gt;\\n","pos":[57435,57519],"source":"\\n<p>The <em>index</em> plus <em>count</em> is greater than the buffer length.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is negative.&lt;/p&gt;\\n","pos":[57636,57694],"source":"\\n<p>\\n<em>index</em> or <em>count</em> is negative.</p>\\n"},{"content":"\\n&lt;p&gt;The text writer is disposed.&lt;/p&gt;\\n","pos":[57803,57842],"source":"\\n<p>The text writer is disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The text writer is currently in use by a previous write operation.","pos":[57955,58026],"source":"\\n<p>The text writer is currently in use by a previous write operation."},{"content":"&lt;/p&gt;\\n","pos":[58027,58033],"source":" </p>\\n"},{"pos":[58957,58975],"content":"WriteAsync(String)","needQuote":true,"nodes":[{"content":"WriteAsync(String)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The string to write.","pos":[59818,59843],"source":"\\n<p>The string to write."},{"content":"If &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;, nothing is written to the text stream.&lt;/p&gt;\\n","pos":[59844,59932],"source":" If <em>value</em> is <strong>null</strong>, nothing is written to the text stream.</p>\\n"},{"content":"\\n&lt;p&gt;A task that represents the asynchronous write operation.","pos":[60006,60067],"source":"\\n<p>A task that represents the asynchronous write operation."},{"content":"&lt;/p&gt;\\n","pos":[60068,60074],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The text writer is disposed.&lt;/p&gt;\\n","pos":[60197,60236],"source":"\\n<p>The text writer is disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The text writer is currently in use by a previous write operation.","pos":[60349,60420],"source":"\\n<p>The text writer is currently in use by a previous write operation."},{"content":"&lt;/p&gt;\\n","pos":[60421,60427],"source":" </p>\\n"},{"pos":[60988,60999],"content":"WriteLine()","needQuote":true,"nodes":[{"content":"WriteLine()","pos":[0,11]}]},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[61847,61872],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[61873,61879],"source":" </p>\\n"},{"pos":[62377,62395],"content":"WriteLine(Boolean)","needQuote":true,"nodes":[{"content":"WriteLine(Boolean)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The &lt;strong&gt;Boolean&lt;/strong&gt; value to write.","pos":[63117,63166],"source":"\\n<p>The <strong>Boolean</strong> value to write."},{"content":"&lt;/p&gt;\\n","pos":[63167,63173],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[63494,63519],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[63520,63526],"source":" </p>\\n"},{"pos":[64022,64037],"content":"WriteLine(Char)","needQuote":true,"nodes":[{"content":"WriteLine(Char)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The character to write to the text stream.","pos":[64702,64749],"source":"\\n<p>The character to write to the text stream."},{"content":"&lt;/p&gt;\\n","pos":[64750,64756],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[65077,65102],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[65103,65109],"source":" </p>\\n"},{"pos":[65608,65625],"content":"WriteLine(Char[])","needQuote":true,"nodes":[{"content":"WriteLine(Char[])","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The character array from which data is read.","pos":[66312,66361],"source":"\\n<p>The character array from which data is read."},{"content":"&lt;/p&gt;\\n","pos":[66362,66368],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[66689,66714],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[66715,66721],"source":" </p>\\n"},{"pos":[67438,67469],"content":"WriteLine(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"WriteLine(Char[], Int32, Int32)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The character array from which data is read.","pos":[68244,68293],"source":"\\n<p>The character array from which data is read."},{"content":"&lt;/p&gt;\\n","pos":[68294,68300],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The character position in &lt;em&gt;buffer&lt;/em&gt; at which to start reading data.","pos":[68363,68441],"source":"\\n<p>The character position in <em>buffer</em> at which to start reading data."},{"content":"&lt;/p&gt;\\n","pos":[68442,68448],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of characters to write.","pos":[68511,68558],"source":"\\n<p>The maximum number of characters to write."},{"content":"&lt;/p&gt;\\n","pos":[68559,68565],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The buffer length minus &lt;em&gt;index&lt;/em&gt; is less than &lt;em&gt;count&lt;/em&gt;.","pos":[68676,68748],"source":"\\n<p>The buffer length minus <em>index</em> is less than <em>count</em>."},{"content":"&lt;/p&gt;\\n","pos":[68749,68755],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;buffer&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.","pos":[68860,68920],"source":"\\n<p>The <em>buffer</em> parameter is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[68921,68927],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is negative.","pos":[69044,69096],"source":"\\n<p>\\n<em>index</em> or <em>count</em> is negative."},{"content":"&lt;/p&gt;\\n","pos":[69097,69103],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[69410,69435],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[69436,69442],"source":" </p>\\n"},{"pos":[70154,70172],"content":"WriteLine(Decimal)","needQuote":true,"nodes":[{"content":"WriteLine(Decimal)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The decimal value to write.","pos":[70880,70912],"source":"\\n<p>The decimal value to write."},{"content":"&lt;/p&gt;\\n","pos":[70913,70919],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[71240,71265],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[71266,71272],"source":" </p>\\n"},{"pos":[71847,71864],"content":"WriteLine(Double)","needQuote":true,"nodes":[{"content":"WriteLine(Double)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The 8-byte floating-point value to write.","pos":[72582,72628],"source":"\\n<p>The 8-byte floating-point value to write."},{"content":"&lt;/p&gt;\\n","pos":[72629,72635],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[72956,72981],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[72982,72988],"source":" </p>\\n"},{"pos":[73559,73575],"content":"WriteLine(Int32)","needQuote":true,"nodes":[{"content":"WriteLine(Int32)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The 4-byte signed integer to write.","pos":[74283,74323],"source":"\\n<p>The 4-byte signed integer to write."},{"content":"&lt;/p&gt;\\n","pos":[74324,74330],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[74651,74676],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[74677,74683],"source":" </p>\\n"},{"pos":[75253,75269],"content":"WriteLine(Int64)","needQuote":true,"nodes":[{"content":"WriteLine(Int64)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The 8-byte signed integer to write.","pos":[75976,76016],"source":"\\n<p>The 8-byte signed integer to write."},{"content":"&lt;/p&gt;\\n","pos":[76017,76023],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[76344,76369],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[76370,76376],"source":" </p>\\n"},{"pos":[76949,76966],"content":"WriteLine(Object)","needQuote":true,"nodes":[{"content":"WriteLine(Object)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The object to write.","pos":[77728,77753],"source":"\\n<p>The object to write."},{"content":"If &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;, only the line terminator is written.","pos":[77754,77834],"source":" If <em>value</em> is <strong>null</strong>, only the line terminator is written."},{"content":"&lt;/p&gt;\\n","pos":[77835,77841],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[78162,78187],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[78188,78194],"source":" </p>\\n"},{"pos":[78768,78785],"content":"WriteLine(Single)","needQuote":true,"nodes":[{"content":"WriteLine(Single)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The 4-byte floating-point value to write.","pos":[79502,79548],"source":"\\n<p>The 4-byte floating-point value to write."},{"content":"&lt;/p&gt;\\n","pos":[79549,79555],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[79876,79901],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[79902,79908],"source":" </p>\\n"},{"pos":[80482,80499],"content":"WriteLine(String)","needQuote":true,"nodes":[{"content":"WriteLine(String)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The string to write.","pos":[81169,81194],"source":"\\n<p>The string to write."},{"content":"If &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;, only the line terminator is written.","pos":[81195,81275],"source":" If <em>value</em> is <strong>null</strong>, only the line terminator is written."},{"content":"&lt;/p&gt;\\n","pos":[81276,81282],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[81603,81628],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[81629,81635],"source":" </p>\\n"},{"pos":[82178,82203],"content":"WriteLine(String, Object)","needQuote":true,"nodes":[{"content":"WriteLine(String, Object)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;A composite format string (see Remarks).&lt;/p&gt;\\n","pos":[83065,83116],"source":"\\n<p>A composite format string (see Remarks).</p>\\n"},{"content":"\\n&lt;p&gt;The object to format and write.","pos":[83179,83215],"source":"\\n<p>The object to format and write."},{"content":"&lt;/p&gt;\\n","pos":[83216,83222],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[83341,83389],"source":"\\n<p>\\n<em>format</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[83390,83396],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[83703,83728],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[83729,83735],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is not a valid composite format string.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is one).","pos":[83828,84071],"source":"\\n<p>\\n<em>format</em> is not a valid composite format string.</p>\\n<p>-or- </p>\\n<p>The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is one)."},{"content":"&lt;/p&gt;\\n","pos":[84072,84078],"source":" </p>\\n"},{"pos":[84744,84777],"content":"WriteLine(String, Object, Object)","needQuote":true,"nodes":[{"content":"WriteLine(String, Object, Object)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;A composite format string (see Remarks).&lt;/p&gt;\\n","pos":[85697,85748],"source":"\\n<p>A composite format string (see Remarks).</p>\\n"},{"content":"\\n&lt;p&gt;The first object to format and write.","pos":[85811,85853],"source":"\\n<p>The first object to format and write."},{"content":"&lt;/p&gt;\\n","pos":[85854,85860],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second object to format and write.","pos":[85923,85966],"source":"\\n<p>The second object to format and write."},{"content":"&lt;/p&gt;\\n","pos":[85967,85973],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[86092,86140],"source":"\\n<p>\\n<em>format</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[86141,86147],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[86454,86479],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[86480,86486],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is not a valid composite format string.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is two).","pos":[86579,86822],"source":"\\n<p>\\n<em>format</em> is not a valid composite format string.</p>\\n<p>-or- </p>\\n<p>The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is two)."},{"content":"&lt;/p&gt;\\n","pos":[86823,86829],"source":" </p>\\n"},{"pos":[87545,87586],"content":"WriteLine(String, Object, Object, Object)","needQuote":true,"nodes":[{"content":"WriteLine(String, Object, Object, Object)","pos":[0,41]}]},{"content":"\\n&lt;p&gt;A composite format string (see Remarks).&lt;/p&gt;\\n","pos":[88500,88551],"source":"\\n<p>A composite format string (see Remarks).</p>\\n"},{"content":"\\n&lt;p&gt;The first object to format and write.","pos":[88614,88656],"source":"\\n<p>The first object to format and write."},{"content":"&lt;/p&gt;\\n","pos":[88657,88663],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second object to format and write.","pos":[88726,88769],"source":"\\n<p>The second object to format and write."},{"content":"&lt;/p&gt;\\n","pos":[88770,88776],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The third object to format and write.","pos":[88839,88881],"source":"\\n<p>The third object to format and write."},{"content":"&lt;/p&gt;\\n","pos":[88882,88888],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[89007,89055],"source":"\\n<p>\\n<em>format</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[89056,89062],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[89369,89394],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[89395,89401],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is not a valid composite format string.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is three).","pos":[89494,89739],"source":"\\n<p>\\n<em>format</em> is not a valid composite format string.</p>\\n<p>-or- </p>\\n<p>The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is three)."},{"content":"&lt;/p&gt;\\n","pos":[89740,89746],"source":" </p>\\n"},{"pos":[90392,90419],"content":"WriteLine(String, Object[])","needQuote":true,"nodes":[{"content":"WriteLine(String, Object[])","pos":[0,27]}]},{"content":"\\n&lt;p&gt;A composite format string (see Remarks).&lt;/p&gt;\\n","pos":[91267,91318],"source":"\\n<p>A composite format string (see Remarks).</p>\\n"},{"content":"\\n&lt;p&gt;An object array that contains zero or more objects to format and write.","pos":[91382,91458],"source":"\\n<p>An object array that contains zero or more objects to format and write."},{"content":"&lt;/p&gt;\\n","pos":[91459,91465],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A string or object is passed in as &lt;strong&gt;null&lt;/strong&gt;.","pos":[91584,91646],"source":"\\n<p>A string or object is passed in as <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[91647,91653],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[91960,91985],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[91986,91992],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is not a valid composite format string.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The index of a format item is less than 0 (zero), or greater than or equal to the length of the &lt;em&gt;arg&lt;/em&gt; array.","pos":[92085,92285],"source":"\\n<p>\\n<em>format</em> is not a valid composite format string.</p>\\n<p>-or- </p>\\n<p>The index of a format item is less than 0 (zero), or greater than or equal to the length of the <em>arg</em> array."},{"content":"&lt;/p&gt;\\n","pos":[92286,92292],"source":" </p>\\n"},{"pos":[93051,93068],"content":"WriteLine(UInt32)","needQuote":true,"nodes":[{"content":"WriteLine(UInt32)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The 4-byte unsigned integer to write.","pos":[93858,93900],"source":"\\n<p>The 4-byte unsigned integer to write."},{"content":"&lt;/p&gt;\\n","pos":[93901,93907],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[94228,94253],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[94254,94260],"source":" </p>\\n"},{"pos":[95009,95026],"content":"WriteLine(UInt64)","needQuote":true,"nodes":[{"content":"WriteLine(UInt64)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The 8-byte unsigned integer to write.","pos":[95815,95857],"source":"\\n<p>The 8-byte unsigned integer to write."},{"content":"&lt;/p&gt;\\n","pos":[95858,95864],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[96185,96210],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[96211,96217],"source":" </p>\\n"},{"pos":[96936,96952],"content":"WriteLineAsync()","needQuote":true,"nodes":[{"content":"WriteLineAsync()","pos":[0,16]}]},{"content":"\\n&lt;p&gt;A task that represents the asynchronous write operation.","pos":[97772,97833],"source":"\\n<p>A task that represents the asynchronous write operation."},{"content":"&lt;/p&gt;\\n","pos":[97834,97840],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The text writer is disposed.&lt;/p&gt;\\n","pos":[97963,98002],"source":"\\n<p>The text writer is disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The text writer is currently in use by a previous write operation.","pos":[98115,98186],"source":"\\n<p>The text writer is currently in use by a previous write operation."},{"content":"&lt;/p&gt;\\n","pos":[98187,98193],"source":" </p>\\n"},{"pos":[98659,98679],"content":"WriteLineAsync(Char)","needQuote":true,"nodes":[{"content":"WriteLineAsync(Char)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The character to write to the text stream.&lt;/p&gt;\\n","pos":[99563,99616],"source":"\\n<p>The character to write to the text stream.</p>\\n"},{"content":"\\n&lt;p&gt;A task that represents the asynchronous write operation.&lt;/p&gt;\\n","pos":[99690,99757],"source":"\\n<p>A task that represents the asynchronous write operation.</p>\\n"},{"content":"\\n&lt;p&gt;The text writer is disposed.&lt;/p&gt;\\n","pos":[99880,99919],"source":"\\n<p>The text writer is disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The text writer is currently in use by a previous write operation.","pos":[100032,100103],"source":"\\n<p>The text writer is currently in use by a previous write operation."},{"content":"&lt;/p&gt;\\n","pos":[100104,100110],"source":" </p>\\n"},{"pos":[100741,100763],"content":"WriteLineAsync(Char[])","needQuote":true,"nodes":[{"content":"WriteLineAsync(Char[])","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The character array to write to the text stream.","pos":[101649,101702],"source":"\\n<p>The character array to write to the text stream."},{"content":"If the character array is &lt;strong&gt;null&lt;/strong&gt;, only the line terminator is written.","pos":[101703,101788],"source":" If the character array is <strong>null</strong>, only the line terminator is written."},{"content":"&lt;/p&gt;\\n","pos":[101789,101795],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A task that represents the asynchronous write operation.&lt;/p&gt;\\n","pos":[101869,101936],"source":"\\n<p>A task that represents the asynchronous write operation.</p>\\n"},{"content":"\\n&lt;p&gt;The text writer is disposed.&lt;/p&gt;\\n","pos":[102059,102098],"source":"\\n<p>The text writer is disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The text writer is currently in use by a previous write operation.","pos":[102211,102282],"source":"\\n<p>The text writer is currently in use by a previous write operation."},{"content":"&lt;/p&gt;\\n","pos":[102283,102289],"source":" </p>\\n"},{"pos":[103013,103049],"content":"WriteLineAsync(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"WriteLineAsync(Char[], Int32, Int32)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;The character array to write data from.","pos":[104043,104087],"source":"\\n<p>The character array to write data from."},{"content":"&lt;/p&gt;\\n","pos":[104088,104094],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The character position in the buffer at which to start retrieving data.","pos":[104157,104233],"source":"\\n<p>The character position in the buffer at which to start retrieving data."},{"content":"&lt;/p&gt;\\n","pos":[104234,104240],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters to write.","pos":[104303,104342],"source":"\\n<p>The number of characters to write."},{"content":"&lt;/p&gt;\\n","pos":[104343,104349],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A task that represents the asynchronous write operation.&lt;/p&gt;\\n","pos":[104423,104490],"source":"\\n<p>A task that represents the asynchronous write operation.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;buffer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[104609,104663],"source":"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;index&lt;/em&gt; plus &lt;em&gt;count&lt;/em&gt; is greater than the buffer length.&lt;/p&gt;\\n","pos":[104760,104844],"source":"\\n<p>The <em>index</em> plus <em>count</em> is greater than the buffer length.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is negative.&lt;/p&gt;\\n","pos":[104961,105019],"source":"\\n<p>\\n<em>index</em> or <em>count</em> is negative.</p>\\n"},{"content":"\\n&lt;p&gt;The text writer is disposed.&lt;/p&gt;\\n","pos":[105128,105167],"source":"\\n<p>The text writer is disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The text writer is currently in use by a previous write operation.","pos":[105280,105351],"source":"\\n<p>The text writer is currently in use by a previous write operation."},{"content":"&lt;/p&gt;\\n","pos":[105352,105358],"source":" </p>\\n"},{"pos":[106326,106348],"content":"WriteLineAsync(String)","needQuote":true,"nodes":[{"content":"WriteLineAsync(String)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The string to write.","pos":[107238,107263],"source":"\\n<p>The string to write."},{"content":"If the value is &lt;strong&gt;null&lt;/strong&gt;, only a line terminator is written.","pos":[107264,107337],"source":" If the value is <strong>null</strong>, only a line terminator is written."},{"content":"&lt;/p&gt;\\n","pos":[107338,107344],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A task that represents the asynchronous write operation.&lt;/p&gt;\\n","pos":[107418,107485],"source":"\\n<p>A task that represents the asynchronous write operation.</p>\\n"},{"content":"\\n&lt;p&gt;The text writer is disposed.&lt;/p&gt;\\n","pos":[107608,107647],"source":"\\n<p>The text writer is disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The text writer is currently in use by a previous write operation.","pos":[107760,107831],"source":"\\n<p>The text writer is currently in use by a previous write operation."},{"content":"&lt;/p&gt;\\n","pos":[107832,107838],"source":" </p>\\n"},{"pos":[108310,108319],"content":"System.IO","needQuote":true,"nodes":[{"content":"System.IO","pos":[0,9]}]},{"pos":[108459,108465],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[108615,108626],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[108801,108811],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[108906,108914],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[108983,108984],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[109011,109012],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[109082,109090],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[109159,109160],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[109187,109188],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[109371,109385],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[109504,109510],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[109577,109578],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[109628,109634],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[109694,109695],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[109778,109784],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[109851,109852],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[109902,109908],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[109968,109969],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[110183,110205],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[110353,110359],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[110426,110427],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[110477,110483],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[110544,110545]},{"pos":[110600,110606],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[110666,110667],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[110764,110770],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[110837,110838],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[110888,110894],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[110955,110956]},{"pos":[111011,111017],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[111077,111078],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[111323,111354],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[111520,111535],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[111611,111612],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[111662,111668],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[111729,111730]},{"pos":[111785,111791],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[111851,111852],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[111958,111973],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[112049,112050],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[112100,112106],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[112167,112168]},{"pos":[112223,112229],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[112289,112290],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[112520,112533],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[112634,112645],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[112717,112718],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[112745,112746],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[112819,112830],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[112902,112903],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[112930,112931],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[113106,113115],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[113208,113215],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[113283,113284],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[113311,113312],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[113381,113388],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[113456,113457],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[113484,113485],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[113660,113677],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[113786,113801],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[113877,113878],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[113905,113906],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[113983,113998],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[114074,114075],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[114102,114103],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[114248,114254],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[114348,114354],"content":"Char[]","needQuote":true,"nodes":[{"content":"Char[]","pos":[0,6]}]},{"pos":[114474,114478],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[114537,114539]},{"pos":[114602,114606],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[114664,114666],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[114809,114819],"content":"TextWriter","needQuote":true,"nodes":[{"content":"TextWriter","pos":[0,10]}]},{"pos":[114991,115006],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[115190,115198],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"pos":[115340,115351],"content":"System.Text","needQuote":true,"nodes":[{"content":"System.Text","pos":[0,11]}]},{"pos":[115497,115503],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[115673,115682],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[115785,115792],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[115844,115845],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[115872,115873],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[115947,115954],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[116006,116007],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[116034,116035],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[116199,116206],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[116384,116388],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[116551,116573],"content":"System.Threading.Tasks","needQuote":true,"nodes":[{"content":"System.Threading.Tasks","pos":[0,22]}]},{"pos":[116750,116754],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[116892,116897],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[117040,117047],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[117195,117201],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[117345,117350],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[117492,117498],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[117608,117616],"content":"Object[]","needQuote":true,"nodes":[{"content":"Object[]","pos":[0,8]}]},{"pos":[117744,117750],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":"[]","pos":[117811,117813]},{"pos":[117878,117884],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[117944,117946],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[118083,118089],"content":"UInt32","needQuote":true,"nodes":[{"content":"UInt32","pos":[0,6]}]},{"pos":[118234,118240],"content":"UInt64","needQuote":true,"nodes":[{"content":"UInt64","pos":[0,6]}]},{"pos":[118385,118408],"content":"ObjectDisposedException","needQuote":true,"nodes":[{"content":"ObjectDisposedException","pos":[0,23]}]},{"pos":[118623,118648],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[118861,118872],"content":"IOException","needQuote":true,"nodes":[{"content":"IOException","pos":[0,11]}]},{"pos":[119049,119066],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[119242,119263],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[119457,119484],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[119701,119716],"content":"FormatException","needQuote":true,"nodes":[{"content":"FormatException","pos":[0,15]}]}],"content":"items:\n- uid: System.IO.TextWriter\n  commentId: T:System.IO.TextWriter\n  id: TextWriter\n  parent: System.IO\n  children:\n  - System.IO.TextWriter.#ctor\n  - System.IO.TextWriter.#ctor(System.IFormatProvider)\n  - System.IO.TextWriter.CoreNewLine\n  - System.IO.TextWriter.Dispose\n  - System.IO.TextWriter.Dispose(System.Boolean)\n  - System.IO.TextWriter.Encoding\n  - System.IO.TextWriter.Flush\n  - System.IO.TextWriter.FlushAsync\n  - System.IO.TextWriter.FormatProvider\n  - System.IO.TextWriter.NewLine\n  - System.IO.TextWriter.Null\n  - System.IO.TextWriter.Write(System.Boolean)\n  - System.IO.TextWriter.Write(System.Char)\n  - System.IO.TextWriter.Write(System.Char[])\n  - System.IO.TextWriter.Write(System.Char[],System.Int32,System.Int32)\n  - System.IO.TextWriter.Write(System.Decimal)\n  - System.IO.TextWriter.Write(System.Double)\n  - System.IO.TextWriter.Write(System.Int32)\n  - System.IO.TextWriter.Write(System.Int64)\n  - System.IO.TextWriter.Write(System.Object)\n  - System.IO.TextWriter.Write(System.Single)\n  - System.IO.TextWriter.Write(System.String)\n  - System.IO.TextWriter.Write(System.String,System.Object)\n  - System.IO.TextWriter.Write(System.String,System.Object,System.Object)\n  - System.IO.TextWriter.Write(System.String,System.Object,System.Object,System.Object)\n  - System.IO.TextWriter.Write(System.String,System.Object[])\n  - System.IO.TextWriter.Write(System.UInt32)\n  - System.IO.TextWriter.Write(System.UInt64)\n  - System.IO.TextWriter.WriteAsync(System.Char)\n  - System.IO.TextWriter.WriteAsync(System.Char[])\n  - System.IO.TextWriter.WriteAsync(System.Char[],System.Int32,System.Int32)\n  - System.IO.TextWriter.WriteAsync(System.String)\n  - System.IO.TextWriter.WriteLine\n  - System.IO.TextWriter.WriteLine(System.Boolean)\n  - System.IO.TextWriter.WriteLine(System.Char)\n  - System.IO.TextWriter.WriteLine(System.Char[])\n  - System.IO.TextWriter.WriteLine(System.Char[],System.Int32,System.Int32)\n  - System.IO.TextWriter.WriteLine(System.Decimal)\n  - System.IO.TextWriter.WriteLine(System.Double)\n  - System.IO.TextWriter.WriteLine(System.Int32)\n  - System.IO.TextWriter.WriteLine(System.Int64)\n  - System.IO.TextWriter.WriteLine(System.Object)\n  - System.IO.TextWriter.WriteLine(System.Single)\n  - System.IO.TextWriter.WriteLine(System.String)\n  - System.IO.TextWriter.WriteLine(System.String,System.Object)\n  - System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object)\n  - System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object,System.Object)\n  - System.IO.TextWriter.WriteLine(System.String,System.Object[])\n  - System.IO.TextWriter.WriteLine(System.UInt32)\n  - System.IO.TextWriter.WriteLine(System.UInt64)\n  - System.IO.TextWriter.WriteLineAsync\n  - System.IO.TextWriter.WriteLineAsync(System.Char)\n  - System.IO.TextWriter.WriteLineAsync(System.Char[])\n  - System.IO.TextWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)\n  - System.IO.TextWriter.WriteLineAsync(System.String)\n  langs:\n  - csharp\n  - vb\n  name: TextWriter\n  fullName: System.IO.TextWriter\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TextWriter\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 35\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Represents a writer that can write a sequential series of characters. This class is abstract.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ComVisible(true)]\n\n      public abstract class TextWriter : IDisposable\n    content.vb: >-\n      <Serializable>\n\n      <ComVisible(True)>\n\n      Public MustInherit Class TextWriter\n          Implements IDisposable\n  seealso:\n  - type: System.IO.StreamWriter\n    commentId: T:System.IO.StreamWriter\n  - type: System.IO.StringWriter\n    commentId: T:System.IO.StringWriter\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: TextWriter\n- uid: System.IO.TextWriter.CoreNewLine\n  commentId: F:System.IO.TextWriter.CoreNewLine\n  id: CoreNewLine\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: CoreNewLine\n  fullName: System.IO.TextWriter.CoreNewLine\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CoreNewLine\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 50\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Stores the newline characters used for this <strong>TextWriter</strong>.</p>\\n\"\n  syntax:\n    content: protected char[] CoreNewLine\n    content.vb: Protected CoreNewLine As Char()\n    return:\n      type: System.Char[]\n  seealso:\n  - type: System.IO.StreamWriter\n    commentId: T:System.IO.StreamWriter\n  - type: System.IO.StringWriter\n    commentId: T:System.IO.StringWriter\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: TextWriter.CoreNewLine\n- uid: System.IO.TextWriter.Null\n  commentId: F:System.IO.TextWriter.Null\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  fullName: System.IO.TextWriter.Null\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 42\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Provides a <strong>TextWriter</strong> with no backing store that can be written to, but not read from.</p>\\n\"\n  syntax:\n    content: public static readonly TextWriter Null\n    content.vb: Public Shared ReadOnly Null As TextWriter\n    return:\n      type: System.IO.TextWriter\n  seealso:\n  - type: System.IO.StreamWriter\n    commentId: T:System.IO.StreamWriter\n  - type: System.IO.StringWriter\n    commentId: T:System.IO.StringWriter\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: TextWriter.Null\n- uid: System.IO.TextWriter.#ctor\n  commentId: M:System.IO.TextWriter.#ctor\n  id: '#ctor'\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: TextWriter()\n  fullName: System.IO.TextWriter.TextWriter()\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 60\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.IO.TextWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: protected TextWriter()\n    content.vb: Protected Sub New\n  seealso:\n  - type: System.IO.StreamWriter\n    commentId: T:System.IO.StreamWriter\n  - type: System.IO.StringWriter\n    commentId: T:System.IO.StringWriter\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: TextWriter.TextWriter()\n- uid: System.IO.TextWriter.#ctor(System.IFormatProvider)\n  commentId: M:System.IO.TextWriter.#ctor(System.IFormatProvider)\n  id: '#ctor(System.IFormatProvider)'\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: TextWriter(IFormatProvider)\n  fullName: System.IO.TextWriter.TextWriter(System.IFormatProvider)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 65\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.IO.TextWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified format provider.</p>\\n\"\n  syntax:\n    content: protected TextWriter(IFormatProvider formatProvider)\n    content.vb: Protected Sub New(formatProvider As IFormatProvider)\n    parameters:\n    - id: formatProvider\n      type: System.IFormatProvider\n      description: \"\\n<p>An <xref href=\\\"System.IFormatProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that controls formatting. </p>\\n\"\n  seealso:\n  - type: System.IO.StreamWriter\n    commentId: T:System.IO.StreamWriter\n  - type: System.IO.StringWriter\n    commentId: T:System.IO.StringWriter\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: TextWriter.TextWriter(IFormatProvider)\n- uid: System.IO.TextWriter.Encoding\n  commentId: P:System.IO.TextWriter.Encoding\n  id: Encoding\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: Encoding\n  fullName: System.IO.TextWriter.Encoding\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Encoding\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 107\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>When overridden in a derived class, returns the character encoding in which the output is written.</p>\\n\"\n  syntax:\n    content: public abstract Encoding Encoding { get; }\n    content.vb: Public MustOverride ReadOnly Property Encoding As Encoding\n    parameters: []\n    return:\n      type: System.Text.Encoding\n      description: \"\\n<p>The character encoding in which the output is written.</p>\\n\"\n  seealso:\n  - type: System.IO.StreamWriter\n    commentId: T:System.IO.StreamWriter\n  - type: System.IO.StringWriter\n    commentId: T:System.IO.StringWriter\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: TextWriter.Encoding\n- uid: System.IO.TextWriter.FormatProvider\n  commentId: P:System.IO.TextWriter.FormatProvider\n  id: FormatProvider\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: FormatProvider\n  fullName: System.IO.TextWriter.FormatProvider\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FormatProvider\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 70\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Gets an object that controls formatting.</p>\\n\"\n  syntax:\n    content: public virtual IFormatProvider FormatProvider { get; }\n    content.vb: Public Overridable ReadOnly Property FormatProvider As IFormatProvider\n    parameters: []\n    return:\n      type: System.IFormatProvider\n      description: \"\\n<p>An <xref href=\\\"System.IFormatProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object for a specific culture, or the formatting of the current culture if no other culture is specified.</p>\\n\"\n  seealso:\n  - type: System.IO.StreamWriter\n    commentId: T:System.IO.StreamWriter\n  - type: System.IO.StringWriter\n    commentId: T:System.IO.StringWriter\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: TextWriter.FormatProvider\n- uid: System.IO.TextWriter.NewLine\n  commentId: P:System.IO.TextWriter.NewLine\n  id: NewLine\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: NewLine\n  fullName: System.IO.TextWriter.NewLine\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: NewLine\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 120\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Gets or sets the line terminator string used by the current <strong>TextWriter</strong>.</p>\\n\"\n  syntax:\n    content: public virtual string NewLine { get; set; }\n    content.vb: Public Overridable Property NewLine As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The line terminator string for the current <strong>TextWriter</strong>.</p>\\n\"\n  seealso:\n  - type: System.IO.StreamWriter\n    commentId: T:System.IO.StreamWriter\n  - type: System.IO.StringWriter\n    commentId: T:System.IO.StringWriter\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TextWriter.NewLine\n- uid: System.IO.TextWriter.Dispose\n  commentId: M:System.IO.TextWriter.Dispose\n  id: Dispose\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: Dispose()\n  fullName: System.IO.TextWriter.Dispose()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Dispose\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 94\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Releases all resources used by the <xref href=\\\"System.IO.TextWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public void Dispose()\n    content.vb: Public Sub Dispose\n  implements:\n  - System.IDisposable.Dispose\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TextWriter.Dispose()\n- uid: System.IO.TextWriter.Dispose(System.Boolean)\n  commentId: M:System.IO.TextWriter.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: Dispose(Boolean)\n  fullName: System.IO.TextWriter.Dispose(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Dispose\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 89\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Releases the unmanaged resources used by the <xref href=\\\"System.IO.TextWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and optionally releases the managed resources.</p>\\n\"\n  syntax:\n    content: protected virtual void Dispose(bool disposing)\n    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources. </p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: TextWriter.Dispose(Boolean)\n- uid: System.IO.TextWriter.Flush\n  commentId: M:System.IO.TextWriter.Flush\n  id: Flush\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: Flush()\n  fullName: System.IO.TextWriter.Flush()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Flush\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 104\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Clears all buffers for the current writer and causes any buffered data to be written to the underlying device.</p>\\n\"\n  syntax:\n    content: public virtual void Flush()\n    content.vb: Public Overridable Sub Flush\n  seealso:\n  - type: System.IO.StreamWriter\n    commentId: T:System.IO.StreamWriter\n  - type: System.IO.StringWriter\n    commentId: T:System.IO.StringWriter\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TextWriter.Flush()\n- uid: System.IO.TextWriter.FlushAsync\n  commentId: M:System.IO.TextWriter.FlushAsync\n  id: FlushAsync\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: FlushAsync()\n  fullName: System.IO.TextWriter.FlushAsync()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FlushAsync\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 593\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Asynchronously clears all buffers for the current writer and causes any buffered data to be written to the underlying device. </p>\\n\"\n  syntax:\n    content: >-\n      [HostProtection(ExternalThreading = true)]\n\n      [ComVisible(false)]\n\n      public virtual Task FlushAsync()\n    content.vb: >-\n      <HostProtection(ExternalThreading:=True)>\n\n      <ComVisible(False)>\n\n      Public Overridable Function FlushAsync As Task\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A task that represents the asynchronous flush operation. </p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The text writer is disposed.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The writer is currently in use by a previous write operation. </p>\\n\"\n  seealso:\n  - type: System.IO.StreamWriter\n    commentId: T:System.IO.StreamWriter\n  - type: System.IO.StringWriter\n    commentId: T:System.IO.StringWriter\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TextWriter.FlushAsync()\n- uid: System.IO.TextWriter.Write(System.Boolean)\n  commentId: M:System.IO.TextWriter.Write(System.Boolean)\n  id: Write(System.Boolean)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: Write(Boolean)\n  fullName: System.IO.TextWriter.Write(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 179\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes the text representation of a <strong>Boolean</strong> value to the text string or stream.</p>\\n\"\n  syntax:\n    content: public virtual void Write(bool value)\n    content.vb: Public Overridable Sub Write(value As Boolean)\n    parameters:\n    - id: value\n      type: System.Boolean\n      description: \"\\n<p>The <strong>Boolean</strong> value to write. </p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.IO.TextWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  seealso:\n  - type: System.IO.StreamWriter\n    commentId: T:System.IO.StreamWriter\n  - type: System.IO.StringWriter\n    commentId: T:System.IO.StringWriter\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TextWriter.Write(Boolean)\n- uid: System.IO.TextWriter.Write(System.Char)\n  commentId: M:System.IO.TextWriter.Write(System.Char)\n  id: Write(System.Char)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: Write(Char)\n  fullName: System.IO.TextWriter.Write(System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 147\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes a character to the text string or stream.</p>\\n\"\n  syntax:\n    content: public virtual void Write(char value)\n    content.vb: Public Overridable Sub Write(value As Char)\n    parameters:\n    - id: value\n      type: System.Char\n      description: \"\\n<p>The character to write to the text stream. </p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.IO.TextWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  seealso:\n  - type: System.IO.StreamWriter.Write(System.Char)\n    commentId: M:System.IO.StreamWriter.Write(System.Char)\n  - type: System.IO.StringWriter.Write(System.Char)\n    commentId: M:System.IO.StringWriter.Write(System.Char)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: TextWriter.Write(Char)\n- uid: System.IO.TextWriter.Write(System.Char[])\n  commentId: M:System.IO.TextWriter.Write(System.Char[])\n  id: Write(System.Char[])\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: Write(Char[])\n  fullName: System.IO.TextWriter.Write(System.Char[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 154\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes a character array to the text string or stream.</p>\\n\"\n  syntax:\n    content: public virtual void Write(char[] buffer)\n    content.vb: Public Overridable Sub Write(buffer As Char())\n    parameters:\n    - id: buffer\n      type: System.Char[]\n      description: \"\\n<p>The character array to write to the text stream. </p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.IO.TextWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  seealso:\n  - type: System.IO.StreamWriter.Write(System.Char[])\n    commentId: M:System.IO.StreamWriter.Write(System.Char[])\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.IO.TextWriter.Write(System.Char())\n  name.vb: Write(Char())\n  nameWithType: TextWriter.Write(Char[])\n  nameWithType.vb: TextWriter.Write(Char())\n- uid: System.IO.TextWriter.Write(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.IO.TextWriter.Write(System.Char[],System.Int32,System.Int32)\n  id: Write(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: Write(Char[], Int32, Int32)\n  fullName: System.IO.TextWriter.Write(System.Char[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 162\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes a subarray of characters to the text string or stream.</p>\\n\"\n  syntax:\n    content: public virtual void Write(char[] buffer, int index, int count)\n    content.vb: Public Overridable Sub Write(buffer As Char(), index As Integer, count As Integer)\n    parameters:\n    - id: buffer\n      type: System.Char[]\n      description: \"\\n<p>The character array to write data from. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The character position in the buffer at which to start retrieving data. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of characters to write. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The buffer length minus <em>index</em> is less than <em>count</em>. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>buffer</em> parameter is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> or <em>count</em> is negative. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.IO.TextWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  seealso:\n  - type: System.IO.StreamWriter.Write(System.Char[],System.Int32,System.Int32)\n    commentId: M:System.IO.StreamWriter.Write(System.Char[],System.Int32,System.Int32)\n  - type: System.IO.StringWriter.Write(System.Char[],System.Int32,System.Int32)\n    commentId: M:System.IO.StringWriter.Write(System.Char[],System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.IO.TextWriter.Write(System.Char(), System.Int32, System.Int32)\n  name.vb: Write(Char(), Int32, Int32)\n  nameWithType: TextWriter.Write(Char[], Int32, Int32)\n  nameWithType.vb: TextWriter.Write(Char(), Int32, Int32)\n- uid: System.IO.TextWriter.Write(System.Decimal)\n  commentId: M:System.IO.TextWriter.Write(System.Decimal)\n  id: Write(System.Decimal)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: Write(Decimal)\n  fullName: System.IO.TextWriter.Write(System.Decimal)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 233\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes the text representation of a decimal value to the text string or stream.</p>\\n\"\n  syntax:\n    content: public virtual void Write(decimal value)\n    content.vb: Public Overridable Sub Write(value As Decimal)\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: \"\\n<p>The decimal value to write. </p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.IO.TextWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  seealso:\n  - type: System.IO.StreamWriter\n    commentId: T:System.IO.StreamWriter\n  - type: System.IO.StringWriter\n    commentId: T:System.IO.StringWriter\n  - type: System.IFormatProvider\n    commentId: T:System.IFormatProvider\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TextWriter.Write(Decimal)\n- uid: System.IO.TextWriter.Write(System.Double)\n  commentId: M:System.IO.TextWriter.Write(System.Double)\n  id: Write(System.Double)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: Write(Double)\n  fullName: System.IO.TextWriter.Write(System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 229\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes the text representation of an 8-byte floating-point value to the text string or stream.</p>\\n\"\n  syntax:\n    content: public virtual void Write(double value)\n    content.vb: Public Overridable Sub Write(value As Double)\n    parameters:\n    - id: value\n      type: System.Double\n      description: \"\\n<p>The 8-byte floating-point value to write. </p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.IO.TextWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  seealso:\n  - type: System.IO.StreamWriter\n    commentId: T:System.IO.StreamWriter\n  - type: System.IO.StringWriter\n    commentId: T:System.IO.StringWriter\n  - type: System.IFormatProvider\n    commentId: T:System.IFormatProvider\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TextWriter.Write(Double)\n- uid: System.IO.TextWriter.Write(System.Int32)\n  commentId: M:System.IO.TextWriter.Write(System.Int32)\n  id: Write(System.Int32)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: Write(Int32)\n  fullName: System.IO.TextWriter.Write(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 187\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes the text representation of a 4-byte signed integer to the text string or stream.</p>\\n\"\n  syntax:\n    content: public virtual void Write(int value)\n    content.vb: Public Overridable Sub Write(value As Integer)\n    parameters:\n    - id: value\n      type: System.Int32\n      description: \"\\n<p>The 4-byte signed integer to write. </p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.IO.TextWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  seealso:\n  - type: System.IO.StreamWriter\n    commentId: T:System.IO.StreamWriter\n  - type: System.IO.StringWriter\n    commentId: T:System.IO.StringWriter\n  - type: System.IFormatProvider\n    commentId: T:System.IFormatProvider\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TextWriter.Write(Int32)\n- uid: System.IO.TextWriter.Write(System.Int64)\n  commentId: M:System.IO.TextWriter.Write(System.Int64)\n  id: Write(System.Int64)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: Write(Int64)\n  fullName: System.IO.TextWriter.Write(System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 204\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes the text representation of an 8-byte signed integer to the text string or stream.</p>\\n\"\n  syntax:\n    content: public virtual void Write(long value)\n    content.vb: Public Overridable Sub Write(value As Long)\n    parameters:\n    - id: value\n      type: System.Int64\n      description: \"\\n<p>The 8-byte signed integer to write. </p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.IO.TextWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  seealso:\n  - type: System.IO.StreamWriter\n    commentId: T:System.IO.StreamWriter\n  - type: System.IO.StringWriter\n    commentId: T:System.IO.StringWriter\n  - type: System.IFormatProvider\n    commentId: T:System.IFormatProvider\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TextWriter.Write(Int64)\n- uid: System.IO.TextWriter.Write(System.Object)\n  commentId: M:System.IO.TextWriter.Write(System.Object)\n  id: Write(System.Object)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: Write(Object)\n  fullName: System.IO.TextWriter.Write(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 250\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes the text representation of an object to the text string or stream by calling the <strong>ToString</strong> method on that object.</p>\\n\"\n  syntax:\n    content: public virtual void Write(object value)\n    content.vb: Public Overridable Sub Write(value As Object)\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The object to write. </p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.IO.TextWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  seealso:\n  - type: System.IO.StreamWriter\n    commentId: T:System.IO.StreamWriter\n  - type: System.IO.StringWriter\n    commentId: T:System.IO.StringWriter\n  - type: System.IFormatProvider\n    commentId: T:System.IFormatProvider\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TextWriter.Write(Object)\n- uid: System.IO.TextWriter.Write(System.Single)\n  commentId: M:System.IO.TextWriter.Write(System.Single)\n  id: Write(System.Single)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: Write(Single)\n  fullName: System.IO.TextWriter.Write(System.Single)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 221\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes the text representation of a 4-byte floating-point value to the text string or stream.</p>\\n\"\n  syntax:\n    content: public virtual void Write(float value)\n    content.vb: Public Overridable Sub Write(value As Single)\n    parameters:\n    - id: value\n      type: System.Single\n      description: \"\\n<p>The 4-byte floating-point value to write. </p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.IO.TextWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  seealso:\n  - type: System.IO.StreamWriter\n    commentId: T:System.IO.StreamWriter\n  - type: System.IO.StringWriter\n    commentId: T:System.IO.StringWriter\n  - type: System.IFormatProvider\n    commentId: T:System.IFormatProvider\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TextWriter.Write(Single)\n- uid: System.IO.TextWriter.Write(System.String)\n  commentId: M:System.IO.TextWriter.Write(System.String)\n  id: Write(System.String)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: Write(String)\n  fullName: System.IO.TextWriter.Write(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 240\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes a string to the text string or stream.</p>\\n\"\n  syntax:\n    content: public virtual void Write(string value)\n    content.vb: Public Overridable Sub Write(value As String)\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>The string to write. </p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.IO.TextWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  seealso:\n  - type: System.IO.StreamWriter.Write(System.String)\n    commentId: M:System.IO.StreamWriter.Write(System.String)\n  - type: System.IO.StringWriter.Write(System.String)\n    commentId: M:System.IO.StringWriter.Write(System.String)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TextWriter.Write(String)\n- uid: System.IO.TextWriter.Write(System.String,System.Object)\n  commentId: M:System.IO.TextWriter.Write(System.String,System.Object)\n  id: Write(System.String,System.Object)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: Write(String, Object)\n  fullName: System.IO.TextWriter.Write(System.String, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 280\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes a formatted string to the text string or stream, using the same semantics as the <xref href=\\\"System.String.Format(System.String,System.Object)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method.</p>\\n\"\n  syntax:\n    content: public virtual void Write(string format, object arg0)\n    content.vb: Public Overridable Sub Write(format As String, arg0 As Object)\n    parameters:\n    - id: format\n      type: System.String\n      description: \"\\n<p>A composite format string (see Remarks). </p>\\n\"\n    - id: arg0\n      type: System.Object\n      description: \"\\n<p>The object to format and write. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>format</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.IO.TextWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>format</em> is not a valid composite format string.</p>\\n<p>-or- </p>\\n<p>The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is one). </p>\\n\"\n  seealso:\n  - type: System.IO.StreamWriter\n    commentId: T:System.IO.StreamWriter\n  - type: System.IO.StringWriter\n    commentId: T:System.IO.StringWriter\n  - type: System.IFormatProvider\n    commentId: T:System.IFormatProvider\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TextWriter.Write(String, Object)\n- uid: System.IO.TextWriter.Write(System.String,System.Object,System.Object)\n  commentId: M:System.IO.TextWriter.Write(System.String,System.Object,System.Object)\n  id: Write(System.String,System.Object,System.Object)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: Write(String, Object, Object)\n  fullName: System.IO.TextWriter.Write(System.String, System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 288\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes a formatted string to the text string or stream, using the same semantics as the <xref href=\\\"System.String.Format(System.String,System.Object,System.Object)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method.</p>\\n\"\n  syntax:\n    content: public virtual void Write(string format, object arg0, object arg1)\n    content.vb: Public Overridable Sub Write(format As String, arg0 As Object, arg1 As Object)\n    parameters:\n    - id: format\n      type: System.String\n      description: \"\\n<p>A composite format string (see Remarks). </p>\\n\"\n    - id: arg0\n      type: System.Object\n      description: \"\\n<p>The first object to format and write. </p>\\n\"\n    - id: arg1\n      type: System.Object\n      description: \"\\n<p>The second object to format and write. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>format</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.IO.TextWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>format</em> is not a valid composite format string.</p>\\n<p>-or- </p>\\n<p>The index of a format item is less than 0 (zero) or greater than or equal to the number of objects to be formatted (which, for this method overload, is two). </p>\\n\"\n  seealso:\n  - type: System.IO.StreamWriter\n    commentId: T:System.IO.StreamWriter\n  - type: System.IO.StringWriter\n    commentId: T:System.IO.StringWriter\n  - type: System.IFormatProvider\n    commentId: T:System.IFormatProvider\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TextWriter.Write(String, Object, Object)\n- uid: System.IO.TextWriter.Write(System.String,System.Object,System.Object,System.Object)\n  commentId: M:System.IO.TextWriter.Write(System.String,System.Object,System.Object,System.Object)\n  id: Write(System.String,System.Object,System.Object,System.Object)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: Write(String, Object, Object, Object)\n  fullName: System.IO.TextWriter.Write(System.String, System.Object, System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 296\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes a formatted string to the text string or stream, using the same semantics as the <xref href=\\\"System.String.Format(System.String,System.Object,System.Object,System.Object)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method.</p>\\n\"\n  syntax:\n    content: public virtual void Write(string format, object arg0, object arg1, object arg2)\n    content.vb: Public Overridable Sub Write(format As String, arg0 As Object, arg1 As Object, arg2 As Object)\n    parameters:\n    - id: format\n      type: System.String\n      description: \"\\n<p>A composite format string (see Remarks). </p>\\n\"\n    - id: arg0\n      type: System.Object\n      description: \"\\n<p>The first object to format and write. </p>\\n\"\n    - id: arg1\n      type: System.Object\n      description: \"\\n<p>The second object to format and write. </p>\\n\"\n    - id: arg2\n      type: System.Object\n      description: \"\\n<p>The third object to format and write. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>format</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.IO.TextWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>format</em> is not a valid composite format string.</p>\\n<p>-or- </p>\\n<p>The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is three). </p>\\n\"\n  seealso:\n  - type: System.IO.StreamWriter\n    commentId: T:System.IO.StreamWriter\n  - type: System.IO.StringWriter\n    commentId: T:System.IO.StringWriter\n  - type: System.IFormatProvider\n    commentId: T:System.IFormatProvider\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TextWriter.Write(String, Object, Object, Object)\n- uid: System.IO.TextWriter.Write(System.String,System.Object[])\n  commentId: M:System.IO.TextWriter.Write(System.String,System.Object[])\n  id: Write(System.String,System.Object[])\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: Write(String, Object[])\n  fullName: System.IO.TextWriter.Write(System.String, System.Object[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 304\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes a formatted string to the text string or stream, using the same semantics as the <xref href=\\\"System.String.Format(System.String,System.Object[])\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method.</p>\\n\"\n  syntax:\n    content: public virtual void Write(string format, params object[] arg)\n    content.vb: Public Overridable Sub Write(format As String, ParamArray arg As Object())\n    parameters:\n    - id: format\n      type: System.String\n      description: \"\\n<p>A composite format string (see Remarks). </p>\\n\"\n    - id: arg\n      type: System.Object[]\n      description: \"\\n<p>An object array that contains zero or more objects to format and write. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>format</em> or <em>arg</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.IO.TextWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>format</em> is not a valid composite format string.</p>\\n<p>-or- </p>\\n<p>The index of a format item is less than 0 (zero), or greater than or equal to the length of the <em>arg</em> array. </p>\\n\"\n  seealso:\n  - type: System.IO.StreamWriter\n    commentId: T:System.IO.StreamWriter\n  - type: System.IO.StringWriter\n    commentId: T:System.IO.StringWriter\n  - type: System.IFormatProvider\n    commentId: T:System.IFormatProvider\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.IO.TextWriter.Write(System.String, System.Object())\n  name.vb: Write(String, Object())\n  nameWithType: TextWriter.Write(String, Object[])\n  nameWithType.vb: TextWriter.Write(String, Object())\n- uid: System.IO.TextWriter.Write(System.UInt32)\n  commentId: M:System.IO.TextWriter.Write(System.UInt32)\n  id: Write(System.UInt32)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: Write(UInt32)\n  fullName: System.IO.TextWriter.Write(System.UInt32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 195\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes the text representation of a 4-byte unsigned integer to the text string or stream.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public virtual void Write(uint value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Overridable Sub Write(value As UInteger)\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: \"\\n<p>The 4-byte unsigned integer to write. </p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.IO.TextWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  seealso:\n  - type: System.IO.StreamWriter\n    commentId: T:System.IO.StreamWriter\n  - type: System.IO.StringWriter\n    commentId: T:System.IO.StringWriter\n  - type: System.IFormatProvider\n    commentId: T:System.IFormatProvider\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TextWriter.Write(UInt32)\n- uid: System.IO.TextWriter.Write(System.UInt64)\n  commentId: M:System.IO.TextWriter.Write(System.UInt64)\n  id: Write(System.UInt64)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: Write(UInt64)\n  fullName: System.IO.TextWriter.Write(System.UInt64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 212\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes the text representation of an 8-byte unsigned integer to the text string or stream.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public virtual void Write(ulong value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Overridable Sub Write(value As ULong)\n    parameters:\n    - id: value\n      type: System.UInt64\n      description: \"\\n<p>The 8-byte unsigned integer to write. </p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.IO.TextWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  seealso:\n  - type: System.IO.StreamWriter\n    commentId: T:System.IO.StreamWriter\n  - type: System.IO.StringWriter\n    commentId: T:System.IO.StringWriter\n  - type: System.IFormatProvider\n    commentId: T:System.IFormatProvider\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TextWriter.Write(UInt64)\n- uid: System.IO.TextWriter.WriteAsync(System.Char)\n  commentId: M:System.IO.TextWriter.WriteAsync(System.Char)\n  id: WriteAsync(System.Char)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteAsync(Char)\n  fullName: System.IO.TextWriter.WriteAsync(System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteAsync\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 492\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes a character to the text string or stream asynchronously.</p>\\n\"\n  syntax:\n    content: >-\n      [HostProtection(ExternalThreading = true)]\n\n      [ComVisible(false)]\n\n      public virtual Task WriteAsync(char value)\n    content.vb: >-\n      <HostProtection(ExternalThreading:=True)>\n\n      <ComVisible(False)>\n\n      Public Overridable Function WriteAsync(value As Char) As Task\n    parameters:\n    - id: value\n      type: System.Char\n      description: \"\\n<p>The character to write to the text stream.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A task that represents the asynchronous write operation.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The text writer is disposed.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The text writer is currently in use by a previous write operation. </p>\\n\"\n  seealso:\n  - type: System.IO.StreamWriter.WriteAsync(System.Char)\n    commentId: M:System.IO.StreamWriter.WriteAsync(System.Char)\n  - type: System.IO.StringWriter.WriteAsync(System.Char)\n    commentId: M:System.IO.StringWriter.WriteAsync(System.Char)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TextWriter.WriteAsync(Char)\n- uid: System.IO.TextWriter.WriteAsync(System.Char[])\n  commentId: M:System.IO.TextWriter.WriteAsync(System.Char[])\n  id: WriteAsync(System.Char[])\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteAsync(Char[])\n  fullName: System.IO.TextWriter.WriteAsync(System.Char[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteAsync\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 518\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes a character array to the text string or stream asynchronously.</p>\\n\"\n  syntax:\n    content: >-\n      [HostProtection(ExternalThreading = true)]\n\n      [ComVisible(false)]\n\n      public Task WriteAsync(char[] buffer)\n    content.vb: >-\n      <HostProtection(ExternalThreading:=True)>\n\n      <ComVisible(False)>\n\n      Public Function WriteAsync(buffer As Char()) As Task\n    parameters:\n    - id: buffer\n      type: System.Char[]\n      description: \"\\n<p>The character array to write to the text stream. If <em>buffer</em> is <strong>null</strong>, nothing is written.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A task that represents the asynchronous write operation.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The text writer is disposed.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The text writer is currently in use by a previous write operation. </p>\\n\"\n  seealso:\n  - type: System.IO.StreamWriter\n    commentId: T:System.IO.StreamWriter\n  - type: System.IO.StringWriter\n    commentId: T:System.IO.StringWriter\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.IO.TextWriter.WriteAsync(System.Char())\n  name.vb: WriteAsync(Char())\n  nameWithType: TextWriter.WriteAsync(Char[])\n  nameWithType.vb: TextWriter.WriteAsync(Char())\n- uid: System.IO.TextWriter.WriteAsync(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.IO.TextWriter.WriteAsync(System.Char[],System.Int32,System.Int32)\n  id: WriteAsync(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteAsync(Char[], Int32, Int32)\n  fullName: System.IO.TextWriter.WriteAsync(System.Char[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteAsync\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 526\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes a subarray of characters to the text string or stream asynchronously. </p>\\n\"\n  syntax:\n    content: >-\n      [HostProtection(ExternalThreading = true)]\n\n      [ComVisible(false)]\n\n      public virtual Task WriteAsync(char[] buffer, int index, int count)\n    content.vb: >-\n      <HostProtection(ExternalThreading:=True)>\n\n      <ComVisible(False)>\n\n      Public Overridable Function WriteAsync(buffer As Char(), index As Integer, count As Integer) As Task\n    parameters:\n    - id: buffer\n      type: System.Char[]\n      description: \"\\n<p>The character array to write data from. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The character position in the buffer at which to start retrieving data. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of characters to write. </p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A task that represents the asynchronous write operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>index</em> plus <em>count</em> is greater than the buffer length.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> or <em>count</em> is negative.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The text writer is disposed.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The text writer is currently in use by a previous write operation. </p>\\n\"\n  seealso:\n  - type: System.IO.StreamWriter.WriteAsync(System.Char[],System.Int32,System.Int32)\n    commentId: M:System.IO.StreamWriter.WriteAsync(System.Char[],System.Int32,System.Int32)\n  - type: System.IO.StringWriter.WriteAsync(System.Char[],System.Int32,System.Int32)\n    commentId: M:System.IO.StringWriter.WriteAsync(System.Char[],System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.IO.TextWriter.WriteAsync(System.Char(), System.Int32, System.Int32)\n  name.vb: WriteAsync(Char(), Int32, Int32)\n  nameWithType: TextWriter.WriteAsync(Char[], Int32, Int32)\n  nameWithType.vb: TextWriter.WriteAsync(Char(), Int32, Int32)\n- uid: System.IO.TextWriter.WriteAsync(System.String)\n  commentId: M:System.IO.TextWriter.WriteAsync(System.String)\n  id: WriteAsync(System.String)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteAsync(String)\n  fullName: System.IO.TextWriter.WriteAsync(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteAsync\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 505\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes a string to the text string or stream asynchronously.</p>\\n\"\n  syntax:\n    content: >-\n      [HostProtection(ExternalThreading = true)]\n\n      [ComVisible(false)]\n\n      public virtual Task WriteAsync(string value)\n    content.vb: >-\n      <HostProtection(ExternalThreading:=True)>\n\n      <ComVisible(False)>\n\n      Public Overridable Function WriteAsync(value As String) As Task\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>The string to write. If <em>value</em> is <strong>null</strong>, nothing is written to the text stream.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A task that represents the asynchronous write operation. </p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The text writer is disposed.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The text writer is currently in use by a previous write operation. </p>\\n\"\n  seealso:\n  - type: System.IO.StreamWriter.WriteAsync(System.String)\n    commentId: M:System.IO.StreamWriter.WriteAsync(System.String)\n  - type: System.IO.StringWriter.WriteAsync(System.String)\n    commentId: M:System.IO.StringWriter.WriteAsync(System.String)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TextWriter.WriteAsync(String)\n- uid: System.IO.TextWriter.WriteLine\n  commentId: M:System.IO.TextWriter.WriteLine\n  id: WriteLine\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteLine()\n  fullName: System.IO.TextWriter.WriteLine()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteLine\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 314\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes a line terminator to the text string or stream.</p>\\n\"\n  syntax:\n    content: public virtual void WriteLine()\n    content.vb: Public Overridable Sub WriteLine\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.IO.TextWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  seealso:\n  - type: System.IO.StreamWriter\n    commentId: T:System.IO.StreamWriter\n  - type: System.IO.StringWriter\n    commentId: T:System.IO.StringWriter\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TextWriter.WriteLine()\n- uid: System.IO.TextWriter.WriteLine(System.Boolean)\n  commentId: M:System.IO.TextWriter.WriteLine(System.Boolean)\n  id: WriteLine(System.Boolean)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteLine(Boolean)\n  fullName: System.IO.TextWriter.WriteLine(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteLine\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 344\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes the text representation of a <strong>Boolean</strong> value followed by a line terminator to the text string or stream.</p>\\n\"\n  syntax:\n    content: public virtual void WriteLine(bool value)\n    content.vb: Public Overridable Sub WriteLine(value As Boolean)\n    parameters:\n    - id: value\n      type: System.Boolean\n      description: \"\\n<p>The <strong>Boolean</strong> value to write. </p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.IO.TextWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  seealso:\n  - type: System.IO.StreamWriter\n    commentId: T:System.IO.StreamWriter\n  - type: System.IO.StringWriter\n    commentId: T:System.IO.StringWriter\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TextWriter.WriteLine(Boolean)\n- uid: System.IO.TextWriter.WriteLine(System.Char)\n  commentId: M:System.IO.TextWriter.WriteLine(System.Char)\n  id: WriteLine(System.Char)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteLine(Char)\n  fullName: System.IO.TextWriter.WriteLine(System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteLine\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 320\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes a character followed by a line terminator to the text string or stream.</p>\\n\"\n  syntax:\n    content: public virtual void WriteLine(char value)\n    content.vb: Public Overridable Sub WriteLine(value As Char)\n    parameters:\n    - id: value\n      type: System.Char\n      description: \"\\n<p>The character to write to the text stream. </p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.IO.TextWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  seealso:\n  - type: System.IO.StreamWriter\n    commentId: T:System.IO.StreamWriter\n  - type: System.IO.StringWriter\n    commentId: T:System.IO.StringWriter\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TextWriter.WriteLine(Char)\n- uid: System.IO.TextWriter.WriteLine(System.Char[])\n  commentId: M:System.IO.TextWriter.WriteLine(System.Char[])\n  id: WriteLine(System.Char[])\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteLine(Char[])\n  fullName: System.IO.TextWriter.WriteLine(System.Char[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteLine\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 328\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes an array of characters followed by a line terminator to the text string or stream.</p>\\n\"\n  syntax:\n    content: public virtual void WriteLine(char[] buffer)\n    content.vb: Public Overridable Sub WriteLine(buffer As Char())\n    parameters:\n    - id: buffer\n      type: System.Char[]\n      description: \"\\n<p>The character array from which data is read. </p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.IO.TextWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  seealso:\n  - type: System.IO.StreamWriter\n    commentId: T:System.IO.StreamWriter\n  - type: System.IO.StringWriter\n    commentId: T:System.IO.StringWriter\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.IO.TextWriter.WriteLine(System.Char())\n  name.vb: WriteLine(Char())\n  nameWithType: TextWriter.WriteLine(Char[])\n  nameWithType.vb: TextWriter.WriteLine(Char())\n- uid: System.IO.TextWriter.WriteLine(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.IO.TextWriter.WriteLine(System.Char[],System.Int32,System.Int32)\n  id: WriteLine(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteLine(Char[], Int32, Int32)\n  fullName: System.IO.TextWriter.WriteLine(System.Char[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteLine\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 336\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes a subarray of characters followed by a line terminator to the text string or stream.</p>\\n\"\n  syntax:\n    content: public virtual void WriteLine(char[] buffer, int index, int count)\n    content.vb: Public Overridable Sub WriteLine(buffer As Char(), index As Integer, count As Integer)\n    parameters:\n    - id: buffer\n      type: System.Char[]\n      description: \"\\n<p>The character array from which data is read. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The character position in <em>buffer</em> at which to start reading data. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The maximum number of characters to write. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The buffer length minus <em>index</em> is less than <em>count</em>. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>buffer</em> parameter is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> or <em>count</em> is negative. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.IO.TextWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  seealso:\n  - type: System.IO.StreamWriter\n    commentId: T:System.IO.StreamWriter\n  - type: System.IO.StringWriter\n    commentId: T:System.IO.StringWriter\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.IO.TextWriter.WriteLine(System.Char(), System.Int32, System.Int32)\n  name.vb: WriteLine(Char(), Int32, Int32)\n  nameWithType: TextWriter.WriteLine(Char[], Int32, Int32)\n  nameWithType.vb: TextWriter.WriteLine(Char(), Int32, Int32)\n- uid: System.IO.TextWriter.WriteLine(System.Decimal)\n  commentId: M:System.IO.TextWriter.WriteLine(System.Decimal)\n  id: WriteLine(System.Decimal)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteLine(Decimal)\n  fullName: System.IO.TextWriter.WriteLine(System.Decimal)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteLine\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 399\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes the text representation of a decimal value followed by a line terminator to the text string or stream.</p>\\n\"\n  syntax:\n    content: public virtual void WriteLine(decimal value)\n    content.vb: Public Overridable Sub WriteLine(value As Decimal)\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: \"\\n<p>The decimal value to write. </p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.IO.TextWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  seealso:\n  - type: System.IO.StreamWriter\n    commentId: T:System.IO.StreamWriter\n  - type: System.IO.StringWriter\n    commentId: T:System.IO.StringWriter\n  - type: System.IFormatProvider\n    commentId: T:System.IFormatProvider\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TextWriter.WriteLine(Decimal)\n- uid: System.IO.TextWriter.WriteLine(System.Double)\n  commentId: M:System.IO.TextWriter.WriteLine(System.Double)\n  id: WriteLine(System.Double)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteLine(Double)\n  fullName: System.IO.TextWriter.WriteLine(System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteLine\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 394\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes the text representation of a 8-byte floating-point value followed by a line terminator to the text string or stream.</p>\\n\"\n  syntax:\n    content: public virtual void WriteLine(double value)\n    content.vb: Public Overridable Sub WriteLine(value As Double)\n    parameters:\n    - id: value\n      type: System.Double\n      description: \"\\n<p>The 8-byte floating-point value to write. </p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.IO.TextWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  seealso:\n  - type: System.IO.StreamWriter\n    commentId: T:System.IO.StreamWriter\n  - type: System.IO.StringWriter\n    commentId: T:System.IO.StringWriter\n  - type: System.IFormatProvider\n    commentId: T:System.IFormatProvider\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TextWriter.WriteLine(Double)\n- uid: System.IO.TextWriter.WriteLine(System.Int32)\n  commentId: M:System.IO.TextWriter.WriteLine(System.Int32)\n  id: WriteLine(System.Int32)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteLine(Int32)\n  fullName: System.IO.TextWriter.WriteLine(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteLine\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 352\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes the text representation of a 4-byte signed integer followed by a line terminator to the text string or stream.</p>\\n\"\n  syntax:\n    content: public virtual void WriteLine(int value)\n    content.vb: Public Overridable Sub WriteLine(value As Integer)\n    parameters:\n    - id: value\n      type: System.Int32\n      description: \"\\n<p>The 4-byte signed integer to write. </p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.IO.TextWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  seealso:\n  - type: System.IO.StreamWriter\n    commentId: T:System.IO.StreamWriter\n  - type: System.IO.StringWriter\n    commentId: T:System.IO.StringWriter\n  - type: System.IFormatProvider\n    commentId: T:System.IFormatProvider\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TextWriter.WriteLine(Int32)\n- uid: System.IO.TextWriter.WriteLine(System.Int64)\n  commentId: M:System.IO.TextWriter.WriteLine(System.Int64)\n  id: WriteLine(System.Int64)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteLine(Int64)\n  fullName: System.IO.TextWriter.WriteLine(System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteLine\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 369\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes the text representation of an 8-byte signed integer followed by a line terminator to the text string or stream.</p>\\n\"\n  syntax:\n    content: public virtual void WriteLine(long value)\n    content.vb: Public Overridable Sub WriteLine(value As Long)\n    parameters:\n    - id: value\n      type: System.Int64\n      description: \"\\n<p>The 8-byte signed integer to write. </p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.IO.TextWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  seealso:\n  - type: System.IO.StreamWriter\n    commentId: T:System.IO.StreamWriter\n  - type: System.IO.StringWriter\n    commentId: T:System.IO.StringWriter\n  - type: System.IFormatProvider\n    commentId: T:System.IFormatProvider\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TextWriter.WriteLine(Int64)\n- uid: System.IO.TextWriter.WriteLine(System.Object)\n  commentId: M:System.IO.TextWriter.WriteLine(System.Object)\n  id: WriteLine(System.Object)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteLine(Object)\n  fullName: System.IO.TextWriter.WriteLine(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteLine\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 444\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes the text representation of an object by calling the <strong>ToString</strong> method on that object, followed by a line terminator to the text string or stream.</p>\\n\"\n  syntax:\n    content: public virtual void WriteLine(object value)\n    content.vb: Public Overridable Sub WriteLine(value As Object)\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The object to write. If <em>value</em> is <strong>null</strong>, only the line terminator is written. </p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.IO.TextWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  seealso:\n  - type: System.IO.StreamWriter\n    commentId: T:System.IO.StreamWriter\n  - type: System.IO.StringWriter\n    commentId: T:System.IO.StringWriter\n  - type: System.IFormatProvider\n    commentId: T:System.IFormatProvider\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TextWriter.WriteLine(Object)\n- uid: System.IO.TextWriter.WriteLine(System.Single)\n  commentId: M:System.IO.TextWriter.WriteLine(System.Single)\n  id: WriteLine(System.Single)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteLine(Single)\n  fullName: System.IO.TextWriter.WriteLine(System.Single)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteLine\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 386\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes the text representation of a 4-byte floating-point value followed by a line terminator to the text string or stream.</p>\\n\"\n  syntax:\n    content: public virtual void WriteLine(float value)\n    content.vb: Public Overridable Sub WriteLine(value As Single)\n    parameters:\n    - id: value\n      type: System.Single\n      description: \"\\n<p>The 4-byte floating-point value to write. </p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.IO.TextWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  seealso:\n  - type: System.IO.StreamWriter\n    commentId: T:System.IO.StreamWriter\n  - type: System.IO.StringWriter\n    commentId: T:System.IO.StringWriter\n  - type: System.IFormatProvider\n    commentId: T:System.IFormatProvider\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TextWriter.WriteLine(Single)\n- uid: System.IO.TextWriter.WriteLine(System.String)\n  commentId: M:System.IO.TextWriter.WriteLine(System.String)\n  id: WriteLine(System.String)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteLine(String)\n  fullName: System.IO.TextWriter.WriteLine(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteLine\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 406\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes a string followed by a line terminator to the text string or stream.</p>\\n\"\n  syntax:\n    content: public virtual void WriteLine(string value)\n    content.vb: Public Overridable Sub WriteLine(value As String)\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>The string to write. If <em>value</em> is <strong>null</strong>, only the line terminator is written. </p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.IO.TextWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  seealso:\n  - type: System.IO.StreamWriter\n    commentId: T:System.IO.StreamWriter\n  - type: System.IO.StringWriter\n    commentId: T:System.IO.StringWriter\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TextWriter.WriteLine(String)\n- uid: System.IO.TextWriter.WriteLine(System.String,System.Object)\n  commentId: M:System.IO.TextWriter.WriteLine(System.String,System.Object)\n  id: WriteLine(System.String,System.Object)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteLine(String, Object)\n  fullName: System.IO.TextWriter.WriteLine(System.String, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteLine\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 462\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes a formatted string and a new line to the text string or stream, using the same semantics as the <xref href=\\\"System.String.Format(System.String,System.Object)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method.</p>\\n\"\n  syntax:\n    content: public virtual void WriteLine(string format, object arg0)\n    content.vb: Public Overridable Sub WriteLine(format As String, arg0 As Object)\n    parameters:\n    - id: format\n      type: System.String\n      description: \"\\n<p>A composite format string (see Remarks).</p>\\n\"\n    - id: arg0\n      type: System.Object\n      description: \"\\n<p>The object to format and write. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>format</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.IO.TextWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>format</em> is not a valid composite format string.</p>\\n<p>-or- </p>\\n<p>The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is one). </p>\\n\"\n  seealso:\n  - type: System.IO.StreamWriter\n    commentId: T:System.IO.StreamWriter\n  - type: System.IO.StringWriter\n    commentId: T:System.IO.StringWriter\n  - type: System.IFormatProvider\n    commentId: T:System.IFormatProvider\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TextWriter.WriteLine(String, Object)\n- uid: System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object)\n  commentId: M:System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object)\n  id: WriteLine(System.String,System.Object,System.Object)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteLine(String, Object, Object)\n  fullName: System.IO.TextWriter.WriteLine(System.String, System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteLine\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 470\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes a formatted string and a new line to the text string or stream, using the same semantics as the <xref href=\\\"System.String.Format(System.String,System.Object,System.Object)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method.</p>\\n\"\n  syntax:\n    content: public virtual void WriteLine(string format, object arg0, object arg1)\n    content.vb: Public Overridable Sub WriteLine(format As String, arg0 As Object, arg1 As Object)\n    parameters:\n    - id: format\n      type: System.String\n      description: \"\\n<p>A composite format string (see Remarks).</p>\\n\"\n    - id: arg0\n      type: System.Object\n      description: \"\\n<p>The first object to format and write. </p>\\n\"\n    - id: arg1\n      type: System.Object\n      description: \"\\n<p>The second object to format and write. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>format</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.IO.TextWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>format</em> is not a valid composite format string.</p>\\n<p>-or- </p>\\n<p>The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is two). </p>\\n\"\n  seealso:\n  - type: System.IO.StreamWriter\n    commentId: T:System.IO.StreamWriter\n  - type: System.IO.StringWriter\n    commentId: T:System.IO.StringWriter\n  - type: System.IFormatProvider\n    commentId: T:System.IFormatProvider\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TextWriter.WriteLine(String, Object, Object)\n- uid: System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object,System.Object)\n  commentId: M:System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object,System.Object)\n  id: WriteLine(System.String,System.Object,System.Object,System.Object)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteLine(String, Object, Object, Object)\n  fullName: System.IO.TextWriter.WriteLine(System.String, System.Object, System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteLine\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 478\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes out a formatted string and a new line, using the same semantics as <xref href=\\\"System.String.Format(System.String,System.Object)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual void WriteLine(string format, object arg0, object arg1, object arg2)\n    content.vb: Public Overridable Sub WriteLine(format As String, arg0 As Object, arg1 As Object, arg2 As Object)\n    parameters:\n    - id: format\n      type: System.String\n      description: \"\\n<p>A composite format string (see Remarks).</p>\\n\"\n    - id: arg0\n      type: System.Object\n      description: \"\\n<p>The first object to format and write. </p>\\n\"\n    - id: arg1\n      type: System.Object\n      description: \"\\n<p>The second object to format and write. </p>\\n\"\n    - id: arg2\n      type: System.Object\n      description: \"\\n<p>The third object to format and write. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>format</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.IO.TextWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>format</em> is not a valid composite format string.</p>\\n<p>-or- </p>\\n<p>The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is three). </p>\\n\"\n  seealso:\n  - type: System.IO.StreamWriter\n    commentId: T:System.IO.StreamWriter\n  - type: System.IO.StringWriter\n    commentId: T:System.IO.StringWriter\n  - type: System.IFormatProvider\n    commentId: T:System.IFormatProvider\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TextWriter.WriteLine(String, Object, Object, Object)\n- uid: System.IO.TextWriter.WriteLine(System.String,System.Object[])\n  commentId: M:System.IO.TextWriter.WriteLine(System.String,System.Object[])\n  id: WriteLine(System.String,System.Object[])\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteLine(String, Object[])\n  fullName: System.IO.TextWriter.WriteLine(System.String, System.Object[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteLine\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 486\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes out a formatted string and a new line, using the same semantics as <xref href=\\\"System.String.Format(System.String,System.Object)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual void WriteLine(string format, params object[] arg)\n    content.vb: Public Overridable Sub WriteLine(format As String, ParamArray arg As Object())\n    parameters:\n    - id: format\n      type: System.String\n      description: \"\\n<p>A composite format string (see Remarks).</p>\\n\"\n    - id: arg\n      type: System.Object[]\n      description: \"\\n<p>An object array that contains zero or more objects to format and write. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>A string or object is passed in as <strong>null</strong>. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.IO.TextWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>format</em> is not a valid composite format string.</p>\\n<p>-or- </p>\\n<p>The index of a format item is less than 0 (zero), or greater than or equal to the length of the <em>arg</em> array. </p>\\n\"\n  seealso:\n  - type: System.IO.StreamWriter\n    commentId: T:System.IO.StreamWriter\n  - type: System.IO.StringWriter\n    commentId: T:System.IO.StringWriter\n  - type: System.IFormatProvider\n    commentId: T:System.IFormatProvider\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.IO.TextWriter.WriteLine(System.String, System.Object())\n  name.vb: WriteLine(String, Object())\n  nameWithType: TextWriter.WriteLine(String, Object[])\n  nameWithType.vb: TextWriter.WriteLine(String, Object())\n- uid: System.IO.TextWriter.WriteLine(System.UInt32)\n  commentId: M:System.IO.TextWriter.WriteLine(System.UInt32)\n  id: WriteLine(System.UInt32)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteLine(UInt32)\n  fullName: System.IO.TextWriter.WriteLine(System.UInt32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteLine\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 360\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes the text representation of a 4-byte unsigned integer followed by a line terminator to the text string or stream.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public virtual void WriteLine(uint value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Overridable Sub WriteLine(value As UInteger)\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: \"\\n<p>The 4-byte unsigned integer to write. </p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.IO.TextWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  seealso:\n  - type: System.IO.StreamWriter\n    commentId: T:System.IO.StreamWriter\n  - type: System.IO.StringWriter\n    commentId: T:System.IO.StringWriter\n  - type: System.IFormatProvider\n    commentId: T:System.IFormatProvider\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TextWriter.WriteLine(UInt32)\n- uid: System.IO.TextWriter.WriteLine(System.UInt64)\n  commentId: M:System.IO.TextWriter.WriteLine(System.UInt64)\n  id: WriteLine(System.UInt64)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteLine(UInt64)\n  fullName: System.IO.TextWriter.WriteLine(System.UInt64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteLine\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 377\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes the text representation of an 8-byte unsigned integer followed by a line terminator to the text string or stream.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public virtual void WriteLine(ulong value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Overridable Sub WriteLine(value As ULong)\n    parameters:\n    - id: value\n      type: System.UInt64\n      description: \"\\n<p>The 8-byte unsigned integer to write. </p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.IO.TextWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  seealso:\n  - type: System.IO.StreamWriter\n    commentId: T:System.IO.StreamWriter\n  - type: System.IO.StringWriter\n    commentId: T:System.IO.StringWriter\n  - type: System.IFormatProvider\n    commentId: T:System.IFormatProvider\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TextWriter.WriteLine(UInt64)\n- uid: System.IO.TextWriter.WriteLineAsync\n  commentId: M:System.IO.TextWriter.WriteLineAsync\n  id: WriteLineAsync\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteLineAsync()\n  fullName: System.IO.TextWriter.WriteLineAsync()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteLineAsync\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 586\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes a line terminator asynchronously to the text string or stream.</p>\\n\"\n  syntax:\n    content: >-\n      [HostProtection(ExternalThreading = true)]\n\n      [ComVisible(false)]\n\n      public virtual Task WriteLineAsync()\n    content.vb: >-\n      <HostProtection(ExternalThreading:=True)>\n\n      <ComVisible(False)>\n\n      Public Overridable Function WriteLineAsync As Task\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A task that represents the asynchronous write operation. </p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The text writer is disposed.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The text writer is currently in use by a previous write operation. </p>\\n\"\n  seealso:\n  - type: System.IO.StreamWriter.WriteLineAsync\n    commentId: M:System.IO.StreamWriter.WriteLineAsync\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TextWriter.WriteLineAsync()\n- uid: System.IO.TextWriter.WriteLineAsync(System.Char)\n  commentId: M:System.IO.TextWriter.WriteLineAsync(System.Char)\n  id: WriteLineAsync(System.Char)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteLineAsync(Char)\n  fullName: System.IO.TextWriter.WriteLineAsync(System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteLineAsync\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 539\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes a character followed by a line terminator asynchronously to the text string or stream.</p>\\n\"\n  syntax:\n    content: >-\n      [HostProtection(ExternalThreading = true)]\n\n      [ComVisible(false)]\n\n      public virtual Task WriteLineAsync(char value)\n    content.vb: >-\n      <HostProtection(ExternalThreading:=True)>\n\n      <ComVisible(False)>\n\n      Public Overridable Function WriteLineAsync(value As Char) As Task\n    parameters:\n    - id: value\n      type: System.Char\n      description: \"\\n<p>The character to write to the text stream.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A task that represents the asynchronous write operation.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The text writer is disposed.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The text writer is currently in use by a previous write operation. </p>\\n\"\n  seealso:\n  - type: System.IO.StreamWriter.WriteLineAsync(System.Char)\n    commentId: M:System.IO.StreamWriter.WriteLineAsync(System.Char)\n  - type: System.IO.StringWriter.WriteLineAsync(System.Char)\n    commentId: M:System.IO.StringWriter.WriteLineAsync(System.Char)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TextWriter.WriteLineAsync(Char)\n- uid: System.IO.TextWriter.WriteLineAsync(System.Char[])\n  commentId: M:System.IO.TextWriter.WriteLineAsync(System.Char[])\n  id: WriteLineAsync(System.Char[])\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteLineAsync(Char[])\n  fullName: System.IO.TextWriter.WriteLineAsync(System.Char[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteLineAsync\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 565\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes an array of characters followed by a line terminator asynchronously to the text string or stream.</p>\\n\"\n  syntax:\n    content: >-\n      [HostProtection(ExternalThreading = true)]\n\n      [ComVisible(false)]\n\n      public Task WriteLineAsync(char[] buffer)\n    content.vb: >-\n      <HostProtection(ExternalThreading:=True)>\n\n      <ComVisible(False)>\n\n      Public Function WriteLineAsync(buffer As Char()) As Task\n    parameters:\n    - id: buffer\n      type: System.Char[]\n      description: \"\\n<p>The character array to write to the text stream. If the character array is <strong>null</strong>, only the line terminator is written. </p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A task that represents the asynchronous write operation.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The text writer is disposed.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The text writer is currently in use by a previous write operation. </p>\\n\"\n  seealso:\n  - type: System.IO.StreamWriter\n    commentId: T:System.IO.StreamWriter\n  - type: System.IO.StringWriter\n    commentId: T:System.IO.StringWriter\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.IO.TextWriter.WriteLineAsync(System.Char())\n  name.vb: WriteLineAsync(Char())\n  nameWithType: TextWriter.WriteLineAsync(Char[])\n  nameWithType.vb: TextWriter.WriteLineAsync(Char())\n- uid: System.IO.TextWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.IO.TextWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)\n  id: WriteLineAsync(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteLineAsync(Char[], Int32, Int32)\n  fullName: System.IO.TextWriter.WriteLineAsync(System.Char[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteLineAsync\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 573\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes a subarray of characters followed by a line terminator asynchronously to the text string or stream.</p>\\n\"\n  syntax:\n    content: >-\n      [HostProtection(ExternalThreading = true)]\n\n      [ComVisible(false)]\n\n      public virtual Task WriteLineAsync(char[] buffer, int index, int count)\n    content.vb: >-\n      <HostProtection(ExternalThreading:=True)>\n\n      <ComVisible(False)>\n\n      Public Overridable Function WriteLineAsync(buffer As Char(), index As Integer, count As Integer) As Task\n    parameters:\n    - id: buffer\n      type: System.Char[]\n      description: \"\\n<p>The character array to write data from. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The character position in the buffer at which to start retrieving data. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of characters to write. </p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A task that represents the asynchronous write operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>index</em> plus <em>count</em> is greater than the buffer length.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> or <em>count</em> is negative.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The text writer is disposed.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The text writer is currently in use by a previous write operation. </p>\\n\"\n  seealso:\n  - type: System.IO.StreamWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)\n    commentId: M:System.IO.StreamWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)\n  - type: System.IO.StringWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)\n    commentId: M:System.IO.StringWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.IO.TextWriter.WriteLineAsync(System.Char(), System.Int32, System.Int32)\n  name.vb: WriteLineAsync(Char(), Int32, Int32)\n  nameWithType: TextWriter.WriteLineAsync(Char[], Int32, Int32)\n  nameWithType.vb: TextWriter.WriteLineAsync(Char(), Int32, Int32)\n- uid: System.IO.TextWriter.WriteLineAsync(System.String)\n  commentId: M:System.IO.TextWriter.WriteLineAsync(System.String)\n  id: WriteLineAsync(System.String)\n  parent: System.IO.TextWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteLineAsync(String)\n  fullName: System.IO.TextWriter.WriteLineAsync(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteLineAsync\n    path: src/mscorlib/src/System/IO/TextWriter.cs\n    startLine: 552\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Writes a string followed by a line terminator asynchronously to the text string or stream. </p>\\n\"\n  syntax:\n    content: >-\n      [HostProtection(ExternalThreading = true)]\n\n      [ComVisible(false)]\n\n      public virtual Task WriteLineAsync(string value)\n    content.vb: >-\n      <HostProtection(ExternalThreading:=True)>\n\n      <ComVisible(False)>\n\n      Public Overridable Function WriteLineAsync(value As String) As Task\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>The string to write. If the value is <strong>null</strong>, only a line terminator is written. </p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A task that represents the asynchronous write operation.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The text writer is disposed.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The text writer is currently in use by a previous write operation. </p>\\n\"\n  seealso:\n  - type: System.IO.StreamWriter.WriteLineAsync(System.String)\n    commentId: M:System.IO.StreamWriter.WriteLineAsync(System.String)\n  - type: System.IO.StringWriter.WriteLineAsync(System.String)\n    commentId: M:System.IO.StringWriter.WriteLineAsync(System.String)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TextWriter.WriteLineAsync(String)\nreferences:\n- uid: System.IO\n  isExternal: false\n  name: System.IO\n  fullName: System.IO\n  nameWithType: System.IO\n  commentId: N:System.IO\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  nameWithType: IDisposable\n  commentId: T:System.IDisposable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Char[]\n  name: Char[]\n  fullName: System.Char[]\n  fullname.vb: System.Char()\n  name.vb: Char()\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Char[]\n  nameWithType.vb: Char()\n- uid: System.IO.TextWriter\n  parent: System.IO\n  isExternal: false\n  name: TextWriter\n  fullName: System.IO.TextWriter\n  nameWithType: TextWriter\n  commentId: T:System.IO.TextWriter\n- uid: System.IFormatProvider\n  parent: System\n  isExternal: false\n  name: IFormatProvider\n  fullName: System.IFormatProvider\n  nameWithType: IFormatProvider\n  commentId: T:System.IFormatProvider\n- uid: System.Text.Encoding\n  parent: System.Text\n  isExternal: false\n  name: Encoding\n  fullName: System.Text.Encoding\n  nameWithType: Encoding\n  commentId: T:System.Text.Encoding\n- uid: System.Text\n  isExternal: false\n  name: System.Text\n  fullName: System.Text\n  nameWithType: System.Text\n  commentId: N:System.Text\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.IDisposable.Dispose\n  parent: System.IDisposable\n  isExternal: false\n  name: Dispose()\n  fullName: System.IDisposable.Dispose()\n  spec.csharp:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IDisposable.Dispose()\n  commentId: M:System.IDisposable.Dispose\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Threading.Tasks.Task\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task\n  fullName: System.Threading.Tasks.Task\n  nameWithType: Task\n  commentId: T:System.Threading.Tasks.Task\n- uid: System.Threading.Tasks\n  isExternal: false\n  name: System.Threading.Tasks\n  fullName: System.Threading.Tasks\n  nameWithType: System.Threading.Tasks\n  commentId: N:System.Threading.Tasks\n- uid: System.Char\n  parent: System\n  isExternal: false\n  name: Char\n  fullName: System.Char\n  nameWithType: Char\n  commentId: T:System.Char\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Decimal\n  parent: System\n  isExternal: false\n  name: Decimal\n  fullName: System.Decimal\n  nameWithType: Decimal\n  commentId: T:System.Decimal\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  fullName: System.Double\n  nameWithType: Double\n  commentId: T:System.Double\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  nameWithType: Int64\n  commentId: T:System.Int64\n- uid: System.Single\n  parent: System\n  isExternal: false\n  name: Single\n  fullName: System.Single\n  nameWithType: Single\n  commentId: T:System.Single\n- uid: System.Object[]\n  name: Object[]\n  fullName: System.Object[]\n  fullname.vb: System.Object()\n  name.vb: Object()\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Object[]\n  nameWithType.vb: Object()\n- uid: System.UInt32\n  parent: System\n  isExternal: false\n  name: UInt32\n  fullName: System.UInt32\n  nameWithType: UInt32\n  commentId: T:System.UInt32\n- uid: System.UInt64\n  parent: System\n  isExternal: false\n  name: UInt64\n  fullName: System.UInt64\n  nameWithType: UInt64\n  commentId: T:System.UInt64\n- uid: System.ObjectDisposedException\n  isExternal: false\n  name: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  commentId: T:System.ObjectDisposedException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.IO.IOException\n  parent: System.IO\n  isExternal: false\n  name: IOException\n  fullName: System.IO.IOException\n  nameWithType: IOException\n  commentId: T:System.IO.IOException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.FormatException\n  parent: System\n  isExternal: false\n  name: FormatException\n  fullName: System.FormatException\n  nameWithType: FormatException\n  commentId: T:System.FormatException\n"}