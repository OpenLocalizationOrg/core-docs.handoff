{"nodes":[{"pos":[737,746],"content":"CustomAce","needQuote":true,"nodes":[{"content":"CustomAce","pos":[0,9]}]},{"pos":[2872,2887],"content":"MaxOpaqueLength","needQuote":true,"nodes":[{"content":"MaxOpaqueLength","pos":[0,15]}]},{"pos":[4365,4401],"content":"CustomAce(AceType, AceFlags, Byte[])","needQuote":true,"nodes":[{"content":"CustomAce(AceType, AceFlags, Byte[])","pos":[0,36]}]},{"content":"\\n&lt;p&gt;Flags that specify information about the inheritance, inheritance propagation, and auditing conditions for the new ACE.&lt;/p&gt;\\n","pos":[5686,5816],"source":"\\n<p>Flags that specify information about the inheritance, inheritance propagation, and auditing conditions for the new ACE.</p>\\n"},{"pos":[7396,7408],"content":"BinaryLength","needQuote":true,"nodes":[{"content":"BinaryLength","pos":[0,12]}]},{"pos":[9160,9172],"content":"OpaqueLength","needQuote":true,"nodes":[{"content":"OpaqueLength","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The length of the opaque callback data.&lt;/p&gt;\\n","pos":[10027,10077],"source":"\\n<p>The length of the opaque callback data.</p>\\n"},{"pos":[10516,10544],"content":"GetBinaryForm(Byte[], Int32)","needQuote":true,"nodes":[{"content":"GetBinaryForm(Byte[], Int32)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The offset at which to start marshaling.&lt;/p&gt;\\n","pos":[11766,11817],"source":"\\n<p>The offset at which to start marshaling.</p>\\n"},{"pos":[12812,12823],"content":"GetOpaque()","needQuote":true,"nodes":[{"content":"GetOpaque()","pos":[0,11]}]},{"pos":[14185,14202],"content":"SetOpaque(Byte[])","needQuote":true,"nodes":[{"content":"SetOpaque(Byte[])","pos":[0,17]}]},{"pos":[15585,15614],"content":"System.Security.AccessControl","needQuote":true,"nodes":[{"content":"System.Security.AccessControl","pos":[0,29]}]},{"pos":[15814,15820],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16015,16025],"content":"GenericAce","needQuote":true,"nodes":[{"content":"GenericAce","pos":[0,10]}]},{"pos":[16298,16306],"content":"AceFlags","needQuote":true,"nodes":[{"content":"AceFlags","pos":[0,8]}]},{"pos":[16605,16612],"content":"AceType","needQuote":true,"nodes":[{"content":"AceType","pos":[0,7]}]},{"pos":[16911,16921],"content":"AuditFlags","needQuote":true,"nodes":[{"content":"AuditFlags","pos":[0,10]}]},{"pos":[17235,17251],"content":"InheritanceFlags","needQuote":true,"nodes":[{"content":"InheritanceFlags","pos":[0,16]}]},{"pos":[17578,17589],"content":"IsInherited","needQuote":true,"nodes":[{"content":"IsInherited","pos":[0,11]}]},{"pos":[17906,17922],"content":"PropagationFlags","needQuote":true,"nodes":[{"content":"PropagationFlags","pos":[0,16]}]},{"pos":[18242,18248],"content":"Copy()","needQuote":true,"nodes":[{"content":"Copy()","pos":[0,6]}]},{"pos":[18389,18393],"content":"Copy","needQuote":true,"nodes":[{"content":"Copy","pos":[0,4]}]},{"pos":[18464,18465],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18492,18493],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18586,18590],"content":"Copy","needQuote":true,"nodes":[{"content":"Copy","pos":[0,4]}]},{"pos":[18661,18662],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18689,18690],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18977,19012],"content":"CreateFromBinaryForm(Byte[], Int32)","needQuote":true,"nodes":[{"content":"CreateFromBinaryForm(Byte[], Int32)","pos":[0,35]}]},{"pos":[19393,19413],"content":"CreateFromBinaryForm","needQuote":true,"nodes":[{"content":"CreateFromBinaryForm","pos":[0,20]}]},{"pos":[19500,19501],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19549,19553],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[19612,19614]},{"content":",","pos":[19646,19647]},{"pos":[19701,19706],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[19765,19766],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19903,19923],"content":"CreateFromBinaryForm","needQuote":true,"nodes":[{"content":"CreateFromBinaryForm","pos":[0,20]}]},{"pos":[20010,20011],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20059,20063],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[20121,20123],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[20152,20153]},{"pos":[20207,20212],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[20271,20272],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20671,20685],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[20858,20864],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[20937,20938],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20988,20994],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21054,21055],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21165,21171],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[21244,21245],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21295,21301],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21361,21362],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21638,21651],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[21806,21817],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[21895,21896],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21923,21924],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22024,22035],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[22113,22114],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22141,22142],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22349,22359],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[22454,22462],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[22531,22532],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22559,22560],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22630,22638],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[22707,22708],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22735,22736],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22933,22955],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[23103,23109],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[23176,23177],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23227,23233],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[23294,23295]},{"pos":[23350,23356],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23416,23417],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23514,23520],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[23587,23588],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23638,23644],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[23705,23706]},{"pos":[23761,23767],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23827,23828],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24073,24104],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[24270,24285],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[24361,24362],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24412,24418],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[24479,24480]},{"pos":[24535,24541],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24601,24602],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24708,24723],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[24799,24800],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24850,24856],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[24917,24918]},{"pos":[24973,24979],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25039,25040],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25266,25275],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[25368,25375],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[25443,25444],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25471,25472],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25541,25548],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[25616,25617],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25644,25645],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25820,25837],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[25946,25961],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[26037,26038],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26065,26066],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26143,26158],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[26234,26235],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26262,26263],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26408,26414],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[26544,26549],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[26738,26745],"content":"AceType","needQuote":true,"nodes":[{"content":"AceType","pos":[0,7]}]},{"pos":[26987,26995],"content":"AceFlags","needQuote":true,"nodes":[{"content":"AceFlags","pos":[0,8]}]},{"pos":[27155,27161],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[27281,27285],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[27344,27346]},{"pos":[27409,27413],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[27471,27473],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[27680,27692],"content":"BinaryLength","needQuote":true,"nodes":[{"content":"BinaryLength","pos":[0,12]}]},{"pos":[28036,28064],"content":"GetBinaryForm(Byte[], Int32)","needQuote":true,"nodes":[{"content":"GetBinaryForm(Byte[], Int32)","pos":[0,28]}]},{"pos":[28417,28430],"content":"GetBinaryForm","needQuote":true,"nodes":[{"content":"GetBinaryForm","pos":[0,13]}]},{"pos":[28510,28511],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28559,28563],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[28622,28624]},{"content":",","pos":[28656,28657]},{"pos":[28711,28716],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[28775,28776],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28906,28919],"content":"GetBinaryForm","needQuote":true,"nodes":[{"content":"GetBinaryForm","pos":[0,13]}]},{"pos":[28999,29000],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29048,29052],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[29110,29112],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[29141,29142]},{"pos":[29196,29201],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[29260,29261],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29561,29588],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]}],"content":"items:\n- uid: System.Security.AccessControl.CustomAce\n  commentId: T:System.Security.AccessControl.CustomAce\n  id: CustomAce\n  parent: System.Security.AccessControl\n  children:\n  - System.Security.AccessControl.CustomAce.#ctor(System.Security.AccessControl.AceType,System.Security.AccessControl.AceFlags,System.Byte[])\n  - System.Security.AccessControl.CustomAce.BinaryLength\n  - System.Security.AccessControl.CustomAce.GetBinaryForm(System.Byte[],System.Int32)\n  - System.Security.AccessControl.CustomAce.GetOpaque\n  - System.Security.AccessControl.CustomAce.MaxOpaqueLength\n  - System.Security.AccessControl.CustomAce.OpaqueLength\n  - System.Security.AccessControl.CustomAce.SetOpaque(System.Byte[])\n  langs:\n  - csharp\n  - vb\n  name: CustomAce\n  fullName: System.Security.AccessControl.CustomAce\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CustomAce\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 234\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Represents an Access Control Entry (ACE) that is not defined by one of the members of the <xref href=\\\"System.Security.AccessControl.AceType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> enumeration.</p>\\n\"\n  syntax:\n    content: 'public sealed class CustomAce : GenericAce'\n    content.vb: >-\n      Public NotInheritable Class CustomAce\n          Inherits GenericAce\n  inheritance:\n  - System.Object\n  - System.Security.AccessControl.GenericAce\n  inheritedMembers:\n  - System.Security.AccessControl.GenericAce.AceFlags\n  - System.Security.AccessControl.GenericAce.AceType\n  - System.Security.AccessControl.GenericAce.AuditFlags\n  - System.Security.AccessControl.GenericAce.InheritanceFlags\n  - System.Security.AccessControl.GenericAce.IsInherited\n  - System.Security.AccessControl.GenericAce.PropagationFlags\n  - System.Security.AccessControl.GenericAce.Copy\n  - System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)\n  - System.Security.AccessControl.GenericAce.Equals(System.Object)\n  - System.Security.AccessControl.GenericAce.GetHashCode\n  - System.Object.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: CustomAce\n- uid: System.Security.AccessControl.CustomAce.MaxOpaqueLength\n  commentId: F:System.Security.AccessControl.CustomAce.MaxOpaqueLength\n  id: MaxOpaqueLength\n  parent: System.Security.AccessControl.CustomAce\n  langs:\n  - csharp\n  - vb\n  name: MaxOpaqueLength\n  fullName: System.Security.AccessControl.CustomAce.MaxOpaqueLength\n  type: Field\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MaxOpaqueLength\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 236\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Returns the maximum allowed length of an opaque data blob for this <xref href=\\\"System.Security.AccessControl.CustomAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public static readonly int MaxOpaqueLength\n    content.vb: Public Shared ReadOnly MaxOpaqueLength As Integer\n    return:\n      type: System.Int32\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: CustomAce.MaxOpaqueLength\n- uid: System.Security.AccessControl.CustomAce.#ctor(System.Security.AccessControl.AceType,System.Security.AccessControl.AceFlags,System.Byte[])\n  commentId: M:System.Security.AccessControl.CustomAce.#ctor(System.Security.AccessControl.AceType,System.Security.AccessControl.AceFlags,System.Byte[])\n  id: '#ctor(System.Security.AccessControl.AceType,System.Security.AccessControl.AceFlags,System.Byte[])'\n  parent: System.Security.AccessControl.CustomAce\n  langs:\n  - csharp\n  - vb\n  name: CustomAce(AceType, AceFlags, Byte[])\n  fullName: System.Security.AccessControl.CustomAce.CustomAce(System.Security.AccessControl.AceType, System.Security.AccessControl.AceFlags, System.Byte[])\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 237\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.AccessControl.CustomAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public CustomAce(AceType type, AceFlags flags, byte[] opaque)\n    content.vb: Public Sub New(type As AceType, flags As AceFlags, opaque As Byte())\n    parameters:\n    - id: type\n      type: System.Security.AccessControl.AceType\n      description: \"\\n<p>Type of the new Access Control Entry (ACE). This value must be greater than <xref href=\\\"System.Security.AccessControl.AceType.MaxDefinedAceType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: flags\n      type: System.Security.AccessControl.AceFlags\n      description: \"\\n<p>Flags that specify information about the inheritance, inheritance propagation, and auditing conditions for the new ACE.</p>\\n\"\n    - id: opaque\n      type: System.Byte[]\n      description: \"\\n<p>An array of byte values that contains the data for the new ACE. This value can be <strong>null</strong>. The length of this array must not be greater than the value of the <xref href=\\\"System.Security.AccessControl.CustomAce.MaxOpaqueLength\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> field, and must be a multiple of four.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The value of the <em>type</em> parameter is not greater than <xref href=\\\"System.Security.AccessControl.AceType.MaxDefinedAceType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or the length of the <em>opaque</em> array is either greater than the value of the <xref href=\\\"System.Security.AccessControl.CustomAce.MaxOpaqueLength\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> field or not a multiple of four.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.AccessControl.CustomAce.CustomAce(System.Security.AccessControl.AceType, System.Security.AccessControl.AceFlags, System.Byte())\n  name.vb: CustomAce(AceType, AceFlags, Byte())\n  nameWithType: CustomAce.CustomAce(AceType, AceFlags, Byte[])\n  nameWithType.vb: CustomAce.CustomAce(AceType, AceFlags, Byte())\n- uid: System.Security.AccessControl.CustomAce.BinaryLength\n  commentId: P:System.Security.AccessControl.CustomAce.BinaryLength\n  id: BinaryLength\n  parent: System.Security.AccessControl.CustomAce\n  langs:\n  - csharp\n  - vb\n  name: BinaryLength\n  fullName: System.Security.AccessControl.CustomAce.BinaryLength\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BinaryLength\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 238\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets the length, in bytes, of the binary representation of the current <xref href=\\\"System.Security.AccessControl.CustomAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. This length should be used before marshaling the ACL into a binary array with the <xref href=\\\"System.Security.AccessControl.CustomAce.GetBinaryForm(System.Byte[],System.Int32)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method.</p>\\n\"\n  syntax:\n    content: public override int BinaryLength { get; }\n    content.vb: Public Overrides ReadOnly Property BinaryLength As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The length, in bytes, of the binary representation of the current <xref href=\\\"System.Security.AccessControl.CustomAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  overridden: System.Security.AccessControl.GenericAce.BinaryLength\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: CustomAce.BinaryLength\n- uid: System.Security.AccessControl.CustomAce.OpaqueLength\n  commentId: P:System.Security.AccessControl.CustomAce.OpaqueLength\n  id: OpaqueLength\n  parent: System.Security.AccessControl.CustomAce\n  langs:\n  - csharp\n  - vb\n  name: OpaqueLength\n  fullName: System.Security.AccessControl.CustomAce.OpaqueLength\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OpaqueLength\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 239\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets the length of the opaque data associated with this <xref href=\\\"System.Security.AccessControl.CustomAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public int OpaqueLength { get; }\n    content.vb: Public ReadOnly Property OpaqueLength As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The length of the opaque callback data.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CustomAce.OpaqueLength\n- uid: System.Security.AccessControl.CustomAce.GetBinaryForm(System.Byte[],System.Int32)\n  commentId: M:System.Security.AccessControl.CustomAce.GetBinaryForm(System.Byte[],System.Int32)\n  id: GetBinaryForm(System.Byte[],System.Int32)\n  parent: System.Security.AccessControl.CustomAce\n  langs:\n  - csharp\n  - vb\n  name: GetBinaryForm(Byte[], Int32)\n  fullName: System.Security.AccessControl.CustomAce.GetBinaryForm(System.Byte[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetBinaryForm\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 240\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Marshals the contents of the <xref href=\\\"System.Security.AccessControl.CustomAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object into the specified byte array beginning at the specified offset.</p>\\n\"\n  syntax:\n    content: public override void GetBinaryForm(byte[] binaryForm, int offset)\n    content.vb: Public Overrides Sub GetBinaryForm(binaryForm As Byte(), offset As Integer)\n    parameters:\n    - id: binaryForm\n      type: System.Byte[]\n      description: \"\\n<p>The byte array into which the contents of the <xref href=\\\"System.Security.AccessControl.CustomAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is marshaled.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The offset at which to start marshaling.</p>\\n\"\n  overridden: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is negative or too high to allow the entire <xref href=\\\"System.Security.AccessControl.CustomAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to be copied into <em>array</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Security.AccessControl.CustomAce.GetBinaryForm(System.Byte(), System.Int32)\n  name.vb: GetBinaryForm(Byte(), Int32)\n  nameWithType: CustomAce.GetBinaryForm(Byte[], Int32)\n  nameWithType.vb: CustomAce.GetBinaryForm(Byte(), Int32)\n- uid: System.Security.AccessControl.CustomAce.GetOpaque\n  commentId: M:System.Security.AccessControl.CustomAce.GetOpaque\n  id: GetOpaque\n  parent: System.Security.AccessControl.CustomAce\n  langs:\n  - csharp\n  - vb\n  name: GetOpaque()\n  fullName: System.Security.AccessControl.CustomAce.GetOpaque()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetOpaque\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 241\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Returns the opaque data associated with this <xref href=\\\"System.Security.AccessControl.CustomAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n  syntax:\n    content: public byte[] GetOpaque()\n    content.vb: Public Function GetOpaque As Byte()\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>An array of byte values that represents the opaque data associated with this <xref href=\\\"System.Security.AccessControl.CustomAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CustomAce.GetOpaque()\n- uid: System.Security.AccessControl.CustomAce.SetOpaque(System.Byte[])\n  commentId: M:System.Security.AccessControl.CustomAce.SetOpaque(System.Byte[])\n  id: SetOpaque(System.Byte[])\n  parent: System.Security.AccessControl.CustomAce\n  langs:\n  - csharp\n  - vb\n  name: SetOpaque(Byte[])\n  fullName: System.Security.AccessControl.CustomAce.SetOpaque(System.Byte[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SetOpaque\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 242\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Sets the opaque callback data associated with this <xref href=\\\"System.Security.AccessControl.CustomAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public void SetOpaque(byte[] opaque)\n    content.vb: Public Sub SetOpaque(opaque As Byte())\n    parameters:\n    - id: opaque\n      type: System.Byte[]\n      description: \"\\n<p>An array of byte values that represents the opaque callback data for this <xref href=\\\"System.Security.AccessControl.CustomAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.AccessControl.CustomAce.SetOpaque(System.Byte())\n  name.vb: SetOpaque(Byte())\n  nameWithType: CustomAce.SetOpaque(Byte[])\n  nameWithType.vb: CustomAce.SetOpaque(Byte())\nreferences:\n- uid: System.Security.AccessControl\n  isExternal: false\n  name: System.Security.AccessControl\n  fullName: System.Security.AccessControl\n  commentId: N:System.Security.AccessControl\n  nameWithType: System.Security.AccessControl\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Security.AccessControl.GenericAce\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: GenericAce\n  fullName: System.Security.AccessControl.GenericAce\n  commentId: T:System.Security.AccessControl.GenericAce\n  nameWithType: GenericAce\n- uid: System.Security.AccessControl.GenericAce.AceFlags\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: AceFlags\n  fullName: System.Security.AccessControl.GenericAce.AceFlags\n  commentId: P:System.Security.AccessControl.GenericAce.AceFlags\n  nameWithType: GenericAce.AceFlags\n- uid: System.Security.AccessControl.GenericAce.AceType\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: AceType\n  fullName: System.Security.AccessControl.GenericAce.AceType\n  commentId: P:System.Security.AccessControl.GenericAce.AceType\n  nameWithType: GenericAce.AceType\n- uid: System.Security.AccessControl.GenericAce.AuditFlags\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: AuditFlags\n  fullName: System.Security.AccessControl.GenericAce.AuditFlags\n  commentId: P:System.Security.AccessControl.GenericAce.AuditFlags\n  nameWithType: GenericAce.AuditFlags\n- uid: System.Security.AccessControl.GenericAce.InheritanceFlags\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: InheritanceFlags\n  fullName: System.Security.AccessControl.GenericAce.InheritanceFlags\n  commentId: P:System.Security.AccessControl.GenericAce.InheritanceFlags\n  nameWithType: GenericAce.InheritanceFlags\n- uid: System.Security.AccessControl.GenericAce.IsInherited\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: IsInherited\n  fullName: System.Security.AccessControl.GenericAce.IsInherited\n  commentId: P:System.Security.AccessControl.GenericAce.IsInherited\n  nameWithType: GenericAce.IsInherited\n- uid: System.Security.AccessControl.GenericAce.PropagationFlags\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: PropagationFlags\n  fullName: System.Security.AccessControl.GenericAce.PropagationFlags\n  commentId: P:System.Security.AccessControl.GenericAce.PropagationFlags\n  nameWithType: GenericAce.PropagationFlags\n- uid: System.Security.AccessControl.GenericAce.Copy\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: Copy()\n  fullName: System.Security.AccessControl.GenericAce.Copy()\n  spec.csharp:\n  - uid: System.Security.AccessControl.GenericAce.Copy\n    name: Copy\n    fullName: System.Security.AccessControl.GenericAce.Copy\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.AccessControl.GenericAce.Copy\n    name: Copy\n    fullName: System.Security.AccessControl.GenericAce.Copy\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.AccessControl.GenericAce.Copy\n  nameWithType: GenericAce.Copy()\n- uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: true\n  name: CreateFromBinaryForm(Byte[], Int32)\n  fullName: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[], System.Int32)\n  fullname.vb: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte(), System.Int32)\n  name.vb: CreateFromBinaryForm(Byte(), Int32)\n  spec.csharp:\n  - uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)\n    name: CreateFromBinaryForm\n    fullName: System.Security.AccessControl.GenericAce.CreateFromBinaryForm\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)\n    name: CreateFromBinaryForm\n    fullName: System.Security.AccessControl.GenericAce.CreateFromBinaryForm\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)\n  nameWithType: GenericAce.CreateFromBinaryForm(Byte[], Int32)\n  nameWithType.vb: GenericAce.CreateFromBinaryForm(Byte(), Int32)\n- uid: System.Security.AccessControl.GenericAce.Equals(System.Object)\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Security.AccessControl.GenericAce.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Security.AccessControl.GenericAce.Equals(System.Object)\n    name: Equals\n    fullName: System.Security.AccessControl.GenericAce.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.AccessControl.GenericAce.Equals(System.Object)\n    name: Equals\n    fullName: System.Security.AccessControl.GenericAce.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.AccessControl.GenericAce.Equals(System.Object)\n  nameWithType: GenericAce.Equals(Object)\n- uid: System.Security.AccessControl.GenericAce.GetHashCode\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.Security.AccessControl.GenericAce.GetHashCode()\n  spec.csharp:\n  - uid: System.Security.AccessControl.GenericAce.GetHashCode\n    name: GetHashCode\n    fullName: System.Security.AccessControl.GenericAce.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.AccessControl.GenericAce.GetHashCode\n    name: GetHashCode\n    fullName: System.Security.AccessControl.GenericAce.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.AccessControl.GenericAce.GetHashCode\n  nameWithType: GenericAce.GetHashCode()\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Security.AccessControl.AceType\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AceType\n  fullName: System.Security.AccessControl.AceType\n  commentId: T:System.Security.AccessControl.AceType\n  nameWithType: AceType\n- uid: System.Security.AccessControl.AceFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AceFlags\n  fullName: System.Security.AccessControl.AceFlags\n  commentId: T:System.Security.AccessControl.AceFlags\n  nameWithType: AceFlags\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Security.AccessControl.GenericAce.BinaryLength\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: BinaryLength\n  fullName: System.Security.AccessControl.GenericAce.BinaryLength\n  commentId: P:System.Security.AccessControl.GenericAce.BinaryLength\n  nameWithType: GenericAce.BinaryLength\n- uid: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: true\n  name: GetBinaryForm(Byte[], Int32)\n  fullName: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[], System.Int32)\n  fullname.vb: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte(), System.Int32)\n  name.vb: GetBinaryForm(Byte(), Int32)\n  spec.csharp:\n  - uid: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)\n    name: GetBinaryForm\n    fullName: System.Security.AccessControl.GenericAce.GetBinaryForm\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)\n    name: GetBinaryForm\n    fullName: System.Security.AccessControl.GenericAce.GetBinaryForm\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)\n  nameWithType: GenericAce.GetBinaryForm(Byte[], Int32)\n  nameWithType.vb: GenericAce.GetBinaryForm(Byte(), Int32)\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n"}