{"nodes":[{"pos":[961,971],"content":"Extensions","needQuote":true,"nodes":[{"content":"Extensions","pos":[0,10]}]},{"pos":[2326,2353],"content":"CreateNavigator(Linq.XNode)","needQuote":true,"nodes":[{"content":"CreateNavigator(Linq.XNode)","pos":[0,27]}]},{"pos":[4182,4223],"content":"CreateNavigator(Linq.XNode, XmlNameTable)","needQuote":true,"nodes":[{"content":"CreateNavigator(Linq.XNode, XmlNameTable)","pos":[0,41]}]},{"pos":[6528,6561],"content":"XPathEvaluate(Linq.XNode, String)","needQuote":true,"nodes":[{"content":"XPathEvaluate(Linq.XNode, String)","pos":[0,33]}]},{"pos":[8601,8657],"content":"XPathEvaluate(Linq.XNode, String, IXmlNamespaceResolver)","needQuote":true,"nodes":[{"content":"XPathEvaluate(Linq.XNode, String, IXmlNamespaceResolver)","pos":[0,56]}]},{"pos":[11178,11216],"content":"XPathSelectElement(Linq.XNode, String)","needQuote":true,"nodes":[{"content":"XPathSelectElement(Linq.XNode, String)","pos":[0,38]}]},{"pos":[13295,13356],"content":"XPathSelectElement(Linq.XNode, String, IXmlNamespaceResolver)","needQuote":true,"nodes":[{"content":"XPathSelectElement(Linq.XNode, String, IXmlNamespaceResolver)","pos":[0,61]}]},{"pos":[15850,15889],"content":"XPathSelectElements(Linq.XNode, String)","needQuote":true,"nodes":[{"content":"XPathSelectElements(Linq.XNode, String)","pos":[0,39]}]},{"pos":[18114,18176],"content":"XPathSelectElements(Linq.XNode, String, IXmlNamespaceResolver)","needQuote":true,"nodes":[{"content":"XPathSelectElements(Linq.XNode, String, IXmlNamespaceResolver)","pos":[0,62]}]},{"pos":[20522,20538],"content":"System.Xml.XPath","needQuote":true,"nodes":[{"content":"System.Xml.XPath","pos":[0,16]}]},{"pos":[20699,20705],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20865,20875],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[20970,20978],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[21047,21048],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21075,21076],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21146,21154],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[21223,21224],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21251,21252],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21435,21449],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[21568,21574],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[21641,21642],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21692,21698],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21758,21759],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21842,21848],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[21915,21916],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21966,21972],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22032,22033],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22247,22269],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[22417,22423],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[22490,22491],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22541,22547],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[22608,22609]},{"pos":[22664,22670],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22730,22731],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22828,22834],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[22901,22902],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22952,22958],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[23019,23020]},{"pos":[23075,23081],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23141,23142],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23387,23418],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[23584,23599],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[23675,23676],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23726,23732],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[23793,23794]},{"pos":[23849,23855],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23915,23916],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24022,24037],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[24113,24114],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24164,24170],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[24231,24232]},{"pos":[24287,24293],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24353,24354],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24584,24597],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[24698,24709],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[24781,24782],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24809,24810],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24883,24894],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[24966,24967],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24994,24995],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25170,25179],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[25272,25279],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[25347,25348],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25375,25376],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25445,25452],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[25520,25521],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25548,25549],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25724,25741],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[25850,25865],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[25941,25942],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25969,25970],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26047,26062],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[26138,26139],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26166,26167],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26312,26318],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[26466,26471],"content":"XNode","needQuote":true,"nodes":[{"content":"XNode","pos":[0,5]}]},{"pos":[26659,26673],"content":"XPathNavigator","needQuote":true,"nodes":[{"content":"XPathNavigator","pos":[0,14]}]},{"pos":[26847,26862],"content":"System.Xml.Linq","needQuote":true,"nodes":[{"content":"System.Xml.Linq","pos":[0,15]}]},{"pos":[27034,27046],"content":"XmlNameTable","needQuote":true,"nodes":[{"content":"XmlNameTable","pos":[0,12]}]},{"pos":[27197,27207],"content":"System.Xml","needQuote":true,"nodes":[{"content":"System.Xml","pos":[0,10]}]},{"pos":[27350,27356],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[27524,27545],"content":"IXmlNamespaceResolver","needQuote":true,"nodes":[{"content":"IXmlNamespaceResolver","pos":[0,21]}]},{"pos":[27763,27771],"content":"XElement","needQuote":true,"nodes":[{"content":"XElement","pos":[0,8]}]},{"pos":[28046,28067],"content":"IEnumerable<XElement>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;XElement&gt;","pos":[0,21],"source":"IEnumerable<XElement>"}]},{"pos":[28339,28350],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[28435,28436],"content":"<","needQuote":true,"nodes":[]},{"pos":[28497,28505],"content":"XElement","needQuote":true,"nodes":[{"content":"XElement","pos":[0,8]}]},{"pos":[28648,28659],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[28745,28748]},{"pos":[28816,28824],"content":"XElement","needQuote":true,"nodes":[{"content":"XElement","pos":[0,8]}]},{"pos":[28874,28875],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29130,29144],"content":"IEnumerable<T>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;T&gt;","pos":[0,14],"source":"IEnumerable<T>"}]},{"pos":[29363,29374],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[29438,29439],"content":"<","needQuote":true,"nodes":[]},{"pos":[29466,29467],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[29587,29598],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[29663,29666]},{"pos":[29700,29701],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[29728,29729],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29932,29958],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]}],"content":"items:\n- uid: System.Xml.XPath.Extensions\n  commentId: T:System.Xml.XPath.Extensions\n  id: Extensions\n  parent: System.Xml.XPath\n  children:\n  - System.Xml.XPath.Extensions.CreateNavigator(System.Xml.Linq.XNode)\n  - System.Xml.XPath.Extensions.CreateNavigator(System.Xml.Linq.XNode,System.Xml.XmlNameTable)\n  - System.Xml.XPath.Extensions.XPathEvaluate(System.Xml.Linq.XNode,System.String)\n  - System.Xml.XPath.Extensions.XPathEvaluate(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)\n  - System.Xml.XPath.Extensions.XPathSelectElement(System.Xml.Linq.XNode,System.String)\n  - System.Xml.XPath.Extensions.XPathSelectElement(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)\n  - System.Xml.XPath.Extensions.XPathSelectElements(System.Xml.Linq.XNode,System.String)\n  - System.Xml.XPath.Extensions.XPathSelectElements(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)\n  langs:\n  - csharp\n  - vb\n  name: Extensions\n  fullName: System.Xml.XPath.Extensions\n  type: Class\n  source:\n    remote:\n      path: src/System.Xml.XPath.XDocument/ref/System.Xml.XPath.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Extensions\n    path: src/System.Xml.XPath.XDocument/ref/System.Xml.XPath.XDocument.cs\n    startLine: 10\n  assemblies:\n  - System.Xml.XPath.XDocument\n  namespace: System.Xml.XPath\n  summary: \"\\n<p>This class contains the LINQ to XML extension methods that enable you to evaluate XPath expressions.</p>\\n\"\n  syntax:\n    content: public class Extensions\n    content.vb: Public Class Extensions\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: Extensions\n- uid: System.Xml.XPath.Extensions.CreateNavigator(System.Xml.Linq.XNode)\n  commentId: M:System.Xml.XPath.Extensions.CreateNavigator(System.Xml.Linq.XNode)\n  id: CreateNavigator(System.Xml.Linq.XNode)\n  isExtensionMethod: true\n  parent: System.Xml.XPath.Extensions\n  langs:\n  - csharp\n  - vb\n  name: CreateNavigator(Linq.XNode)\n  fullName: System.Xml.XPath.Extensions.CreateNavigator(System.Xml.Linq.XNode)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XPath.XDocument/ref/System.Xml.XPath.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateNavigator\n    path: src/System.Xml.XPath.XDocument/ref/System.Xml.XPath.XDocument.cs\n    startLine: 12\n  assemblies:\n  - System.Xml.XPath.XDocument\n  namespace: System.Xml.XPath\n  summary: \"\\n<p>Creates an <xref href=\\\"System.Xml.XPath.XPathNavigator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for an <xref href=\\\"System.Xml.Linq.XNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static XPathNavigator CreateNavigator(this Linq.XNode node)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function CreateNavigator(node As Linq.XNode) As XPathNavigator\n    parameters:\n    - id: node\n      type: System.Xml.Linq.XNode\n      description: \"\\n<p>An <xref href=\\\"System.Xml.Linq.XNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that can process XPath queries.</p>\\n\"\n    return:\n      type: System.Xml.XPath.XPathNavigator\n      description: \"\\n<p>An <xref href=\\\"System.Xml.XPath.XPathNavigator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that can process XPath queries.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Extensions.CreateNavigator(Linq.XNode)\n- uid: System.Xml.XPath.Extensions.CreateNavigator(System.Xml.Linq.XNode,System.Xml.XmlNameTable)\n  commentId: M:System.Xml.XPath.Extensions.CreateNavigator(System.Xml.Linq.XNode,System.Xml.XmlNameTable)\n  id: CreateNavigator(System.Xml.Linq.XNode,System.Xml.XmlNameTable)\n  isExtensionMethod: true\n  parent: System.Xml.XPath.Extensions\n  langs:\n  - csharp\n  - vb\n  name: CreateNavigator(Linq.XNode, XmlNameTable)\n  fullName: System.Xml.XPath.Extensions.CreateNavigator(System.Xml.Linq.XNode, System.Xml.XmlNameTable)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XPath.XDocument/ref/System.Xml.XPath.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateNavigator\n    path: src/System.Xml.XPath.XDocument/ref/System.Xml.XPath.XDocument.cs\n    startLine: 13\n  assemblies:\n  - System.Xml.XPath.XDocument\n  namespace: System.Xml.XPath\n  summary: \"\\n<p>Creates an <xref href=\\\"System.Xml.XPath.XPathNavigator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for an <xref href=\\\"System.Xml.Linq.XNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The <xref href=\\\"System.Xml.XmlNameTable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> enables more efficient XPath expression processing.</p>\\n\"\n  syntax:\n    content: public static XPathNavigator CreateNavigator(this Linq.XNode node, XmlNameTable nameTable)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function CreateNavigator(node As Linq.XNode, nameTable As XmlNameTable) As XPathNavigator\n    parameters:\n    - id: node\n      type: System.Xml.Linq.XNode\n      description: \"\\n<p>An <xref href=\\\"System.Xml.Linq.XNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that can process an XPath query.</p>\\n\"\n    - id: nameTable\n      type: System.Xml.XmlNameTable\n      description: \"\\n<p>A <xref href=\\\"System.Xml.XmlNameTable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to be used by <xref href=\\\"System.Xml.XPath.XPathNavigator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Xml.XPath.XPathNavigator\n      description: \"\\n<p>An <xref href=\\\"System.Xml.XPath.XPathNavigator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that can process XPath queries.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Extensions.CreateNavigator(Linq.XNode, XmlNameTable)\n- uid: System.Xml.XPath.Extensions.XPathEvaluate(System.Xml.Linq.XNode,System.String)\n  commentId: M:System.Xml.XPath.Extensions.XPathEvaluate(System.Xml.Linq.XNode,System.String)\n  id: XPathEvaluate(System.Xml.Linq.XNode,System.String)\n  isExtensionMethod: true\n  parent: System.Xml.XPath.Extensions\n  langs:\n  - csharp\n  - vb\n  name: XPathEvaluate(Linq.XNode, String)\n  fullName: System.Xml.XPath.Extensions.XPathEvaluate(System.Xml.Linq.XNode, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XPath.XDocument/ref/System.Xml.XPath.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: XPathEvaluate\n    path: src/System.Xml.XPath.XDocument/ref/System.Xml.XPath.XDocument.cs\n    startLine: 14\n  assemblies:\n  - System.Xml.XPath.XDocument\n  namespace: System.Xml.XPath\n  summary: \"\\n<p>Evaluates an XPath expression.</p>\\n\"\n  syntax:\n    content: public static object XPathEvaluate(this Linq.XNode node, string expression)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function XPathEvaluate(node As Linq.XNode, expression As String) As Object\n    parameters:\n    - id: node\n      type: System.Xml.Linq.XNode\n      description: \"\\n<p>The <xref href=\\\"System.Xml.Linq.XNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> on which to evaluate the XPath expression.</p>\\n\"\n    - id: expression\n      type: System.String\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains an XPath expression.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>An object that can contain a <strong>bool</strong>, a <strong>double</strong>, a <strong>string</strong>, or an <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Extensions.XPathEvaluate(Linq.XNode, String)\n- uid: System.Xml.XPath.Extensions.XPathEvaluate(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)\n  commentId: M:System.Xml.XPath.Extensions.XPathEvaluate(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)\n  id: XPathEvaluate(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)\n  isExtensionMethod: true\n  parent: System.Xml.XPath.Extensions\n  langs:\n  - csharp\n  - vb\n  name: XPathEvaluate(Linq.XNode, String, IXmlNamespaceResolver)\n  fullName: System.Xml.XPath.Extensions.XPathEvaluate(System.Xml.Linq.XNode, System.String, System.Xml.IXmlNamespaceResolver)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XPath.XDocument/ref/System.Xml.XPath.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: XPathEvaluate\n    path: src/System.Xml.XPath.XDocument/ref/System.Xml.XPath.XDocument.cs\n    startLine: 15\n  assemblies:\n  - System.Xml.XPath.XDocument\n  namespace: System.Xml.XPath\n  summary: \"\\n<p>Evaluates an XPath expression, resolving namespace prefixes using the specified <xref href=\\\"System.Xml.IXmlNamespaceResolver\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static object XPathEvaluate(this Linq.XNode node, string expression, IXmlNamespaceResolver resolver)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function XPathEvaluate(node As Linq.XNode, expression As String, resolver As IXmlNamespaceResolver) As Object\n    parameters:\n    - id: node\n      type: System.Xml.Linq.XNode\n      description: \"\\n<p>The <xref href=\\\"System.Xml.Linq.XNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> on which to evaluate the XPath expression.</p>\\n\"\n    - id: expression\n      type: System.String\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains an XPath expression.</p>\\n\"\n    - id: resolver\n      type: System.Xml.IXmlNamespaceResolver\n      description: \"\\n<p>A <xref href=\\\"System.Xml.IXmlNamespaceResolver\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for the namespace prefixes in the XPath expression.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>An object that contains the result of evaluating the expression. The object can be a <strong>bool</strong>, a <strong>double</strong>, a <strong>string</strong>, or an <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Extensions.XPathEvaluate(Linq.XNode, String, IXmlNamespaceResolver)\n- uid: System.Xml.XPath.Extensions.XPathSelectElement(System.Xml.Linq.XNode,System.String)\n  commentId: M:System.Xml.XPath.Extensions.XPathSelectElement(System.Xml.Linq.XNode,System.String)\n  id: XPathSelectElement(System.Xml.Linq.XNode,System.String)\n  isExtensionMethod: true\n  parent: System.Xml.XPath.Extensions\n  langs:\n  - csharp\n  - vb\n  name: XPathSelectElement(Linq.XNode, String)\n  fullName: System.Xml.XPath.Extensions.XPathSelectElement(System.Xml.Linq.XNode, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XPath.XDocument/ref/System.Xml.XPath.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: XPathSelectElement\n    path: src/System.Xml.XPath.XDocument/ref/System.Xml.XPath.XDocument.cs\n    startLine: 16\n  assemblies:\n  - System.Xml.XPath.XDocument\n  namespace: System.Xml.XPath\n  summary: \"\\n<p>Selects an <xref href=\\\"System.Xml.Linq.XElement\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> using a XPath expression.</p>\\n\"\n  syntax:\n    content: public static Linq.XElement XPathSelectElement(this Linq.XNode node, string expression)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function XPathSelectElement(node As Linq.XNode, expression As String) As Linq.XElement\n    parameters:\n    - id: node\n      type: System.Xml.Linq.XNode\n      description: \"\\n<p>The <xref href=\\\"System.Xml.Linq.XNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> on which to evaluate the XPath expression.</p>\\n\"\n    - id: expression\n      type: System.String\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains an XPath expression.</p>\\n\"\n    return:\n      type: System.Xml.Linq.XElement\n      description: \"\\n<p>An <xref href=\\\"System.Xml.Linq.XElement\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Extensions.XPathSelectElement(Linq.XNode, String)\n- uid: System.Xml.XPath.Extensions.XPathSelectElement(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)\n  commentId: M:System.Xml.XPath.Extensions.XPathSelectElement(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)\n  id: XPathSelectElement(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)\n  isExtensionMethod: true\n  parent: System.Xml.XPath.Extensions\n  langs:\n  - csharp\n  - vb\n  name: XPathSelectElement(Linq.XNode, String, IXmlNamespaceResolver)\n  fullName: System.Xml.XPath.Extensions.XPathSelectElement(System.Xml.Linq.XNode, System.String, System.Xml.IXmlNamespaceResolver)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XPath.XDocument/ref/System.Xml.XPath.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: XPathSelectElement\n    path: src/System.Xml.XPath.XDocument/ref/System.Xml.XPath.XDocument.cs\n    startLine: 17\n  assemblies:\n  - System.Xml.XPath.XDocument\n  namespace: System.Xml.XPath\n  summary: \"\\n<p>Selects an <xref href=\\\"System.Xml.Linq.XElement\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> using a XPath expression, resolving namespace prefixes using the specified <xref href=\\\"System.Xml.IXmlNamespaceResolver\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static Linq.XElement XPathSelectElement(this Linq.XNode node, string expression, IXmlNamespaceResolver resolver)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function XPathSelectElement(node As Linq.XNode, expression As String, resolver As IXmlNamespaceResolver) As Linq.XElement\n    parameters:\n    - id: node\n      type: System.Xml.Linq.XNode\n      description: \"\\n<p>The <xref href=\\\"System.Xml.Linq.XNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> on which to evaluate the XPath expression.</p>\\n\"\n    - id: expression\n      type: System.String\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains an XPath expression.</p>\\n\"\n    - id: resolver\n      type: System.Xml.IXmlNamespaceResolver\n      description: \"\\n<p>An <xref href=\\\"System.Xml.IXmlNamespaceResolver\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for the namespace prefixes in the XPath expression.</p>\\n\"\n    return:\n      type: System.Xml.Linq.XElement\n      description: \"\\n<p>An <xref href=\\\"System.Xml.Linq.XElement\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Extensions.XPathSelectElement(Linq.XNode, String, IXmlNamespaceResolver)\n- uid: System.Xml.XPath.Extensions.XPathSelectElements(System.Xml.Linq.XNode,System.String)\n  commentId: M:System.Xml.XPath.Extensions.XPathSelectElements(System.Xml.Linq.XNode,System.String)\n  id: XPathSelectElements(System.Xml.Linq.XNode,System.String)\n  isExtensionMethod: true\n  parent: System.Xml.XPath.Extensions\n  langs:\n  - csharp\n  - vb\n  name: XPathSelectElements(Linq.XNode, String)\n  fullName: System.Xml.XPath.Extensions.XPathSelectElements(System.Xml.Linq.XNode, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XPath.XDocument/ref/System.Xml.XPath.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: XPathSelectElements\n    path: src/System.Xml.XPath.XDocument/ref/System.Xml.XPath.XDocument.cs\n    startLine: 18\n  assemblies:\n  - System.Xml.XPath.XDocument\n  namespace: System.Xml.XPath\n  summary: \"\\n<p>Selects a collection of elements using an XPath expression.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<Linq.XElement> XPathSelectElements(this Linq.XNode node, string expression)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function XPathSelectElements(node As Linq.XNode, expression As String) As IEnumerable(Of Linq.XElement)\n    parameters:\n    - id: node\n      type: System.Xml.Linq.XNode\n      description: \"\\n<p>The <xref href=\\\"System.Xml.Linq.XNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> on which to evaluate the XPath expression.</p>\\n\"\n    - id: expression\n      type: System.String\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains an XPath expression.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of <xref href=\\\"System.Xml.Linq.XElement\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the selected elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Extensions.XPathSelectElements(Linq.XNode, String)\n- uid: System.Xml.XPath.Extensions.XPathSelectElements(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)\n  commentId: M:System.Xml.XPath.Extensions.XPathSelectElements(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)\n  id: XPathSelectElements(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)\n  isExtensionMethod: true\n  parent: System.Xml.XPath.Extensions\n  langs:\n  - csharp\n  - vb\n  name: XPathSelectElements(Linq.XNode, String, IXmlNamespaceResolver)\n  fullName: System.Xml.XPath.Extensions.XPathSelectElements(System.Xml.Linq.XNode, System.String, System.Xml.IXmlNamespaceResolver)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XPath.XDocument/ref/System.Xml.XPath.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: XPathSelectElements\n    path: src/System.Xml.XPath.XDocument/ref/System.Xml.XPath.XDocument.cs\n    startLine: 19\n  assemblies:\n  - System.Xml.XPath.XDocument\n  namespace: System.Xml.XPath\n  summary: \"\\n<p>Selects a collection of elements using an XPath expression, resolving namespace prefixes using the specified <xref href=\\\"System.Xml.IXmlNamespaceResolver\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<Linq.XElement> XPathSelectElements(this Linq.XNode node, string expression, IXmlNamespaceResolver resolver)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function XPathSelectElements(node As Linq.XNode, expression As String, resolver As IXmlNamespaceResolver) As IEnumerable(Of Linq.XElement)\n    parameters:\n    - id: node\n      type: System.Xml.Linq.XNode\n      description: \"\\n<p>The <xref href=\\\"System.Xml.Linq.XNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> on which to evaluate the XPath expression.</p>\\n\"\n    - id: expression\n      type: System.String\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains an XPath expression.</p>\\n\"\n    - id: resolver\n      type: System.Xml.IXmlNamespaceResolver\n      description: \"\\n<p>A <xref href=\\\"System.Xml.IXmlNamespaceResolver\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for the namespace prefixes in the XPath expression.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of <xref href=\\\"System.Xml.Linq.XElement\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the selected elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Extensions.XPathSelectElements(Linq.XNode, String, IXmlNamespaceResolver)\nreferences:\n- uid: System.Xml.XPath\n  isExternal: false\n  name: System.Xml.XPath\n  fullName: System.Xml.XPath\n  commentId: N:System.Xml.XPath\n  nameWithType: System.Xml.XPath\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Xml.Linq.XNode\n  parent: System.Xml.Linq\n  isExternal: false\n  name: XNode\n  fullName: System.Xml.Linq.XNode\n  commentId: T:System.Xml.Linq.XNode\n  nameWithType: XNode\n- uid: System.Xml.XPath.XPathNavigator\n  parent: System.Xml.XPath\n  isExternal: false\n  name: XPathNavigator\n  fullName: System.Xml.XPath.XPathNavigator\n  commentId: T:System.Xml.XPath.XPathNavigator\n  nameWithType: XPathNavigator\n- uid: System.Xml.Linq\n  isExternal: false\n  name: System.Xml.Linq\n  fullName: System.Xml.Linq\n  commentId: N:System.Xml.Linq\n  nameWithType: System.Xml.Linq\n- uid: System.Xml.XmlNameTable\n  parent: System.Xml\n  isExternal: false\n  name: XmlNameTable\n  fullName: System.Xml.XmlNameTable\n  commentId: T:System.Xml.XmlNameTable\n  nameWithType: XmlNameTable\n- uid: System.Xml\n  isExternal: false\n  name: System.Xml\n  fullName: System.Xml\n  commentId: N:System.Xml\n  nameWithType: System.Xml\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Xml.IXmlNamespaceResolver\n  parent: System.Xml\n  isExternal: false\n  name: IXmlNamespaceResolver\n  fullName: System.Xml.IXmlNamespaceResolver\n  commentId: T:System.Xml.IXmlNamespaceResolver\n  nameWithType: IXmlNamespaceResolver\n- uid: System.Xml.Linq.XElement\n  parent: System.Xml.Linq\n  isExternal: false\n  name: XElement\n  fullName: System.Xml.Linq.XElement\n  commentId: T:System.Xml.Linq.XElement\n  nameWithType: XElement\n- uid: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<XElement>\n  fullName: System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Xml.Linq.XElement)\n  name.vb: IEnumerable(Of XElement)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Xml.Linq.XElement\n    name: XElement\n    fullName: System.Xml.Linq.XElement\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Xml.Linq.XElement\n    name: XElement\n    fullName: System.Xml.Linq.XElement\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}\n  nameWithType: IEnumerable<XElement>\n  nameWithType.vb: IEnumerable(Of XElement)\n- uid: System.Collections.Generic.IEnumerable`1\n  isExternal: false\n  name: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T)\n  name.vb: IEnumerable(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable`1\n  nameWithType: IEnumerable<T>\n  nameWithType.vb: IEnumerable(Of T)\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n  nameWithType: System.Collections.Generic\n"}