{"nodes":[{"pos":[1326,1352],"content":"DelimitedListTraceListener","needQuote":true,"nodes":[{"content":"DelimitedListTraceListener","pos":[0,26]}]},{"pos":[3050,3084],"content":"DelimitedListTraceListener(Stream)","needQuote":true,"nodes":[{"content":"DelimitedListTraceListener(Stream)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;stream&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[4298,4346],"source":"\\n<p>\\n<em>stream</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[4347,4353],"source":" </p>\\n"},{"pos":[4818,4860],"content":"DelimitedListTraceListener(Stream, String)","needQuote":true,"nodes":[{"content":"DelimitedListTraceListener(Stream, String)","pos":[0,42]}]},{"content":"\\n&lt;p&gt;The name of the new instance of the trace listener.","pos":[6089,6145],"source":"\\n<p>The name of the new instance of the trace listener."},{"content":"&lt;/p&gt;\\n","pos":[6146,6152],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;stream&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[6271,6319],"source":"\\n<p>\\n<em>stream</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[6320,6326],"source":" </p>\\n"},{"pos":[6769,6807],"content":"DelimitedListTraceListener(TextWriter)","needQuote":true,"nodes":[{"content":"DelimitedListTraceListener(TextWriter)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;writer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[8039,8087],"source":"\\n<p>\\n<em>writer</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[8088,8094],"source":" </p>\\n"},{"pos":[8575,8621],"content":"DelimitedListTraceListener(TextWriter, String)","needQuote":true,"nodes":[{"content":"DelimitedListTraceListener(TextWriter, String)","pos":[0,46]}]},{"content":"\\n&lt;p&gt;The name of the new instance of the trace listener.","pos":[9868,9924],"source":"\\n<p>The name of the new instance of the trace listener."},{"content":"&lt;/p&gt;\\n","pos":[9925,9931],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;writer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[10050,10098],"source":"\\n<p>\\n<em>writer</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[10099,10105],"source":" </p>\\n"},{"pos":[10496,10505],"content":"Delimiter","needQuote":true,"nodes":[{"content":"Delimiter","pos":[0,9]}]},{"content":"\\n&lt;p&gt;The delimiter for the delimited list.&lt;/p&gt;\\n","pos":[11299,11347],"source":"\\n<p>The delimiter for the delimited list.</p>\\n"},{"pos":[12589,12654],"content":"TraceData(TraceEventCache, String, TraceEventType, Int32, Object)","needQuote":true,"nodes":[{"content":"TraceData(TraceEventCache, String, TraceEventType, Int32, Object)","pos":[0,65]}]},{"content":"\\n&lt;p&gt;A name used to identify the output, typically the name of the application that generated the trace event.&lt;/p&gt;\\n","pos":[14068,14184],"source":"\\n<p>A name used to identify the output, typically the name of the application that generated the trace event.</p>\\n"},{"content":"\\n&lt;p&gt;A numeric identifier for the event.&lt;/p&gt;\\n","pos":[14510,14556],"source":"\\n<p>A numeric identifier for the event.</p>\\n"},{"content":"\\n&lt;p&gt;A data object to write to the output file or stream.&lt;/p&gt;\\n","pos":[14619,14682],"source":"\\n<p>A data object to write to the output file or stream.</p>\\n"},{"pos":[15458,15525],"content":"TraceData(TraceEventCache, String, TraceEventType, Int32, Object[])","needQuote":true,"nodes":[{"content":"TraceData(TraceEventCache, String, TraceEventType, Int32, Object[])","pos":[0,67]}]},{"content":"\\n&lt;p&gt;A name used to identify the output, typically the name of the application that generated the trace event.&lt;/p&gt;\\n","pos":[16974,17090],"source":"\\n<p>A name used to identify the output, typically the name of the application that generated the trace event.</p>\\n"},{"content":"\\n&lt;p&gt;A numeric identifier for the event.&lt;/p&gt;\\n","pos":[17416,17462],"source":"\\n<p>A numeric identifier for the event.</p>\\n"},{"content":"\\n&lt;p&gt;An array of data objects to write to the output file or stream.&lt;/p&gt;\\n","pos":[17527,17601],"source":"\\n<p>An array of data objects to write to the output file or stream.</p>\\n"},{"pos":[18757,18823],"content":"TraceEvent(TraceEventCache, String, TraceEventType, Int32, String)","needQuote":true,"nodes":[{"content":"TraceEvent(TraceEventCache, String, TraceEventType, Int32, String)","pos":[0,66]}]},{"content":"\\n&lt;p&gt;A name used to identify the output, typically the name of the application that generated the trace event.&lt;/p&gt;\\n","pos":[20243,20359],"source":"\\n<p>A name used to identify the output, typically the name of the application that generated the trace event.</p>\\n"},{"content":"\\n&lt;p&gt;A numeric identifier for the event.&lt;/p&gt;\\n","pos":[20685,20731],"source":"\\n<p>A numeric identifier for the event.</p>\\n"},{"content":"\\n&lt;p&gt;The trace message to write to the output file or stream.&lt;/p&gt;\\n","pos":[20797,20864],"source":"\\n<p>The trace message to write to the output file or stream.</p>\\n"},{"pos":[21686,21762],"content":"TraceEvent(TraceEventCache, String, TraceEventType, Int32, String, Object[])","needQuote":true,"nodes":[{"content":"TraceEvent(TraceEventCache, String, TraceEventType, Int32, String, Object[])","pos":[0,76]}]},{"content":"\\n&lt;p&gt;A name used to identify the output, typically the name of the application that generated the trace event.&lt;/p&gt;\\n","pos":[23267,23383],"source":"\\n<p>A name used to identify the output, typically the name of the application that generated the trace event.</p>\\n"},{"content":"\\n&lt;p&gt;A numeric identifier for the event.&lt;/p&gt;\\n","pos":[23709,23755],"source":"\\n<p>A numeric identifier for the event.</p>\\n"},{"content":"\\n&lt;p&gt;A format string that contains zero or more format items that correspond to objects in the &lt;em&gt;args&lt;/em&gt; array.&lt;/p&gt;\\n","pos":[23820,23941],"source":"\\n<p>A format string that contains zero or more format items that correspond to objects in the <em>args</em> array.</p>\\n"},{"content":"\\n&lt;p&gt;An array containing zero or more objects to format.&lt;/p&gt;\\n","pos":[24006,24068],"source":"\\n<p>An array containing zero or more objects to format.</p>\\n"},{"pos":[24756,24774],"content":"System.Diagnostics","needQuote":true,"nodes":[{"content":"System.Diagnostics","pos":[0,18]}]},{"pos":[24941,24947],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25133,25156],"content":"TextWriterTraceListener","needQuote":true,"nodes":[{"content":"TextWriterTraceListener","pos":[0,23]}]},{"pos":[25448,25454],"content":"Writer","needQuote":true,"nodes":[{"content":"Writer","pos":[0,6]}]},{"pos":[25783,25799],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"pos":[25980,25987],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[26063,26064],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26115,26122],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[26183,26184],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26298,26305],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[26381,26382],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26433,26440],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[26501,26502],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26795,26802],"content":"Flush()","needQuote":true,"nodes":[{"content":"Flush()","pos":[0,7]}]},{"pos":[26949,26954],"content":"Flush","needQuote":true,"nodes":[{"content":"Flush","pos":[0,5]}]},{"pos":[27028,27029],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27056,27057],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27153,27158],"content":"Flush","needQuote":true,"nodes":[{"content":"Flush","pos":[0,5]}]},{"pos":[27232,27233],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27260,27261],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27541,27554],"content":"Write(String)","needQuote":true,"nodes":[{"content":"Write(String)","pos":[0,13]}]},{"pos":[27729,27734],"content":"Write","needQuote":true,"nodes":[{"content":"Write","pos":[0,5]}]},{"pos":[27808,27809],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27859,27865],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[27925,27926],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28037,28042],"content":"Write","needQuote":true,"nodes":[{"content":"Write","pos":[0,5]}]},{"pos":[28116,28117],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28167,28173],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[28233,28234],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28539,28556],"content":"WriteLine(String)","needQuote":true,"nodes":[{"content":"WriteLine(String)","pos":[0,17]}]},{"pos":[28739,28748],"content":"WriteLine","needQuote":true,"nodes":[{"content":"WriteLine","pos":[0,9]}]},{"pos":[28826,28827],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28877,28883],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[28943,28944],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29059,29068],"content":"WriteLine","needQuote":true,"nodes":[{"content":"WriteLine","pos":[0,9]}]},{"pos":[29146,29147],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29197,29203],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[29263,29264],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29464,29470],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[29607,29613],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[29743,29752],"content":"System.IO","needQuote":true,"nodes":[{"content":"System.IO","pos":[0,9]}]},{"pos":[29892,29898],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[30053,30063],"content":"TextWriter","needQuote":true,"nodes":[{"content":"TextWriter","pos":[0,10]}]},{"pos":[30259,30274],"content":"TraceEventCache","needQuote":true,"nodes":[{"content":"TraceEventCache","pos":[0,15]}]},{"pos":[30502,30516],"content":"TraceEventType","needQuote":true,"nodes":[{"content":"TraceEventType","pos":[0,14]}]},{"pos":[30708,30713],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[30820,30828],"content":"Object[]","needQuote":true,"nodes":[{"content":"Object[]","pos":[0,8]}]},{"pos":[30956,30962],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":"[]","pos":[31023,31025]},{"pos":[31090,31096],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[31156,31158],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[31293,31314],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[31515,31532],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Diagnostics.DelimitedListTraceListener\n  commentId: T:System.Diagnostics.DelimitedListTraceListener\n  id: DelimitedListTraceListener\n  parent: System.Diagnostics\n  children:\n  - System.Diagnostics.DelimitedListTraceListener.#ctor(System.IO.Stream)\n  - System.Diagnostics.DelimitedListTraceListener.#ctor(System.IO.Stream,System.String)\n  - System.Diagnostics.DelimitedListTraceListener.#ctor(System.IO.TextWriter)\n  - System.Diagnostics.DelimitedListTraceListener.#ctor(System.IO.TextWriter,System.String)\n  - System.Diagnostics.DelimitedListTraceListener.Delimiter\n  - System.Diagnostics.DelimitedListTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)\n  - System.Diagnostics.DelimitedListTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])\n  - System.Diagnostics.DelimitedListTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)\n  - System.Diagnostics.DelimitedListTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])\n  langs:\n  - csharp\n  - vb\n  name: DelimitedListTraceListener\n  fullName: System.Diagnostics.DelimitedListTraceListener\n  type: Class\n  source:\n    remote:\n      path: src/System.Diagnostics.TextWriterTraceListener/src/System/Diagnostics/DelimitedListTraceListener.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DelimitedListTraceListener\n    path: src/System.Diagnostics.TextWriterTraceListener/src/System/Diagnostics/DelimitedListTraceListener.cs\n    startLine: 12\n  assemblies:\n  - System.Diagnostics.TextWriterTraceListener\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Directs tracing or debugging output to a text writer, such as a stream writer, or to a stream, such as a file stream.</p>\\n\"\n  syntax:\n    content: 'public class DelimitedListTraceListener : TextWriterTraceListener'\n    content.vb: >-\n      Public Class DelimitedListTraceListener\n          Inherits TextWriterTraceListener\n  inheritance:\n  - System.Object\n  - System.Diagnostics.TextWriterTraceListener\n  inheritedMembers:\n  - System.Diagnostics.TextWriterTraceListener.Writer\n  - System.Diagnostics.TextWriterTraceListener.Dispose(System.Boolean)\n  - System.Diagnostics.TextWriterTraceListener.Flush\n  - System.Diagnostics.TextWriterTraceListener.Write(System.String)\n  - System.Diagnostics.TextWriterTraceListener.WriteLine(System.String)\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: DelimitedListTraceListener\n- uid: System.Diagnostics.DelimitedListTraceListener.#ctor(System.IO.Stream)\n  commentId: M:System.Diagnostics.DelimitedListTraceListener.#ctor(System.IO.Stream)\n  id: '#ctor(System.IO.Stream)'\n  parent: System.Diagnostics.DelimitedListTraceListener\n  langs:\n  - csharp\n  - vb\n  name: DelimitedListTraceListener(Stream)\n  fullName: System.Diagnostics.DelimitedListTraceListener.DelimitedListTraceListener(System.IO.Stream)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Diagnostics.TextWriterTraceListener/src/System/Diagnostics/DelimitedListTraceListener.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Diagnostics.TextWriterTraceListener/src/System/Diagnostics/DelimitedListTraceListener.cs\n    startLine: 17\n  assemblies:\n  - System.Diagnostics.TextWriterTraceListener\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Diagnostics.DelimitedListTraceListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that writes to the specified output stream. </p>\\n\"\n  syntax:\n    content: public DelimitedListTraceListener(Stream stream)\n    content.vb: Public Sub New(stream As Stream)\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: \"\\n<p>The <xref href=\\\"System.IO.Stream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to receive the output.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>stream</em> is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DelimitedListTraceListener.DelimitedListTraceListener(Stream)\n- uid: System.Diagnostics.DelimitedListTraceListener.#ctor(System.IO.Stream,System.String)\n  commentId: M:System.Diagnostics.DelimitedListTraceListener.#ctor(System.IO.Stream,System.String)\n  id: '#ctor(System.IO.Stream,System.String)'\n  parent: System.Diagnostics.DelimitedListTraceListener\n  langs:\n  - csharp\n  - vb\n  name: DelimitedListTraceListener(Stream, String)\n  fullName: System.Diagnostics.DelimitedListTraceListener.DelimitedListTraceListener(System.IO.Stream, System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Diagnostics.TextWriterTraceListener/src/System/Diagnostics/DelimitedListTraceListener.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Diagnostics.TextWriterTraceListener/src/System/Diagnostics/DelimitedListTraceListener.cs\n    startLine: 21\n  assemblies:\n  - System.Diagnostics.TextWriterTraceListener\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Diagnostics.DelimitedListTraceListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that writes to the specified output stream and has the specified name. </p>\\n\"\n  syntax:\n    content: public DelimitedListTraceListener(Stream stream, string name)\n    content.vb: Public Sub New(stream As Stream, name As String)\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: \"\\n<p>The <xref href=\\\"System.IO.Stream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to receive the output.</p>\\n\"\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the new instance of the trace listener. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>stream</em> is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DelimitedListTraceListener.DelimitedListTraceListener(Stream, String)\n- uid: System.Diagnostics.DelimitedListTraceListener.#ctor(System.IO.TextWriter)\n  commentId: M:System.Diagnostics.DelimitedListTraceListener.#ctor(System.IO.TextWriter)\n  id: '#ctor(System.IO.TextWriter)'\n  parent: System.Diagnostics.DelimitedListTraceListener\n  langs:\n  - csharp\n  - vb\n  name: DelimitedListTraceListener(TextWriter)\n  fullName: System.Diagnostics.DelimitedListTraceListener.DelimitedListTraceListener(System.IO.TextWriter)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Diagnostics.TextWriterTraceListener/src/System/Diagnostics/DelimitedListTraceListener.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Diagnostics.TextWriterTraceListener/src/System/Diagnostics/DelimitedListTraceListener.cs\n    startLine: 25\n  assemblies:\n  - System.Diagnostics.TextWriterTraceListener\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Diagnostics.DelimitedListTraceListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that writes to the specified text writer. </p>\\n\"\n  syntax:\n    content: public DelimitedListTraceListener(TextWriter writer)\n    content.vb: Public Sub New(writer As TextWriter)\n    parameters:\n    - id: writer\n      type: System.IO.TextWriter\n      description: \"\\n<p>The <xref href=\\\"System.IO.TextWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to receive the output.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>writer</em> is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DelimitedListTraceListener.DelimitedListTraceListener(TextWriter)\n- uid: System.Diagnostics.DelimitedListTraceListener.#ctor(System.IO.TextWriter,System.String)\n  commentId: M:System.Diagnostics.DelimitedListTraceListener.#ctor(System.IO.TextWriter,System.String)\n  id: '#ctor(System.IO.TextWriter,System.String)'\n  parent: System.Diagnostics.DelimitedListTraceListener\n  langs:\n  - csharp\n  - vb\n  name: DelimitedListTraceListener(TextWriter, String)\n  fullName: System.Diagnostics.DelimitedListTraceListener.DelimitedListTraceListener(System.IO.TextWriter, System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Diagnostics.TextWriterTraceListener/src/System/Diagnostics/DelimitedListTraceListener.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Diagnostics.TextWriterTraceListener/src/System/Diagnostics/DelimitedListTraceListener.cs\n    startLine: 29\n  assemblies:\n  - System.Diagnostics.TextWriterTraceListener\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Diagnostics.DelimitedListTraceListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that writes to the specified text writer and has the specified name. </p>\\n\"\n  syntax:\n    content: public DelimitedListTraceListener(TextWriter writer, string name)\n    content.vb: Public Sub New(writer As TextWriter, name As String)\n    parameters:\n    - id: writer\n      type: System.IO.TextWriter\n      description: \"\\n<p>The <xref href=\\\"System.IO.TextWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to receive the output.</p>\\n\"\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the new instance of the trace listener. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>writer</em> is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DelimitedListTraceListener.DelimitedListTraceListener(TextWriter, String)\n- uid: System.Diagnostics.DelimitedListTraceListener.Delimiter\n  commentId: P:System.Diagnostics.DelimitedListTraceListener.Delimiter\n  id: Delimiter\n  parent: System.Diagnostics.DelimitedListTraceListener\n  langs:\n  - csharp\n  - vb\n  name: Delimiter\n  fullName: System.Diagnostics.DelimitedListTraceListener.Delimiter\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.TextWriterTraceListener/src/System/Diagnostics/DelimitedListTraceListener.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Delimiter\n    path: src/System.Diagnostics.TextWriterTraceListener/src/System/Diagnostics/DelimitedListTraceListener.cs\n    startLine: 33\n  assemblies:\n  - System.Diagnostics.TextWriterTraceListener\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets or sets the delimiter for the delimited list.</p>\\n\"\n  syntax:\n    content: public string Delimiter { get; set; }\n    content.vb: Public Property Delimiter As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The delimiter for the delimited list.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<xref href=\\\"System.Diagnostics.DelimitedListTraceListener.Delimiter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<xref href=\\\"System.Diagnostics.DelimitedListTraceListener.Delimiter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to an empty string (\\\"\\\").</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: DelimitedListTraceListener.Delimiter\n- uid: System.Diagnostics.DelimitedListTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)\n  commentId: M:System.Diagnostics.DelimitedListTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)\n  id: TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)\n  parent: System.Diagnostics.DelimitedListTraceListener\n  langs:\n  - csharp\n  - vb\n  name: TraceData(TraceEventCache, String, TraceEventType, Int32, Object)\n  fullName: System.Diagnostics.DelimitedListTraceListener.TraceData(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TextWriterTraceListener/ref/System.Diagnostics.TextWriterTraceListener.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TraceData\n    path: src/System.Diagnostics.TextWriterTraceListener/ref/System.Diagnostics.TextWriterTraceListener.cs\n    startLine: 17\n  assemblies:\n  - System.Diagnostics.TextWriterTraceListener\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes trace information, a data object, and event information to the output file or stream.</p>\\n\"\n  syntax:\n    content: public override void TraceData(TraceEventCache eventCache, string source, TraceEventType eventType, int id, object data)\n    content.vb: Public Overrides Sub TraceData(eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, data As Object)\n    parameters:\n    - id: eventCache\n      type: System.Diagnostics.TraceEventCache\n      description: \"\\n<p>A <xref href=\\\"System.Diagnostics.TraceEventCache\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that contains the current process ID, thread ID, and stack trace information.</p>\\n\"\n    - id: source\n      type: System.String\n      description: \"\\n<p>A name used to identify the output, typically the name of the application that generated the trace event.</p>\\n\"\n    - id: eventType\n      type: System.Diagnostics.TraceEventType\n      description: \"\\n<p>One of the <xref href=\\\"System.Diagnostics.TraceEventType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values specifying the type of event that has caused the trace.</p>\\n\"\n    - id: id\n      type: System.Int32\n      description: \"\\n<p>A numeric identifier for the event.</p>\\n\"\n    - id: data\n      type: System.Object\n      description: \"\\n<p>A data object to write to the output file or stream.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: DelimitedListTraceListener.TraceData(TraceEventCache, String, TraceEventType, Int32, Object)\n- uid: System.Diagnostics.DelimitedListTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])\n  commentId: M:System.Diagnostics.DelimitedListTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])\n  id: TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])\n  parent: System.Diagnostics.DelimitedListTraceListener\n  langs:\n  - csharp\n  - vb\n  name: TraceData(TraceEventCache, String, TraceEventType, Int32, Object[])\n  fullName: System.Diagnostics.DelimitedListTraceListener.TraceData(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.Object[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TextWriterTraceListener/ref/System.Diagnostics.TextWriterTraceListener.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TraceData\n    path: src/System.Diagnostics.TextWriterTraceListener/ref/System.Diagnostics.TextWriterTraceListener.cs\n    startLine: 18\n  assemblies:\n  - System.Diagnostics.TextWriterTraceListener\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes trace information, an array of data objects, and event information to the output file or stream.</p>\\n\"\n  syntax:\n    content: public override void TraceData(TraceEventCache eventCache, string source, TraceEventType eventType, int id, params object[] data)\n    content.vb: Public Overrides Sub TraceData(eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, ParamArray data As Object())\n    parameters:\n    - id: eventCache\n      type: System.Diagnostics.TraceEventCache\n      description: \"\\n<p>A <xref href=\\\"System.Diagnostics.TraceEventCache\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that contains the current process ID, thread ID, and stack trace information.</p>\\n\"\n    - id: source\n      type: System.String\n      description: \"\\n<p>A name used to identify the output, typically the name of the application that generated the trace event.</p>\\n\"\n    - id: eventType\n      type: System.Diagnostics.TraceEventType\n      description: \"\\n<p>One of the <xref href=\\\"System.Diagnostics.TraceEventType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values specifying the type of event that has caused the trace.</p>\\n\"\n    - id: id\n      type: System.Int32\n      description: \"\\n<p>A numeric identifier for the event.</p>\\n\"\n    - id: data\n      type: System.Object[]\n      description: \"\\n<p>An array of data objects to write to the output file or stream.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Diagnostics.DelimitedListTraceListener.TraceData(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.Object())\n  name.vb: TraceData(TraceEventCache, String, TraceEventType, Int32, Object())\n  nameWithType: DelimitedListTraceListener.TraceData(TraceEventCache, String, TraceEventType, Int32, Object[])\n  nameWithType.vb: DelimitedListTraceListener.TraceData(TraceEventCache, String, TraceEventType, Int32, Object())\n- uid: System.Diagnostics.DelimitedListTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)\n  commentId: M:System.Diagnostics.DelimitedListTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)\n  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)\n  parent: System.Diagnostics.DelimitedListTraceListener\n  langs:\n  - csharp\n  - vb\n  name: TraceEvent(TraceEventCache, String, TraceEventType, Int32, String)\n  fullName: System.Diagnostics.DelimitedListTraceListener.TraceEvent(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TextWriterTraceListener/ref/System.Diagnostics.TextWriterTraceListener.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TraceEvent\n    path: src/System.Diagnostics.TextWriterTraceListener/ref/System.Diagnostics.TextWriterTraceListener.cs\n    startLine: 19\n  assemblies:\n  - System.Diagnostics.TextWriterTraceListener\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes trace information, a message, and event information to the output file or stream.</p>\\n\"\n  syntax:\n    content: public override void TraceEvent(TraceEventCache eventCache, string source, TraceEventType eventType, int id, string message)\n    content.vb: Public Overrides Sub TraceEvent(eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, message As String)\n    parameters:\n    - id: eventCache\n      type: System.Diagnostics.TraceEventCache\n      description: \"\\n<p>A <xref href=\\\"System.Diagnostics.TraceEventCache\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that contains the current process ID, thread ID, and stack trace information.</p>\\n\"\n    - id: source\n      type: System.String\n      description: \"\\n<p>A name used to identify the output, typically the name of the application that generated the trace event.</p>\\n\"\n    - id: eventType\n      type: System.Diagnostics.TraceEventType\n      description: \"\\n<p>One of the <xref href=\\\"System.Diagnostics.TraceEventType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values specifying the type of event that has caused the trace.</p>\\n\"\n    - id: id\n      type: System.Int32\n      description: \"\\n<p>A numeric identifier for the event.</p>\\n\"\n    - id: message\n      type: System.String\n      description: \"\\n<p>The trace message to write to the output file or stream.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: DelimitedListTraceListener.TraceEvent(TraceEventCache, String, TraceEventType, Int32, String)\n- uid: System.Diagnostics.DelimitedListTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])\n  commentId: M:System.Diagnostics.DelimitedListTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])\n  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])\n  parent: System.Diagnostics.DelimitedListTraceListener\n  langs:\n  - csharp\n  - vb\n  name: TraceEvent(TraceEventCache, String, TraceEventType, Int32, String, Object[])\n  fullName: System.Diagnostics.DelimitedListTraceListener.TraceEvent(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.String, System.Object[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TextWriterTraceListener/ref/System.Diagnostics.TextWriterTraceListener.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TraceEvent\n    path: src/System.Diagnostics.TextWriterTraceListener/ref/System.Diagnostics.TextWriterTraceListener.cs\n    startLine: 20\n  assemblies:\n  - System.Diagnostics.TextWriterTraceListener\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Writes trace information, a formatted array of objects, and event information to the output file or stream.</p>\\n\"\n  syntax:\n    content: public override void TraceEvent(TraceEventCache eventCache, string source, TraceEventType eventType, int id, string format, params object[] args)\n    content.vb: Public Overrides Sub TraceEvent(eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, format As String, ParamArray args As Object())\n    parameters:\n    - id: eventCache\n      type: System.Diagnostics.TraceEventCache\n      description: \"\\n<p>A <xref href=\\\"System.Diagnostics.TraceEventCache\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that contains the current process ID, thread ID, and stack trace information.</p>\\n\"\n    - id: source\n      type: System.String\n      description: \"\\n<p>A name used to identify the output, typically the name of the application that generated the trace event.</p>\\n\"\n    - id: eventType\n      type: System.Diagnostics.TraceEventType\n      description: \"\\n<p>One of the <xref href=\\\"System.Diagnostics.TraceEventType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values specifying the type of event that has caused the trace.</p>\\n\"\n    - id: id\n      type: System.Int32\n      description: \"\\n<p>A numeric identifier for the event.</p>\\n\"\n    - id: format\n      type: System.String\n      description: \"\\n<p>A format string that contains zero or more format items that correspond to objects in the <em>args</em> array.</p>\\n\"\n    - id: args\n      type: System.Object[]\n      description: \"\\n<p>An array containing zero or more objects to format.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Diagnostics.DelimitedListTraceListener.TraceEvent(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.String, System.Object())\n  name.vb: TraceEvent(TraceEventCache, String, TraceEventType, Int32, String, Object())\n  nameWithType: DelimitedListTraceListener.TraceEvent(TraceEventCache, String, TraceEventType, Int32, String, Object[])\n  nameWithType.vb: DelimitedListTraceListener.TraceEvent(TraceEventCache, String, TraceEventType, Int32, String, Object())\nreferences:\n- uid: System.Diagnostics\n  isExternal: false\n  name: System.Diagnostics\n  fullName: System.Diagnostics\n  nameWithType: System.Diagnostics\n  commentId: N:System.Diagnostics\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Diagnostics.TextWriterTraceListener\n  parent: System.Diagnostics\n  isExternal: false\n  name: TextWriterTraceListener\n  fullName: System.Diagnostics.TextWriterTraceListener\n  nameWithType: TextWriterTraceListener\n  commentId: T:System.Diagnostics.TextWriterTraceListener\n- uid: System.Diagnostics.TextWriterTraceListener.Writer\n  parent: System.Diagnostics.TextWriterTraceListener\n  isExternal: false\n  name: Writer\n  fullName: System.Diagnostics.TextWriterTraceListener.Writer\n  nameWithType: TextWriterTraceListener.Writer\n  commentId: P:System.Diagnostics.TextWriterTraceListener.Writer\n- uid: System.Diagnostics.TextWriterTraceListener.Dispose(System.Boolean)\n  parent: System.Diagnostics.TextWriterTraceListener\n  isExternal: true\n  name: Dispose(Boolean)\n  fullName: System.Diagnostics.TextWriterTraceListener.Dispose(System.Boolean)\n  spec.csharp:\n  - uid: System.Diagnostics.TextWriterTraceListener.Dispose(System.Boolean)\n    name: Dispose\n    fullName: System.Diagnostics.TextWriterTraceListener.Dispose\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Diagnostics.TextWriterTraceListener.Dispose(System.Boolean)\n    name: Dispose\n    fullName: System.Diagnostics.TextWriterTraceListener.Dispose\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TextWriterTraceListener.Dispose(Boolean)\n  commentId: M:System.Diagnostics.TextWriterTraceListener.Dispose(System.Boolean)\n- uid: System.Diagnostics.TextWriterTraceListener.Flush\n  parent: System.Diagnostics.TextWriterTraceListener\n  isExternal: false\n  name: Flush()\n  fullName: System.Diagnostics.TextWriterTraceListener.Flush()\n  spec.csharp:\n  - uid: System.Diagnostics.TextWriterTraceListener.Flush\n    name: Flush\n    fullName: System.Diagnostics.TextWriterTraceListener.Flush\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Diagnostics.TextWriterTraceListener.Flush\n    name: Flush\n    fullName: System.Diagnostics.TextWriterTraceListener.Flush\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: TextWriterTraceListener.Flush()\n  commentId: M:System.Diagnostics.TextWriterTraceListener.Flush\n- uid: System.Diagnostics.TextWriterTraceListener.Write(System.String)\n  parent: System.Diagnostics.TextWriterTraceListener\n  isExternal: true\n  name: Write(String)\n  fullName: System.Diagnostics.TextWriterTraceListener.Write(System.String)\n  spec.csharp:\n  - uid: System.Diagnostics.TextWriterTraceListener.Write(System.String)\n    name: Write\n    fullName: System.Diagnostics.TextWriterTraceListener.Write\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Diagnostics.TextWriterTraceListener.Write(System.String)\n    name: Write\n    fullName: System.Diagnostics.TextWriterTraceListener.Write\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TextWriterTraceListener.Write(String)\n  commentId: M:System.Diagnostics.TextWriterTraceListener.Write(System.String)\n- uid: System.Diagnostics.TextWriterTraceListener.WriteLine(System.String)\n  parent: System.Diagnostics.TextWriterTraceListener\n  isExternal: true\n  name: WriteLine(String)\n  fullName: System.Diagnostics.TextWriterTraceListener.WriteLine(System.String)\n  spec.csharp:\n  - uid: System.Diagnostics.TextWriterTraceListener.WriteLine(System.String)\n    name: WriteLine\n    fullName: System.Diagnostics.TextWriterTraceListener.WriteLine\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Diagnostics.TextWriterTraceListener.WriteLine(System.String)\n    name: WriteLine\n    fullName: System.Diagnostics.TextWriterTraceListener.WriteLine\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TextWriterTraceListener.WriteLine(String)\n  commentId: M:System.Diagnostics.TextWriterTraceListener.WriteLine(System.String)\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: false\n  name: Stream\n  fullName: System.IO.Stream\n  nameWithType: Stream\n  commentId: T:System.IO.Stream\n- uid: System.IO\n  isExternal: false\n  name: System.IO\n  fullName: System.IO\n  nameWithType: System.IO\n  commentId: N:System.IO\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.IO.TextWriter\n  parent: System.IO\n  isExternal: false\n  name: TextWriter\n  fullName: System.IO.TextWriter\n  nameWithType: TextWriter\n  commentId: T:System.IO.TextWriter\n- uid: System.Diagnostics.TraceEventCache\n  parent: System.Diagnostics\n  isExternal: false\n  name: TraceEventCache\n  fullName: System.Diagnostics.TraceEventCache\n  nameWithType: TraceEventCache\n  commentId: T:System.Diagnostics.TraceEventCache\n- uid: System.Diagnostics.TraceEventType\n  parent: System.Diagnostics\n  isExternal: false\n  name: TraceEventType\n  fullName: System.Diagnostics.TraceEventType\n  nameWithType: TraceEventType\n  commentId: T:System.Diagnostics.TraceEventType\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Object[]\n  name: Object[]\n  fullName: System.Object[]\n  fullname.vb: System.Object()\n  name.vb: Object()\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Object[]\n  nameWithType.vb: Object()\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}