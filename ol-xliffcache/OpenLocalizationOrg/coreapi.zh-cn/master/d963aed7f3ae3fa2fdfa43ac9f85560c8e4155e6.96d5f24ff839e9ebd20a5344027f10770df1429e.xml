{"nodes":[{"pos":[3083,3108],"content":"EventDescriptorCollection","needQuote":true,"nodes":[{"content":"EventDescriptorCollection","pos":[0,25]}]},{"pos":[5311,5316],"content":"Empty","needQuote":true,"nodes":[{"content":"Empty","pos":[0,5]}]},{"pos":[6717,6761],"content":"EventDescriptorCollection(EventDescriptor[])","needQuote":true,"nodes":[{"content":"EventDescriptorCollection(EventDescriptor[])","pos":[0,44]}]},{"pos":[9099,9152],"content":"EventDescriptorCollection(EventDescriptor[], Boolean)","needQuote":true,"nodes":[{"content":"EventDescriptorCollection(EventDescriptor[], Boolean)","pos":[0,53]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to specify a read-only collection; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[10607,10711],"source":"\\n<p>\\n<strong>true</strong> to specify a read-only collection; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[11755,11772],"content":"IList.Add(Object)","needQuote":true,"nodes":[{"content":"IList.Add(Object)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The position into which the new element was inserted.&lt;/p&gt;\\n","pos":[12802,12866],"source":"\\n<p>The position into which the new element was inserted.</p>\\n"},{"content":"\\n&lt;p&gt;The collection is read-only.&lt;/p&gt;\\n","pos":[12985,13024],"source":"\\n<p>The collection is read-only.</p>\\n"},{"pos":[13656,13678],"content":"IList.Contains(Object)","needQuote":true,"nodes":[{"content":"IList.Contains(Object)","pos":[0,22]}]},{"pos":[15455,15460],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"content":"\\n&lt;p&gt;The number of event descriptors in the collection.&lt;/p&gt;\\n","pos":[16232,16293],"source":"\\n<p>The number of event descriptors in the collection.</p>\\n"},{"pos":[17067,17088],"content":"IList.IndexOf(Object)","needQuote":true,"nodes":[{"content":"IList.IndexOf(Object)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The index of &lt;em&gt;value&lt;/em&gt; if found in the list; otherwise, -1.&lt;/p&gt;\\n","pos":[18168,18243],"source":"\\n<p>The index of <em>value</em> if found in the list; otherwise, -1.</p>\\n"},{"pos":[18924,18951],"content":"IList.Insert(Int32, Object)","needQuote":true,"nodes":[{"content":"IList.Insert(Int32, Object)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The zero-based index at which &lt;em&gt;value&lt;/em&gt; should be inserted.&lt;/p&gt;\\n","pos":[19876,19951],"source":"\\n<p>The zero-based index at which <em>value</em> should be inserted.</p>\\n"},{"content":"\\n&lt;p&gt;The collection is read-only.&lt;/p&gt;\\n","pos":[20253,20292],"source":"\\n<p>The collection is read-only.</p>\\n"},{"pos":[20961,20987],"content":"ICollection.IsSynchronized","needQuote":true,"nodes":[{"content":"ICollection.IsSynchronized","pos":[0,26]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if access to the collection is synchronized; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[21956,22070],"source":"\\n<p>\\n<strong>true</strong> if access to the collection is synchronized; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[22761,22781],"content":"ICollection.SyncRoot","needQuote":true,"nodes":[{"content":"ICollection.SyncRoot","pos":[0,20]}]},{"content":"\\n&lt;p&gt;An object that can be used to synchronize access to the collection.&lt;/p&gt;\\n","pos":[23719,23797],"source":"\\n<p>An object that can be used to synchronize access to the collection.</p>\\n"},{"pos":[24455,24472],"content":"IList.IsFixedSize","needQuote":true,"nodes":[{"content":"IList.IsFixedSize","pos":[0,17]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the collection has a fixed size; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[25387,25492],"source":"\\n<p>\\n<strong>true</strong> if the collection has a fixed size; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[26135,26151],"content":"IList.IsReadOnly","needQuote":true,"nodes":[{"content":"IList.IsReadOnly","pos":[0,16]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the collection is read-only; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[27057,27158],"source":"\\n<p>\\n<strong>true</strong> if the collection is read-only; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[27830,27850],"content":"IList.Remove(Object)","needQuote":true,"nodes":[{"content":"IList.Remove(Object)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The collection is read-only.&lt;/p&gt;\\n","pos":[28984,29023],"source":"\\n<p>The collection is read-only.</p>\\n"},{"pos":[29652,29669],"content":"IList.Item[Int32]","needQuote":true,"nodes":[{"content":"IList.Item[Int32]","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The zero-based index of the element to get or set.&lt;/p&gt;\\n","pos":[30583,30644],"source":"\\n<p>The zero-based index of the element to get or set.</p>\\n"},{"content":"\\n&lt;p&gt;The element at the specified index.&lt;/p&gt;\\n","pos":[30704,30750],"source":"\\n<p>The element at the specified index.</p>\\n"},{"content":"\\n&lt;p&gt;The collection is read-only.&lt;/p&gt;\\n","pos":[30869,30908],"source":"\\n<p>The collection is read-only.</p>\\n"},{"pos":[31915,31926],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"pos":[34291,34303],"content":"Item[String]","needQuote":true,"nodes":[{"content":"Item[String]","pos":[0,12]}]},{"pos":[36456,36476],"content":"Add(EventDescriptor)","needQuote":true,"nodes":[{"content":"Add(EventDescriptor)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The collection is read-only.&lt;/p&gt;\\n","pos":[37882,37921],"source":"\\n<p>The collection is read-only.</p>\\n"},{"pos":[38279,38286],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"content":"\\n&lt;p&gt;The collection is read-only.&lt;/p&gt;\\n","pos":[39054,39093],"source":"\\n<p>The collection is read-only.</p>\\n"},{"pos":[39613,39638],"content":"Contains(EventDescriptor)","needQuote":true,"nodes":[{"content":"Contains(EventDescriptor)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the collection contains the &lt;em&gt;value&lt;/em&gt; parameter given; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[40816,40948],"source":"\\n<p>\\n<strong>true</strong> if the collection contains the <em>value</em> parameter given; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[41398,41419],"content":"Find(String, Boolean)","needQuote":true,"nodes":[{"content":"Find(String, Boolean)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The name of the event to get from the collection.","pos":[42330,42384],"source":"\\n<p>The name of the event to get from the collection."},{"content":"&lt;/p&gt;\\n","pos":[42385,42391],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if you want to ignore the case of the event; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[42461,42569],"source":"\\n<p>\\n<strong>true</strong> if you want to ignore the case of the event; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[42570,42576],"source":" </p>\\n"},{"pos":[43477,43492],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[45348,45372],"content":"IndexOf(EventDescriptor)","needQuote":true,"nodes":[{"content":"IndexOf(EventDescriptor)","pos":[0,24]}]},{"pos":[47199,47229],"content":"Insert(Int32, EventDescriptor)","needQuote":true,"nodes":[{"content":"Insert(Int32, EventDescriptor)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The index within the collection in which to insert the &lt;em&gt;value&lt;/em&gt; parameter.","pos":[48196,48281],"source":"\\n<p>The index within the collection in which to insert the <em>value</em> parameter."},{"content":"&lt;/p&gt;\\n","pos":[48282,48288],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The collection is read-only.&lt;/p&gt;\\n","pos":[48638,48677],"source":"\\n<p>The collection is read-only.</p>\\n"},{"pos":[49156,49179],"content":"InternalSort(IComparer)","needQuote":true,"nodes":[{"content":"InternalSort(IComparer)","pos":[0,23]}]},{"pos":[50929,50951],"content":"InternalSort(String[])","needQuote":true,"nodes":[{"content":"InternalSort(String[])","pos":[0,22]}]},{"pos":[52953,52976],"content":"Remove(EventDescriptor)","needQuote":true,"nodes":[{"content":"Remove(EventDescriptor)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The collection is read-only.&lt;/p&gt;\\n","pos":[54180,54219],"source":"\\n<p>The collection is read-only.</p>\\n"},{"pos":[54631,54646],"content":"RemoveAt(Int32)","needQuote":true,"nodes":[{"content":"RemoveAt(Int32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The collection is read-only.&lt;/p&gt;\\n","pos":[55794,55833],"source":"\\n<p>The collection is read-only.</p>\\n"},{"pos":[56249,56255],"content":"Sort()","needQuote":true,"nodes":[{"content":"Sort()","pos":[0,6]}]},{"pos":[57824,57839],"content":"Sort(IComparer)","needQuote":true,"nodes":[{"content":"Sort(IComparer)","pos":[0,15]}]},{"pos":[59924,59938],"content":"Sort(String[])","needQuote":true,"nodes":[{"content":"Sort(String[])","pos":[0,14]}]},{"pos":[62113,62138],"content":"Sort(String[], IComparer)","needQuote":true,"nodes":[{"content":"Sort(String[], IComparer)","pos":[0,25]}]},{"pos":[64931,64963],"content":"ICollection.CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"ICollection.CopyTo(Array, Int32)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The zero-based index in &lt;em&gt;array&lt;/em&gt; at which copying begins.&lt;/p&gt;\\n","pos":[66418,66492],"source":"\\n<p>The zero-based index in <em>array</em> at which copying begins.</p>\\n"},{"pos":[66881,66902],"content":"System.ComponentModel","needQuote":true,"nodes":[{"content":"System.ComponentModel","pos":[0,21]}]},{"pos":[67078,67084],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[67252,67257],"content":"IList","needQuote":true,"nodes":[{"content":"IList","pos":[0,5]}]},{"pos":[67452,67463],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[67676,67687],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[67886,67896],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[67991,67999],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[68068,68069],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68096,68097],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68167,68175],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[68244,68245],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68272,68273],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68456,68470],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[68589,68595],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[68662,68663],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68713,68719],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[68779,68780],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68863,68869],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[68936,68937],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68987,68993],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[69053,69054],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69268,69290],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[69438,69444],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[69511,69512],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69562,69568],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[69629,69630]},{"pos":[69685,69691],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[69751,69752],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69849,69855],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[69922,69923],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69973,69979],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[70040,70041]},{"pos":[70096,70102],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[70162,70163],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70408,70439],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[70605,70620],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[70696,70697],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70747,70753],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[70814,70815]},{"pos":[70870,70876],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[70936,70937],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71043,71058],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[71134,71135],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71185,71191],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[71252,71253]},{"pos":[71308,71314],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[71374,71375],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71605,71618],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[71719,71730],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[71802,71803],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71830,71831],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71904,71915],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[71987,71988],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72015,72016],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72191,72200],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[72293,72300],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[72368,72369],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72396,72397],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72466,72473],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[72541,72542],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72569,72570],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72745,72762],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[72871,72886],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[72962,72963],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72990,72991],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73068,73083],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[73159,73160],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73187,73188],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73483,73496],"content":"AsQueryable()","needQuote":true,"nodes":[{"content":"AsQueryable()","pos":[0,13]}]},{"pos":[73613,73624],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[73683,73684],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73711,73712],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73793,73804],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[73863,73864],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73891,73892],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74247,74259],"content":"AsParallel()","needQuote":true,"nodes":[{"content":"AsParallel()","pos":[0,12]}]},{"pos":[74392,74402],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[74469,74470],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74497,74498],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74587,74597],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[74664,74665],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74692,74693],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75034,75049],"content":"Cast<TResult>()","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;()","pos":[0,15],"source":"Cast<TResult>()"}]},{"pos":[75253,75266],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[75328,75329],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75356,75357],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75435,75451],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[75516,75517],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75544,75545],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75923,75940],"content":"OfType<TResult>()","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;()","pos":[0,17],"source":"OfType<TResult>()"}]},{"pos":[76152,76167],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[76231,76232],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76259,76260],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76340,76358],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[76425,76426],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76453,76454],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76689,76695],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[76814,76832],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[77033,77057],"content":"AsQueryable(IEnumerable)","needQuote":true,"nodes":[{"content":"AsQueryable(IEnumerable)","pos":[0,24]}]},{"pos":[77236,77247],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[77306,77307],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77374,77385],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[77462,77463],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77576,77587],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[77646,77647],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77714,77725],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[77802,77803],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78031,78040],"content":"Queryable","needQuote":true,"nodes":[{"content":"Queryable","pos":[0,9]}]},{"pos":[78246,78269],"content":"AsParallel(IEnumerable)","needQuote":true,"nodes":[{"content":"AsParallel(IEnumerable)","pos":[0,23]}]},{"pos":[78464,78474],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[78541,78542],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78609,78620],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[78697,78698],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78819,78829],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[78896,78897],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78964,78975],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[79052,79053],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79306,79324],"content":"ParallelEnumerable","needQuote":true,"nodes":[{"content":"ParallelEnumerable","pos":[0,18]}]},{"pos":[79546,79572],"content":"Cast<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;(IEnumerable)","pos":[0,26],"source":"Cast<TResult>(IEnumerable)"}]},{"pos":[79879,79892],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[79954,79955],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80022,80033],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[80110,80111],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80221,80237],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[80302,80303],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80370,80381],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[80458,80459],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80748,80758],"content":"Enumerable","needQuote":true,"nodes":[{"content":"Enumerable","pos":[0,10]}]},{"pos":[80958,80986],"content":"OfType<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;(IEnumerable)","pos":[0,28],"source":"OfType<TResult>(IEnumerable)"}]},{"pos":[81301,81316],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[81380,81381],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81448,81459],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[81536,81537],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81649,81667],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[81734,81735],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81802,81813],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[81890,81891],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82153,82164],"content":"System.Linq","needQuote":true,"nodes":[{"content":"System.Linq","pos":[0,11]}]},{"pos":[82359,82384],"content":"EventDescriptorCollection","needQuote":true,"nodes":[{"content":"EventDescriptorCollection","pos":[0,25]}]},{"pos":[82605,82622],"content":"EventDescriptor[]","needQuote":true,"nodes":[{"content":"EventDescriptor[]","pos":[0,17]}]},{"pos":[82831,82846],"content":"EventDescriptor","needQuote":true,"nodes":[{"content":"EventDescriptor","pos":[0,15]}]},{"content":"[]","pos":[82910,82912]},{"pos":[83001,83016],"content":"EventDescriptor","needQuote":true,"nodes":[{"content":"EventDescriptor","pos":[0,15]}]},{"pos":[83079,83081],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[83237,83244],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[83439,83450],"content":"Add(Object)","needQuote":true,"nodes":[{"content":"Add(Object)","pos":[0,11]}]},{"pos":[83585,83588],"content":"Add","needQuote":true,"nodes":[{"content":"Add","pos":[0,3]}]},{"pos":[83642,83643],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83693,83699],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[83759,83760],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83851,83854],"content":"Add","needQuote":true,"nodes":[{"content":"Add","pos":[0,3]}]},{"pos":[83908,83909],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83959,83965],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[84025,84026],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84201,84206],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[84400,84416],"content":"Contains(Object)","needQuote":true,"nodes":[{"content":"Contains(Object)","pos":[0,16]}]},{"pos":[84561,84569],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[84628,84629],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[84679,84685],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[84745,84746],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84842,84850],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[84909,84910],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[84960,84966],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[85026,85027],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[85260,85265],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[85518,85533],"content":"IndexOf(Object)","needQuote":true,"nodes":[{"content":"IndexOf(Object)","pos":[0,15]}]},{"pos":[85676,85683],"content":"IndexOf","needQuote":true,"nodes":[{"content":"IndexOf","pos":[0,7]}]},{"pos":[85741,85742],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[85792,85798],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[85858,85859],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[85954,85961],"content":"IndexOf","needQuote":true,"nodes":[{"content":"IndexOf","pos":[0,7]}]},{"pos":[86019,86020],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[86070,86076],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[86136,86137],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[86384,86405],"content":"Insert(Int32, Object)","needQuote":true,"nodes":[{"content":"Insert(Int32, Object)","pos":[0,21]}]},{"pos":[86573,86579],"content":"Insert","needQuote":true,"nodes":[{"content":"Insert","pos":[0,6]}]},{"pos":[86636,86637],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[86686,86691],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[86751,86752]},{"pos":[86807,86813],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[86873,86874],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[86981,86987],"content":"Insert","needQuote":true,"nodes":[{"content":"Insert","pos":[0,6]}]},{"pos":[87044,87045],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[87094,87099],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[87159,87160]},{"pos":[87215,87221],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[87281,87282],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87540,87554],"content":"IsSynchronized","needQuote":true,"nodes":[{"content":"IsSynchronized","pos":[0,14]}]},{"pos":[87833,87841],"content":"SyncRoot","needQuote":true,"nodes":[{"content":"SyncRoot","pos":[0,8]}]},{"pos":[88093,88104],"content":"IsFixedSize","needQuote":true,"nodes":[{"content":"IsFixedSize","pos":[0,11]}]},{"pos":[88346,88356],"content":"IsReadOnly","needQuote":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[88605,88619],"content":"Remove(Object)","needQuote":true,"nodes":[{"content":"Remove(Object)","pos":[0,14]}]},{"pos":[88760,88766],"content":"Remove","needQuote":true,"nodes":[{"content":"Remove","pos":[0,6]}]},{"pos":[88823,88824],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[88874,88880],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[88940,88941],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[89035,89041],"content":"Remove","needQuote":true,"nodes":[{"content":"Remove","pos":[0,6]}]},{"pos":[89098,89099],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[89149,89155],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[89215,89216],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[89445,89456],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"pos":[89673,89677],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"content":"[","pos":[89733,89734]},{"pos":[89786,89791],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":"]","pos":[89851,89852]},{"pos":[89946,89950],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"pos":[90005,90006],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[90055,90060],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[90119,90120],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[90372,90387],"content":"EventDescriptor","needQuote":true,"nodes":[{"content":"EventDescriptor","pos":[0,15]}]},{"pos":[90589,90595],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[90775,90782],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[90893,90898],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[90954,90955],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[90982,90983],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[91061,91066],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[91122,91123],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[91150,91151],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[91365,91380],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[91519,91532],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[91602,91603],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[91630,91631],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[91723,91736],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[91806,91807],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[91834,91835],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[92051,92062],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[92273,92282],"content":"IComparer","needQuote":true,"nodes":[{"content":"IComparer","pos":[0,9]}]},{"pos":[92425,92433],"content":"String[]","needQuote":true,"nodes":[{"content":"String[]","pos":[0,8]}]},{"pos":[92561,92567],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":"[]","pos":[92628,92630]},{"pos":[92695,92701],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[92761,92763],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[92951,92966],"content":"RemoveAt(Int32)","needQuote":true,"nodes":[{"content":"RemoveAt(Int32)","pos":[0,15]}]},{"pos":[93109,93117],"content":"RemoveAt","needQuote":true,"nodes":[{"content":"RemoveAt","pos":[0,8]}]},{"pos":[93176,93177],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[93226,93231],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[93290,93291],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[93386,93394],"content":"RemoveAt","needQuote":true,"nodes":[{"content":"RemoveAt","pos":[0,8]}]},{"pos":[93453,93454],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[93503,93508],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[93567,93568],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[93826,93846],"content":"CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"CopyTo(Array, Int32)","pos":[0,20]}]},{"pos":[94024,94030],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[94093,94094],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[94143,94148],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[94187,94188]},{"pos":[94242,94247],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[94306,94307],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[94419,94425],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[94488,94489],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[94538,94543],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[94582,94583]},{"pos":[94637,94642],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[94701,94702],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[94913,94918],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"pos":[95075,95096],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]},{"pos":[95287,95311],"content":"IndexOutOfRangeException","needQuote":true,"nodes":[{"content":"IndexOutOfRangeException","pos":[0,24]}]}],"content":"items:\n- uid: System.ComponentModel.EventDescriptorCollection\n  commentId: T:System.ComponentModel.EventDescriptorCollection\n  id: EventDescriptorCollection\n  parent: System.ComponentModel\n  children:\n  - System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[])\n  - System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[],System.Boolean)\n  - System.ComponentModel.EventDescriptorCollection.Add(System.ComponentModel.EventDescriptor)\n  - System.ComponentModel.EventDescriptorCollection.Clear\n  - System.ComponentModel.EventDescriptorCollection.Contains(System.ComponentModel.EventDescriptor)\n  - System.ComponentModel.EventDescriptorCollection.Count\n  - System.ComponentModel.EventDescriptorCollection.Empty\n  - System.ComponentModel.EventDescriptorCollection.Find(System.String,System.Boolean)\n  - System.ComponentModel.EventDescriptorCollection.GetEnumerator\n  - System.ComponentModel.EventDescriptorCollection.IndexOf(System.ComponentModel.EventDescriptor)\n  - System.ComponentModel.EventDescriptorCollection.Insert(System.Int32,System.ComponentModel.EventDescriptor)\n  - System.ComponentModel.EventDescriptorCollection.InternalSort(System.Collections.IComparer)\n  - System.ComponentModel.EventDescriptorCollection.InternalSort(System.String[])\n  - System.ComponentModel.EventDescriptorCollection.Item(System.Int32)\n  - System.ComponentModel.EventDescriptorCollection.Item(System.String)\n  - System.ComponentModel.EventDescriptorCollection.Remove(System.ComponentModel.EventDescriptor)\n  - System.ComponentModel.EventDescriptorCollection.RemoveAt(System.Int32)\n  - System.ComponentModel.EventDescriptorCollection.Sort\n  - System.ComponentModel.EventDescriptorCollection.Sort(System.Collections.IComparer)\n  - System.ComponentModel.EventDescriptorCollection.Sort(System.String[])\n  - System.ComponentModel.EventDescriptorCollection.Sort(System.String[],System.Collections.IComparer)\n  - System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#IsSynchronized\n  - System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#SyncRoot\n  - System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Add(System.Object)\n  - System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Contains(System.Object)\n  - System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IndexOf(System.Object)\n  - System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)\n  - System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsFixedSize\n  - System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsReadOnly\n  - System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Item(System.Int32)\n  - System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Remove(System.Object)\n  langs:\n  - csharp\n  - vb\n  name: EventDescriptorCollection\n  fullName: System.ComponentModel.EventDescriptorCollection\n  type: Class\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: EventDescriptorCollection\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n    startLine: 16\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Represents a collection of <xref href=\\\"System.ComponentModel.EventDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects.</p>\\n\"\n  syntax:\n    content: 'public class EventDescriptorCollection : IList, ICollection, IEnumerable'\n    content.vb: >-\n      Public Class EventDescriptorCollection\n          Implements IList, ICollection, IEnumerable\n  seealso:\n  - type: System.ComponentModel.EventDescriptor\n    commentId: T:System.ComponentModel.EventDescriptor\n  - type: System.ComponentModel.TypeDescriptor\n    commentId: T:System.ComponentModel.TypeDescriptor\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.IList\n  - System.Collections.ICollection\n  - System.Collections.IEnumerable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: EventDescriptorCollection\n  extensionMethods:\n  - System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  - System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  - System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  - System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n- uid: System.ComponentModel.EventDescriptorCollection.Empty\n  commentId: F:System.ComponentModel.EventDescriptorCollection.Empty\n  id: Empty\n  parent: System.ComponentModel.EventDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: Empty\n  fullName: System.ComponentModel.EventDescriptorCollection.Empty\n  type: Field\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Empty\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n    startLine: 29\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Specifies an empty collection to use, rather than creating a new one with no items. This <strong>static</strong> field is read-only.</p>\\n\"\n  syntax:\n    content: public static readonly EventDescriptorCollection Empty\n    content.vb: Public Shared ReadOnly Empty As EventDescriptorCollection\n    return:\n      type: System.ComponentModel.EventDescriptorCollection\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: EventDescriptorCollection.Empty\n- uid: System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[])\n  commentId: M:System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[])\n  id: '#ctor(System.ComponentModel.EventDescriptor[])'\n  parent: System.ComponentModel.EventDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: EventDescriptorCollection(EventDescriptor[])\n  fullName: System.ComponentModel.EventDescriptorCollection.EventDescriptorCollection(System.ComponentModel.EventDescriptor[])\n  type: Constructor\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n    startLine: 36\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.ComponentModel.EventDescriptorCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the given array of <xref href=\\\"System.ComponentModel.EventDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects.</p>\\n\"\n  syntax:\n    content: public EventDescriptorCollection(EventDescriptor[] events)\n    content.vb: Public Sub New(events As EventDescriptor())\n    parameters:\n    - id: events\n      type: System.ComponentModel.EventDescriptor[]\n      description: \"\\n<p>An array of type <xref href=\\\"System.ComponentModel.EventDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that provides the events for this collection. </p>\\n\"\n  seealso:\n  - type: System.ComponentModel.EventDescriptor\n    commentId: T:System.ComponentModel.EventDescriptor\n  - type: System.ComponentModel.TypeDescriptor\n    commentId: T:System.ComponentModel.TypeDescriptor\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.ComponentModel.EventDescriptorCollection.EventDescriptorCollection(System.ComponentModel.EventDescriptor())\n  name.vb: EventDescriptorCollection(EventDescriptor())\n  nameWithType: EventDescriptorCollection.EventDescriptorCollection(EventDescriptor[])\n  nameWithType.vb: EventDescriptorCollection.EventDescriptorCollection(EventDescriptor())\n- uid: System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[],System.Boolean)\n  commentId: M:System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[],System.Boolean)\n  id: '#ctor(System.ComponentModel.EventDescriptor[],System.Boolean)'\n  parent: System.ComponentModel.EventDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: EventDescriptorCollection(EventDescriptor[], Boolean)\n  fullName: System.ComponentModel.EventDescriptorCollection.EventDescriptorCollection(System.ComponentModel.EventDescriptor[], System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n    startLine: 55\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.ComponentModel.EventDescriptorCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the given array of <xref href=\\\"System.ComponentModel.EventDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects. The collection is optionally read-only.</p>\\n\"\n  syntax:\n    content: public EventDescriptorCollection(EventDescriptor[] events, bool readOnly)\n    content.vb: Public Sub New(events As EventDescriptor(), readOnly As Boolean)\n    parameters:\n    - id: events\n      type: System.ComponentModel.EventDescriptor[]\n      description: \"\\n<p>An array of type <xref href=\\\"System.ComponentModel.EventDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that provides the events for this collection. </p>\\n\"\n    - id: readOnly\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to specify a read-only collection; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.EventDescriptor\n    commentId: T:System.ComponentModel.EventDescriptor\n  - type: System.ComponentModel.TypeDescriptor\n    commentId: T:System.ComponentModel.TypeDescriptor\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.ComponentModel.EventDescriptorCollection.EventDescriptorCollection(System.ComponentModel.EventDescriptor(), System.Boolean)\n  name.vb: EventDescriptorCollection(EventDescriptor(), Boolean)\n  nameWithType: EventDescriptorCollection.EventDescriptorCollection(EventDescriptor[], Boolean)\n  nameWithType.vb: EventDescriptorCollection.EventDescriptorCollection(EventDescriptor(), Boolean)\n- uid: System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Add(System.Object)\n  commentId: M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Add(System.Object)\n  id: System#Collections#IList#Add(System.Object)\n  isEii: true\n  parent: System.ComponentModel.EventDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: IList.Add(Object)\n  fullName: System.ComponentModel.EventDescriptorCollection.System.Collections.IList.Add(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IList.Add\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n    startLine: 480\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Adds an item to the collection.</p>\\n\"\n  syntax:\n    content: int IList.Add(object value)\n    content.vb: Function System.Collections.IList.Add(value As Object) As Integer Implements IList.Add\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to add to the collection.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The position into which the new element was inserted.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The collection is read-only.</p>\\n\"\n  implements:\n  - System.Collections.IList.Add(System.Object)\n  name.vb: System.Collections.IList.Add(Object)\n  nameWithType: EventDescriptorCollection.IList.Add(Object)\n  nameWithType.vb: EventDescriptorCollection.System.Collections.IList.Add(Object)\n- uid: System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Contains(System.Object)\n  commentId: M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Contains(System.Object)\n  id: System#Collections#IList#Contains(System.Object)\n  isEii: true\n  parent: System.ComponentModel.EventDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: IList.Contains(Object)\n  fullName: System.ComponentModel.EventDescriptorCollection.System.Collections.IList.Contains(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IList.Contains\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n    startLine: 486\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Determines whether the collection contains a specific value.</p>\\n\"\n  syntax:\n    content: bool IList.Contains(object value)\n    content.vb: Function System.Collections.IList.Contains(value As Object) As Boolean Implements IList.Contains\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to locate in the collection.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is found in the collection; otherwise, <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Collections.IList.Contains(System.Object)\n  name.vb: System.Collections.IList.Contains(Object)\n  nameWithType: EventDescriptorCollection.IList.Contains(Object)\n  nameWithType.vb: EventDescriptorCollection.System.Collections.IList.Contains(Object)\n- uid: System.ComponentModel.EventDescriptorCollection.Count\n  commentId: P:System.ComponentModel.EventDescriptorCollection.Count\n  id: Count\n  parent: System.ComponentModel.EventDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: Count\n  fullName: System.ComponentModel.EventDescriptorCollection.Count\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Count\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n    startLine: 79\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets the number of event descriptors in the collection.</p>\\n\"\n  syntax:\n    content: public int Count { get; }\n    content.vb: Public ReadOnly Property Count As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of event descriptors in the collection.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.EventDescriptor\n    commentId: T:System.ComponentModel.EventDescriptor\n  - type: System.ComponentModel.TypeDescriptor\n    commentId: T:System.ComponentModel.TypeDescriptor\n  implements:\n  - System.Collections.ICollection.Count\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: EventDescriptorCollection.Count\n- uid: System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IndexOf(System.Object)\n  commentId: M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IndexOf(System.Object)\n  id: System#Collections#IList#IndexOf(System.Object)\n  isEii: true\n  parent: System.ComponentModel.EventDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: IList.IndexOf(Object)\n  fullName: System.ComponentModel.EventDescriptorCollection.System.Collections.IList.IndexOf(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IList.IndexOf\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n    startLine: 492\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Determines the index of a specific item in the collection.</p>\\n\"\n  syntax:\n    content: int IList.IndexOf(object value)\n    content.vb: Function System.Collections.IList.IndexOf(value As Object) As Integer Implements IList.IndexOf\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to locate in the collection.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The index of <em>value</em> if found in the list; otherwise, -1.</p>\\n\"\n  implements:\n  - System.Collections.IList.IndexOf(System.Object)\n  name.vb: System.Collections.IList.IndexOf(Object)\n  nameWithType: EventDescriptorCollection.IList.IndexOf(Object)\n  nameWithType.vb: EventDescriptorCollection.System.Collections.IList.IndexOf(Object)\n- uid: System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)\n  commentId: M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)\n  id: System#Collections#IList#Insert(System.Int32,System.Object)\n  isEii: true\n  parent: System.ComponentModel.EventDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: IList.Insert(Int32, Object)\n  fullName: System.ComponentModel.EventDescriptorCollection.System.Collections.IList.Insert(System.Int32, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IList.Insert\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n    startLine: 498\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Inserts an item to the collection at the specified index.</p>\\n\"\n  syntax:\n    content: void IList.Insert(int index, object value)\n    content.vb: Sub System.Collections.IList.Insert(index As Integer, value As Object) Implements IList.Insert\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index at which <em>value</em> should be inserted.</p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to insert into the collection.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The collection is read-only.</p>\\n\"\n  implements:\n  - System.Collections.IList.Insert(System.Int32,System.Object)\n  name.vb: System.Collections.IList.Insert(Int32, Object)\n  nameWithType: EventDescriptorCollection.IList.Insert(Int32, Object)\n  nameWithType.vb: EventDescriptorCollection.System.Collections.IList.Insert(Int32, Object)\n- uid: System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#IsSynchronized\n  commentId: P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#IsSynchronized\n  id: System#Collections#ICollection#IsSynchronized\n  isEii: true\n  parent: System.ComponentModel.EventDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: ICollection.IsSynchronized\n  fullName: System.ComponentModel.EventDescriptorCollection.System.Collections.ICollection.IsSynchronized\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.ICollection.IsSynchronized\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n    startLine: 439\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets a value indicating whether access to the collection is synchronized.</p>\\n\"\n  syntax:\n    content: bool ICollection.IsSynchronized { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.IsSynchronized As Boolean Implements ICollection.IsSynchronized\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if access to the collection is synchronized; otherwise, <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Collections.ICollection.IsSynchronized\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.ICollection.IsSynchronized\n  nameWithType: EventDescriptorCollection.ICollection.IsSynchronized\n  nameWithType.vb: EventDescriptorCollection.System.Collections.ICollection.IsSynchronized\n- uid: System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#SyncRoot\n  commentId: P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#SyncRoot\n  id: System#Collections#ICollection#SyncRoot\n  isEii: true\n  parent: System.ComponentModel.EventDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: ICollection.SyncRoot\n  fullName: System.ComponentModel.EventDescriptorCollection.System.Collections.ICollection.SyncRoot\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.ICollection.SyncRoot\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n    startLine: 448\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets an object that can be used to synchronize access to the collection.</p>\\n\"\n  syntax:\n    content: object ICollection.SyncRoot { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.SyncRoot As Object Implements ICollection.SyncRoot\n    parameters: []\n    return:\n      type: System.Object\n      description: \"\\n<p>An object that can be used to synchronize access to the collection.</p>\\n\"\n  implements:\n  - System.Collections.ICollection.SyncRoot\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.ICollection.SyncRoot\n  nameWithType: EventDescriptorCollection.ICollection.SyncRoot\n  nameWithType.vb: EventDescriptorCollection.System.Collections.ICollection.SyncRoot\n- uid: System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsFixedSize\n  commentId: P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsFixedSize\n  id: System#Collections#IList#IsFixedSize\n  isEii: true\n  parent: System.ComponentModel.EventDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: IList.IsFixedSize\n  fullName: System.ComponentModel.EventDescriptorCollection.System.Collections.IList.IsFixedSize\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IList.IsFixedSize\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n    startLine: 519\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets a value indicating whether the collection has a fixed size.</p>\\n\"\n  syntax:\n    content: bool IList.IsFixedSize { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.IList.IsFixedSize As Boolean Implements IList.IsFixedSize\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the collection has a fixed size; otherwise, <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Collections.IList.IsFixedSize\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.IList.IsFixedSize\n  nameWithType: EventDescriptorCollection.IList.IsFixedSize\n  nameWithType.vb: EventDescriptorCollection.System.Collections.IList.IsFixedSize\n- uid: System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsReadOnly\n  commentId: P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsReadOnly\n  id: System#Collections#IList#IsReadOnly\n  isEii: true\n  parent: System.ComponentModel.EventDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: IList.IsReadOnly\n  fullName: System.ComponentModel.EventDescriptorCollection.System.Collections.IList.IsReadOnly\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IList.IsReadOnly\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n    startLine: 510\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets a value indicating whether the collection is read-only.</p>\\n\"\n  syntax:\n    content: bool IList.IsReadOnly { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.IList.IsReadOnly As Boolean Implements IList.IsReadOnly\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the collection is read-only; otherwise, <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Collections.IList.IsReadOnly\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.IList.IsReadOnly\n  nameWithType: EventDescriptorCollection.IList.IsReadOnly\n  nameWithType.vb: EventDescriptorCollection.System.Collections.IList.IsReadOnly\n- uid: System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Remove(System.Object)\n  commentId: M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Remove(System.Object)\n  id: System#Collections#IList#Remove(System.Object)\n  isEii: true\n  parent: System.ComponentModel.EventDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: IList.Remove(Object)\n  fullName: System.ComponentModel.EventDescriptorCollection.System.Collections.IList.Remove(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IList.Remove\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n    startLine: 504\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Removes the first occurrence of a specific object from the collection.</p>\\n\"\n  syntax:\n    content: void IList.Remove(object value)\n    content.vb: Sub System.Collections.IList.Remove(value As Object) Implements IList.Remove\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to remove from the collection.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The collection is read-only.</p>\\n\"\n  implements:\n  - System.Collections.IList.Remove(System.Object)\n  name.vb: System.Collections.IList.Remove(Object)\n  nameWithType: EventDescriptorCollection.IList.Remove(Object)\n  nameWithType.vb: EventDescriptorCollection.System.Collections.IList.Remove(Object)\n- uid: System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Item(System.Int32)\n  commentId: P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Item(System.Int32)\n  id: System#Collections#IList#Item(System.Int32)\n  isEii: true\n  parent: System.ComponentModel.EventDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: IList.Item[Int32]\n  fullName: System.ComponentModel.EventDescriptorCollection.System.Collections.IList.Item[System.Int32]\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IList.this[]\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n    startLine: 457\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets or sets the element at the specified index.</p>\\n\"\n  syntax:\n    content: object IList.this[int index] { get; set; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.IList.Item(index As Integer) As Object Implements IList.this\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the element to get or set.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The element at the specified index.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The collection is read-only.</p>\\n\"\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than 0. </p>\\n<p>-or-</p>\\n<p>\\n<em>index</em> is equal to or greater than <xref href=\\\"System.ComponentModel.EventDescriptorCollection.Count\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.Collections.IList.Item(System.Int32)\n  modifiers.csharp:\n  - get\n  - set\n  fullName.vb: System.ComponentModel.EventDescriptorCollection.System.Collections.IList.Item(System.Int32)\n  name.vb: System.Collections.IList.Item(Int32)\n  nameWithType: EventDescriptorCollection.IList.Item[Int32]\n  nameWithType.vb: EventDescriptorCollection.System.Collections.IList.Item(Int32)\n- uid: System.ComponentModel.EventDescriptorCollection.Item(System.Int32)\n  commentId: P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.ComponentModel.EventDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: Item[Int32]\n  fullName: System.ComponentModel.EventDescriptorCollection.Item[System.Int32]\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: this[]\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n    startLine: 91\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets or sets the event with the specified index number.</p>\\n\"\n  syntax:\n    content: public virtual EventDescriptor this[int index] { get; }\n    content.vb: Public Overridable ReadOnly Property Item(index As Integer) As EventDescriptor\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index number of the <xref href=\\\"System.ComponentModel.EventDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to get or set. </p>\\n\"\n    return:\n      type: System.ComponentModel.EventDescriptor\n      description: \"\\n<p>The <xref href=\\\"System.ComponentModel.EventDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the specified index number.</p>\\n\"\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is not a valid index for <xref href=\\\"System.ComponentModel.EventDescriptorCollection.Item(System.Int32)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.ComponentModel.EventDescriptor\n    commentId: T:System.ComponentModel.EventDescriptor\n  - type: System.ComponentModel.TypeDescriptor\n    commentId: T:System.ComponentModel.TypeDescriptor\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  fullName.vb: System.ComponentModel.EventDescriptorCollection.Item(System.Int32)\n  name.vb: Item(Int32)\n  nameWithType: EventDescriptorCollection.Item[Int32]\n  nameWithType.vb: EventDescriptorCollection.Item(Int32)\n- uid: System.ComponentModel.EventDescriptorCollection.Item(System.String)\n  commentId: P:System.ComponentModel.EventDescriptorCollection.Item(System.String)\n  id: Item(System.String)\n  parent: System.ComponentModel.EventDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: Item[String]\n  fullName: System.ComponentModel.EventDescriptorCollection.Item[System.String]\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: this[]\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n    startLine: 109\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets or sets the event with the specified name.</p>\\n\"\n  syntax:\n    content: public virtual EventDescriptor this[string name] { get; }\n    content.vb: Public Overridable ReadOnly Property Item(name As String) As EventDescriptor\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the <xref href=\\\"System.ComponentModel.EventDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to get or set. </p>\\n\"\n    return:\n      type: System.ComponentModel.EventDescriptor\n      description: \"\\n<p>The <xref href=\\\"System.ComponentModel.EventDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the specified name, or <strong>null</strong> if the event does not exist.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.EventDescriptor\n    commentId: T:System.ComponentModel.EventDescriptor\n  - type: System.ComponentModel.TypeDescriptor\n    commentId: T:System.ComponentModel.TypeDescriptor\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  fullName.vb: System.ComponentModel.EventDescriptorCollection.Item(System.String)\n  name.vb: Item(String)\n  nameWithType: EventDescriptorCollection.Item[String]\n  nameWithType.vb: EventDescriptorCollection.Item(String)\n- uid: System.ComponentModel.EventDescriptorCollection.Add(System.ComponentModel.EventDescriptor)\n  commentId: M:System.ComponentModel.EventDescriptorCollection.Add(System.ComponentModel.EventDescriptor)\n  id: Add(System.ComponentModel.EventDescriptor)\n  parent: System.ComponentModel.EventDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: Add(EventDescriptor)\n  fullName: System.ComponentModel.EventDescriptorCollection.Add(System.ComponentModel.EventDescriptor)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Add\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n    startLine: 120\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Adds an <xref href=\\\"System.ComponentModel.EventDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to the end of the collection.</p>\\n\"\n  syntax:\n    content: public int Add(EventDescriptor value)\n    content.vb: Public Function Add(value As EventDescriptor) As Integer\n    parameters:\n    - id: value\n      type: System.ComponentModel.EventDescriptor\n      description: \"\\n<p>An <xref href=\\\"System.ComponentModel.EventDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to add to the collection. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The position of the <xref href=\\\"System.ComponentModel.EventDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> within the collection.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The collection is read-only.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: EventDescriptorCollection.Add(EventDescriptor)\n- uid: System.ComponentModel.EventDescriptorCollection.Clear\n  commentId: M:System.ComponentModel.EventDescriptorCollection.Clear\n  id: Clear\n  parent: System.ComponentModel.EventDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: Clear()\n  fullName: System.ComponentModel.EventDescriptorCollection.Clear()\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Clear\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n    startLine: 135\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Removes all objects from the collection.</p>\\n\"\n  syntax:\n    content: public void Clear()\n    content.vb: Public Sub Clear\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The collection is read-only.</p>\\n\"\n  implements:\n  - System.Collections.IList.Clear\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: EventDescriptorCollection.Clear()\n- uid: System.ComponentModel.EventDescriptorCollection.Contains(System.ComponentModel.EventDescriptor)\n  commentId: M:System.ComponentModel.EventDescriptorCollection.Contains(System.ComponentModel.EventDescriptor)\n  id: Contains(System.ComponentModel.EventDescriptor)\n  parent: System.ComponentModel.EventDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: Contains(EventDescriptor)\n  fullName: System.ComponentModel.EventDescriptorCollection.Contains(System.ComponentModel.EventDescriptor)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Contains\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n    startLine: 148\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Returns whether the collection contains the given <xref href=\\\"System.ComponentModel.EventDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public bool Contains(EventDescriptor value)\n    content.vb: Public Function Contains(value As EventDescriptor) As Boolean\n    parameters:\n    - id: value\n      type: System.ComponentModel.EventDescriptor\n      description: \"\\n<p>The <xref href=\\\"System.ComponentModel.EventDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to find within the collection. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the collection contains the <em>value</em> parameter given; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: EventDescriptorCollection.Contains(EventDescriptor)\n- uid: System.ComponentModel.EventDescriptorCollection.Find(System.String,System.Boolean)\n  commentId: M:System.ComponentModel.EventDescriptorCollection.Find(System.String,System.Boolean)\n  id: Find(System.String,System.Boolean)\n  parent: System.ComponentModel.EventDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: Find(String, Boolean)\n  fullName: System.ComponentModel.EventDescriptorCollection.Find(System.String, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Find\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n    startLine: 209\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets the description of the event with the specified name in the collection.</p>\\n\"\n  syntax:\n    content: public virtual EventDescriptor Find(string name, bool ignoreCase)\n    content.vb: Public Overridable Function Find(name As String, ignoreCase As Boolean) As EventDescriptor\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the event to get from the collection. </p>\\n\"\n    - id: ignoreCase\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if you want to ignore the case of the event; otherwise, <strong>false</strong>. </p>\\n\"\n    return:\n      type: System.ComponentModel.EventDescriptor\n      description: \"\\n<p>The <xref href=\\\"System.ComponentModel.EventDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the specified name, or <strong>null</strong> if the event does not exist.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.EventDescriptor\n    commentId: T:System.ComponentModel.EventDescriptor\n  - type: System.ComponentModel.TypeDescriptor\n    commentId: T:System.ComponentModel.TypeDescriptor\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: EventDescriptorCollection.Find(String, Boolean)\n- uid: System.ComponentModel.EventDescriptorCollection.GetEnumerator\n  commentId: M:System.ComponentModel.EventDescriptorCollection.GetEnumerator\n  id: GetEnumerator\n  parent: System.ComponentModel.EventDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: GetEnumerator()\n  fullName: System.ComponentModel.EventDescriptorCollection.GetEnumerator()\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetEnumerator\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n    startLine: 307\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets an enumerator for this <xref href=\\\"System.ComponentModel.EventDescriptorCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public IEnumerator GetEnumerator()\n    content.vb: Public Function GetEnumerator As IEnumerator\n    return:\n      type: System.Collections.IEnumerator\n      description: \"\\n<p>An enumerator that implements <xref href=\\\"System.Collections.IEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.EventDescriptor\n    commentId: T:System.ComponentModel.EventDescriptor\n  - type: System.ComponentModel.TypeDescriptor\n    commentId: T:System.ComponentModel.TypeDescriptor\n  - type: System.Collections.IEnumerator\n    commentId: T:System.Collections.IEnumerator\n  implements:\n  - System.Collections.IEnumerable.GetEnumerator\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: EventDescriptorCollection.GetEnumerator()\n- uid: System.ComponentModel.EventDescriptorCollection.IndexOf(System.ComponentModel.EventDescriptor)\n  commentId: M:System.ComponentModel.EventDescriptorCollection.IndexOf(System.ComponentModel.EventDescriptor)\n  id: IndexOf(System.ComponentModel.EventDescriptor)\n  parent: System.ComponentModel.EventDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: IndexOf(EventDescriptor)\n  fullName: System.ComponentModel.EventDescriptorCollection.IndexOf(System.ComponentModel.EventDescriptor)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IndexOf\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n    startLine: 242\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Returns the index of the given <xref href=\\\"System.ComponentModel.EventDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public int IndexOf(EventDescriptor value)\n    content.vb: Public Function IndexOf(value As EventDescriptor) As Integer\n    parameters:\n    - id: value\n      type: System.ComponentModel.EventDescriptor\n      description: \"\\n<p>The <xref href=\\\"System.ComponentModel.EventDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to find within the collection. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The index of the given <xref href=\\\"System.ComponentModel.EventDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> within the collection.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: EventDescriptorCollection.IndexOf(EventDescriptor)\n- uid: System.ComponentModel.EventDescriptorCollection.Insert(System.Int32,System.ComponentModel.EventDescriptor)\n  commentId: M:System.ComponentModel.EventDescriptorCollection.Insert(System.Int32,System.ComponentModel.EventDescriptor)\n  id: Insert(System.Int32,System.ComponentModel.EventDescriptor)\n  parent: System.ComponentModel.EventDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: Insert(Int32, EventDescriptor)\n  fullName: System.ComponentModel.EventDescriptorCollection.Insert(System.Int32, System.ComponentModel.EventDescriptor)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Insert\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n    startLine: 250\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Inserts an <xref href=\\\"System.ComponentModel.EventDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to the collection at a specified index.</p>\\n\"\n  syntax:\n    content: public void Insert(int index, EventDescriptor value)\n    content.vb: Public Sub Insert(index As Integer, value As EventDescriptor)\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index within the collection in which to insert the <em>value</em> parameter. </p>\\n\"\n    - id: value\n      type: System.ComponentModel.EventDescriptor\n      description: \"\\n<p>An <xref href=\\\"System.ComponentModel.EventDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to insert into the collection. </p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The collection is read-only.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: EventDescriptorCollection.Insert(Int32, EventDescriptor)\n- uid: System.ComponentModel.EventDescriptorCollection.InternalSort(System.Collections.IComparer)\n  commentId: M:System.ComponentModel.EventDescriptorCollection.InternalSort(System.Collections.IComparer)\n  id: InternalSort(System.Collections.IComparer)\n  parent: System.ComponentModel.EventDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: InternalSort(IComparer)\n  fullName: System.ComponentModel.EventDescriptorCollection.InternalSort(System.Collections.IComparer)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: InternalSort\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n    startLine: 426\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Sorts the members of this <xref href=\\\"System.ComponentModel.EventDescriptorCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, using the specified <xref href=\\\"System.Collections.IComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected void InternalSort(IComparer sorter)\n    content.vb: Protected Sub InternalSort(sorter As IComparer)\n    parameters:\n    - id: sorter\n      type: System.Collections.IComparer\n      description: \"\\n<p>A comparer to use to sort the <xref href=\\\"System.ComponentModel.EventDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects in this collection. </p>\\n\"\n  seealso:\n  - type: System.Collections.IComparer\n    commentId: T:System.Collections.IComparer\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: EventDescriptorCollection.InternalSort(IComparer)\n- uid: System.ComponentModel.EventDescriptorCollection.InternalSort(System.String[])\n  commentId: M:System.ComponentModel.EventDescriptorCollection.InternalSort(System.String[])\n  id: InternalSort(System.String[])\n  parent: System.ComponentModel.EventDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: InternalSort(String[])\n  fullName: System.ComponentModel.EventDescriptorCollection.InternalSort(System.String[])\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: InternalSort\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n    startLine: 371\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Sorts the members of this <xref href=\\\"System.ComponentModel.EventDescriptorCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The specified order is applied first, followed by the default sort for this collection, which is usually alphabetical.</p>\\n\"\n  syntax:\n    content: protected void InternalSort(string[] names)\n    content.vb: Protected Sub InternalSort(names As String())\n    parameters:\n    - id: names\n      type: System.String[]\n      description: \"\\n<p>An array of strings describing the order in which to sort the <xref href=\\\"System.ComponentModel.EventDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects in this collection. </p>\\n\"\n  seealso:\n  - type: System.Collections.IComparer\n    commentId: T:System.Collections.IComparer\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  fullName.vb: System.ComponentModel.EventDescriptorCollection.InternalSort(System.String())\n  name.vb: InternalSort(String())\n  nameWithType: EventDescriptorCollection.InternalSort(String[])\n  nameWithType.vb: EventDescriptorCollection.InternalSort(String())\n- uid: System.ComponentModel.EventDescriptorCollection.Remove(System.ComponentModel.EventDescriptor)\n  commentId: M:System.ComponentModel.EventDescriptorCollection.Remove(System.ComponentModel.EventDescriptor)\n  id: Remove(System.ComponentModel.EventDescriptor)\n  parent: System.ComponentModel.EventDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: Remove(EventDescriptor)\n  fullName: System.ComponentModel.EventDescriptorCollection.Remove(System.ComponentModel.EventDescriptor)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Remove\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n    startLine: 269\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Removes the specified <xref href=\\\"System.ComponentModel.EventDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> from the collection.</p>\\n\"\n  syntax:\n    content: public void Remove(EventDescriptor value)\n    content.vb: Public Sub Remove(value As EventDescriptor)\n    parameters:\n    - id: value\n      type: System.ComponentModel.EventDescriptor\n      description: \"\\n<p>The <xref href=\\\"System.ComponentModel.EventDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to remove from the collection. </p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The collection is read-only.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: EventDescriptorCollection.Remove(EventDescriptor)\n- uid: System.ComponentModel.EventDescriptorCollection.RemoveAt(System.Int32)\n  commentId: M:System.ComponentModel.EventDescriptorCollection.RemoveAt(System.Int32)\n  id: RemoveAt(System.Int32)\n  parent: System.ComponentModel.EventDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: RemoveAt(Int32)\n  fullName: System.ComponentModel.EventDescriptorCollection.RemoveAt(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RemoveAt\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n    startLine: 287\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Removes the <xref href=\\\"System.ComponentModel.EventDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> at the specified index from the collection.</p>\\n\"\n  syntax:\n    content: public void RemoveAt(int index)\n    content.vb: Public Sub RemoveAt(index As Integer)\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index of the <xref href=\\\"System.ComponentModel.EventDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to remove. </p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The collection is read-only.</p>\\n\"\n  implements:\n  - System.Collections.IList.RemoveAt(System.Int32)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: EventDescriptorCollection.RemoveAt(Int32)\n- uid: System.ComponentModel.EventDescriptorCollection.Sort\n  commentId: M:System.ComponentModel.EventDescriptorCollection.Sort\n  id: Sort\n  parent: System.ComponentModel.EventDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: Sort()\n  fullName: System.ComponentModel.EventDescriptorCollection.Sort()\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sort\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n    startLine: 326\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Sorts the members of this <xref href=\\\"System.ComponentModel.EventDescriptorCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, using the default sort for this collection, which is usually alphabetical.</p>\\n\"\n  syntax:\n    content: public virtual EventDescriptorCollection Sort()\n    content.vb: Public Overridable Function Sort As EventDescriptorCollection\n    return:\n      type: System.ComponentModel.EventDescriptorCollection\n      description: \"\\n<p>The new <xref href=\\\"System.ComponentModel.EventDescriptorCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: EventDescriptorCollection.Sort()\n- uid: System.ComponentModel.EventDescriptorCollection.Sort(System.Collections.IComparer)\n  commentId: M:System.ComponentModel.EventDescriptorCollection.Sort(System.Collections.IComparer)\n  id: Sort(System.Collections.IComparer)\n  parent: System.ComponentModel.EventDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: Sort(IComparer)\n  fullName: System.ComponentModel.EventDescriptorCollection.Sort(System.Collections.IComparer)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sort\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n    startLine: 360\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Sorts the members of this <xref href=\\\"System.ComponentModel.EventDescriptorCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, using the specified <xref href=\\\"System.Collections.IComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual EventDescriptorCollection Sort(IComparer comparer)\n    content.vb: Public Overridable Function Sort(comparer As IComparer) As EventDescriptorCollection\n    parameters:\n    - id: comparer\n      type: System.Collections.IComparer\n      description: \"\\n<p>An <xref href=\\\"System.Collections.IComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to use to sort the <xref href=\\\"System.ComponentModel.EventDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects in this collection. </p>\\n\"\n    return:\n      type: System.ComponentModel.EventDescriptorCollection\n      description: \"\\n<p>The new <xref href=\\\"System.ComponentModel.EventDescriptorCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Collections.IComparer\n    commentId: T:System.Collections.IComparer\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: EventDescriptorCollection.Sort(IComparer)\n- uid: System.ComponentModel.EventDescriptorCollection.Sort(System.String[])\n  commentId: M:System.ComponentModel.EventDescriptorCollection.Sort(System.String[])\n  id: Sort(System.String[])\n  parent: System.ComponentModel.EventDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: Sort(String[])\n  fullName: System.ComponentModel.EventDescriptorCollection.Sort(System.String[])\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sort\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n    startLine: 338\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Sorts the members of this <xref href=\\\"System.ComponentModel.EventDescriptorCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, given a specified sort order.</p>\\n\"\n  syntax:\n    content: public virtual EventDescriptorCollection Sort(string[] names)\n    content.vb: Public Overridable Function Sort(names As String()) As EventDescriptorCollection\n    parameters:\n    - id: names\n      type: System.String[]\n      description: \"\\n<p>An array of strings describing the order in which to sort the <xref href=\\\"System.ComponentModel.EventDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects in the collection. </p>\\n\"\n    return:\n      type: System.ComponentModel.EventDescriptorCollection\n      description: \"\\n<p>The new <xref href=\\\"System.ComponentModel.EventDescriptorCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Collections.IComparer\n    commentId: T:System.Collections.IComparer\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.ComponentModel.EventDescriptorCollection.Sort(System.String())\n  name.vb: Sort(String())\n  nameWithType: EventDescriptorCollection.Sort(String[])\n  nameWithType.vb: EventDescriptorCollection.Sort(String())\n- uid: System.ComponentModel.EventDescriptorCollection.Sort(System.String[],System.Collections.IComparer)\n  commentId: M:System.ComponentModel.EventDescriptorCollection.Sort(System.String[],System.Collections.IComparer)\n  id: Sort(System.String[],System.Collections.IComparer)\n  parent: System.ComponentModel.EventDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: Sort(String[], IComparer)\n  fullName: System.ComponentModel.EventDescriptorCollection.Sort(System.String[], System.Collections.IComparer)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sort\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n    startLine: 349\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Sorts the members of this <xref href=\\\"System.ComponentModel.EventDescriptorCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, given a specified sort order and an <xref href=\\\"System.Collections.IComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual EventDescriptorCollection Sort(string[] names, IComparer comparer)\n    content.vb: Public Overridable Function Sort(names As String(), comparer As IComparer) As EventDescriptorCollection\n    parameters:\n    - id: names\n      type: System.String[]\n      description: \"\\n<p>An array of strings describing the order in which to sort the <xref href=\\\"System.ComponentModel.EventDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects in the collection. </p>\\n\"\n    - id: comparer\n      type: System.Collections.IComparer\n      description: \"\\n<p>An <xref href=\\\"System.Collections.IComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to use to sort the <xref href=\\\"System.ComponentModel.EventDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects in this collection. </p>\\n\"\n    return:\n      type: System.ComponentModel.EventDescriptorCollection\n      description: \"\\n<p>The new <xref href=\\\"System.ComponentModel.EventDescriptorCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Collections.IComparer\n    commentId: T:System.Collections.IComparer\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.ComponentModel.EventDescriptorCollection.Sort(System.String(), System.Collections.IComparer)\n  name.vb: Sort(String(), IComparer)\n  nameWithType: EventDescriptorCollection.Sort(String[], IComparer)\n  nameWithType.vb: EventDescriptorCollection.Sort(String(), IComparer)\n- uid: System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  commentId: M:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  isEii: true\n  parent: System.ComponentModel.EventDescriptorCollection\n  langs:\n  - csharp\n  - vb\n  name: ICollection.CopyTo(Array, Int32)\n  fullName: System.ComponentModel.EventDescriptorCollection.System.Collections.ICollection.CopyTo(System.Array, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.ICollection.CopyTo\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs\n    startLine: 154\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Copies the elements of the collection to an <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, starting at a particular <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> index.</p>\\n\"\n  syntax:\n    content: void ICollection.CopyTo(Array array, int index)\n    content.vb: Sub System.Collections.ICollection.CopyTo(array As Array, index As Integer) Implements ICollection.CopyTo\n    parameters:\n    - id: array\n      type: System.Array\n      description: \"\\n<p>The one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is the destination of the elements copied from collection. The <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> must have zero-based indexing.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index in <em>array</em> at which copying begins.</p>\\n\"\n  implements:\n  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)\n  nameWithType: EventDescriptorCollection.ICollection.CopyTo(Array, Int32)\n  nameWithType.vb: EventDescriptorCollection.System.Collections.ICollection.CopyTo(Array, Int32)\nreferences:\n- uid: System.ComponentModel\n  isExternal: false\n  name: System.ComponentModel\n  fullName: System.ComponentModel\n  nameWithType: System.ComponentModel\n  commentId: N:System.ComponentModel\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Collections.IList\n  parent: System.Collections\n  isExternal: false\n  name: IList\n  fullName: System.Collections.IList\n  nameWithType: IList\n  commentId: T:System.Collections.IList\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  fullName: System.Collections.ICollection\n  nameWithType: ICollection\n  commentId: T:System.Collections.ICollection\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  fullName: System.Collections.IEnumerable\n  nameWithType: IEnumerable\n  commentId: T:System.Collections.IEnumerable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  parent: System.Linq.Queryable\n  definition: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  name: AsQueryable()\n  fullName: System.Linq.Queryable.AsQueryable()\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Queryable.AsQueryable()\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  parent: System.Linq.ParallelEnumerable\n  definition: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  name: AsParallel()\n  fullName: System.Linq.ParallelEnumerable.AsParallel()\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ParallelEnumerable.AsParallel()\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  name: Cast<TResult>()\n  fullName: System.Linq.Enumerable.Cast<TResult>()\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)()\n  name.vb: Cast(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.Cast<TResult>()\n  nameWithType.vb: Enumerable.Cast(Of TResult)()\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  name: OfType<TResult>()\n  fullName: System.Linq.Enumerable.OfType<TResult>()\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)()\n  name.vb: OfType(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.OfType<TResult>()\n  nameWithType.vb: Enumerable.OfType(Of TResult)()\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsQueryable(IEnumerable)\n  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n- uid: System.Linq.Queryable\n  parent: System.Linq\n  isExternal: false\n  name: Queryable\n  fullName: System.Linq.Queryable\n  nameWithType: Queryable\n  commentId: T:System.Linq.Queryable\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsParallel(IEnumerable)\n  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n- uid: System.Linq.ParallelEnumerable\n  parent: System.Linq\n  isExternal: false\n  name: ParallelEnumerable\n  fullName: System.Linq.ParallelEnumerable\n  nameWithType: ParallelEnumerable\n  commentId: T:System.Linq.ParallelEnumerable\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: Cast<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)\n  name.vb: Cast(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.Cast(Of TResult)(IEnumerable)\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n- uid: System.Linq.Enumerable\n  parent: System.Linq\n  isExternal: false\n  name: Enumerable\n  fullName: System.Linq.Enumerable\n  nameWithType: Enumerable\n  commentId: T:System.Linq.Enumerable\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: OfType<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)\n  name.vb: OfType(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.OfType(Of TResult)(IEnumerable)\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n- uid: System.Linq\n  isExternal: false\n  name: System.Linq\n  fullName: System.Linq\n  nameWithType: System.Linq\n  commentId: N:System.Linq\n- uid: System.ComponentModel.EventDescriptorCollection\n  parent: System.ComponentModel\n  isExternal: false\n  name: EventDescriptorCollection\n  fullName: System.ComponentModel.EventDescriptorCollection\n  nameWithType: EventDescriptorCollection\n  commentId: T:System.ComponentModel.EventDescriptorCollection\n- uid: System.ComponentModel.EventDescriptor[]\n  name: EventDescriptor[]\n  fullName: System.ComponentModel.EventDescriptor[]\n  fullname.vb: System.ComponentModel.EventDescriptor()\n  name.vb: EventDescriptor()\n  spec.csharp:\n  - uid: System.ComponentModel.EventDescriptor\n    name: EventDescriptor\n    fullName: System.ComponentModel.EventDescriptor\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.ComponentModel.EventDescriptor\n    name: EventDescriptor\n    fullName: System.ComponentModel.EventDescriptor\n  - name: ()\n    fullName: ()\n  nameWithType: EventDescriptor[]\n  nameWithType.vb: EventDescriptor()\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Collections.IList.Add(System.Object)\n  parent: System.Collections.IList\n  isExternal: true\n  name: Add(Object)\n  fullName: System.Collections.IList.Add(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IList.Add(System.Object)\n    name: Add\n    fullName: System.Collections.IList.Add\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.Add(System.Object)\n    name: Add\n    fullName: System.Collections.IList.Add\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.Add(Object)\n  commentId: M:System.Collections.IList.Add(System.Object)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Collections.IList.Contains(System.Object)\n  parent: System.Collections.IList\n  isExternal: true\n  name: Contains(Object)\n  fullName: System.Collections.IList.Contains(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IList.Contains(System.Object)\n    name: Contains\n    fullName: System.Collections.IList.Contains\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.Contains(System.Object)\n    name: Contains\n    fullName: System.Collections.IList.Contains\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.Contains(Object)\n  commentId: M:System.Collections.IList.Contains(System.Object)\n- uid: System.Collections.ICollection.Count\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: Count\n  fullName: System.Collections.ICollection.Count\n  nameWithType: ICollection.Count\n  commentId: P:System.Collections.ICollection.Count\n- uid: System.Collections.IList.IndexOf(System.Object)\n  parent: System.Collections.IList\n  isExternal: true\n  name: IndexOf(Object)\n  fullName: System.Collections.IList.IndexOf(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IList.IndexOf(System.Object)\n    name: IndexOf\n    fullName: System.Collections.IList.IndexOf\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.IndexOf(System.Object)\n    name: IndexOf\n    fullName: System.Collections.IList.IndexOf\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.IndexOf(Object)\n  commentId: M:System.Collections.IList.IndexOf(System.Object)\n- uid: System.Collections.IList.Insert(System.Int32,System.Object)\n  parent: System.Collections.IList\n  isExternal: true\n  name: Insert(Int32, Object)\n  fullName: System.Collections.IList.Insert(System.Int32, System.Object)\n  spec.csharp:\n  - uid: System.Collections.IList.Insert(System.Int32,System.Object)\n    name: Insert\n    fullName: System.Collections.IList.Insert\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.Insert(System.Int32,System.Object)\n    name: Insert\n    fullName: System.Collections.IList.Insert\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.Insert(Int32, Object)\n  commentId: M:System.Collections.IList.Insert(System.Int32,System.Object)\n- uid: System.Collections.ICollection.IsSynchronized\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: IsSynchronized\n  fullName: System.Collections.ICollection.IsSynchronized\n  nameWithType: ICollection.IsSynchronized\n  commentId: P:System.Collections.ICollection.IsSynchronized\n- uid: System.Collections.ICollection.SyncRoot\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: SyncRoot\n  fullName: System.Collections.ICollection.SyncRoot\n  nameWithType: ICollection.SyncRoot\n  commentId: P:System.Collections.ICollection.SyncRoot\n- uid: System.Collections.IList.IsFixedSize\n  parent: System.Collections.IList\n  isExternal: false\n  name: IsFixedSize\n  fullName: System.Collections.IList.IsFixedSize\n  nameWithType: IList.IsFixedSize\n  commentId: P:System.Collections.IList.IsFixedSize\n- uid: System.Collections.IList.IsReadOnly\n  parent: System.Collections.IList\n  isExternal: false\n  name: IsReadOnly\n  fullName: System.Collections.IList.IsReadOnly\n  nameWithType: IList.IsReadOnly\n  commentId: P:System.Collections.IList.IsReadOnly\n- uid: System.Collections.IList.Remove(System.Object)\n  parent: System.Collections.IList\n  isExternal: true\n  name: Remove(Object)\n  fullName: System.Collections.IList.Remove(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IList.Remove(System.Object)\n    name: Remove\n    fullName: System.Collections.IList.Remove\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.Remove(System.Object)\n    name: Remove\n    fullName: System.Collections.IList.Remove\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.Remove(Object)\n  commentId: M:System.Collections.IList.Remove(System.Object)\n- uid: System.Collections.IList.Item(System.Int32)\n  parent: System.Collections.IList\n  isExternal: true\n  name: Item[Int32]\n  fullName: System.Collections.IList.Item[System.Int32]\n  fullname.vb: System.Collections.IList.Item(System.Int32)\n  name.vb: Item(Int32)\n  spec.csharp:\n  - uid: System.Collections.IList.Item(System.Int32)\n    name: Item\n    fullName: System.Collections.IList.Item\n  - name: '['\n    fullName: '['\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ']'\n    fullName: ']'\n  spec.vb:\n  - uid: System.Collections.IList.Item(System.Int32)\n    name: Item\n    fullName: System.Collections.IList.Item\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.Item[Int32]\n  nameWithType.vb: IList.Item(Int32)\n  commentId: P:System.Collections.IList.Item(System.Int32)\n- uid: System.ComponentModel.EventDescriptor\n  parent: System.ComponentModel\n  isExternal: false\n  name: EventDescriptor\n  fullName: System.ComponentModel.EventDescriptor\n  nameWithType: EventDescriptor\n  commentId: T:System.ComponentModel.EventDescriptor\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Collections.IList.Clear\n  parent: System.Collections.IList\n  isExternal: false\n  name: Clear()\n  fullName: System.Collections.IList.Clear()\n  spec.csharp:\n  - uid: System.Collections.IList.Clear\n    name: Clear\n    fullName: System.Collections.IList.Clear\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.Clear\n    name: Clear\n    fullName: System.Collections.IList.Clear\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IList.Clear()\n  commentId: M:System.Collections.IList.Clear\n- uid: System.Collections.IEnumerable.GetEnumerator\n  parent: System.Collections.IEnumerable\n  isExternal: false\n  name: GetEnumerator()\n  fullName: System.Collections.IEnumerable.GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable.GetEnumerator()\n  commentId: M:System.Collections.IEnumerable.GetEnumerator\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  fullName: System.Collections.IEnumerator\n  nameWithType: IEnumerator\n  commentId: T:System.Collections.IEnumerator\n- uid: System.Collections.IComparer\n  parent: System.Collections\n  isExternal: false\n  name: IComparer\n  fullName: System.Collections.IComparer\n  nameWithType: IComparer\n  commentId: T:System.Collections.IComparer\n- uid: System.String[]\n  name: String[]\n  fullName: System.String[]\n  fullname.vb: System.String()\n  name.vb: String()\n  spec.csharp:\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: String[]\n  nameWithType.vb: String()\n- uid: System.Collections.IList.RemoveAt(System.Int32)\n  parent: System.Collections.IList\n  isExternal: true\n  name: RemoveAt(Int32)\n  fullName: System.Collections.IList.RemoveAt(System.Int32)\n  spec.csharp:\n  - uid: System.Collections.IList.RemoveAt(System.Int32)\n    name: RemoveAt\n    fullName: System.Collections.IList.RemoveAt\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.RemoveAt(System.Int32)\n    name: RemoveAt\n    fullName: System.Collections.IList.RemoveAt\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.RemoveAt(Int32)\n  commentId: M:System.Collections.IList.RemoveAt(System.Int32)\n- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  parent: System.Collections.ICollection\n  isExternal: true\n  name: CopyTo(Array, Int32)\n  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)\n  spec.csharp:\n  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n    name: CopyTo\n    fullName: System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n    name: CopyTo\n    fullName: System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ICollection.CopyTo(Array, Int32)\n  commentId: M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  fullName: System.Array\n  nameWithType: Array\n  commentId: T:System.Array\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n- uid: System.IndexOutOfRangeException\n  isExternal: false\n  name: IndexOutOfRangeException\n  fullName: System.IndexOutOfRangeException\n  nameWithType: IndexOutOfRangeException\n  commentId: T:System.IndexOutOfRangeException\n"}