{"nodes":[{"pos":[555,561],"content":"Buffer","needQuote":true,"nodes":[{"content":"Buffer","pos":[0,6]}]},{"pos":[1854,1898],"content":"BlockCopy(Array, Int32, Array, Int32, Int32)","needQuote":true,"nodes":[{"content":"BlockCopy(Array, Int32, Array, Int32, Int32)","pos":[0,44]}]},{"content":"\\n&lt;p&gt;The source buffer.","pos":[2810,2833],"source":"\\n<p>The source buffer."},{"content":"&lt;/p&gt;\\n","pos":[2834,2840],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based byte offset into &lt;em&gt;src&lt;/em&gt;.","pos":[2907,2957],"source":"\\n<p>The zero-based byte offset into <em>src</em>."},{"content":"&lt;/p&gt;\\n","pos":[2958,2964],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The destination buffer.","pos":[3025,3053],"source":"\\n<p>The destination buffer."},{"content":"&lt;/p&gt;\\n","pos":[3054,3060],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based byte offset into &lt;em&gt;dst&lt;/em&gt;.","pos":[3127,3177],"source":"\\n<p>The zero-based byte offset into <em>dst</em>."},{"content":"&lt;/p&gt;\\n","pos":[3178,3184],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to copy.","pos":[3247,3280],"source":"\\n<p>The number of bytes to copy."},{"content":"&lt;/p&gt;\\n","pos":[3281,3287],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;src&lt;/em&gt; or &lt;em&gt;dst&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[3406,3467],"source":"\\n<p>\\n<em>src</em> or <em>dst</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[3468,3474],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;src&lt;/em&gt; or &lt;em&gt;dst&lt;/em&gt; is not an array of primitives.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The number of bytes in &lt;em&gt;src&lt;/em&gt; is less than &lt;em&gt;srcOffset&lt;/em&gt; plus &lt;em&gt;count&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The number of bytes in &lt;em&gt;dst&lt;/em&gt; is less than &lt;em&gt;dstOffset&lt;/em&gt; plus &lt;em&gt;count&lt;/em&gt;.","pos":[3571,3859],"source":"\\n<p>\\n<em>src</em> or <em>dst</em> is not an array of primitives.</p>\\n<p>-or- </p>\\n<p>The number of bytes in <em>src</em> is less than <em>srcOffset</em> plus <em>count</em>.</p>\\n<p>-or- </p>\\n<p>The number of bytes in <em>dst</em> is less than <em>dstOffset</em> plus <em>count</em>."},{"content":"&lt;/p&gt;\\n","pos":[3860,3866],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;srcOffset&lt;/em&gt;, &lt;em&gt;dstOffset&lt;/em&gt;, or &lt;em&gt;count&lt;/em&gt; is less than 0.","pos":[3983,4063],"source":"\\n<p>\\n<em>srcOffset</em>, <em>dstOffset</em>, or <em>count</em> is less than 0."},{"content":"&lt;/p&gt;\\n","pos":[4064,4070],"source":" </p>\\n"},{"pos":[4410,4427],"content":"ByteLength(Array)","needQuote":true,"nodes":[{"content":"ByteLength(Array)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;An array.","pos":[5141,5155],"source":"\\n<p>An array."},{"content":"&lt;/p&gt;\\n","pos":[5156,5162],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes in the array.&lt;/p&gt;\\n","pos":[5221,5265],"source":"\\n<p>The number of bytes in the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[5384,5431],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[5432,5438],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is not a primitive.","pos":[5535,5576],"source":"\\n<p>\\n<em>array</em> is not a primitive."},{"content":"&lt;/p&gt;\\n","pos":[5577,5583],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is larger than 2 gigabytes (GB).&lt;/p&gt;\\n","pos":[5680,5740],"source":"\\n<p>\\n<em>array</em> is larger than 2 gigabytes (GB).</p>\\n"},{"pos":[6083,6104],"content":"GetByte(Array, Int32)","needQuote":true,"nodes":[{"content":"GetByte(Array, Int32)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;An array.","pos":[6860,6874],"source":"\\n<p>An array."},{"content":"&lt;/p&gt;\\n","pos":[6875,6881],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A location in the array.","pos":[6944,6973],"source":"\\n<p>A location in the array."},{"content":"&lt;/p&gt;\\n","pos":[6974,6980],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Returns the &lt;em&gt;index&lt;/em&gt; byte in the array.&lt;/p&gt;\\n","pos":[7038,7094],"source":"\\n<p>Returns the <em>index</em> byte in the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is not a primitive.","pos":[7205,7246],"source":"\\n<p>\\n<em>array</em> is not a primitive."},{"content":"&lt;/p&gt;\\n","pos":[7247,7253],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[7358,7405],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[7406,7412],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is negative or greater than the length of &lt;em&gt;array&lt;/em&gt;.","pos":[7529,7608],"source":"\\n<p>\\n<em>index</em> is negative or greater than the length of <em>array</em>."},{"content":"&lt;/p&gt;\\n","pos":[7609,7615],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is larger than 2 gigabytes (GB).&lt;/p&gt;\\n","pos":[7712,7772],"source":"\\n<p>\\n<em>array</em> is larger than 2 gigabytes (GB).</p>\\n"},{"pos":[8206,8244],"content":"MemoryCopy(Void*, Void*, Int64, Int64)","needQuote":true,"nodes":[{"content":"MemoryCopy(Void*, Void*, Int64, Int64)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;The address of the bytes to copy.","pos":[9387,9425],"source":"\\n<p>The address of the bytes to copy."},{"content":"&lt;/p&gt;\\n","pos":[9426,9432],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The target address.","pos":[9501,9525],"source":"\\n<p>The target address."},{"content":"&lt;/p&gt;\\n","pos":[9526,9532],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes available in the destination memory block.","pos":[9612,9679],"source":"\\n<p>The number of bytes available in the destination memory block."},{"content":"&lt;/p&gt;\\n","pos":[9680,9686],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to copy.","pos":[9761,9794],"source":"\\n<p>The number of bytes to copy."},{"content":"&lt;/p&gt;\\n","pos":[9796,9802],"source":"  </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;sourceBytesToCopy&lt;/em&gt; is greater than &lt;em&gt;destinationSizeInBytes&lt;/em&gt;.","pos":[9933,10015],"source":"\\n<p>\\n<em>sourceBytesToCopy</em> is greater than <em>destinationSizeInBytes</em>."},{"content":"&lt;/p&gt;\\n","pos":[10016,10022],"source":" </p>\\n"},{"pos":[10782,10822],"content":"MemoryCopy(Void*, Void*, UInt64, UInt64)","needQuote":true,"nodes":[{"content":"MemoryCopy(Void*, Void*, UInt64, UInt64)","pos":[0,40]}]},{"content":"\\n&lt;p&gt;The address of the bytes to copy.","pos":[11981,12019],"source":"\\n<p>The address of the bytes to copy."},{"content":"&lt;/p&gt;\\n","pos":[12020,12026],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The target address.","pos":[12095,12119],"source":"\\n<p>The target address."},{"content":"&lt;/p&gt;\\n","pos":[12120,12126],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes available in the destination memory block.","pos":[12207,12274],"source":"\\n<p>The number of bytes available in the destination memory block."},{"content":"&lt;/p&gt;\\n","pos":[12275,12281],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to copy.","pos":[12357,12390],"source":"\\n<p>The number of bytes to copy."},{"content":"&lt;/p&gt;\\n","pos":[12393,12399],"source":"   </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;sourceBytesToCopy&lt;/em&gt; is greater than &lt;em&gt;destinationSizeInBytes&lt;/em&gt;.","pos":[12530,12612],"source":"\\n<p>\\n<em>sourceBytesToCopy</em> is greater than <em>destinationSizeInBytes</em>."},{"content":"&lt;/p&gt;\\n","pos":[12613,12619],"source":" </p>\\n"},{"pos":[13324,13351],"content":"SetByte(Array, Int32, Byte)","needQuote":true,"nodes":[{"content":"SetByte(Array, Int32, Byte)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;An array.","pos":[14152,14166],"source":"\\n<p>An array."},{"content":"&lt;/p&gt;\\n","pos":[14167,14173],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A location in the array.","pos":[14236,14265],"source":"\\n<p>A location in the array."},{"content":"&lt;/p&gt;\\n","pos":[14266,14272],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A value to assign.","pos":[14334,14357],"source":"\\n<p>A value to assign."},{"content":"&lt;/p&gt;\\n","pos":[14358,14364],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is not a primitive.","pos":[14475,14516],"source":"\\n<p>\\n<em>array</em> is not a primitive."},{"content":"&lt;/p&gt;\\n","pos":[14517,14523],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[14628,14675],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[14676,14682],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is negative or greater than the length of &lt;em&gt;array&lt;/em&gt;.","pos":[14799,14878],"source":"\\n<p>\\n<em>index</em> is negative or greater than the length of <em>array</em>."},{"content":"&lt;/p&gt;\\n","pos":[14879,14885],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is larger than 2 gigabytes (GB).&lt;/p&gt;\\n","pos":[14982,15042],"source":"\\n<p>\\n<em>array</em> is larger than 2 gigabytes (GB).</p>\\n"},{"pos":[15229,15235],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[15366,15372],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15532,15542],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[15637,15645],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[15714,15715],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15742,15743],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15813,15821],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[15890,15891],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15918,15919],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16102,16116],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[16235,16241],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[16308,16309],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16359,16365],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16425,16426],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16509,16515],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[16582,16583],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16633,16639],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16699,16700],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16914,16936],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[17084,17090],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[17157,17158],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17208,17214],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[17275,17276]},{"pos":[17331,17337],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17397,17398],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17495,17501],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[17568,17569],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17619,17625],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[17686,17687]},{"pos":[17742,17748],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17808,17809],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18054,18085],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[18251,18266],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[18342,18343],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18393,18399],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[18460,18461]},{"pos":[18516,18522],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18582,18583],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18689,18704],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[18780,18781],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18831,18837],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[18898,18899]},{"pos":[18954,18960],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19020,19021],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19251,19264],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[19365,19376],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[19448,19449],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19476,19477],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19550,19561],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[19633,19634],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19661,19662],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19837,19846],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[19939,19946],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[20014,20015],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20042,20043],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20112,20119],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[20187,20188],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20215,20216],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20391,20408],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[20517,20532],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[20608,20609],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20636,20637],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20714,20729],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[20805,20806],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20833,20834],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21002,21007],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"pos":[21148,21153],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[21293,21297],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[21398,21403],"content":"Void*","needQuote":true,"nodes":[{"content":"Void*","pos":[0,5]}]},{"pos":[21475,21479],"content":"Void","needQuote":true,"nodes":[{"content":"Void","pos":[0,4]}]},{"pos":[21601,21605],"content":"Void","needQuote":true,"nodes":[{"content":"Void","pos":[0,4]}]},{"pos":[21772,21777],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[21919,21925],"content":"UInt64","needQuote":true,"nodes":[{"content":"UInt64","pos":[0,6]}]},{"pos":[22068,22089],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[22290,22307],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[22489,22516],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[22718,22735],"content":"OverflowException","needQuote":true,"nodes":[{"content":"OverflowException","pos":[0,17]}]}],"content":"items:\n- uid: System.Buffer\n  commentId: T:System.Buffer\n  id: Buffer\n  parent: System\n  children:\n  - System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)\n  - System.Buffer.ByteLength(System.Array)\n  - System.Buffer.GetByte(System.Array,System.Int32)\n  - System.Buffer.MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)\n  - System.Buffer.MemoryCopy(System.Void*,System.Void*,System.UInt64,System.UInt64)\n  - System.Buffer.SetByte(System.Array,System.Int32,System.Byte)\n  langs:\n  - csharp\n  - vb\n  name: Buffer\n  fullName: System.Buffer\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Buffer.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Buffer\n    path: src/mscorlib/src/System/Buffer.cs\n    startLine: 17\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Manipulates arrays of primitive types.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(true)]\n\n      public class Buffer\n    content.vb: >-\n      <ComVisible(True)>\n\n      Public Class Buffer\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: Buffer\n- uid: System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)\n  commentId: M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)\n  id: BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)\n  parent: System.Buffer\n  langs:\n  - csharp\n  - vb\n  name: BlockCopy(Array, Int32, Array, Int32, Int32)\n  fullName: System.Buffer.BlockCopy(System.Array, System.Int32, System.Array, System.Int32, System.Int32)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Copies a specified number of bytes from a source array starting at a particular offset to a destination array starting at a particular offset.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public static void BlockCopy(Array src, int srcOffset, Array dst, int dstOffset, int count)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Shared Sub BlockCopy(src As Array, srcOffset As Integer, dst As Array, dstOffset As Integer, count As Integer)\n    parameters:\n    - id: src\n      type: System.Array\n      description: \"\\n<p>The source buffer. </p>\\n\"\n    - id: srcOffset\n      type: System.Int32\n      description: \"\\n<p>The zero-based byte offset into <em>src</em>. </p>\\n\"\n    - id: dst\n      type: System.Array\n      description: \"\\n<p>The destination buffer. </p>\\n\"\n    - id: dstOffset\n      type: System.Int32\n      description: \"\\n<p>The zero-based byte offset into <em>dst</em>. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to copy. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>src</em> or <em>dst</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>src</em> or <em>dst</em> is not an array of primitives.</p>\\n<p>-or- </p>\\n<p>The number of bytes in <em>src</em> is less than <em>srcOffset</em> plus <em>count</em>.</p>\\n<p>-or- </p>\\n<p>The number of bytes in <em>dst</em> is less than <em>dstOffset</em> plus <em>count</em>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>srcOffset</em>, <em>dstOffset</em>, or <em>count</em> is less than 0. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Buffer.BlockCopy(Array, Int32, Array, Int32, Int32)\n- uid: System.Buffer.ByteLength(System.Array)\n  commentId: M:System.Buffer.ByteLength(System.Array)\n  id: ByteLength(System.Array)\n  parent: System.Buffer\n  langs:\n  - csharp\n  - vb\n  name: ByteLength(Array)\n  fullName: System.Buffer.ByteLength(System.Array)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Buffer.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ByteLength\n    path: src/mscorlib/src/System/Buffer.cs\n    startLine: 190\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns the number of bytes in the specified array.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static int ByteLength(Array array)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function ByteLength(array As Array) As Integer\n    parameters:\n    - id: array\n      type: System.Array\n      description: \"\\n<p>An array. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of bytes in the array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>array</em> is not a primitive. </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>array</em> is larger than 2 gigabytes (GB).</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Buffer.ByteLength(Array)\n- uid: System.Buffer.GetByte(System.Array,System.Int32)\n  commentId: M:System.Buffer.GetByte(System.Array,System.Int32)\n  id: GetByte(System.Array,System.Int32)\n  parent: System.Buffer\n  langs:\n  - csharp\n  - vb\n  name: GetByte(Array, Int32)\n  fullName: System.Buffer.GetByte(System.Array, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Buffer.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetByte\n    path: src/mscorlib/src/System/Buffer.cs\n    startLine: 132\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Retrieves the byte at a specified location in a specified array.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static byte GetByte(Array array, int index)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function GetByte(array As Array, index As Integer) As Byte\n    parameters:\n    - id: array\n      type: System.Array\n      description: \"\\n<p>An array. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>A location in the array. </p>\\n\"\n    return:\n      type: System.Byte\n      description: \"\\n<p>Returns the <em>index</em> byte in the array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>array</em> is not a primitive. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is negative or greater than the length of <em>array</em>. </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>array</em> is larger than 2 gigabytes (GB).</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Buffer.GetByte(Array, Int32)\n- uid: System.Buffer.MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)\n  commentId: M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)\n  id: MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)\n  parent: System.Buffer\n  langs:\n  - csharp\n  - vb\n  name: MemoryCopy(Void*, Void*, Int64, Int64)\n  fullName: System.Buffer.MemoryCopy(System.Void*, System.Void*, System.Int64, System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Buffer.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MemoryCopy\n    path: src/mscorlib/src/System/Buffer.cs\n    startLine: 519\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Copies a number of bytes specified as a long integer value from one address in memory to another. </p>\\n<p>This API is not CLS-compliant.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [MethodImpl(MethodImplOptions.AggressiveInlining)]\n\n      [CLSCompliant(false)]\n\n      public static void MemoryCopy(void *source, void *destination, long destinationSizeInBytes, long sourceBytesToCopy)\n    content.vb: >-\n      <SecurityCritical>\n\n      <MethodImpl(MethodImplOptions.AggressiveInlining)>\n\n      <CLSCompliant(False)>\n\n      Public Shared Sub MemoryCopy(source As  *, destination As  *, destinationSizeInBytes As Long, sourceBytesToCopy As Long)\n    parameters:\n    - id: source\n      type: System.Void*\n      description: \"\\n<p>The address of the bytes to copy. </p>\\n\"\n    - id: destination\n      type: System.Void*\n      description: \"\\n<p>The target address. </p>\\n\"\n    - id: destinationSizeInBytes\n      type: System.Int64\n      description: \"\\n<p>The number of bytes available in the destination memory block. </p>\\n\"\n    - id: sourceBytesToCopy\n      type: System.Int64\n      description: \"\\n<p>The number of bytes to copy.  </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>sourceBytesToCopy</em> is greater than <em>destinationSizeInBytes</em>. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Buffer.MemoryCopy(Void*, Void*, Int64, Int64)\n- uid: System.Buffer.MemoryCopy(System.Void*,System.Void*,System.UInt64,System.UInt64)\n  commentId: M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.UInt64,System.UInt64)\n  id: MemoryCopy(System.Void*,System.Void*,System.UInt64,System.UInt64)\n  parent: System.Buffer\n  langs:\n  - csharp\n  - vb\n  name: MemoryCopy(Void*, Void*, UInt64, UInt64)\n  fullName: System.Buffer.MemoryCopy(System.Void*, System.Void*, System.UInt64, System.UInt64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Buffer.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MemoryCopy\n    path: src/mscorlib/src/System/Buffer.cs\n    startLine: 538\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Copies a number of bytes specified as an unsigned long integer value from one address in memory to another. </p>\\n<p>This API is not CLS-compliant.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [MethodImpl(MethodImplOptions.AggressiveInlining)]\n\n      [CLSCompliant(false)]\n\n      public static void MemoryCopy(void *source, void *destination, ulong destinationSizeInBytes, ulong sourceBytesToCopy)\n    content.vb: >-\n      <SecurityCritical>\n\n      <MethodImpl(MethodImplOptions.AggressiveInlining)>\n\n      <CLSCompliant(False)>\n\n      Public Shared Sub MemoryCopy(source As  *, destination As  *, destinationSizeInBytes As ULong, sourceBytesToCopy As ULong)\n    parameters:\n    - id: source\n      type: System.Void*\n      description: \"\\n<p>The address of the bytes to copy. </p>\\n\"\n    - id: destination\n      type: System.Void*\n      description: \"\\n<p>The target address. </p>\\n\"\n    - id: destinationSizeInBytes\n      type: System.UInt64\n      description: \"\\n<p>The number of bytes available in the destination memory block. </p>\\n\"\n    - id: sourceBytesToCopy\n      type: System.UInt64\n      description: \"\\n<p>The number of bytes to copy.   </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>sourceBytesToCopy</em> is greater than <em>destinationSizeInBytes</em>. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Buffer.MemoryCopy(Void*, Void*, UInt64, UInt64)\n- uid: System.Buffer.SetByte(System.Array,System.Int32,System.Byte)\n  commentId: M:System.Buffer.SetByte(System.Array,System.Int32,System.Byte)\n  id: SetByte(System.Array,System.Int32,System.Byte)\n  parent: System.Buffer\n  langs:\n  - csharp\n  - vb\n  name: SetByte(Array, Int32, Byte)\n  fullName: System.Buffer.SetByte(System.Array, System.Int32, System.Byte)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Buffer.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SetByte\n    path: src/mscorlib/src/System/Buffer.cs\n    startLine: 160\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Assigns a specified value to a byte at a particular location in a specified array.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static void SetByte(Array array, int index, byte value)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Sub SetByte(array As Array, index As Integer, value As Byte)\n    parameters:\n    - id: array\n      type: System.Array\n      description: \"\\n<p>An array. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>A location in the array. </p>\\n\"\n    - id: value\n      type: System.Byte\n      description: \"\\n<p>A value to assign. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>array</em> is not a primitive. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is negative or greater than the length of <em>array</em>. </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>array</em> is larger than 2 gigabytes (GB).</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Buffer.SetByte(Array, Int32, Byte)\nreferences:\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  fullName: System.Array\n  nameWithType: Array\n  commentId: T:System.Array\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  fullName: System.Byte\n  nameWithType: Byte\n  commentId: T:System.Byte\n- uid: System.Void*\n  name: Void*\n  fullName: System.Void*\n  spec.csharp:\n  - uid: System.Void\n    name: Void\n    fullName: System.Void\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  spec.vb:\n  - uid: System.Void\n    name: Void\n    fullName: System.Void\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  nameWithType: Void*\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  nameWithType: Int64\n  commentId: T:System.Int64\n- uid: System.UInt64\n  parent: System\n  isExternal: false\n  name: UInt64\n  fullName: System.UInt64\n  nameWithType: UInt64\n  commentId: T:System.UInt64\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.OverflowException\n  isExternal: false\n  name: OverflowException\n  fullName: System.OverflowException\n  nameWithType: OverflowException\n  commentId: T:System.OverflowException\n"}