{"nodes":[{"pos":[2940,2954],"content":"TypeExtensions","needQuote":true,"nodes":[{"content":"TypeExtensions","pos":[0,14]}]},{"pos":[4260,4288],"content":"GetConstructor(Type, Type[])","needQuote":true,"nodes":[{"content":"GetConstructor(Type, Type[])","pos":[0,28]}]},{"pos":[5796,5817],"content":"GetConstructors(Type)","needQuote":true,"nodes":[{"content":"GetConstructors(Type)","pos":[0,21]}]},{"pos":[7139,7174],"content":"GetConstructors(Type, BindingFlags)","needQuote":true,"nodes":[{"content":"GetConstructors(Type, BindingFlags)","pos":[0,35]}]},{"pos":[8575,8598],"content":"GetDefaultMembers(Type)","needQuote":true,"nodes":[{"content":"GetDefaultMembers(Type)","pos":[0,23]}]},{"pos":[9843,9865],"content":"GetEvent(Type, String)","needQuote":true,"nodes":[{"content":"GetEvent(Type, String)","pos":[0,22]}]},{"pos":[11242,11278],"content":"GetEvent(Type, String, BindingFlags)","needQuote":true,"nodes":[{"content":"GetEvent(Type, String, BindingFlags)","pos":[0,36]}]},{"pos":[12689,12704],"content":"GetEvents(Type)","needQuote":true,"nodes":[{"content":"GetEvents(Type)","pos":[0,15]}]},{"pos":[13960,13989],"content":"GetEvents(Type, BindingFlags)","needQuote":true,"nodes":[{"content":"GetEvents(Type, BindingFlags)","pos":[0,29]}]},{"pos":[15357,15379],"content":"GetField(Type, String)","needQuote":true,"nodes":[{"content":"GetField(Type, String)","pos":[0,22]}]},{"pos":[16756,16792],"content":"GetField(Type, String, BindingFlags)","needQuote":true,"nodes":[{"content":"GetField(Type, String, BindingFlags)","pos":[0,36]}]},{"pos":[18203,18218],"content":"GetFields(Type)","needQuote":true,"nodes":[{"content":"GetFields(Type)","pos":[0,15]}]},{"pos":[19474,19503],"content":"GetFields(Type, BindingFlags)","needQuote":true,"nodes":[{"content":"GetFields(Type, BindingFlags)","pos":[0,29]}]},{"pos":[20862,20887],"content":"GetGenericArguments(Type)","needQuote":true,"nodes":[{"content":"GetGenericArguments(Type)","pos":[0,25]}]},{"pos":[22086,22105],"content":"GetInterfaces(Type)","needQuote":true,"nodes":[{"content":"GetInterfaces(Type)","pos":[0,19]}]},{"pos":[23304,23327],"content":"GetMember(Type, String)","needQuote":true,"nodes":[{"content":"GetMember(Type, String)","pos":[0,23]}]},{"pos":[24721,24758],"content":"GetMember(Type, String, BindingFlags)","needQuote":true,"nodes":[{"content":"GetMember(Type, String, BindingFlags)","pos":[0,37]}]},{"pos":[26186,26202],"content":"GetMembers(Type)","needQuote":true,"nodes":[{"content":"GetMembers(Type)","pos":[0,16]}]},{"pos":[27469,27499],"content":"GetMembers(Type, BindingFlags)","needQuote":true,"nodes":[{"content":"GetMembers(Type, BindingFlags)","pos":[0,30]}]},{"pos":[28878,28901],"content":"GetMethod(Type, String)","needQuote":true,"nodes":[{"content":"GetMethod(Type, String)","pos":[0,23]}]},{"pos":[30289,30326],"content":"GetMethod(Type, String, BindingFlags)","needQuote":true,"nodes":[{"content":"GetMethod(Type, String, BindingFlags)","pos":[0,37]}]},{"pos":[31829,31860],"content":"GetMethod(Type, String, Type[])","needQuote":true,"nodes":[{"content":"GetMethod(Type, String, Type[])","pos":[0,31]}]},{"pos":[33422,33438],"content":"GetMethods(Type)","needQuote":true,"nodes":[{"content":"GetMethods(Type)","pos":[0,16]}]},{"pos":[34705,34735],"content":"GetMethods(Type, BindingFlags)","needQuote":true,"nodes":[{"content":"GetMethods(Type, BindingFlags)","pos":[0,30]}]},{"pos":[36219,36260],"content":"GetNestedType(Type, String, BindingFlags)","needQuote":true,"nodes":[{"content":"GetNestedType(Type, String, BindingFlags)","pos":[0,41]}]},{"pos":[37778,37812],"content":"GetNestedTypes(Type, BindingFlags)","needQuote":true,"nodes":[{"content":"GetNestedTypes(Type, BindingFlags)","pos":[0,34]}]},{"pos":[39152,39171],"content":"GetProperties(Type)","needQuote":true,"nodes":[{"content":"GetProperties(Type)","pos":[0,19]}]},{"pos":[40468,40501],"content":"GetProperties(Type, BindingFlags)","needQuote":true,"nodes":[{"content":"GetProperties(Type, BindingFlags)","pos":[0,33]}]},{"pos":[41907,41932],"content":"GetProperty(Type, String)","needQuote":true,"nodes":[{"content":"GetProperty(Type, String)","pos":[0,25]}]},{"pos":[43342,43381],"content":"GetProperty(Type, String, BindingFlags)","needQuote":true,"nodes":[{"content":"GetProperty(Type, String, BindingFlags)","pos":[0,39]}]},{"pos":[44900,44931],"content":"GetProperty(Type, String, Type)","needQuote":true,"nodes":[{"content":"GetProperty(Type, String, Type)","pos":[0,31]}]},{"pos":[46427,46466],"content":"GetProperty(Type, String, Type, Type[])","needQuote":true,"nodes":[{"content":"GetProperty(Type, String, Type, Type[])","pos":[0,39]}]},{"pos":[48230,48258],"content":"IsAssignableFrom(Type, Type)","needQuote":true,"nodes":[{"content":"IsAssignableFrom(Type, Type)","pos":[0,28]}]},{"pos":[49567,49597],"content":"IsInstanceOfType(Type, Object)","needQuote":true,"nodes":[{"content":"IsInstanceOfType(Type, Object)","pos":[0,30]}]},{"pos":[50684,50701],"content":"System.Reflection","needQuote":true,"nodes":[{"content":"System.Reflection","pos":[0,17]}]},{"pos":[50861,50867],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[51036,51046],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[51175,51183],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[51286,51287],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51334,51335],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51425,51433],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[51536,51537],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51584,51585],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51767,51781],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[51938,51944],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[52043,52044],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52114,52120],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[52205,52206],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52309,52315],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[52414,52415],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52485,52491],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[52576,52577],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52787,52809],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[53003,53009],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[53108,53109],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53179,53185],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[53271,53272]},{"pos":[53350,53356],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[53441,53442],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53559,53565],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[53664,53665],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53735,53741],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[53827,53828]},{"pos":[53906,53912],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[53997,53998],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54226,54257],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[54478,54493],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[54610,54611],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54681,54687],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[54773,54774]},{"pos":[54852,54858],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[54943,54944],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55070,55085],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[55202,55203],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55273,55279],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[55365,55366]},{"pos":[55444,55450],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[55535,55536],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55698,55711],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[55849,55860],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[55969,55970],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56017,56018],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56111,56122],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[56231,56232],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56279,56280],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56434,56443],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[56569,56576],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[56677,56678],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56725,56726],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56815,56822],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[56923,56924],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56971,56972],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57142,57159],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[57309,57324],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[57441,57442],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57489,57490],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57587,57602],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[57719,57720],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57767,57768],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57869,57875],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[58009,58013],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[58088,58094],"content":"Type[]","needQuote":true,"nodes":[{"content":"Type[]","pos":[0,6]}]},{"pos":[58263,58267],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":"[]","pos":[58328,58330]},{"pos":[58416,58420],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[58480,58482],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[58667,58682],"content":"ConstructorInfo","needQuote":true,"nodes":[{"content":"ConstructorInfo","pos":[0,15]}]},{"pos":[58812,58829],"content":"ConstructorInfo[]","needQuote":true,"nodes":[{"content":"ConstructorInfo[]","pos":[0,17]}]},{"pos":[59097,59112],"content":"ConstructorInfo","needQuote":true,"nodes":[{"content":"ConstructorInfo","pos":[0,15]}]},{"content":"[]","pos":[59206,59208]},{"pos":[59316,59331],"content":"ConstructorInfo","needQuote":true,"nodes":[{"content":"ConstructorInfo","pos":[0,15]}]},{"pos":[59424,59426],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[59605,59617],"content":"BindingFlags","needQuote":true,"nodes":[{"content":"BindingFlags","pos":[0,12]}]},{"pos":[59736,59748],"content":"MemberInfo[]","needQuote":true,"nodes":[{"content":"MemberInfo[]","pos":[0,12]}]},{"pos":[59986,59996],"content":"MemberInfo","needQuote":true,"nodes":[{"content":"MemberInfo","pos":[0,10]}]},{"content":"[]","pos":[60080,60082]},{"pos":[60185,60195],"content":"MemberInfo","needQuote":true,"nodes":[{"content":"MemberInfo","pos":[0,10]}]},{"pos":[60278,60280],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[60414,60420],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[60604,60613],"content":"EventInfo","needQuote":true,"nodes":[{"content":"EventInfo","pos":[0,9]}]},{"pos":[60725,60736],"content":"EventInfo[]","needQuote":true,"nodes":[{"content":"EventInfo[]","pos":[0,11]}]},{"pos":[60968,60977],"content":"EventInfo","needQuote":true,"nodes":[{"content":"EventInfo","pos":[0,9]}]},{"content":"[]","pos":[61059,61061]},{"pos":[61163,61172],"content":"EventInfo","needQuote":true,"nodes":[{"content":"EventInfo","pos":[0,9]}]},{"pos":[61253,61255],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[61428,61437],"content":"FieldInfo","needQuote":true,"nodes":[{"content":"FieldInfo","pos":[0,9]}]},{"pos":[61549,61560],"content":"FieldInfo[]","needQuote":true,"nodes":[{"content":"FieldInfo[]","pos":[0,11]}]},{"pos":[61792,61801],"content":"FieldInfo","needQuote":true,"nodes":[{"content":"FieldInfo","pos":[0,9]}]},{"content":"[]","pos":[61883,61885]},{"pos":[61987,61996],"content":"FieldInfo","needQuote":true,"nodes":[{"content":"FieldInfo","pos":[0,9]}]},{"pos":[62077,62079],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[62254,62264],"content":"MethodInfo","needQuote":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[62379,62391],"content":"MethodInfo[]","needQuote":true,"nodes":[{"content":"MethodInfo[]","pos":[0,12]}]},{"pos":[62629,62639],"content":"MethodInfo","needQuote":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"content":"[]","pos":[62723,62725]},{"pos":[62828,62838],"content":"MethodInfo","needQuote":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[62921,62923],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[63010,63024],"content":"PropertyInfo[]","needQuote":true,"nodes":[{"content":"PropertyInfo[]","pos":[0,14]}]},{"pos":[63274,63286],"content":"PropertyInfo","needQuote":true,"nodes":[{"content":"PropertyInfo","pos":[0,12]}]},{"content":"[]","pos":[63374,63376]},{"pos":[63481,63493],"content":"PropertyInfo","needQuote":true,"nodes":[{"content":"PropertyInfo","pos":[0,12]}]},{"pos":[63580,63582],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[63761,63773],"content":"PropertyInfo","needQuote":true,"nodes":[{"content":"PropertyInfo","pos":[0,12]}]},{"pos":[63943,63950],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]}],"content":"items:\n- uid: System.Reflection.TypeExtensions\n  commentId: T:System.Reflection.TypeExtensions\n  id: TypeExtensions\n  parent: System.Reflection\n  children:\n  - System.Reflection.TypeExtensions.GetConstructor(System.Type,System.Type[])\n  - System.Reflection.TypeExtensions.GetConstructors(System.Type)\n  - System.Reflection.TypeExtensions.GetConstructors(System.Type,System.Reflection.BindingFlags)\n  - System.Reflection.TypeExtensions.GetDefaultMembers(System.Type)\n  - System.Reflection.TypeExtensions.GetEvent(System.Type,System.String)\n  - System.Reflection.TypeExtensions.GetEvent(System.Type,System.String,System.Reflection.BindingFlags)\n  - System.Reflection.TypeExtensions.GetEvents(System.Type)\n  - System.Reflection.TypeExtensions.GetEvents(System.Type,System.Reflection.BindingFlags)\n  - System.Reflection.TypeExtensions.GetField(System.Type,System.String)\n  - System.Reflection.TypeExtensions.GetField(System.Type,System.String,System.Reflection.BindingFlags)\n  - System.Reflection.TypeExtensions.GetFields(System.Type)\n  - System.Reflection.TypeExtensions.GetFields(System.Type,System.Reflection.BindingFlags)\n  - System.Reflection.TypeExtensions.GetGenericArguments(System.Type)\n  - System.Reflection.TypeExtensions.GetInterfaces(System.Type)\n  - System.Reflection.TypeExtensions.GetMember(System.Type,System.String)\n  - System.Reflection.TypeExtensions.GetMember(System.Type,System.String,System.Reflection.BindingFlags)\n  - System.Reflection.TypeExtensions.GetMembers(System.Type)\n  - System.Reflection.TypeExtensions.GetMembers(System.Type,System.Reflection.BindingFlags)\n  - System.Reflection.TypeExtensions.GetMethod(System.Type,System.String)\n  - System.Reflection.TypeExtensions.GetMethod(System.Type,System.String,System.Reflection.BindingFlags)\n  - System.Reflection.TypeExtensions.GetMethod(System.Type,System.String,System.Type[])\n  - System.Reflection.TypeExtensions.GetMethods(System.Type)\n  - System.Reflection.TypeExtensions.GetMethods(System.Type,System.Reflection.BindingFlags)\n  - System.Reflection.TypeExtensions.GetNestedType(System.Type,System.String,System.Reflection.BindingFlags)\n  - System.Reflection.TypeExtensions.GetNestedTypes(System.Type,System.Reflection.BindingFlags)\n  - System.Reflection.TypeExtensions.GetProperties(System.Type)\n  - System.Reflection.TypeExtensions.GetProperties(System.Type,System.Reflection.BindingFlags)\n  - System.Reflection.TypeExtensions.GetProperty(System.Type,System.String)\n  - System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Reflection.BindingFlags)\n  - System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Type)\n  - System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Type,System.Type[])\n  - System.Reflection.TypeExtensions.IsAssignableFrom(System.Type,System.Type)\n  - System.Reflection.TypeExtensions.IsInstanceOfType(System.Type,System.Object)\n  langs:\n  - csharp\n  - vb\n  name: TypeExtensions\n  nameWithType: TypeExtensions\n  fullName: System.Reflection.TypeExtensions\n  type: Class\n  source:\n    remote:\n      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TypeExtensions\n    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n    startLine: 49\n  assemblies:\n  - System.Reflection.TypeExtensions\n  namespace: System.Reflection\n  syntax:\n    content: public class TypeExtensions\n    content.vb: Public Class TypeExtensions\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n- uid: System.Reflection.TypeExtensions.GetConstructor(System.Type,System.Type[])\n  commentId: M:System.Reflection.TypeExtensions.GetConstructor(System.Type,System.Type[])\n  id: GetConstructor(System.Type,System.Type[])\n  isExtensionMethod: true\n  parent: System.Reflection.TypeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetConstructor(Type, Type[])\n  nameWithType: TypeExtensions.GetConstructor(Type, Type[])\n  fullName: System.Reflection.TypeExtensions.GetConstructor(System.Type, System.Type[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetConstructor\n    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n    startLine: 51\n  assemblies:\n  - System.Reflection.TypeExtensions\n  namespace: System.Reflection\n  syntax:\n    content: public static ConstructorInfo GetConstructor(this Type type, Type[] types)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetConstructor(type As Type, types As Type()) As ConstructorInfo\n    parameters:\n    - id: type\n      type: System.Type\n    - id: types\n      type: System.Type[]\n    return:\n      type: System.Reflection.ConstructorInfo\n  nameWithType.vb: TypeExtensions.GetConstructor(Type, Type())\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Reflection.TypeExtensions.GetConstructor(System.Type, System.Type())\n  name.vb: GetConstructor(Type, Type())\n- uid: System.Reflection.TypeExtensions.GetConstructors(System.Type)\n  commentId: M:System.Reflection.TypeExtensions.GetConstructors(System.Type)\n  id: GetConstructors(System.Type)\n  isExtensionMethod: true\n  parent: System.Reflection.TypeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetConstructors(Type)\n  nameWithType: TypeExtensions.GetConstructors(Type)\n  fullName: System.Reflection.TypeExtensions.GetConstructors(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetConstructors\n    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n    startLine: 52\n  assemblies:\n  - System.Reflection.TypeExtensions\n  namespace: System.Reflection\n  syntax:\n    content: public static ConstructorInfo[] GetConstructors(this Type type)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetConstructors(type As Type) As ConstructorInfo()\n    parameters:\n    - id: type\n      type: System.Type\n    return:\n      type: System.Reflection.ConstructorInfo[]\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Reflection.TypeExtensions.GetConstructors(System.Type,System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.TypeExtensions.GetConstructors(System.Type,System.Reflection.BindingFlags)\n  id: GetConstructors(System.Type,System.Reflection.BindingFlags)\n  isExtensionMethod: true\n  parent: System.Reflection.TypeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetConstructors(Type, BindingFlags)\n  nameWithType: TypeExtensions.GetConstructors(Type, BindingFlags)\n  fullName: System.Reflection.TypeExtensions.GetConstructors(System.Type, System.Reflection.BindingFlags)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetConstructors\n    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n    startLine: 53\n  assemblies:\n  - System.Reflection.TypeExtensions\n  namespace: System.Reflection\n  syntax:\n    content: public static ConstructorInfo[] GetConstructors(this Type type, BindingFlags bindingAttr)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetConstructors(type As Type, bindingAttr As BindingFlags) As ConstructorInfo()\n    parameters:\n    - id: type\n      type: System.Type\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n    return:\n      type: System.Reflection.ConstructorInfo[]\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Reflection.TypeExtensions.GetDefaultMembers(System.Type)\n  commentId: M:System.Reflection.TypeExtensions.GetDefaultMembers(System.Type)\n  id: GetDefaultMembers(System.Type)\n  isExtensionMethod: true\n  parent: System.Reflection.TypeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetDefaultMembers(Type)\n  nameWithType: TypeExtensions.GetDefaultMembers(Type)\n  fullName: System.Reflection.TypeExtensions.GetDefaultMembers(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetDefaultMembers\n    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n    startLine: 54\n  assemblies:\n  - System.Reflection.TypeExtensions\n  namespace: System.Reflection\n  syntax:\n    content: public static MemberInfo[] GetDefaultMembers(this Type type)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetDefaultMembers(type As Type) As MemberInfo()\n    parameters:\n    - id: type\n      type: System.Type\n    return:\n      type: System.Reflection.MemberInfo[]\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Reflection.TypeExtensions.GetEvent(System.Type,System.String)\n  commentId: M:System.Reflection.TypeExtensions.GetEvent(System.Type,System.String)\n  id: GetEvent(System.Type,System.String)\n  isExtensionMethod: true\n  parent: System.Reflection.TypeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetEvent(Type, String)\n  nameWithType: TypeExtensions.GetEvent(Type, String)\n  fullName: System.Reflection.TypeExtensions.GetEvent(System.Type, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetEvent\n    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n    startLine: 55\n  assemblies:\n  - System.Reflection.TypeExtensions\n  namespace: System.Reflection\n  syntax:\n    content: public static EventInfo GetEvent(this Type type, string name)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetEvent(type As Type, name As String) As EventInfo\n    parameters:\n    - id: type\n      type: System.Type\n    - id: name\n      type: System.String\n    return:\n      type: System.Reflection.EventInfo\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Reflection.TypeExtensions.GetEvent(System.Type,System.String,System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.TypeExtensions.GetEvent(System.Type,System.String,System.Reflection.BindingFlags)\n  id: GetEvent(System.Type,System.String,System.Reflection.BindingFlags)\n  isExtensionMethod: true\n  parent: System.Reflection.TypeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetEvent(Type, String, BindingFlags)\n  nameWithType: TypeExtensions.GetEvent(Type, String, BindingFlags)\n  fullName: System.Reflection.TypeExtensions.GetEvent(System.Type, System.String, System.Reflection.BindingFlags)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetEvent\n    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n    startLine: 56\n  assemblies:\n  - System.Reflection.TypeExtensions\n  namespace: System.Reflection\n  syntax:\n    content: public static EventInfo GetEvent(this Type type, string name, BindingFlags bindingAttr)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetEvent(type As Type, name As String, bindingAttr As BindingFlags) As EventInfo\n    parameters:\n    - id: type\n      type: System.Type\n    - id: name\n      type: System.String\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n    return:\n      type: System.Reflection.EventInfo\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Reflection.TypeExtensions.GetEvents(System.Type)\n  commentId: M:System.Reflection.TypeExtensions.GetEvents(System.Type)\n  id: GetEvents(System.Type)\n  isExtensionMethod: true\n  parent: System.Reflection.TypeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetEvents(Type)\n  nameWithType: TypeExtensions.GetEvents(Type)\n  fullName: System.Reflection.TypeExtensions.GetEvents(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetEvents\n    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n    startLine: 57\n  assemblies:\n  - System.Reflection.TypeExtensions\n  namespace: System.Reflection\n  syntax:\n    content: public static EventInfo[] GetEvents(this Type type)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetEvents(type As Type) As EventInfo()\n    parameters:\n    - id: type\n      type: System.Type\n    return:\n      type: System.Reflection.EventInfo[]\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Reflection.TypeExtensions.GetEvents(System.Type,System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.TypeExtensions.GetEvents(System.Type,System.Reflection.BindingFlags)\n  id: GetEvents(System.Type,System.Reflection.BindingFlags)\n  isExtensionMethod: true\n  parent: System.Reflection.TypeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetEvents(Type, BindingFlags)\n  nameWithType: TypeExtensions.GetEvents(Type, BindingFlags)\n  fullName: System.Reflection.TypeExtensions.GetEvents(System.Type, System.Reflection.BindingFlags)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetEvents\n    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n    startLine: 58\n  assemblies:\n  - System.Reflection.TypeExtensions\n  namespace: System.Reflection\n  syntax:\n    content: public static EventInfo[] GetEvents(this Type type, BindingFlags bindingAttr)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetEvents(type As Type, bindingAttr As BindingFlags) As EventInfo()\n    parameters:\n    - id: type\n      type: System.Type\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n    return:\n      type: System.Reflection.EventInfo[]\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Reflection.TypeExtensions.GetField(System.Type,System.String)\n  commentId: M:System.Reflection.TypeExtensions.GetField(System.Type,System.String)\n  id: GetField(System.Type,System.String)\n  isExtensionMethod: true\n  parent: System.Reflection.TypeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetField(Type, String)\n  nameWithType: TypeExtensions.GetField(Type, String)\n  fullName: System.Reflection.TypeExtensions.GetField(System.Type, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetField\n    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n    startLine: 59\n  assemblies:\n  - System.Reflection.TypeExtensions\n  namespace: System.Reflection\n  syntax:\n    content: public static FieldInfo GetField(this Type type, string name)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetField(type As Type, name As String) As FieldInfo\n    parameters:\n    - id: type\n      type: System.Type\n    - id: name\n      type: System.String\n    return:\n      type: System.Reflection.FieldInfo\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Reflection.TypeExtensions.GetField(System.Type,System.String,System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.TypeExtensions.GetField(System.Type,System.String,System.Reflection.BindingFlags)\n  id: GetField(System.Type,System.String,System.Reflection.BindingFlags)\n  isExtensionMethod: true\n  parent: System.Reflection.TypeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetField(Type, String, BindingFlags)\n  nameWithType: TypeExtensions.GetField(Type, String, BindingFlags)\n  fullName: System.Reflection.TypeExtensions.GetField(System.Type, System.String, System.Reflection.BindingFlags)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetField\n    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n    startLine: 60\n  assemblies:\n  - System.Reflection.TypeExtensions\n  namespace: System.Reflection\n  syntax:\n    content: public static FieldInfo GetField(this Type type, string name, BindingFlags bindingAttr)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetField(type As Type, name As String, bindingAttr As BindingFlags) As FieldInfo\n    parameters:\n    - id: type\n      type: System.Type\n    - id: name\n      type: System.String\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n    return:\n      type: System.Reflection.FieldInfo\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Reflection.TypeExtensions.GetFields(System.Type)\n  commentId: M:System.Reflection.TypeExtensions.GetFields(System.Type)\n  id: GetFields(System.Type)\n  isExtensionMethod: true\n  parent: System.Reflection.TypeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetFields(Type)\n  nameWithType: TypeExtensions.GetFields(Type)\n  fullName: System.Reflection.TypeExtensions.GetFields(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetFields\n    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n    startLine: 61\n  assemblies:\n  - System.Reflection.TypeExtensions\n  namespace: System.Reflection\n  syntax:\n    content: public static FieldInfo[] GetFields(this Type type)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetFields(type As Type) As FieldInfo()\n    parameters:\n    - id: type\n      type: System.Type\n    return:\n      type: System.Reflection.FieldInfo[]\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Reflection.TypeExtensions.GetFields(System.Type,System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.TypeExtensions.GetFields(System.Type,System.Reflection.BindingFlags)\n  id: GetFields(System.Type,System.Reflection.BindingFlags)\n  isExtensionMethod: true\n  parent: System.Reflection.TypeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetFields(Type, BindingFlags)\n  nameWithType: TypeExtensions.GetFields(Type, BindingFlags)\n  fullName: System.Reflection.TypeExtensions.GetFields(System.Type, System.Reflection.BindingFlags)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetFields\n    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n    startLine: 62\n  assemblies:\n  - System.Reflection.TypeExtensions\n  namespace: System.Reflection\n  syntax:\n    content: public static FieldInfo[] GetFields(this Type type, BindingFlags bindingAttr)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetFields(type As Type, bindingAttr As BindingFlags) As FieldInfo()\n    parameters:\n    - id: type\n      type: System.Type\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n    return:\n      type: System.Reflection.FieldInfo[]\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Reflection.TypeExtensions.GetGenericArguments(System.Type)\n  commentId: M:System.Reflection.TypeExtensions.GetGenericArguments(System.Type)\n  id: GetGenericArguments(System.Type)\n  isExtensionMethod: true\n  parent: System.Reflection.TypeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetGenericArguments(Type)\n  nameWithType: TypeExtensions.GetGenericArguments(Type)\n  fullName: System.Reflection.TypeExtensions.GetGenericArguments(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetGenericArguments\n    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n    startLine: 63\n  assemblies:\n  - System.Reflection.TypeExtensions\n  namespace: System.Reflection\n  syntax:\n    content: public static Type[] GetGenericArguments(this Type type)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetGenericArguments(type As Type) As Type()\n    parameters:\n    - id: type\n      type: System.Type\n    return:\n      type: System.Type[]\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Reflection.TypeExtensions.GetInterfaces(System.Type)\n  commentId: M:System.Reflection.TypeExtensions.GetInterfaces(System.Type)\n  id: GetInterfaces(System.Type)\n  isExtensionMethod: true\n  parent: System.Reflection.TypeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetInterfaces(Type)\n  nameWithType: TypeExtensions.GetInterfaces(Type)\n  fullName: System.Reflection.TypeExtensions.GetInterfaces(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetInterfaces\n    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n    startLine: 64\n  assemblies:\n  - System.Reflection.TypeExtensions\n  namespace: System.Reflection\n  syntax:\n    content: public static Type[] GetInterfaces(this Type type)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetInterfaces(type As Type) As Type()\n    parameters:\n    - id: type\n      type: System.Type\n    return:\n      type: System.Type[]\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Reflection.TypeExtensions.GetMember(System.Type,System.String)\n  commentId: M:System.Reflection.TypeExtensions.GetMember(System.Type,System.String)\n  id: GetMember(System.Type,System.String)\n  isExtensionMethod: true\n  parent: System.Reflection.TypeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetMember(Type, String)\n  nameWithType: TypeExtensions.GetMember(Type, String)\n  fullName: System.Reflection.TypeExtensions.GetMember(System.Type, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetMember\n    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n    startLine: 65\n  assemblies:\n  - System.Reflection.TypeExtensions\n  namespace: System.Reflection\n  syntax:\n    content: public static MemberInfo[] GetMember(this Type type, string name)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetMember(type As Type, name As String) As MemberInfo()\n    parameters:\n    - id: type\n      type: System.Type\n    - id: name\n      type: System.String\n    return:\n      type: System.Reflection.MemberInfo[]\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Reflection.TypeExtensions.GetMember(System.Type,System.String,System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.TypeExtensions.GetMember(System.Type,System.String,System.Reflection.BindingFlags)\n  id: GetMember(System.Type,System.String,System.Reflection.BindingFlags)\n  isExtensionMethod: true\n  parent: System.Reflection.TypeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetMember(Type, String, BindingFlags)\n  nameWithType: TypeExtensions.GetMember(Type, String, BindingFlags)\n  fullName: System.Reflection.TypeExtensions.GetMember(System.Type, System.String, System.Reflection.BindingFlags)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetMember\n    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n    startLine: 66\n  assemblies:\n  - System.Reflection.TypeExtensions\n  namespace: System.Reflection\n  syntax:\n    content: public static MemberInfo[] GetMember(this Type type, string name, BindingFlags bindingAttr)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetMember(type As Type, name As String, bindingAttr As BindingFlags) As MemberInfo()\n    parameters:\n    - id: type\n      type: System.Type\n    - id: name\n      type: System.String\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n    return:\n      type: System.Reflection.MemberInfo[]\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Reflection.TypeExtensions.GetMembers(System.Type)\n  commentId: M:System.Reflection.TypeExtensions.GetMembers(System.Type)\n  id: GetMembers(System.Type)\n  isExtensionMethod: true\n  parent: System.Reflection.TypeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetMembers(Type)\n  nameWithType: TypeExtensions.GetMembers(Type)\n  fullName: System.Reflection.TypeExtensions.GetMembers(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetMembers\n    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n    startLine: 67\n  assemblies:\n  - System.Reflection.TypeExtensions\n  namespace: System.Reflection\n  syntax:\n    content: public static MemberInfo[] GetMembers(this Type type)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetMembers(type As Type) As MemberInfo()\n    parameters:\n    - id: type\n      type: System.Type\n    return:\n      type: System.Reflection.MemberInfo[]\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Reflection.TypeExtensions.GetMembers(System.Type,System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.TypeExtensions.GetMembers(System.Type,System.Reflection.BindingFlags)\n  id: GetMembers(System.Type,System.Reflection.BindingFlags)\n  isExtensionMethod: true\n  parent: System.Reflection.TypeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetMembers(Type, BindingFlags)\n  nameWithType: TypeExtensions.GetMembers(Type, BindingFlags)\n  fullName: System.Reflection.TypeExtensions.GetMembers(System.Type, System.Reflection.BindingFlags)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetMembers\n    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n    startLine: 68\n  assemblies:\n  - System.Reflection.TypeExtensions\n  namespace: System.Reflection\n  syntax:\n    content: public static MemberInfo[] GetMembers(this Type type, BindingFlags bindingAttr)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetMembers(type As Type, bindingAttr As BindingFlags) As MemberInfo()\n    parameters:\n    - id: type\n      type: System.Type\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n    return:\n      type: System.Reflection.MemberInfo[]\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Reflection.TypeExtensions.GetMethod(System.Type,System.String)\n  commentId: M:System.Reflection.TypeExtensions.GetMethod(System.Type,System.String)\n  id: GetMethod(System.Type,System.String)\n  isExtensionMethod: true\n  parent: System.Reflection.TypeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetMethod(Type, String)\n  nameWithType: TypeExtensions.GetMethod(Type, String)\n  fullName: System.Reflection.TypeExtensions.GetMethod(System.Type, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetMethod\n    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n    startLine: 69\n  assemblies:\n  - System.Reflection.TypeExtensions\n  namespace: System.Reflection\n  syntax:\n    content: public static MethodInfo GetMethod(this Type type, string name)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetMethod(type As Type, name As String) As MethodInfo\n    parameters:\n    - id: type\n      type: System.Type\n    - id: name\n      type: System.String\n    return:\n      type: System.Reflection.MethodInfo\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Reflection.TypeExtensions.GetMethod(System.Type,System.String,System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.TypeExtensions.GetMethod(System.Type,System.String,System.Reflection.BindingFlags)\n  id: GetMethod(System.Type,System.String,System.Reflection.BindingFlags)\n  isExtensionMethod: true\n  parent: System.Reflection.TypeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetMethod(Type, String, BindingFlags)\n  nameWithType: TypeExtensions.GetMethod(Type, String, BindingFlags)\n  fullName: System.Reflection.TypeExtensions.GetMethod(System.Type, System.String, System.Reflection.BindingFlags)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetMethod\n    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n    startLine: 70\n  assemblies:\n  - System.Reflection.TypeExtensions\n  namespace: System.Reflection\n  syntax:\n    content: public static MethodInfo GetMethod(this Type type, string name, BindingFlags bindingAttr)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetMethod(type As Type, name As String, bindingAttr As BindingFlags) As MethodInfo\n    parameters:\n    - id: type\n      type: System.Type\n    - id: name\n      type: System.String\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n    return:\n      type: System.Reflection.MethodInfo\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Reflection.TypeExtensions.GetMethod(System.Type,System.String,System.Type[])\n  commentId: M:System.Reflection.TypeExtensions.GetMethod(System.Type,System.String,System.Type[])\n  id: GetMethod(System.Type,System.String,System.Type[])\n  isExtensionMethod: true\n  parent: System.Reflection.TypeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetMethod(Type, String, Type[])\n  nameWithType: TypeExtensions.GetMethod(Type, String, Type[])\n  fullName: System.Reflection.TypeExtensions.GetMethod(System.Type, System.String, System.Type[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetMethod\n    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n    startLine: 71\n  assemblies:\n  - System.Reflection.TypeExtensions\n  namespace: System.Reflection\n  syntax:\n    content: public static MethodInfo GetMethod(this Type type, string name, Type[] types)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetMethod(type As Type, name As String, types As Type()) As MethodInfo\n    parameters:\n    - id: type\n      type: System.Type\n    - id: name\n      type: System.String\n    - id: types\n      type: System.Type[]\n    return:\n      type: System.Reflection.MethodInfo\n  nameWithType.vb: TypeExtensions.GetMethod(Type, String, Type())\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Reflection.TypeExtensions.GetMethod(System.Type, System.String, System.Type())\n  name.vb: GetMethod(Type, String, Type())\n- uid: System.Reflection.TypeExtensions.GetMethods(System.Type)\n  commentId: M:System.Reflection.TypeExtensions.GetMethods(System.Type)\n  id: GetMethods(System.Type)\n  isExtensionMethod: true\n  parent: System.Reflection.TypeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetMethods(Type)\n  nameWithType: TypeExtensions.GetMethods(Type)\n  fullName: System.Reflection.TypeExtensions.GetMethods(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetMethods\n    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n    startLine: 72\n  assemblies:\n  - System.Reflection.TypeExtensions\n  namespace: System.Reflection\n  syntax:\n    content: public static MethodInfo[] GetMethods(this Type type)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetMethods(type As Type) As MethodInfo()\n    parameters:\n    - id: type\n      type: System.Type\n    return:\n      type: System.Reflection.MethodInfo[]\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Reflection.TypeExtensions.GetMethods(System.Type,System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.TypeExtensions.GetMethods(System.Type,System.Reflection.BindingFlags)\n  id: GetMethods(System.Type,System.Reflection.BindingFlags)\n  isExtensionMethod: true\n  parent: System.Reflection.TypeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetMethods(Type, BindingFlags)\n  nameWithType: TypeExtensions.GetMethods(Type, BindingFlags)\n  fullName: System.Reflection.TypeExtensions.GetMethods(System.Type, System.Reflection.BindingFlags)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetMethods\n    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n    startLine: 73\n  assemblies:\n  - System.Reflection.TypeExtensions\n  namespace: System.Reflection\n  syntax:\n    content: public static MethodInfo[] GetMethods(this Type type, BindingFlags bindingAttr)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetMethods(type As Type, bindingAttr As BindingFlags) As MethodInfo()\n    parameters:\n    - id: type\n      type: System.Type\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n    return:\n      type: System.Reflection.MethodInfo[]\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Reflection.TypeExtensions.GetNestedType(System.Type,System.String,System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.TypeExtensions.GetNestedType(System.Type,System.String,System.Reflection.BindingFlags)\n  id: GetNestedType(System.Type,System.String,System.Reflection.BindingFlags)\n  isExtensionMethod: true\n  parent: System.Reflection.TypeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetNestedType(Type, String, BindingFlags)\n  nameWithType: TypeExtensions.GetNestedType(Type, String, BindingFlags)\n  fullName: System.Reflection.TypeExtensions.GetNestedType(System.Type, System.String, System.Reflection.BindingFlags)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetNestedType\n    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n    startLine: 74\n  assemblies:\n  - System.Reflection.TypeExtensions\n  namespace: System.Reflection\n  syntax:\n    content: public static Type GetNestedType(this Type type, string name, BindingFlags bindingAttr)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetNestedType(type As Type, name As String, bindingAttr As BindingFlags) As Type\n    parameters:\n    - id: type\n      type: System.Type\n    - id: name\n      type: System.String\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n    return:\n      type: System.Type\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Reflection.TypeExtensions.GetNestedTypes(System.Type,System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.TypeExtensions.GetNestedTypes(System.Type,System.Reflection.BindingFlags)\n  id: GetNestedTypes(System.Type,System.Reflection.BindingFlags)\n  isExtensionMethod: true\n  parent: System.Reflection.TypeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetNestedTypes(Type, BindingFlags)\n  nameWithType: TypeExtensions.GetNestedTypes(Type, BindingFlags)\n  fullName: System.Reflection.TypeExtensions.GetNestedTypes(System.Type, System.Reflection.BindingFlags)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetNestedTypes\n    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n    startLine: 75\n  assemblies:\n  - System.Reflection.TypeExtensions\n  namespace: System.Reflection\n  syntax:\n    content: public static Type[] GetNestedTypes(this Type type, BindingFlags bindingAttr)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetNestedTypes(type As Type, bindingAttr As BindingFlags) As Type()\n    parameters:\n    - id: type\n      type: System.Type\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n    return:\n      type: System.Type[]\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Reflection.TypeExtensions.GetProperties(System.Type)\n  commentId: M:System.Reflection.TypeExtensions.GetProperties(System.Type)\n  id: GetProperties(System.Type)\n  isExtensionMethod: true\n  parent: System.Reflection.TypeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetProperties(Type)\n  nameWithType: TypeExtensions.GetProperties(Type)\n  fullName: System.Reflection.TypeExtensions.GetProperties(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetProperties\n    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n    startLine: 76\n  assemblies:\n  - System.Reflection.TypeExtensions\n  namespace: System.Reflection\n  syntax:\n    content: public static PropertyInfo[] GetProperties(this Type type)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetProperties(type As Type) As PropertyInfo()\n    parameters:\n    - id: type\n      type: System.Type\n    return:\n      type: System.Reflection.PropertyInfo[]\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Reflection.TypeExtensions.GetProperties(System.Type,System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.TypeExtensions.GetProperties(System.Type,System.Reflection.BindingFlags)\n  id: GetProperties(System.Type,System.Reflection.BindingFlags)\n  isExtensionMethod: true\n  parent: System.Reflection.TypeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetProperties(Type, BindingFlags)\n  nameWithType: TypeExtensions.GetProperties(Type, BindingFlags)\n  fullName: System.Reflection.TypeExtensions.GetProperties(System.Type, System.Reflection.BindingFlags)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetProperties\n    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n    startLine: 77\n  assemblies:\n  - System.Reflection.TypeExtensions\n  namespace: System.Reflection\n  syntax:\n    content: public static PropertyInfo[] GetProperties(this Type type, BindingFlags bindingAttr)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetProperties(type As Type, bindingAttr As BindingFlags) As PropertyInfo()\n    parameters:\n    - id: type\n      type: System.Type\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n    return:\n      type: System.Reflection.PropertyInfo[]\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Reflection.TypeExtensions.GetProperty(System.Type,System.String)\n  commentId: M:System.Reflection.TypeExtensions.GetProperty(System.Type,System.String)\n  id: GetProperty(System.Type,System.String)\n  isExtensionMethod: true\n  parent: System.Reflection.TypeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetProperty(Type, String)\n  nameWithType: TypeExtensions.GetProperty(Type, String)\n  fullName: System.Reflection.TypeExtensions.GetProperty(System.Type, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetProperty\n    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n    startLine: 78\n  assemblies:\n  - System.Reflection.TypeExtensions\n  namespace: System.Reflection\n  syntax:\n    content: public static PropertyInfo GetProperty(this Type type, string name)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetProperty(type As Type, name As String) As PropertyInfo\n    parameters:\n    - id: type\n      type: System.Type\n    - id: name\n      type: System.String\n    return:\n      type: System.Reflection.PropertyInfo\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Reflection.BindingFlags)\n  id: GetProperty(System.Type,System.String,System.Reflection.BindingFlags)\n  isExtensionMethod: true\n  parent: System.Reflection.TypeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetProperty(Type, String, BindingFlags)\n  nameWithType: TypeExtensions.GetProperty(Type, String, BindingFlags)\n  fullName: System.Reflection.TypeExtensions.GetProperty(System.Type, System.String, System.Reflection.BindingFlags)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetProperty\n    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n    startLine: 79\n  assemblies:\n  - System.Reflection.TypeExtensions\n  namespace: System.Reflection\n  syntax:\n    content: public static PropertyInfo GetProperty(this Type type, string name, BindingFlags bindingAttr)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetProperty(type As Type, name As String, bindingAttr As BindingFlags) As PropertyInfo\n    parameters:\n    - id: type\n      type: System.Type\n    - id: name\n      type: System.String\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n    return:\n      type: System.Reflection.PropertyInfo\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Type)\n  commentId: M:System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Type)\n  id: GetProperty(System.Type,System.String,System.Type)\n  isExtensionMethod: true\n  parent: System.Reflection.TypeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetProperty(Type, String, Type)\n  nameWithType: TypeExtensions.GetProperty(Type, String, Type)\n  fullName: System.Reflection.TypeExtensions.GetProperty(System.Type, System.String, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetProperty\n    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n    startLine: 80\n  assemblies:\n  - System.Reflection.TypeExtensions\n  namespace: System.Reflection\n  syntax:\n    content: public static PropertyInfo GetProperty(this Type type, string name, Type returnType)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetProperty(type As Type, name As String, returnType As Type) As PropertyInfo\n    parameters:\n    - id: type\n      type: System.Type\n    - id: name\n      type: System.String\n    - id: returnType\n      type: System.Type\n    return:\n      type: System.Reflection.PropertyInfo\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Type,System.Type[])\n  commentId: M:System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Type,System.Type[])\n  id: GetProperty(System.Type,System.String,System.Type,System.Type[])\n  isExtensionMethod: true\n  parent: System.Reflection.TypeExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetProperty(Type, String, Type, Type[])\n  nameWithType: TypeExtensions.GetProperty(Type, String, Type, Type[])\n  fullName: System.Reflection.TypeExtensions.GetProperty(System.Type, System.String, System.Type, System.Type[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetProperty\n    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n    startLine: 81\n  assemblies:\n  - System.Reflection.TypeExtensions\n  namespace: System.Reflection\n  syntax:\n    content: public static PropertyInfo GetProperty(this Type type, string name, Type returnType, Type[] types)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetProperty(type As Type, name As String, returnType As Type, types As Type()) As PropertyInfo\n    parameters:\n    - id: type\n      type: System.Type\n    - id: name\n      type: System.String\n    - id: returnType\n      type: System.Type\n    - id: types\n      type: System.Type[]\n    return:\n      type: System.Reflection.PropertyInfo\n  nameWithType.vb: TypeExtensions.GetProperty(Type, String, Type, Type())\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Reflection.TypeExtensions.GetProperty(System.Type, System.String, System.Type, System.Type())\n  name.vb: GetProperty(Type, String, Type, Type())\n- uid: System.Reflection.TypeExtensions.IsAssignableFrom(System.Type,System.Type)\n  commentId: M:System.Reflection.TypeExtensions.IsAssignableFrom(System.Type,System.Type)\n  id: IsAssignableFrom(System.Type,System.Type)\n  isExtensionMethod: true\n  parent: System.Reflection.TypeExtensions\n  langs:\n  - csharp\n  - vb\n  name: IsAssignableFrom(Type, Type)\n  nameWithType: TypeExtensions.IsAssignableFrom(Type, Type)\n  fullName: System.Reflection.TypeExtensions.IsAssignableFrom(System.Type, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsAssignableFrom\n    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n    startLine: 82\n  assemblies:\n  - System.Reflection.TypeExtensions\n  namespace: System.Reflection\n  syntax:\n    content: public static bool IsAssignableFrom(this Type type, Type c)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function IsAssignableFrom(type As Type, c As Type) As Boolean\n    parameters:\n    - id: type\n      type: System.Type\n    - id: c\n      type: System.Type\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Reflection.TypeExtensions.IsInstanceOfType(System.Type,System.Object)\n  commentId: M:System.Reflection.TypeExtensions.IsInstanceOfType(System.Type,System.Object)\n  id: IsInstanceOfType(System.Type,System.Object)\n  isExtensionMethod: true\n  parent: System.Reflection.TypeExtensions\n  langs:\n  - csharp\n  - vb\n  name: IsInstanceOfType(Type, Object)\n  nameWithType: TypeExtensions.IsInstanceOfType(Type, Object)\n  fullName: System.Reflection.TypeExtensions.IsInstanceOfType(System.Type, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsInstanceOfType\n    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n    startLine: 83\n  assemblies:\n  - System.Reflection.TypeExtensions\n  namespace: System.Reflection\n  syntax:\n    content: public static bool IsInstanceOfType(this Type type, object o)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function IsInstanceOfType(type As Type, o As Object) As Boolean\n    parameters:\n    - id: type\n      type: System.Type\n    - id: o\n      type: System.Object\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\nreferences:\n- uid: System.Reflection\n  commentId: N:System.Reflection\n  isExternal: false\n  name: System.Reflection\n  nameWithType: System.Reflection\n  fullName: System.Reflection\n- uid: System.Object\n  commentId: T:System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Object.ToString\n  commentId: M:System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    nameWithType: Object.ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    nameWithType: Object.ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.Equals(System.Object)\n  commentId: M:System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.Equals(System.Object,System.Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    nameWithType: Object.ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    nameWithType: Object.ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.GetHashCode\n  commentId: M:System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    nameWithType: Object.GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    nameWithType: Object.GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.GetType\n  commentId: M:System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    nameWithType: Object.GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    nameWithType: Object.GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.MemberwiseClone\n  commentId: M:System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    nameWithType: Object.MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    nameWithType: Object.MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System\n  commentId: N:System\n  isExternal: false\n  name: System\n  nameWithType: System\n  fullName: System\n- uid: System.Type\n  commentId: T:System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Type[]\n  name: Type[]\n  nameWithType: Type[]\n  fullName: System.Type[]\n  nameWithType.vb: Type()\n  fullname.vb: System.Type()\n  name.vb: Type()\n  spec.csharp:\n  - uid: System.Type\n    name: Type\n    nameWithType: Type\n    fullName: System.Type\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Type\n    name: Type\n    nameWithType: Type\n    fullName: System.Type\n  - name: ()\n    nameWithType: ()\n    fullName: ()\n- uid: System.Reflection.ConstructorInfo\n  commentId: T:System.Reflection.ConstructorInfo\n  parent: System.Reflection\n  isExternal: false\n  name: ConstructorInfo\n  nameWithType: ConstructorInfo\n  fullName: System.Reflection.ConstructorInfo\n- uid: System.Reflection.ConstructorInfo[]\n  name: ConstructorInfo[]\n  nameWithType: ConstructorInfo[]\n  fullName: System.Reflection.ConstructorInfo[]\n  nameWithType.vb: ConstructorInfo()\n  fullname.vb: System.Reflection.ConstructorInfo()\n  name.vb: ConstructorInfo()\n  spec.csharp:\n  - uid: System.Reflection.ConstructorInfo\n    name: ConstructorInfo\n    nameWithType: ConstructorInfo\n    fullName: System.Reflection.ConstructorInfo\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Reflection.ConstructorInfo\n    name: ConstructorInfo\n    nameWithType: ConstructorInfo\n    fullName: System.Reflection.ConstructorInfo\n  - name: ()\n    nameWithType: ()\n    fullName: ()\n- uid: System.Reflection.BindingFlags\n  commentId: T:System.Reflection.BindingFlags\n  parent: System.Reflection\n  isExternal: false\n  name: BindingFlags\n  nameWithType: BindingFlags\n  fullName: System.Reflection.BindingFlags\n- uid: System.Reflection.MemberInfo[]\n  name: MemberInfo[]\n  nameWithType: MemberInfo[]\n  fullName: System.Reflection.MemberInfo[]\n  nameWithType.vb: MemberInfo()\n  fullname.vb: System.Reflection.MemberInfo()\n  name.vb: MemberInfo()\n  spec.csharp:\n  - uid: System.Reflection.MemberInfo\n    name: MemberInfo\n    nameWithType: MemberInfo\n    fullName: System.Reflection.MemberInfo\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Reflection.MemberInfo\n    name: MemberInfo\n    nameWithType: MemberInfo\n    fullName: System.Reflection.MemberInfo\n  - name: ()\n    nameWithType: ()\n    fullName: ()\n- uid: System.String\n  commentId: T:System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Reflection.EventInfo\n  commentId: T:System.Reflection.EventInfo\n  parent: System.Reflection\n  isExternal: false\n  name: EventInfo\n  nameWithType: EventInfo\n  fullName: System.Reflection.EventInfo\n- uid: System.Reflection.EventInfo[]\n  name: EventInfo[]\n  nameWithType: EventInfo[]\n  fullName: System.Reflection.EventInfo[]\n  nameWithType.vb: EventInfo()\n  fullname.vb: System.Reflection.EventInfo()\n  name.vb: EventInfo()\n  spec.csharp:\n  - uid: System.Reflection.EventInfo\n    name: EventInfo\n    nameWithType: EventInfo\n    fullName: System.Reflection.EventInfo\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Reflection.EventInfo\n    name: EventInfo\n    nameWithType: EventInfo\n    fullName: System.Reflection.EventInfo\n  - name: ()\n    nameWithType: ()\n    fullName: ()\n- uid: System.Reflection.FieldInfo\n  commentId: T:System.Reflection.FieldInfo\n  parent: System.Reflection\n  isExternal: false\n  name: FieldInfo\n  nameWithType: FieldInfo\n  fullName: System.Reflection.FieldInfo\n- uid: System.Reflection.FieldInfo[]\n  name: FieldInfo[]\n  nameWithType: FieldInfo[]\n  fullName: System.Reflection.FieldInfo[]\n  nameWithType.vb: FieldInfo()\n  fullname.vb: System.Reflection.FieldInfo()\n  name.vb: FieldInfo()\n  spec.csharp:\n  - uid: System.Reflection.FieldInfo\n    name: FieldInfo\n    nameWithType: FieldInfo\n    fullName: System.Reflection.FieldInfo\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Reflection.FieldInfo\n    name: FieldInfo\n    nameWithType: FieldInfo\n    fullName: System.Reflection.FieldInfo\n  - name: ()\n    nameWithType: ()\n    fullName: ()\n- uid: System.Reflection.MethodInfo\n  commentId: T:System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Reflection.MethodInfo[]\n  name: MethodInfo[]\n  nameWithType: MethodInfo[]\n  fullName: System.Reflection.MethodInfo[]\n  nameWithType.vb: MethodInfo()\n  fullname.vb: System.Reflection.MethodInfo()\n  name.vb: MethodInfo()\n  spec.csharp:\n  - uid: System.Reflection.MethodInfo\n    name: MethodInfo\n    nameWithType: MethodInfo\n    fullName: System.Reflection.MethodInfo\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Reflection.MethodInfo\n    name: MethodInfo\n    nameWithType: MethodInfo\n    fullName: System.Reflection.MethodInfo\n  - name: ()\n    nameWithType: ()\n    fullName: ()\n- uid: System.Reflection.PropertyInfo[]\n  name: PropertyInfo[]\n  nameWithType: PropertyInfo[]\n  fullName: System.Reflection.PropertyInfo[]\n  nameWithType.vb: PropertyInfo()\n  fullname.vb: System.Reflection.PropertyInfo()\n  name.vb: PropertyInfo()\n  spec.csharp:\n  - uid: System.Reflection.PropertyInfo\n    name: PropertyInfo\n    nameWithType: PropertyInfo\n    fullName: System.Reflection.PropertyInfo\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Reflection.PropertyInfo\n    name: PropertyInfo\n    nameWithType: PropertyInfo\n    fullName: System.Reflection.PropertyInfo\n  - name: ()\n    nameWithType: ()\n    fullName: ()\n- uid: System.Reflection.PropertyInfo\n  commentId: T:System.Reflection.PropertyInfo\n  parent: System.Reflection\n  isExternal: false\n  name: PropertyInfo\n  nameWithType: PropertyInfo\n  fullName: System.Reflection.PropertyInfo\n- uid: System.Boolean\n  commentId: T:System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n"}