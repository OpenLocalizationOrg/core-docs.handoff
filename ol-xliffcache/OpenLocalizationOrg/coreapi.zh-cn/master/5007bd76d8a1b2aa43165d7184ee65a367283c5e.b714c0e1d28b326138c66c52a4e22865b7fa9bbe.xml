{"nodes":[{"pos":[270,291],"content":"EnumerableExecutor<T>","needQuote":true,"nodes":[{"content":"EnumerableExecutor&lt;T&gt;","pos":[0,21],"source":"EnumerableExecutor<T>"}]},{"content":"\\n&lt;p&gt;The data type of the value that results from executing the expression tree.&lt;/p&gt;\\n","pos":[1052,1138],"source":"\\n<p>The data type of the value that results from executing the expression tree.</p>\\n"},{"pos":[2050,2092],"content":"EnumerableExecutor(Expressions.Expression)","needQuote":true,"nodes":[{"content":"EnumerableExecutor(Expressions.Expression)","pos":[0,42]}]},{"content":"\\n&lt;p&gt;An expression tree to associate with the new instance.&lt;/p&gt;\\n","pos":[2950,3015],"source":"\\n<p>An expression tree to associate with the new instance.</p>\\n"},{"pos":[3409,3420],"content":"System.Linq","needQuote":true,"nodes":[{"content":"System.Linq","pos":[0,11]}]},{"pos":[3566,3572],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[3739,3757],"content":"EnumerableExecutor","needQuote":true,"nodes":[{"content":"EnumerableExecutor","pos":[0,18]}]},{"pos":[3963,3973],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[4068,4076],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[4145,4146],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[4173,4174],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[4244,4252],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[4321,4322],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[4349,4350],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[4533,4547],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[4666,4672],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[4739,4740],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[4790,4796],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[4856,4857],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[4940,4946],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[5013,5014],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[5064,5070],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[5130,5131],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[5345,5367],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[5515,5521],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[5588,5589],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[5639,5645],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[5706,5707]},{"pos":[5762,5768],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[5828,5829],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[5926,5932],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[5999,6000],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6050,6056],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[6117,6118]},{"pos":[6173,6179],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[6239,6240],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6485,6516],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[6682,6697],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[6773,6774],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6824,6830],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[6891,6892]},{"pos":[6947,6953],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7013,7014],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7120,7135],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[7211,7212],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7262,7268],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[7329,7330]},{"pos":[7385,7391],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7451,7452],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7682,7695],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[7796,7807],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[7879,7880],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7907,7908],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7981,7992],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[8064,8065],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8092,8093],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8268,8277],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[8370,8377],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[8445,8446],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8473,8474],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8543,8550],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[8618,8619],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8646,8647],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8822,8839],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[8948,8963],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[9039,9040],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9067,9068],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9145,9160],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[9236,9237],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9264,9265],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9410,9416],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[9585,9595],"content":"Expression","needQuote":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[9779,9802],"content":"System.Linq.Expressions","needQuote":true,"nodes":[{"content":"System.Linq.Expressions","pos":[0,23]}]}],"content":"items:\n- uid: System.Linq.EnumerableExecutor`1\n  commentId: T:System.Linq.EnumerableExecutor`1\n  id: EnumerableExecutor`1\n  parent: System.Linq\n  children:\n  - System.Linq.EnumerableExecutor`1.#ctor(System.Linq.Expressions.Expression)\n  langs:\n  - csharp\n  - vb\n  name: EnumerableExecutor<T>\n  fullName: System.Linq.EnumerableExecutor<T>\n  type: Class\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: EnumerableExecutor\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 14\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Represents an expression tree and provides functionality to execute the expression tree after rewriting it.</p>\\n\"\n  syntax:\n    content: 'public class EnumerableExecutor<T> : EnumerableExecutor'\n    content.vb: >-\n      Public Class EnumerableExecutor(Of T)\n          Inherits EnumerableExecutor\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The data type of the value that results from executing the expression tree.</p>\\n\"\n  inheritance:\n  - System.Object\n  - System.Linq.EnumerableExecutor\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  fullName.vb: System.Linq.EnumerableExecutor(Of T)\n  name.vb: EnumerableExecutor(Of T)\n  nameWithType: EnumerableExecutor<T>\n  nameWithType.vb: EnumerableExecutor(Of T)\n- uid: System.Linq.EnumerableExecutor`1.#ctor(System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.EnumerableExecutor`1.#ctor(System.Linq.Expressions.Expression)\n  id: '#ctor(System.Linq.Expressions.Expression)'\n  parent: System.Linq.EnumerableExecutor`1\n  langs:\n  - csharp\n  - vb\n  name: EnumerableExecutor(Expressions.Expression)\n  fullName: System.Linq.EnumerableExecutor<T>.EnumerableExecutor(System.Linq.Expressions.Expression)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs\n    startLine: 16\n  assemblies:\n  - System.Linq.Queryable\n  namespace: System.Linq\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Linq.EnumerableExecutor`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public EnumerableExecutor(Expressions.Expression expression)\n    content.vb: Public Sub New(expression As Expressions.Expression)\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An expression tree to associate with the new instance.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Linq.EnumerableExecutor(Of T).EnumerableExecutor(System.Linq.Expressions.Expression)\n  nameWithType: EnumerableExecutor<T>.EnumerableExecutor(Expressions.Expression)\n  nameWithType.vb: EnumerableExecutor(Of T).EnumerableExecutor(Expressions.Expression)\nreferences:\n- uid: System.Linq\n  isExternal: false\n  name: System.Linq\n  fullName: System.Linq\n  commentId: N:System.Linq\n  nameWithType: System.Linq\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Linq.EnumerableExecutor\n  parent: System.Linq\n  isExternal: false\n  name: EnumerableExecutor\n  fullName: System.Linq.EnumerableExecutor\n  commentId: T:System.Linq.EnumerableExecutor\n  nameWithType: EnumerableExecutor\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  fullName: System.Linq.Expressions.Expression\n  commentId: T:System.Linq.Expressions.Expression\n  nameWithType: Expression\n- uid: System.Linq.Expressions\n  isExternal: false\n  name: System.Linq.Expressions\n  fullName: System.Linq.Expressions\n  commentId: N:System.Linq.Expressions\n  nameWithType: System.Linq.Expressions\n"}