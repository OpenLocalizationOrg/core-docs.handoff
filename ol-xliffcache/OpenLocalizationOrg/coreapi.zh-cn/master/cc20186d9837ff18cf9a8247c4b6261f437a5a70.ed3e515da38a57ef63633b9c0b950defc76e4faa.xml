{"nodes":[{"pos":[1463,1496],"content":"X509SubjectKeyIdentifierExtension","needQuote":true,"nodes":[{"content":"X509SubjectKeyIdentifierExtension","pos":[0,33]}]},{"pos":[3138,3173],"content":"X509SubjectKeyIdentifierExtension()","needQuote":true,"nodes":[{"content":"X509SubjectKeyIdentifierExtension()","pos":[0,35]}]},{"pos":[4667,4717],"content":"X509SubjectKeyIdentifierExtension(Byte[], Boolean)","needQuote":true,"nodes":[{"content":"X509SubjectKeyIdentifierExtension(Byte[], Boolean)","pos":[0,50]}]},{"content":"\\n&lt;p&gt;A byte array that represents data to use to create the extension.&lt;/p&gt;\\n","pos":[5942,6018],"source":"\\n<p>A byte array that represents data to use to create the extension.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the extension is critical; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[6086,6185],"source":"\\n<p>\\n<strong>true</strong> if the extension is critical; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[7185,7243],"content":"X509SubjectKeyIdentifierExtension(AsnEncodedData, Boolean)","needQuote":true,"nodes":[{"content":"X509SubjectKeyIdentifierExtension(AsnEncodedData, Boolean)","pos":[0,58]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the extension is critical; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[8790,8889],"source":"\\n<p>\\n<strong>true</strong> if the extension is critical; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[9607,9660],"content":"X509SubjectKeyIdentifierExtension(PublicKey, Boolean)","needQuote":true,"nodes":[{"content":"X509SubjectKeyIdentifierExtension(PublicKey, Boolean)","pos":[0,53]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the extension is critical; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[11171,11270],"source":"\\n<p>\\n<strong>true</strong> if the extension is critical; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[12235,12327],"content":"X509SubjectKeyIdentifierExtension(PublicKey, X509SubjectKeyIdentifierHashAlgorithm, Boolean)","needQuote":true,"nodes":[{"content":"X509SubjectKeyIdentifierExtension(PublicKey, X509SubjectKeyIdentifierHashAlgorithm, Boolean)","pos":[0,92]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the extension is critical; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[14408,14507],"source":"\\n<p>\\n<strong>true</strong> if the extension is critical; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[15133,15183],"content":"X509SubjectKeyIdentifierExtension(String, Boolean)","needQuote":true,"nodes":[{"content":"X509SubjectKeyIdentifierExtension(String, Boolean)","pos":[0,50]}]},{"content":"\\n&lt;p&gt;A string, encoded in hexadecimal format, that represents the subject key identifier (SKI) for a certificate.&lt;/p&gt;\\n","pos":[16404,16523],"source":"\\n<p>A string, encoded in hexadecimal format, that represents the subject key identifier (SKI) for a certificate.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the extension is critical; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[16591,16690],"source":"\\n<p>\\n<strong>true</strong> if the extension is critical; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[17227,17247],"content":"SubjectKeyIdentifier","needQuote":true,"nodes":[{"content":"SubjectKeyIdentifier","pos":[0,20]}]},{"content":"\\n&lt;p&gt;A string, encoded in hexadecimal format, that represents the subject key identifier (SKI).&lt;/p&gt;\\n","pos":[18191,18292],"source":"\\n<p>A string, encoded in hexadecimal format, that represents the subject key identifier (SKI).</p>\\n"},{"content":"\\n&lt;p&gt;The extension cannot be decoded.","pos":[18457,18494],"source":"\\n<p>The extension cannot be decoded."},{"content":"&lt;/p&gt;\\n","pos":[18495,18501],"source":" </p>\\n"},{"pos":[19128,19152],"content":"CopyFrom(AsnEncodedData)","needQuote":true,"nodes":[{"content":"CopyFrom(AsnEncodedData)","pos":[0,24]}]},{"pos":[20856,20901],"content":"System.Security.Cryptography.X509Certificates","needQuote":true,"nodes":[{"content":"System.Security.Cryptography.X509Certificates","pos":[0,45]}]},{"pos":[21149,21155],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21385,21398],"content":"X509Extension","needQuote":true,"nodes":[{"content":"X509Extension","pos":[0,13]}]},{"pos":[21750,21758],"content":"Critical","needQuote":true,"nodes":[{"content":"Critical","pos":[0,8]}]},{"pos":[22005,22011],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[22105,22111],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[22231,22235],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[22294,22296]},{"pos":[22359,22363],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[22421,22423],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[22557,22564],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[22764,22778],"content":"AsnEncodedData","needQuote":true,"nodes":[{"content":"AsnEncodedData","pos":[0,14]}]},{"pos":[22989,23017],"content":"System.Security.Cryptography","needQuote":true,"nodes":[{"content":"System.Security.Cryptography","pos":[0,28]}]},{"pos":[23295,23304],"content":"PublicKey","needQuote":true,"nodes":[{"content":"PublicKey","pos":[0,9]}]},{"pos":[23645,23682],"content":"X509SubjectKeyIdentifierHashAlgorithm","needQuote":true,"nodes":[{"content":"X509SubjectKeyIdentifierHashAlgorithm","pos":[0,37]}]},{"pos":[23998,24004],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[24301,24325],"content":"CopyFrom(AsnEncodedData)","needQuote":true,"nodes":[{"content":"CopyFrom(AsnEncodedData)","pos":[0,24]}]},{"pos":[24600,24608],"content":"CopyFrom","needQuote":true,"nodes":[{"content":"CopyFrom","pos":[0,8]}]},{"pos":[24702,24703],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24783,24797],"content":"AsnEncodedData","needQuote":true,"nodes":[{"content":"AsnEncodedData","pos":[0,14]}]},{"pos":[24887,24888],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25049,25057],"content":"CopyFrom","needQuote":true,"nodes":[{"content":"CopyFrom","pos":[0,8]}]},{"pos":[25151,25152],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25232,25246],"content":"AsnEncodedData","needQuote":true,"nodes":[{"content":"AsnEncodedData","pos":[0,14]}]},{"pos":[25336,25337],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25625,25647],"content":"CryptographicException","needQuote":true,"nodes":[{"content":"CryptographicException","pos":[0,22]}]}],"content":"items:\n- uid: System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension\n  commentId: T:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension\n  id: X509SubjectKeyIdentifierExtension\n  parent: System.Security.Cryptography.X509Certificates\n  children:\n  - System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.#ctor\n  - System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.#ctor(System.Byte[],System.Boolean)\n  - System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.#ctor(System.Security.Cryptography.AsnEncodedData,System.Boolean)\n  - System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.#ctor(System.Security.Cryptography.X509Certificates.PublicKey,System.Boolean)\n  - System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.#ctor(System.Security.Cryptography.X509Certificates.PublicKey,System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierHashAlgorithm,System.Boolean)\n  - System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.#ctor(System.String,System.Boolean)\n  - System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.CopyFrom(System.Security.Cryptography.AsnEncodedData)\n  - System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.SubjectKeyIdentifier\n  langs:\n  - csharp\n  - vb\n  name: X509SubjectKeyIdentifierExtension\n  fullName: System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: X509SubjectKeyIdentifierExtension\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 438\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Defines a string that identifies a certificate's subject key identifier (SKI). This class cannot be inherited.</p>\\n\"\n  syntax:\n    content: 'public sealed class X509SubjectKeyIdentifierExtension : X509Extension'\n    content.vb: >-\n      Public NotInheritable Class X509SubjectKeyIdentifierExtension\n          Inherits X509Extension\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.X509Certificates.X509Extension\n  inheritedMembers:\n  - System.Security.Cryptography.X509Certificates.X509Extension.Critical\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: X509SubjectKeyIdentifierExtension\n- uid: System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.#ctor\n  commentId: M:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension\n  langs:\n  - csharp\n  - vb\n  name: X509SubjectKeyIdentifierExtension()\n  fullName: System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.X509SubjectKeyIdentifierExtension()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 440\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public X509SubjectKeyIdentifierExtension()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: X509SubjectKeyIdentifierExtension.X509SubjectKeyIdentifierExtension()\n- uid: System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.#ctor(System.Byte[],System.Boolean)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.#ctor(System.Byte[],System.Boolean)\n  id: '#ctor(System.Byte[],System.Boolean)'\n  parent: System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension\n  langs:\n  - csharp\n  - vb\n  name: X509SubjectKeyIdentifierExtension(Byte[], Boolean)\n  fullName: System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.X509SubjectKeyIdentifierExtension(System.Byte[], System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 441\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using a byte array and a value that identifies whether the extension is critical.</p>\\n\"\n  syntax:\n    content: public X509SubjectKeyIdentifierExtension(byte[] subjectKeyIdentifier, bool critical)\n    content.vb: Public Sub New(subjectKeyIdentifier As Byte(), critical As Boolean)\n    parameters:\n    - id: subjectKeyIdentifier\n      type: System.Byte[]\n      description: \"\\n<p>A byte array that represents data to use to create the extension.</p>\\n\"\n    - id: critical\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the extension is critical; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.X509SubjectKeyIdentifierExtension(System.Byte(), System.Boolean)\n  name.vb: X509SubjectKeyIdentifierExtension(Byte(), Boolean)\n  nameWithType: X509SubjectKeyIdentifierExtension.X509SubjectKeyIdentifierExtension(Byte[], Boolean)\n  nameWithType.vb: X509SubjectKeyIdentifierExtension.X509SubjectKeyIdentifierExtension(Byte(), Boolean)\n- uid: System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.#ctor(System.Security.Cryptography.AsnEncodedData,System.Boolean)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.#ctor(System.Security.Cryptography.AsnEncodedData,System.Boolean)\n  id: '#ctor(System.Security.Cryptography.AsnEncodedData,System.Boolean)'\n  parent: System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension\n  langs:\n  - csharp\n  - vb\n  name: X509SubjectKeyIdentifierExtension(AsnEncodedData, Boolean)\n  fullName: System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.X509SubjectKeyIdentifierExtension(System.Security.Cryptography.AsnEncodedData, System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 442\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using encoded data and a value that identifies whether the extension is critical.</p>\\n\"\n  syntax:\n    content: public X509SubjectKeyIdentifierExtension(AsnEncodedData encodedSubjectKeyIdentifier, bool critical)\n    content.vb: Public Sub New(encodedSubjectKeyIdentifier As AsnEncodedData, critical As Boolean)\n    parameters:\n    - id: encodedSubjectKeyIdentifier\n      type: System.Security.Cryptography.AsnEncodedData\n      description: \"\\n<p>The <xref href=\\\"System.Security.Cryptography.AsnEncodedData\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to use to create the extension.</p>\\n\"\n    - id: critical\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the extension is critical; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: X509SubjectKeyIdentifierExtension.X509SubjectKeyIdentifierExtension(AsnEncodedData, Boolean)\n- uid: System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.#ctor(System.Security.Cryptography.X509Certificates.PublicKey,System.Boolean)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.#ctor(System.Security.Cryptography.X509Certificates.PublicKey,System.Boolean)\n  id: '#ctor(System.Security.Cryptography.X509Certificates.PublicKey,System.Boolean)'\n  parent: System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension\n  langs:\n  - csharp\n  - vb\n  name: X509SubjectKeyIdentifierExtension(PublicKey, Boolean)\n  fullName: System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.X509SubjectKeyIdentifierExtension(System.Security.Cryptography.X509Certificates.PublicKey, System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 443\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using a public key and a value indicating whether the extension is critical.</p>\\n\"\n  syntax:\n    content: public X509SubjectKeyIdentifierExtension(PublicKey key, bool critical)\n    content.vb: Public Sub New(key As PublicKey, critical As Boolean)\n    parameters:\n    - id: key\n      type: System.Security.Cryptography.X509Certificates.PublicKey\n      description: \"\\n<p>A <xref href=\\\"System.Security.Cryptography.X509Certificates.PublicKey\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>  object to create a subject key identifier (SKI) from. </p>\\n\"\n    - id: critical\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the extension is critical; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: X509SubjectKeyIdentifierExtension.X509SubjectKeyIdentifierExtension(PublicKey, Boolean)\n- uid: System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.#ctor(System.Security.Cryptography.X509Certificates.PublicKey,System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierHashAlgorithm,System.Boolean)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.#ctor(System.Security.Cryptography.X509Certificates.PublicKey,System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierHashAlgorithm,System.Boolean)\n  id: '#ctor(System.Security.Cryptography.X509Certificates.PublicKey,System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierHashAlgorithm,System.Boolean)'\n  parent: System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension\n  langs:\n  - csharp\n  - vb\n  name: X509SubjectKeyIdentifierExtension(PublicKey, X509SubjectKeyIdentifierHashAlgorithm, Boolean)\n  fullName: System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.X509SubjectKeyIdentifierExtension(System.Security.Cryptography.X509Certificates.PublicKey, System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierHashAlgorithm, System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 444\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using a public key, a hash algorithm identifier, and a value indicating whether the extension is critical. </p>\\n\"\n  syntax:\n    content: public X509SubjectKeyIdentifierExtension(PublicKey key, X509SubjectKeyIdentifierHashAlgorithm algorithm, bool critical)\n    content.vb: Public Sub New(key As PublicKey, algorithm As X509SubjectKeyIdentifierHashAlgorithm, critical As Boolean)\n    parameters:\n    - id: key\n      type: System.Security.Cryptography.X509Certificates.PublicKey\n      description: \"\\n<p>A <xref href=\\\"System.Security.Cryptography.X509Certificates.PublicKey\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to create a subject key identifier (SKI) from.</p>\\n\"\n    - id: algorithm\n      type: System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierHashAlgorithm\n      description: \"\\n<p>One of the <xref href=\\\"System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierHashAlgorithm\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that identifies which hash algorithm to use.</p>\\n\"\n    - id: critical\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the extension is critical; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: X509SubjectKeyIdentifierExtension.X509SubjectKeyIdentifierExtension(PublicKey, X509SubjectKeyIdentifierHashAlgorithm, Boolean)\n- uid: System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.#ctor(System.String,System.Boolean)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.#ctor(System.String,System.Boolean)\n  id: '#ctor(System.String,System.Boolean)'\n  parent: System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension\n  langs:\n  - csharp\n  - vb\n  name: X509SubjectKeyIdentifierExtension(String, Boolean)\n  fullName: System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.X509SubjectKeyIdentifierExtension(System.String, System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 445\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using a string and a value that identifies whether the extension is critical.</p>\\n\"\n  syntax:\n    content: public X509SubjectKeyIdentifierExtension(string subjectKeyIdentifier, bool critical)\n    content.vb: Public Sub New(subjectKeyIdentifier As String, critical As Boolean)\n    parameters:\n    - id: subjectKeyIdentifier\n      type: System.String\n      description: \"\\n<p>A string, encoded in hexadecimal format, that represents the subject key identifier (SKI) for a certificate.</p>\\n\"\n    - id: critical\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the extension is critical; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: X509SubjectKeyIdentifierExtension.X509SubjectKeyIdentifierExtension(String, Boolean)\n- uid: System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.SubjectKeyIdentifier\n  commentId: P:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.SubjectKeyIdentifier\n  id: SubjectKeyIdentifier\n  parent: System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension\n  langs:\n  - csharp\n  - vb\n  name: SubjectKeyIdentifier\n  fullName: System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.SubjectKeyIdentifier\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SubjectKeyIdentifier\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 446\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Gets a string that represents the subject key identifier (SKI) for a certificate.</p>\\n\"\n  syntax:\n    content: public string SubjectKeyIdentifier { get; }\n    content.vb: Public ReadOnly Property SubjectKeyIdentifier As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>A string, encoded in hexadecimal format, that represents the subject key identifier (SKI).</p>\\n\"\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>The extension cannot be decoded. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: X509SubjectKeyIdentifierExtension.SubjectKeyIdentifier\n- uid: System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.CopyFrom(System.Security.Cryptography.AsnEncodedData)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.CopyFrom(System.Security.Cryptography.AsnEncodedData)\n  id: CopyFrom(System.Security.Cryptography.AsnEncodedData)\n  parent: System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension\n  langs:\n  - csharp\n  - vb\n  name: CopyFrom(AsnEncodedData)\n  fullName: System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.CopyFrom(System.Security.Cryptography.AsnEncodedData)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CopyFrom\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 447\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Creates a new instance of the <xref href=\\\"System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class by copying information from encoded data.</p>\\n\"\n  syntax:\n    content: public override void CopyFrom(AsnEncodedData asnEncodedData)\n    content.vb: Public Overrides Sub CopyFrom(asnEncodedData As AsnEncodedData)\n    parameters:\n    - id: asnEncodedData\n      type: System.Security.Cryptography.AsnEncodedData\n      description: \"\\n<p>The <xref href=\\\"System.Security.Cryptography.AsnEncodedData\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to use to create the extension.</p>\\n\"\n  overridden: System.Security.Cryptography.X509Certificates.X509Extension.CopyFrom(System.Security.Cryptography.AsnEncodedData)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: X509SubjectKeyIdentifierExtension.CopyFrom(AsnEncodedData)\nreferences:\n- uid: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: System.Security.Cryptography.X509Certificates\n  fullName: System.Security.Cryptography.X509Certificates\n  commentId: N:System.Security.Cryptography.X509Certificates\n  nameWithType: System.Security.Cryptography.X509Certificates\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Security.Cryptography.X509Certificates.X509Extension\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: X509Extension\n  fullName: System.Security.Cryptography.X509Certificates.X509Extension\n  commentId: T:System.Security.Cryptography.X509Certificates.X509Extension\n  nameWithType: X509Extension\n- uid: System.Security.Cryptography.X509Certificates.X509Extension.Critical\n  parent: System.Security.Cryptography.X509Certificates.X509Extension\n  isExternal: false\n  name: Critical\n  fullName: System.Security.Cryptography.X509Certificates.X509Extension.Critical\n  commentId: P:System.Security.Cryptography.X509Certificates.X509Extension.Critical\n  nameWithType: X509Extension.Critical\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Security.Cryptography.AsnEncodedData\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: AsnEncodedData\n  fullName: System.Security.Cryptography.AsnEncodedData\n  commentId: T:System.Security.Cryptography.AsnEncodedData\n  nameWithType: AsnEncodedData\n- uid: System.Security.Cryptography\n  isExternal: false\n  name: System.Security.Cryptography\n  fullName: System.Security.Cryptography\n  commentId: N:System.Security.Cryptography\n  nameWithType: System.Security.Cryptography\n- uid: System.Security.Cryptography.X509Certificates.PublicKey\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: PublicKey\n  fullName: System.Security.Cryptography.X509Certificates.PublicKey\n  commentId: T:System.Security.Cryptography.X509Certificates.PublicKey\n  nameWithType: PublicKey\n- uid: System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierHashAlgorithm\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: X509SubjectKeyIdentifierHashAlgorithm\n  fullName: System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierHashAlgorithm\n  commentId: T:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierHashAlgorithm\n  nameWithType: X509SubjectKeyIdentifierHashAlgorithm\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Security.Cryptography.X509Certificates.X509Extension.CopyFrom(System.Security.Cryptography.AsnEncodedData)\n  parent: System.Security.Cryptography.X509Certificates.X509Extension\n  isExternal: true\n  name: CopyFrom(AsnEncodedData)\n  fullName: System.Security.Cryptography.X509Certificates.X509Extension.CopyFrom(System.Security.Cryptography.AsnEncodedData)\n  spec.csharp:\n  - uid: System.Security.Cryptography.X509Certificates.X509Extension.CopyFrom(System.Security.Cryptography.AsnEncodedData)\n    name: CopyFrom\n    fullName: System.Security.Cryptography.X509Certificates.X509Extension.CopyFrom\n  - name: (\n    fullName: (\n  - uid: System.Security.Cryptography.AsnEncodedData\n    name: AsnEncodedData\n    fullName: System.Security.Cryptography.AsnEncodedData\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.X509Certificates.X509Extension.CopyFrom(System.Security.Cryptography.AsnEncodedData)\n    name: CopyFrom\n    fullName: System.Security.Cryptography.X509Certificates.X509Extension.CopyFrom\n  - name: (\n    fullName: (\n  - uid: System.Security.Cryptography.AsnEncodedData\n    name: AsnEncodedData\n    fullName: System.Security.Cryptography.AsnEncodedData\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Extension.CopyFrom(System.Security.Cryptography.AsnEncodedData)\n  nameWithType: X509Extension.CopyFrom(AsnEncodedData)\n- uid: System.Security.Cryptography.CryptographicException\n  isExternal: false\n  name: CryptographicException\n  fullName: System.Security.Cryptography.CryptographicException\n  commentId: T:System.Security.Cryptography.CryptographicException\n  nameWithType: CryptographicException\n"}