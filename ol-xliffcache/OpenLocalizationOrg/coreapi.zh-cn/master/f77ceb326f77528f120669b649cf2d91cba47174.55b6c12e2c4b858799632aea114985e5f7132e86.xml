{"nodes":[{"pos":[921,940],"content":"XmlNamespaceManager","needQuote":true,"nodes":[{"content":"XmlNamespaceManager","pos":[0,19]}]},{"pos":[2772,2805],"content":"XmlNamespaceManager(XmlNameTable)","needQuote":true,"nodes":[{"content":"XmlNamespaceManager(XmlNameTable)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;null&lt;/strong&gt; is passed to the constructor &lt;/p&gt;\\n","pos":[3956,4020],"source":"\\n<p>\\n<strong>null</strong> is passed to the constructor </p>\\n"},{"pos":[4367,4383],"content":"DefaultNamespace","needQuote":true,"nodes":[{"content":"DefaultNamespace","pos":[0,16]}]},{"content":"\\n&lt;p&gt;Returns the namespace URI for the default namespace, or String.Empty if there is no default namespace.&lt;/p&gt;\\n","pos":[5105,5218],"source":"\\n<p>Returns the namespace URI for the default namespace, or String.Empty if there is no default namespace.</p>\\n"},{"pos":[5738,5747],"content":"NameTable","needQuote":true,"nodes":[{"content":"NameTable","pos":[0,9]}]},{"pos":[7181,7209],"content":"AddNamespace(String, String)","needQuote":true,"nodes":[{"content":"AddNamespace(String, String)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The namespace to add.","pos":[8911,8937],"source":"\\n<p>The namespace to add."},{"content":"&lt;/p&gt;\\n","pos":[8938,8944],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value for &lt;em&gt;prefix&lt;/em&gt; or &lt;em&gt;uri&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[9226,9302],"source":"\\n<p>The value for <em>prefix</em> or <em>uri</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[9303,9309],"source":" </p>\\n"},{"pos":[9860,9875],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[11445,11484],"content":"GetNamespacesInScope(XmlNamespaceScope)","needQuote":true,"nodes":[{"content":"GetNamespacesInScope(XmlNamespaceScope)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;An enumeration value that specifies the type of namespace nodes to return.&lt;/p&gt;\\n","pos":[12415,12500],"source":"\\n<p>An enumeration value that specifies the type of namespace nodes to return.</p>\\n"},{"content":"\\n&lt;p&gt;A collection of namespace and prefix pairs currently in scope.&lt;/p&gt;\\n","pos":[12614,12687],"source":"\\n<p>A collection of namespace and prefix pairs currently in scope.</p>\\n"},{"pos":[13203,13223],"content":"HasNamespace(String)","needQuote":true,"nodes":[{"content":"HasNamespace(String)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The prefix of the namespace you want to find.","pos":[14014,14064],"source":"\\n<p>The prefix of the namespace you want to find."},{"content":"&lt;/p&gt;\\n","pos":[14065,14071],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if there is a namespace defined; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[14132,14234],"source":"\\n<p>\\n<strong>true</strong> if there is a namespace defined; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[14638,14661],"content":"LookupNamespace(String)","needQuote":true,"nodes":[{"content":"LookupNamespace(String)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The prefix whose namespace URI you want to resolve.","pos":[15408,15464],"source":"\\n<p>The prefix whose namespace URI you want to resolve."},{"content":"To match the default namespace, pass String.Empty.","pos":[15465,15515]},{"content":"&lt;/p&gt;\\n","pos":[15516,15522],"source":" </p>\\n"},{"pos":[16514,16534],"content":"LookupPrefix(String)","needQuote":true,"nodes":[{"content":"LookupPrefix(String)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The namespace to resolve for the prefix.","pos":[17266,17311],"source":"\\n<p>The namespace to resolve for the prefix."},{"content":"&lt;/p&gt;\\n","pos":[17312,17318],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The matching prefix.","pos":[17378,17403],"source":"\\n<p>The matching prefix."},{"content":"If there is no mapped prefix, the method returns String.Empty.","pos":[17404,17466]},{"content":"If a null value is supplied, then &lt;strong&gt;null&lt;/strong&gt; is returned.&lt;/p&gt;\\n","pos":[17467,17541],"source":" If a null value is supplied, then <strong>null</strong> is returned.</p>\\n"},{"pos":[18120,18130],"content":"PopScope()","needQuote":true,"nodes":[{"content":"PopScope()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if there are namespace scopes left on the stack; &lt;strong&gt;false&lt;/strong&gt; if there are no more namespaces to pop.&lt;/p&gt;\\n","pos":[18773,18919],"source":"\\n<p>\\n<strong>true</strong> if there are namespace scopes left on the stack; <strong>false</strong> if there are no more namespaces to pop.</p>\\n"},{"pos":[19370,19381],"content":"PushScope()","needQuote":true,"nodes":[{"content":"PushScope()","pos":[0,11]}]},{"pos":[20509,20540],"content":"RemoveNamespace(String, String)","needQuote":true,"nodes":[{"content":"RemoveNamespace(String, String)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The prefix for the namespace &lt;/p&gt;\\n","pos":[21313,21353],"source":"\\n<p>The prefix for the namespace </p>\\n"},{"content":"\\n&lt;p&gt;The namespace to remove for the given prefix.","pos":[21415,21465],"source":"\\n<p>The namespace to remove for the given prefix."},{"content":"The namespace removed is from the current namespace scope.","pos":[21466,21524]},{"content":"Namespaces outside the current scope are ignored.","pos":[21525,21574]},{"content":"&lt;/p&gt;\\n","pos":[21575,21581],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value of &lt;em&gt;prefix&lt;/em&gt; or &lt;em&gt;uri&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[21700,21775],"source":"\\n<p>The value of <em>prefix</em> or <em>uri</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[21776,21782],"source":" </p>\\n"},{"pos":[22180,22190],"content":"System.Xml","needQuote":true,"nodes":[{"content":"System.Xml","pos":[0,10]}]},{"pos":[22333,22339],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22513,22524],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[22731,22752],"content":"IXmlNamespaceResolver","needQuote":true,"nodes":[{"content":"IXmlNamespaceResolver","pos":[0,21]}]},{"pos":[22965,22975],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[23070,23078],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[23147,23148],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23175,23176],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23246,23254],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[23323,23324],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23351,23352],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23535,23549],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[23668,23674],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[23741,23742],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23792,23798],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23858,23859],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23942,23948],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[24015,24016],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24066,24072],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24132,24133],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24347,24369],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[24517,24523],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[24590,24591],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24641,24647],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[24708,24709]},{"pos":[24764,24770],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24830,24831],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24928,24934],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[25001,25002],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25052,25058],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[25119,25120]},{"pos":[25175,25181],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25241,25242],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25487,25518],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[25684,25699],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[25775,25776],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25826,25832],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[25893,25894]},{"pos":[25949,25955],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26015,26016],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26122,26137],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[26213,26214],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26264,26270],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[26331,26332]},{"pos":[26387,26393],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26453,26454],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26684,26697],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[26798,26809],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[26881,26882],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26909,26910],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26983,26994],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[27066,27067],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27094,27095],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27270,27279],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[27372,27379],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[27447,27448],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27475,27476],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27545,27552],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[27620,27621],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27648,27649],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27824,27841],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[27950,27965],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[28041,28042],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28069,28070],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28147,28162],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[28238,28239],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28266,28267],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28562,28575],"content":"AsQueryable()","needQuote":true,"nodes":[{"content":"AsQueryable()","pos":[0,13]}]},{"pos":[28692,28703],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[28762,28763],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28790,28791],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28872,28883],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[28942,28943],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28970,28971],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29326,29338],"content":"AsParallel()","needQuote":true,"nodes":[{"content":"AsParallel()","pos":[0,12]}]},{"pos":[29471,29481],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[29548,29549],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29576,29577],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29666,29676],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[29743,29744],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29771,29772],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30113,30128],"content":"Cast<TResult>()","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;()","pos":[0,15],"source":"Cast<TResult>()"}]},{"pos":[30332,30345],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[30407,30408],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30435,30436],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30514,30530],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[30595,30596],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30623,30624],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31002,31019],"content":"OfType<TResult>()","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;()","pos":[0,17],"source":"OfType<TResult>()"}]},{"pos":[31231,31246],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[31310,31311],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31338,31339],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31419,31437],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[31504,31505],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31532,31533],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31768,31774],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[31893,31911],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[32112,32136],"content":"AsQueryable(IEnumerable)","needQuote":true,"nodes":[{"content":"AsQueryable(IEnumerable)","pos":[0,24]}]},{"pos":[32315,32326],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[32385,32386],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32453,32464],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[32541,32542],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32655,32666],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[32725,32726],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32793,32804],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[32881,32882],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33110,33119],"content":"Queryable","needQuote":true,"nodes":[{"content":"Queryable","pos":[0,9]}]},{"pos":[33325,33348],"content":"AsParallel(IEnumerable)","needQuote":true,"nodes":[{"content":"AsParallel(IEnumerable)","pos":[0,23]}]},{"pos":[33543,33553],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[33620,33621],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33688,33699],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[33776,33777],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33898,33908],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[33975,33976],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34043,34054],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[34131,34132],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34385,34403],"content":"ParallelEnumerable","needQuote":true,"nodes":[{"content":"ParallelEnumerable","pos":[0,18]}]},{"pos":[34625,34651],"content":"Cast<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;(IEnumerable)","pos":[0,26],"source":"Cast<TResult>(IEnumerable)"}]},{"pos":[34958,34971],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[35033,35034],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35101,35112],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[35189,35190],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35300,35316],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[35381,35382],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35449,35460],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[35537,35538],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35827,35837],"content":"Enumerable","needQuote":true,"nodes":[{"content":"Enumerable","pos":[0,10]}]},{"pos":[36037,36065],"content":"OfType<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;(IEnumerable)","pos":[0,28],"source":"OfType<TResult>(IEnumerable)"}]},{"pos":[36380,36395],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[36459,36460],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36527,36538],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[36615,36616],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36728,36746],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[36813,36814],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36881,36892],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[36969,36970],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37232,37243],"content":"System.Linq","needQuote":true,"nodes":[{"content":"System.Linq","pos":[0,11]}]},{"pos":[37403,37415],"content":"XmlNameTable","needQuote":true,"nodes":[{"content":"XmlNameTable","pos":[0,12]}]},{"pos":[37586,37592],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[37792,37807],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[37946,37959],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[38029,38030],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38057,38058],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38150,38163],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[38233,38234],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38261,38262],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38478,38489],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[38769,38808],"content":"GetNamespacesInScope(XmlNamespaceScope)","needQuote":true,"nodes":[{"content":"GetNamespacesInScope(XmlNamespaceScope)","pos":[0,39]}]},{"pos":[39023,39043],"content":"GetNamespacesInScope","needQuote":true,"nodes":[{"content":"GetNamespacesInScope","pos":[0,20]}]},{"pos":[39122,39123],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39188,39205],"content":"XmlNamespaceScope","needQuote":true,"nodes":[{"content":"XmlNamespaceScope","pos":[0,17]}]},{"pos":[39259,39260],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39391,39411],"content":"GetNamespacesInScope","needQuote":true,"nodes":[{"content":"GetNamespacesInScope","pos":[0,20]}]},{"pos":[39490,39491],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39556,39573],"content":"XmlNamespaceScope","needQuote":true,"nodes":[{"content":"XmlNamespaceScope","pos":[0,17]}]},{"pos":[39627,39628],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39907,39924],"content":"XmlNamespaceScope","needQuote":true,"nodes":[{"content":"XmlNamespaceScope","pos":[0,17]}]},{"pos":[40219,40246],"content":"IDictionary<String, String>","needQuote":true,"nodes":[{"content":"IDictionary&lt;String, String&gt;","pos":[0,27],"source":"IDictionary<String, String>"}]},{"pos":[40532,40543],"content":"IDictionary","needQuote":true,"nodes":[{"content":"IDictionary","pos":[0,11]}]},{"pos":[40628,40629],"content":"<","needQuote":true,"nodes":[]},{"pos":[40679,40685],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[40746,40747]},{"pos":[40802,40808],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[40961,40972],"content":"IDictionary","needQuote":true,"nodes":[{"content":"IDictionary","pos":[0,11]}]},{"content":"(Of","pos":[41058,41061]},{"pos":[41118,41124],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[41185,41186]},{"pos":[41241,41247],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[41307,41308],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41578,41603],"content":"IDictionary<TKey, TValue>","needQuote":true,"nodes":[{"content":"IDictionary&lt;TKey, TValue&gt;","pos":[0,25],"source":"IDictionary<TKey, TValue>"}]},{"pos":[41855,41866],"content":"IDictionary","needQuote":true,"nodes":[{"content":"IDictionary","pos":[0,11]}]},{"pos":[41930,41931],"content":"<","needQuote":true,"nodes":[]},{"pos":[41958,41962],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[41993,41994]},{"pos":[42026,42032],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[42157,42168],"content":"IDictionary","needQuote":true,"nodes":[{"content":"IDictionary","pos":[0,11]}]},{"content":"(Of","pos":[42233,42236]},{"pos":[42270,42274],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[42305,42306]},{"pos":[42338,42344],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[42376,42377],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42602,42628],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[42820,42827],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[43050,43073],"content":"LookupNamespace(String)","needQuote":true,"nodes":[{"content":"LookupNamespace(String)","pos":[0,23]}]},{"pos":[43248,43263],"content":"LookupNamespace","needQuote":true,"nodes":[{"content":"LookupNamespace","pos":[0,15]}]},{"pos":[43337,43338],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43388,43394],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[43454,43455],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43566,43581],"content":"LookupNamespace","needQuote":true,"nodes":[{"content":"LookupNamespace","pos":[0,15]}]},{"pos":[43655,43656],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43706,43712],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[43772,43773],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44069,44089],"content":"LookupPrefix(String)","needQuote":true,"nodes":[{"content":"LookupPrefix(String)","pos":[0,20]}]},{"pos":[44258,44270],"content":"LookupPrefix","needQuote":true,"nodes":[{"content":"LookupPrefix","pos":[0,12]}]},{"pos":[44341,44342],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44392,44398],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[44458,44459],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44567,44579],"content":"LookupPrefix","needQuote":true,"nodes":[{"content":"LookupPrefix","pos":[0,12]}]},{"pos":[44650,44651],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44701,44707],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[44767,44768],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44985,45007],"content":"NullReferenceException","needQuote":true,"nodes":[{"content":"NullReferenceException","pos":[0,22]}]},{"pos":[45211,45228],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[45404,45425],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]}],"content":"items:\n- uid: System.Xml.XmlNamespaceManager\n  commentId: T:System.Xml.XmlNamespaceManager\n  id: XmlNamespaceManager\n  parent: System.Xml\n  children:\n  - System.Xml.XmlNamespaceManager.#ctor(System.Xml.XmlNameTable)\n  - System.Xml.XmlNamespaceManager.AddNamespace(System.String,System.String)\n  - System.Xml.XmlNamespaceManager.DefaultNamespace\n  - System.Xml.XmlNamespaceManager.GetEnumerator\n  - System.Xml.XmlNamespaceManager.GetNamespacesInScope(System.Xml.XmlNamespaceScope)\n  - System.Xml.XmlNamespaceManager.HasNamespace(System.String)\n  - System.Xml.XmlNamespaceManager.LookupNamespace(System.String)\n  - System.Xml.XmlNamespaceManager.LookupPrefix(System.String)\n  - System.Xml.XmlNamespaceManager.NameTable\n  - System.Xml.XmlNamespaceManager.PopScope\n  - System.Xml.XmlNamespaceManager.PushScope\n  - System.Xml.XmlNamespaceManager.RemoveNamespace(System.String,System.String)\n  langs:\n  - csharp\n  - vb\n  name: XmlNamespaceManager\n  fullName: System.Xml.XmlNamespaceManager\n  type: Class\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: XmlNamespaceManager\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 146\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Resolves, adds, and removes namespaces to a collection and provides scope management for these namespaces. </p>\\n\"\n  syntax:\n    content: 'public class XmlNamespaceManager : IEnumerable, IXmlNamespaceResolver'\n    content.vb: >-\n      Public Class XmlNamespaceManager\n          Implements IEnumerable, IXmlNamespaceResolver\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.IEnumerable\n  - System.Xml.IXmlNamespaceResolver\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: XmlNamespaceManager\n  extensionMethods:\n  - System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  - System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  - System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  - System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n- uid: System.Xml.XmlNamespaceManager.#ctor(System.Xml.XmlNameTable)\n  commentId: M:System.Xml.XmlNamespaceManager.#ctor(System.Xml.XmlNameTable)\n  id: '#ctor(System.Xml.XmlNameTable)'\n  parent: System.Xml.XmlNamespaceManager\n  langs:\n  - csharp\n  - vb\n  name: XmlNamespaceManager(XmlNameTable)\n  fullName: System.Xml.XmlNamespaceManager.XmlNamespaceManager(System.Xml.XmlNameTable)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 148\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Xml.XmlNamespaceManager\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified <xref href=\\\"System.Xml.XmlNameTable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public XmlNamespaceManager(XmlNameTable nameTable)\n    content.vb: Public Sub New(nameTable As XmlNameTable)\n    parameters:\n    - id: nameTable\n      type: System.Xml.XmlNameTable\n      description: \"\\n<p>The <xref href=\\\"System.Xml.XmlNameTable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to use. </p>\\n\"\n  exceptions:\n  - type: System.NullReferenceException\n    commentId: T:System.NullReferenceException\n    description: \"\\n<p>\\n<strong>null</strong> is passed to the constructor </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XmlNamespaceManager.XmlNamespaceManager(XmlNameTable)\n- uid: System.Xml.XmlNamespaceManager.DefaultNamespace\n  commentId: P:System.Xml.XmlNamespaceManager.DefaultNamespace\n  id: DefaultNamespace\n  parent: System.Xml.XmlNamespaceManager\n  langs:\n  - csharp\n  - vb\n  name: DefaultNamespace\n  fullName: System.Xml.XmlNamespaceManager.DefaultNamespace\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DefaultNamespace\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 149\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the namespace URI for the default namespace.</p>\\n\"\n  syntax:\n    content: public virtual string DefaultNamespace { get; }\n    content.vb: Public Overridable ReadOnly Property DefaultNamespace As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>Returns the namespace URI for the default namespace, or String.Empty if there is no default namespace.</p>\\n\"\n  seealso:\n  - type: System.Xml.XmlNamespaceManager.LookupNamespace(System.String)\n    commentId: M:System.Xml.XmlNamespaceManager.LookupNamespace(System.String)\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: XmlNamespaceManager.DefaultNamespace\n- uid: System.Xml.XmlNamespaceManager.NameTable\n  commentId: P:System.Xml.XmlNamespaceManager.NameTable\n  id: NameTable\n  parent: System.Xml.XmlNamespaceManager\n  langs:\n  - csharp\n  - vb\n  name: NameTable\n  fullName: System.Xml.XmlNamespaceManager.NameTable\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NameTable\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 150\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Xml.XmlNameTable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> associated with this object.</p>\\n\"\n  syntax:\n    content: public virtual XmlNameTable NameTable { get; }\n    content.vb: Public Overridable ReadOnly Property NameTable As XmlNameTable\n    parameters: []\n    return:\n      type: System.Xml.XmlNameTable\n      description: \"\\n<p>The <xref href=\\\"System.Xml.XmlNameTable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> used by this object.</p>\\n\"\n  seealso:\n  - type: System.Xml.XmlReader\n    commentId: T:System.Xml.XmlReader\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: XmlNamespaceManager.NameTable\n- uid: System.Xml.XmlNamespaceManager.AddNamespace(System.String,System.String)\n  commentId: M:System.Xml.XmlNamespaceManager.AddNamespace(System.String,System.String)\n  id: AddNamespace(System.String,System.String)\n  parent: System.Xml.XmlNamespaceManager\n  langs:\n  - csharp\n  - vb\n  name: AddNamespace(String, String)\n  fullName: System.Xml.XmlNamespaceManager.AddNamespace(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AddNamespace\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 151\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Adds the given namespace to the collection.</p>\\n\"\n  syntax:\n    content: public virtual void AddNamespace(string prefix, string uri)\n    content.vb: Public Overridable Sub AddNamespace(prefix As String, uri As String)\n    parameters:\n    - id: prefix\n      type: System.String\n      description: \"\\n<p>The prefix to associate with the namespace being added. Use String.Empty to add a default namespace.</p>\\n<p>NoteIf the <xref href=\\\"System.Xml.XmlNamespaceManager\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be used for resolving namespaces in an XML Path Language (XPath) expression, a prefix must be specified. If an XPath expression does not include a prefix, it is assumed that the namespace Uniform Resource Identifier (URI) is the empty namespace. For more information about XPath expressions and the <xref href=\\\"System.Xml.XmlNamespaceManager\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, refer to the <xref href=\\\"System.Xml.XmlNode.SelectNodes(System.String)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Xml.XPath.XPathExpression.SetContext(System.Xml.XmlNamespaceManager)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> methods.</p>\\n\"\n    - id: uri\n      type: System.String\n      description: \"\\n<p>The namespace to add. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The value for <em>prefix</em> is \\\"xml\\\" or \\\"xmlns\\\". </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The value for <em>prefix</em> or <em>uri</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Xml.XmlNamespaceManager.RemoveNamespace(System.String,System.String)\n    commentId: M:System.Xml.XmlNamespaceManager.RemoveNamespace(System.String,System.String)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlNamespaceManager.AddNamespace(String, String)\n- uid: System.Xml.XmlNamespaceManager.GetEnumerator\n  commentId: M:System.Xml.XmlNamespaceManager.GetEnumerator\n  id: GetEnumerator\n  parent: System.Xml.XmlNamespaceManager\n  langs:\n  - csharp\n  - vb\n  name: GetEnumerator()\n  fullName: System.Xml.XmlNamespaceManager.GetEnumerator()\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetEnumerator\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 152\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Returns an enumerator to use to iterate through the namespaces in the <xref href=\\\"System.Xml.XmlNamespaceManager\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual IEnumerator GetEnumerator()\n    content.vb: Public Overridable Function GetEnumerator As IEnumerator\n    return:\n      type: System.Collections.IEnumerator\n      description: \"\\n<p>An <xref href=\\\"System.Collections.IEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing the prefixes stored by the <xref href=\\\"System.Xml.XmlNamespaceManager\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.Collections.IEnumerable.GetEnumerator\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlNamespaceManager.GetEnumerator()\n- uid: System.Xml.XmlNamespaceManager.GetNamespacesInScope(System.Xml.XmlNamespaceScope)\n  commentId: M:System.Xml.XmlNamespaceManager.GetNamespacesInScope(System.Xml.XmlNamespaceScope)\n  id: GetNamespacesInScope(System.Xml.XmlNamespaceScope)\n  parent: System.Xml.XmlNamespaceManager\n  langs:\n  - csharp\n  - vb\n  name: GetNamespacesInScope(XmlNamespaceScope)\n  fullName: System.Xml.XmlNamespaceManager.GetNamespacesInScope(System.Xml.XmlNamespaceScope)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetNamespacesInScope\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 153\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Gets a collection of namespace names keyed by prefix which can be used to enumerate the namespaces currently in scope.</p>\\n\"\n  syntax:\n    content: public virtual IDictionary<string, string> GetNamespacesInScope(XmlNamespaceScope scope)\n    content.vb: Public Overridable Function GetNamespacesInScope(scope As XmlNamespaceScope) As IDictionary(Of String, String)\n    parameters:\n    - id: scope\n      type: System.Xml.XmlNamespaceScope\n      description: \"\\n<p>An enumeration value that specifies the type of namespace nodes to return.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IDictionary{System.String,System.String}\n      description: \"\\n<p>A collection of namespace and prefix pairs currently in scope.</p>\\n\"\n  implements:\n  - System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlNamespaceManager.GetNamespacesInScope(XmlNamespaceScope)\n- uid: System.Xml.XmlNamespaceManager.HasNamespace(System.String)\n  commentId: M:System.Xml.XmlNamespaceManager.HasNamespace(System.String)\n  id: HasNamespace(System.String)\n  parent: System.Xml.XmlNamespaceManager\n  langs:\n  - csharp\n  - vb\n  name: HasNamespace(String)\n  fullName: System.Xml.XmlNamespaceManager.HasNamespace(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HasNamespace\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 154\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Gets a value indicating whether the supplied prefix has a namespace defined for the current pushed scope.</p>\\n\"\n  syntax:\n    content: public virtual bool HasNamespace(string prefix)\n    content.vb: Public Overridable Function HasNamespace(prefix As String) As Boolean\n    parameters:\n    - id: prefix\n      type: System.String\n      description: \"\\n<p>The prefix of the namespace you want to find. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if there is a namespace defined; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlNamespaceManager.HasNamespace(String)\n- uid: System.Xml.XmlNamespaceManager.LookupNamespace(System.String)\n  commentId: M:System.Xml.XmlNamespaceManager.LookupNamespace(System.String)\n  id: LookupNamespace(System.String)\n  parent: System.Xml.XmlNamespaceManager\n  langs:\n  - csharp\n  - vb\n  name: LookupNamespace(String)\n  fullName: System.Xml.XmlNamespaceManager.LookupNamespace(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LookupNamespace\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 155\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the namespace URI for the specified prefix.</p>\\n\"\n  syntax:\n    content: public virtual string LookupNamespace(string prefix)\n    content.vb: Public Overridable Function LookupNamespace(prefix As String) As String\n    parameters:\n    - id: prefix\n      type: System.String\n      description: \"\\n<p>The prefix whose namespace URI you want to resolve. To match the default namespace, pass String.Empty. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>Returns the namespace URI for <em>prefix</em> or <strong>null</strong> if there is no mapped namespace. The returned string is atomized.</p>\\n<p>For more information on atomized strings, see the <xref href=\\\"System.Xml.XmlNameTable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  seealso:\n  - type: System.Xml.XmlNamespaceManager.LookupPrefix(System.String)\n    commentId: M:System.Xml.XmlNamespaceManager.LookupPrefix(System.String)\n  implements:\n  - System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlNamespaceManager.LookupNamespace(String)\n- uid: System.Xml.XmlNamespaceManager.LookupPrefix(System.String)\n  commentId: M:System.Xml.XmlNamespaceManager.LookupPrefix(System.String)\n  id: LookupPrefix(System.String)\n  parent: System.Xml.XmlNamespaceManager\n  langs:\n  - csharp\n  - vb\n  name: LookupPrefix(String)\n  fullName: System.Xml.XmlNamespaceManager.LookupPrefix(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LookupPrefix\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 156\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Finds the prefix declared for the given namespace URI.</p>\\n\"\n  syntax:\n    content: public virtual string LookupPrefix(string uri)\n    content.vb: Public Overridable Function LookupPrefix(uri As String) As String\n    parameters:\n    - id: uri\n      type: System.String\n      description: \"\\n<p>The namespace to resolve for the prefix. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The matching prefix. If there is no mapped prefix, the method returns String.Empty. If a null value is supplied, then <strong>null</strong> is returned.</p>\\n\"\n  seealso:\n  - type: System.Xml.XmlNamespaceManager.LookupNamespace(System.String)\n    commentId: M:System.Xml.XmlNamespaceManager.LookupNamespace(System.String)\n  implements:\n  - System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlNamespaceManager.LookupPrefix(String)\n- uid: System.Xml.XmlNamespaceManager.PopScope\n  commentId: M:System.Xml.XmlNamespaceManager.PopScope\n  id: PopScope\n  parent: System.Xml.XmlNamespaceManager\n  langs:\n  - csharp\n  - vb\n  name: PopScope()\n  fullName: System.Xml.XmlNamespaceManager.PopScope()\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PopScope\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 157\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Pops a namespace scope off the stack.</p>\\n\"\n  syntax:\n    content: public virtual bool PopScope()\n    content.vb: Public Overridable Function PopScope As Boolean\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if there are namespace scopes left on the stack; <strong>false</strong> if there are no more namespaces to pop.</p>\\n\"\n  seealso:\n  - type: System.Xml.XmlNamespaceManager.PushScope\n    commentId: M:System.Xml.XmlNamespaceManager.PushScope\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlNamespaceManager.PopScope()\n- uid: System.Xml.XmlNamespaceManager.PushScope\n  commentId: M:System.Xml.XmlNamespaceManager.PushScope\n  id: PushScope\n  parent: System.Xml.XmlNamespaceManager\n  langs:\n  - csharp\n  - vb\n  name: PushScope()\n  fullName: System.Xml.XmlNamespaceManager.PushScope()\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PushScope\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 158\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Pushes a namespace scope onto the stack.</p>\\n\"\n  syntax:\n    content: public virtual void PushScope()\n    content.vb: Public Overridable Sub PushScope\n  seealso:\n  - type: System.Xml.XmlNamespaceManager.PopScope\n    commentId: M:System.Xml.XmlNamespaceManager.PopScope\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlNamespaceManager.PushScope()\n- uid: System.Xml.XmlNamespaceManager.RemoveNamespace(System.String,System.String)\n  commentId: M:System.Xml.XmlNamespaceManager.RemoveNamespace(System.String,System.String)\n  id: RemoveNamespace(System.String,System.String)\n  parent: System.Xml.XmlNamespaceManager\n  langs:\n  - csharp\n  - vb\n  name: RemoveNamespace(String, String)\n  fullName: System.Xml.XmlNamespaceManager.RemoveNamespace(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RemoveNamespace\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 159\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Removes the given namespace for the given prefix.</p>\\n\"\n  syntax:\n    content: public virtual void RemoveNamespace(string prefix, string uri)\n    content.vb: Public Overridable Sub RemoveNamespace(prefix As String, uri As String)\n    parameters:\n    - id: prefix\n      type: System.String\n      description: \"\\n<p>The prefix for the namespace </p>\\n\"\n    - id: uri\n      type: System.String\n      description: \"\\n<p>The namespace to remove for the given prefix. The namespace removed is from the current namespace scope. Namespaces outside the current scope are ignored. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The value of <em>prefix</em> or <em>uri</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Xml.XmlNamespaceManager.AddNamespace(System.String,System.String)\n    commentId: M:System.Xml.XmlNamespaceManager.AddNamespace(System.String,System.String)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlNamespaceManager.RemoveNamespace(String, String)\nreferences:\n- uid: System.Xml\n  isExternal: false\n  name: System.Xml\n  fullName: System.Xml\n  commentId: N:System.Xml\n  nameWithType: System.Xml\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  fullName: System.Collections.IEnumerable\n  commentId: T:System.Collections.IEnumerable\n  nameWithType: IEnumerable\n- uid: System.Xml.IXmlNamespaceResolver\n  parent: System.Xml\n  isExternal: false\n  name: IXmlNamespaceResolver\n  fullName: System.Xml.IXmlNamespaceResolver\n  commentId: T:System.Xml.IXmlNamespaceResolver\n  nameWithType: IXmlNamespaceResolver\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  parent: System.Linq.Queryable\n  definition: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  name: AsQueryable()\n  fullName: System.Linq.Queryable.AsQueryable()\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  nameWithType: Queryable.AsQueryable()\n- uid: System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  parent: System.Linq.ParallelEnumerable\n  definition: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  name: AsParallel()\n  fullName: System.Linq.ParallelEnumerable.AsParallel()\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  nameWithType: ParallelEnumerable.AsParallel()\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  name: Cast<TResult>()\n  fullName: System.Linq.Enumerable.Cast<TResult>()\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)()\n  name.vb: Cast(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>()\n  nameWithType.vb: Enumerable.Cast(Of TResult)()\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  name: OfType<TResult>()\n  fullName: System.Linq.Enumerable.OfType<TResult>()\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)()\n  name.vb: OfType(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>()\n  nameWithType.vb: Enumerable.OfType(Of TResult)()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  commentId: N:System.Collections\n  nameWithType: System.Collections\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsQueryable(IEnumerable)\n  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n- uid: System.Linq.Queryable\n  parent: System.Linq\n  isExternal: false\n  name: Queryable\n  fullName: System.Linq.Queryable\n  commentId: T:System.Linq.Queryable\n  nameWithType: Queryable\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsParallel(IEnumerable)\n  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n- uid: System.Linq.ParallelEnumerable\n  parent: System.Linq\n  isExternal: false\n  name: ParallelEnumerable\n  fullName: System.Linq.ParallelEnumerable\n  commentId: T:System.Linq.ParallelEnumerable\n  nameWithType: ParallelEnumerable\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: Cast<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)\n  name.vb: Cast(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.Cast(Of TResult)(IEnumerable)\n- uid: System.Linq.Enumerable\n  parent: System.Linq\n  isExternal: false\n  name: Enumerable\n  fullName: System.Linq.Enumerable\n  commentId: T:System.Linq.Enumerable\n  nameWithType: Enumerable\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: OfType<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)\n  name.vb: OfType(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.OfType(Of TResult)(IEnumerable)\n- uid: System.Linq\n  isExternal: false\n  name: System.Linq\n  fullName: System.Linq\n  commentId: N:System.Linq\n  nameWithType: System.Linq\n- uid: System.Xml.XmlNameTable\n  parent: System.Xml\n  isExternal: false\n  name: XmlNameTable\n  fullName: System.Xml.XmlNameTable\n  commentId: T:System.Xml.XmlNameTable\n  nameWithType: XmlNameTable\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Collections.IEnumerable.GetEnumerator\n  parent: System.Collections.IEnumerable\n  isExternal: false\n  name: GetEnumerator()\n  fullName: System.Collections.IEnumerable.GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Collections.IEnumerable.GetEnumerator\n  nameWithType: IEnumerable.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  fullName: System.Collections.IEnumerator\n  commentId: T:System.Collections.IEnumerator\n  nameWithType: IEnumerator\n- uid: System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)\n  parent: System.Xml.IXmlNamespaceResolver\n  isExternal: false\n  name: GetNamespacesInScope(XmlNamespaceScope)\n  fullName: System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)\n  spec.csharp:\n  - uid: System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)\n    name: GetNamespacesInScope\n    fullName: System.Xml.IXmlNamespaceResolver.GetNamespacesInScope\n  - name: (\n    fullName: (\n  - uid: System.Xml.XmlNamespaceScope\n    name: XmlNamespaceScope\n    fullName: System.Xml.XmlNamespaceScope\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)\n    name: GetNamespacesInScope\n    fullName: System.Xml.IXmlNamespaceResolver.GetNamespacesInScope\n  - name: (\n    fullName: (\n  - uid: System.Xml.XmlNamespaceScope\n    name: XmlNamespaceScope\n    fullName: System.Xml.XmlNamespaceScope\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)\n  nameWithType: IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope)\n- uid: System.Xml.XmlNamespaceScope\n  parent: System.Xml\n  isExternal: false\n  name: XmlNamespaceScope\n  fullName: System.Xml.XmlNamespaceScope\n  commentId: T:System.Xml.XmlNamespaceScope\n  nameWithType: XmlNamespaceScope\n- uid: System.Collections.Generic.IDictionary{System.String,System.String}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IDictionary`2\n  name: IDictionary<String, String>\n  fullName: System.Collections.Generic.IDictionary<System.String, System.String>\n  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.String)\n  name.vb: IDictionary(Of String, String)\n  spec.csharp:\n  - uid: System.Collections.Generic.IDictionary`2\n    name: IDictionary\n    fullName: System.Collections.Generic.IDictionary\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IDictionary`2\n    name: IDictionary\n    fullName: System.Collections.Generic.IDictionary\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IDictionary{System.String,System.String}\n  nameWithType: IDictionary<String, String>\n  nameWithType.vb: IDictionary(Of String, String)\n- uid: System.Collections.Generic.IDictionary`2\n  isExternal: false\n  name: IDictionary<TKey, TValue>\n  fullName: System.Collections.Generic.IDictionary<TKey, TValue>\n  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)\n  name.vb: IDictionary(Of TKey, TValue)\n  spec.csharp:\n  - uid: System.Collections.Generic.IDictionary`2\n    name: IDictionary\n    fullName: System.Collections.Generic.IDictionary\n  - name: <\n    fullName: <\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TValue\n    fullName: TValue\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IDictionary`2\n    name: IDictionary\n    fullName: System.Collections.Generic.IDictionary\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TValue\n    fullName: TValue\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IDictionary`2\n  nameWithType: IDictionary<TKey, TValue>\n  nameWithType.vb: IDictionary(Of TKey, TValue)\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n  nameWithType: System.Collections.Generic\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)\n  parent: System.Xml.IXmlNamespaceResolver\n  isExternal: true\n  name: LookupNamespace(String)\n  fullName: System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)\n  spec.csharp:\n  - uid: System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)\n    name: LookupNamespace\n    fullName: System.Xml.IXmlNamespaceResolver.LookupNamespace\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)\n    name: LookupNamespace\n    fullName: System.Xml.IXmlNamespaceResolver.LookupNamespace\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)\n  nameWithType: IXmlNamespaceResolver.LookupNamespace(String)\n- uid: System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)\n  parent: System.Xml.IXmlNamespaceResolver\n  isExternal: true\n  name: LookupPrefix(String)\n  fullName: System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)\n  spec.csharp:\n  - uid: System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)\n    name: LookupPrefix\n    fullName: System.Xml.IXmlNamespaceResolver.LookupPrefix\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)\n    name: LookupPrefix\n    fullName: System.Xml.IXmlNamespaceResolver.LookupPrefix\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)\n  nameWithType: IXmlNamespaceResolver.LookupPrefix(String)\n- uid: System.NullReferenceException\n  isExternal: false\n  name: NullReferenceException\n  fullName: System.NullReferenceException\n  nameWithType: NullReferenceException\n  commentId: T:System.NullReferenceException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n"}