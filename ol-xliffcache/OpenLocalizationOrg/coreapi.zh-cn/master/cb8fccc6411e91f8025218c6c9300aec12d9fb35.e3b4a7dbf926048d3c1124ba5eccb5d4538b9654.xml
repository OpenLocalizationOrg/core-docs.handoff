{"nodes":[{"pos":[703,722],"content":"IPPacketInformation","needQuote":true,"nodes":[{"content":"IPPacketInformation","pos":[0,19]}]},{"pos":[2669,2676],"content":"Address","needQuote":true,"nodes":[{"content":"Address","pos":[0,7]}]},{"pos":[5436,5445],"content":"Interface","needQuote":true,"nodes":[{"content":"Interface","pos":[0,9]}]},{"pos":[7336,7350],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The object to compare with this instance.&lt;/p&gt;\\n","pos":[8094,8146],"source":"\\n<p>The object to compare with this instance.</p>\\n"},{"pos":[8870,8883],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;An Int32 hash code.&lt;/p&gt;\\n","pos":[9527,9557],"source":"\\n<p>An Int32 hash code.</p>\\n"},{"pos":[10200,10250],"content":"Equality(IPPacketInformation, IPPacketInformation)","needQuote":true,"nodes":[{"content":"Equality(IPPacketInformation, IPPacketInformation)","pos":[0,50]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;packetInformation1&lt;/em&gt; and &lt;em&gt;packetInformation2&lt;/em&gt; are equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[11792,11935],"source":"\\n<p>\\n<strong>true</strong> if <em>packetInformation1</em> and <em>packetInformation2</em> are equal; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[12573,12625],"content":"Inequality(IPPacketInformation, IPPacketInformation)","needQuote":true,"nodes":[{"content":"Inequality(IPPacketInformation, IPPacketInformation)","pos":[0,52]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;packetInformation1&lt;/em&gt; and &lt;em&gt;packetInformation2&lt;/em&gt; are unequal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[14175,14320],"source":"\\n<p>\\n<strong>true</strong> if <em>packetInformation1</em> and <em>packetInformation2</em> are unequal; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[14557,14575],"content":"System.Net.Sockets","needQuote":true,"nodes":[{"content":"System.Net.Sockets","pos":[0,18]}]},{"pos":[14764,14774],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[14875,14883],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[14934,14935],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14962,14963],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15036,15044],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[15095,15096],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15123,15124],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15327,15349],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[15497,15503],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[15570,15571],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15621,15627],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[15688,15689]},{"pos":[15744,15750],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15810,15811],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15908,15914],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[15981,15982],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16032,16038],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[16099,16100]},{"pos":[16155,16161],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16221,16222],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16467,16498],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[16664,16679],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[16755,16756],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16806,16812],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[16873,16874]},{"pos":[16929,16935],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16995,16996],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17102,17117],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[17193,17194],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17244,17250],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[17311,17312]},{"pos":[17367,17373],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17433,17434],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17660,17669],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[17762,17769],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[17837,17838],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17865,17866],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17935,17942],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[18010,18011],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18038,18039],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18195,18204],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[18358,18364],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18485,18491],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[18633,18642],"content":"IPAddress","needQuote":true,"nodes":[{"content":"IPAddress","pos":[0,9]}]},{"pos":[18784,18794],"content":"System.Net","needQuote":true,"nodes":[{"content":"System.Net","pos":[0,10]}]},{"pos":[18936,18941],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[19117,19131],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[19256,19262],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[19311,19312],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19362,19368],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19428,19429],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19515,19521],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[19570,19571],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19621,19627],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19687,19688],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19867,19874],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[20047,20060],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[20167,20178],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[20232,20233],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20260,20261],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20337,20348],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[20402,20403],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20430,20431],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20635,20654],"content":"IPPacketInformation","needQuote":true,"nodes":[{"content":"IPPacketInformation","pos":[0,19]}]}],"content":"items:\n- uid: System.Net.Sockets.IPPacketInformation\n  commentId: T:System.Net.Sockets.IPPacketInformation\n  id: IPPacketInformation\n  parent: System.Net.Sockets\n  children:\n  - System.Net.Sockets.IPPacketInformation.Address\n  - System.Net.Sockets.IPPacketInformation.Equals(System.Object)\n  - System.Net.Sockets.IPPacketInformation.GetHashCode\n  - System.Net.Sockets.IPPacketInformation.Interface\n  - System.Net.Sockets.IPPacketInformation.op_Equality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)\n  - System.Net.Sockets.IPPacketInformation.op_Inequality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)\n  langs:\n  - csharp\n  - vb\n  name: IPPacketInformation\n  fullName: System.Net.Sockets.IPPacketInformation\n  type: Struct\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IPPacketInformation\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 47\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Presents the packet information from a call to <xref href=\\\"System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [StructLayout(LayoutKind.Sequential)]\n\n      public struct IPPacketInformation\n    content.vb: >-\n      <StructLayout(LayoutKind.Sequential)>\n\n      Public Structure IPPacketInformation\n  inheritedMembers:\n  - System.ValueType.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  nameWithType: IPPacketInformation\n- uid: System.Net.Sockets.IPPacketInformation.Address\n  commentId: P:System.Net.Sockets.IPPacketInformation.Address\n  id: Address\n  parent: System.Net.Sockets.IPPacketInformation\n  langs:\n  - csharp\n  - vb\n  name: Address\n  fullName: System.Net.Sockets.IPPacketInformation.Address\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Address\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 50\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets the origin information of the packet that was received as a result of calling the <xref href=\\\"System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method or <xref href=\\\"System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method.</p>\\n\"\n  syntax:\n    content: public IPAddress Address { get; }\n    content.vb: Public ReadOnly Property Address As IPAddress\n    parameters: []\n    return:\n      type: System.Net.IPAddress\n      description: \"\\n<p>An <xref href=\\\"System.Net.IPAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that indicates the origin information of the packet that was received as a result of calling the <xref href=\\\"System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method or <xref href=\\\"System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. For packets that were sent from a unicast address, the <xref href=\\\"System.Net.Sockets.IPPacketInformation.Address\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property will return the <xref href=\\\"System.Net.IPAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the sender; for multicast or broadcast packets, the <xref href=\\\"System.Net.Sockets.IPPacketInformation.Address\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property will return the multicast or broadcast <xref href=\\\"System.Net.IPAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: IPPacketInformation.Address\n- uid: System.Net.Sockets.IPPacketInformation.Interface\n  commentId: P:System.Net.Sockets.IPPacketInformation.Interface\n  id: Interface\n  parent: System.Net.Sockets.IPPacketInformation\n  langs:\n  - csharp\n  - vb\n  name: Interface\n  fullName: System.Net.Sockets.IPPacketInformation.Interface\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Interface\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 51\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets the network interface information that is associated with a call to <xref href=\\\"System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public int Interface { get; }\n    content.vb: Public ReadOnly Property Interface As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>An <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value, which represents the index of the network interface. You can use this index with <xref href=\\\"System.Net.NetworkInformation.NetworkInterface.GetAllNetworkInterfaces\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to get more information about the relevant interface.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: IPPacketInformation.Interface\n- uid: System.Net.Sockets.IPPacketInformation.Equals(System.Object)\n  commentId: M:System.Net.Sockets.IPPacketInformation.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Net.Sockets.IPPacketInformation\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Net.Sockets.IPPacketInformation.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 52\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Returns a value that indicates whether this instance is equal to a specified object.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object comparand)\n    content.vb: Public Overrides Function Equals(comparand As Object) As Boolean\n    parameters:\n    - id: comparand\n      type: System.Object\n      description: \"\\n<p>The object to compare with this instance.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>comparand</em> is an instance of <xref href=\\\"System.Net.Sockets.IPPacketInformation\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and equals the value of the instance; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.ValueType.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: IPPacketInformation.Equals(Object)\n- uid: System.Net.Sockets.IPPacketInformation.GetHashCode\n  commentId: M:System.Net.Sockets.IPPacketInformation.GetHashCode\n  id: GetHashCode\n  parent: System.Net.Sockets.IPPacketInformation\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Net.Sockets.IPPacketInformation.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 53\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Returns the hash code for this instance.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>An Int32 hash code.</p>\\n\"\n  overridden: System.ValueType.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: IPPacketInformation.GetHashCode()\n- uid: System.Net.Sockets.IPPacketInformation.op_Equality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)\n  commentId: M:System.Net.Sockets.IPPacketInformation.op_Equality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)\n  id: op_Equality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)\n  parent: System.Net.Sockets.IPPacketInformation\n  langs:\n  - csharp\n  - vb\n  name: Equality(IPPacketInformation, IPPacketInformation)\n  fullName: System.Net.Sockets.IPPacketInformation.Equality(System.Net.Sockets.IPPacketInformation, System.Net.Sockets.IPPacketInformation)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Equality\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 54\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Tests whether two specified <xref href=\\\"System.Net.Sockets.IPPacketInformation\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances are equivalent.</p>\\n\"\n  syntax:\n    content: public static bool operator ==(IPPacketInformation packetInformation1, IPPacketInformation packetInformation2)\n    content.vb: Public Shared Operator =(packetInformation1 As IPPacketInformation, packetInformation2 As IPPacketInformation) As Boolean\n    parameters:\n    - id: packetInformation1\n      type: System.Net.Sockets.IPPacketInformation\n      description: \"\\n<p>The <xref href=\\\"System.Net.Sockets.IPPacketInformation\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance that is to the left of the equality operator.</p>\\n\"\n    - id: packetInformation2\n      type: System.Net.Sockets.IPPacketInformation\n      description: \"\\n<p>The <xref href=\\\"System.Net.Sockets.IPPacketInformation\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance that is to the right of the equality operator.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>packetInformation1</em> and <em>packetInformation2</em> are equal; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: IPPacketInformation.Equality(IPPacketInformation, IPPacketInformation)\n- uid: System.Net.Sockets.IPPacketInformation.op_Inequality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)\n  commentId: M:System.Net.Sockets.IPPacketInformation.op_Inequality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)\n  id: op_Inequality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)\n  parent: System.Net.Sockets.IPPacketInformation\n  langs:\n  - csharp\n  - vb\n  name: Inequality(IPPacketInformation, IPPacketInformation)\n  fullName: System.Net.Sockets.IPPacketInformation.Inequality(System.Net.Sockets.IPPacketInformation, System.Net.Sockets.IPPacketInformation)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Inequality\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 55\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Tests whether two specified <xref href=\\\"System.Net.Sockets.IPPacketInformation\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances are not equal.</p>\\n\"\n  syntax:\n    content: public static bool operator !=(IPPacketInformation packetInformation1, IPPacketInformation packetInformation2)\n    content.vb: Public Shared Operator <>(packetInformation1 As IPPacketInformation, packetInformation2 As IPPacketInformation) As Boolean\n    parameters:\n    - id: packetInformation1\n      type: System.Net.Sockets.IPPacketInformation\n      description: \"\\n<p>The <xref href=\\\"System.Net.Sockets.IPPacketInformation\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance that is to the left of the inequality operator.</p>\\n\"\n    - id: packetInformation2\n      type: System.Net.Sockets.IPPacketInformation\n      description: \"\\n<p>The <xref href=\\\"System.Net.Sockets.IPPacketInformation\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance that is to the right of the inequality operator.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>packetInformation1</em> and <em>packetInformation2</em> are unequal; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: IPPacketInformation.Inequality(IPPacketInformation, IPPacketInformation)\nreferences:\n- uid: System.Net.Sockets\n  isExternal: false\n  name: System.Net.Sockets\n  fullName: System.Net.Sockets\n  commentId: N:System.Net.Sockets\n  nameWithType: System.Net.Sockets\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.ValueType.ToString\n  nameWithType: ValueType.ToString()\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  commentId: T:System.ValueType\n  nameWithType: ValueType\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Net.IPAddress\n  parent: System.Net\n  isExternal: false\n  name: IPAddress\n  fullName: System.Net.IPAddress\n  commentId: T:System.Net.IPAddress\n  nameWithType: IPAddress\n- uid: System.Net\n  isExternal: false\n  name: System.Net\n  fullName: System.Net\n  commentId: N:System.Net\n  nameWithType: System.Net\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.ValueType.Equals(System.Object)\n  nameWithType: ValueType.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.ValueType.GetHashCode\n  nameWithType: ValueType.GetHashCode()\n- uid: System.Net.Sockets.IPPacketInformation\n  parent: System.Net.Sockets\n  isExternal: false\n  name: IPPacketInformation\n  fullName: System.Net.Sockets.IPPacketInformation\n  commentId: T:System.Net.Sockets.IPPacketInformation\n  nameWithType: IPPacketInformation\n"}