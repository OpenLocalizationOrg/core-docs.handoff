{"nodes":[{"content":"Binder","pos":[2481,2487]},{"content":"BinaryOperation(CSharpBinderFlags, Linq.Expressions.ExpressionType, Type, IEnumerable&lt;CSharpArgumentInfo&gt;)","pos":[4322,4428]},{"content":"Convert(CSharpBinderFlags, Type, Type)","pos":[7009,7047]},{"content":"GetIndex(CSharpBinderFlags, Type, IEnumerable&lt;CSharpArgumentInfo&gt;)","pos":[9237,9303]},{"content":"GetMember(CSharpBinderFlags, String, Type, IEnumerable&lt;CSharpArgumentInfo&gt;)","pos":[12356,12431]},{"content":"Invoke(CSharpBinderFlags, Type, IEnumerable&lt;CSharpArgumentInfo&gt;)","pos":[15631,15695]},{"content":"InvokeConstructor(CSharpBinderFlags, Type, IEnumerable&lt;CSharpArgumentInfo&gt;)","pos":[18709,18784]},{"content":"InvokeMember(CSharpBinderFlags, String, IEnumerable&lt;Type&gt;, Type, IEnumerable&lt;CSharpArgumentInfo&gt;)","pos":[22093,22190]},{"content":"IsEvent(CSharpBinderFlags, String, Type)","pos":[25616,25656]},{"content":"SetIndex(CSharpBinderFlags, Type, IEnumerable&lt;CSharpArgumentInfo&gt;)","pos":[27870,27936]},{"content":"SetMember(CSharpBinderFlags, String, Type, IEnumerable&lt;CSharpArgumentInfo&gt;)","pos":[30990,31065]},{"content":"UnaryOperation(CSharpBinderFlags, Linq.Expressions.ExpressionType, Type, IEnumerable&lt;CSharpArgumentInfo&gt;)","pos":[34406,34511]},{"content":"Microsoft.CSharp.RuntimeBinder","pos":[37374,37404]},{"content":"Object","pos":[37607,37613]},{"content":"ToString()","pos":[37773,37783]},{"content":"ToString","pos":[37878,37886]},{"content":"(","pos":[37955,37956]},{"content":")","pos":[37983,37984]},{"content":"ToString","pos":[38054,38062]},{"content":"(","pos":[38131,38132]},{"content":")","pos":[38159,38160]},{"content":"Equals(Object)","pos":[38343,38357]},{"content":"Equals","pos":[38476,38482]},{"content":"(","pos":[38549,38550]},{"content":"Object","pos":[38600,38606]},{"content":")","pos":[38666,38667]},{"content":"Equals","pos":[38750,38756]},{"content":"(","pos":[38823,38824]},{"content":"Object","pos":[38874,38880]},{"content":")","pos":[38940,38941]},{"content":"Equals(Object, Object)","pos":[39155,39177]},{"content":"Equals","pos":[39325,39331]},{"content":"(","pos":[39398,39399]},{"content":"Object","pos":[39449,39455]},{"content":",","pos":[39516,39517]},{"content":"Object","pos":[39572,39578]},{"content":")","pos":[39638,39639]},{"content":"Equals","pos":[39736,39742]},{"content":"(","pos":[39809,39810]},{"content":"Object","pos":[39860,39866]},{"content":",","pos":[39927,39928]},{"content":"Object","pos":[39983,39989]},{"content":")","pos":[40049,40050]},{"content":"ReferenceEquals(Object, Object)","pos":[40295,40326]},{"content":"ReferenceEquals","pos":[40492,40507]},{"content":"(","pos":[40583,40584]},{"content":"Object","pos":[40634,40640]},{"content":",","pos":[40701,40702]},{"content":"Object","pos":[40757,40763]},{"content":")","pos":[40823,40824]},{"content":"ReferenceEquals","pos":[40930,40945]},{"content":"(","pos":[41021,41022]},{"content":"Object","pos":[41072,41078]},{"content":",","pos":[41139,41140]},{"content":"Object","pos":[41195,41201]},{"content":")","pos":[41261,41262]},{"content":"GetHashCode()","pos":[41492,41505]},{"content":"GetHashCode","pos":[41606,41617]},{"content":"(","pos":[41689,41690]},{"content":")","pos":[41717,41718]},{"content":"GetHashCode","pos":[41791,41802]},{"content":"(","pos":[41874,41875]},{"content":")","pos":[41902,41903]},{"content":"GetType()","pos":[42078,42087]},{"content":"GetType","pos":[42180,42187]},{"content":"(","pos":[42255,42256]},{"content":")","pos":[42283,42284]},{"content":"GetType","pos":[42353,42360]},{"content":"(","pos":[42428,42429]},{"content":")","pos":[42456,42457]},{"content":"MemberwiseClone()","pos":[42632,42649]},{"content":"MemberwiseClone","pos":[42758,42773]},{"content":"(","pos":[42849,42850]},{"content":")","pos":[42877,42878]},{"content":"MemberwiseClone","pos":[42955,42970]},{"content":"(","pos":[43046,43047]},{"content":")","pos":[43074,43075]},{"content":"System","pos":[43220,43226]},{"content":"CSharpBinderFlags","pos":[43416,43433]},{"content":"ExpressionType","pos":[43701,43715]},{"content":"Type","pos":[43916,43920]},{"content":"IEnumerable&lt;CSharpArgumentInfo&gt;","pos":[44190,44221]},{"content":"IEnumerable","pos":[44553,44564]},{"content":"CSharpArgumentInfo","pos":[44736,44754]},{"content":"IEnumerable","pos":[44922,44933]},{"content":"(Of","pos":[45019,45022]},{"content":"CSharpArgumentInfo","pos":[45115,45133]},{"content":")","pos":[45208,45209]},{"content":"CallSiteBinder","pos":[45557,45571]},{"content":"System.Linq.Expressions","pos":[45783,45806]},{"content":"IEnumerable&lt;T&gt;","pos":[45998,46012]},{"content":"IEnumerable","pos":[46231,46242]},{"content":"T","pos":[46334,46335]},{"content":"IEnumerable","pos":[46455,46466]},{"content":"(Of","pos":[46531,46534]},{"content":"T","pos":[46568,46569]},{"content":")","pos":[46596,46597]},{"content":"System.Collections.Generic","pos":[46800,46826]},{"content":"System.Runtime.CompilerServices","pos":[47018,47049]},{"content":"String","pos":[47255,47261]},{"content":"IEnumerable&lt;Type&gt;","pos":[47499,47516]},{"content":"IEnumerable","pos":[47758,47769]},{"content":"Type","pos":[47903,47907]},{"content":"IEnumerable","pos":[48058,48069]},{"content":"(Of","pos":[48155,48158]},{"content":"Type","pos":[48213,48217]},{"content":")","pos":[48275,48276]}],"content":"items:\n- uid: Microsoft.CSharp.RuntimeBinder.Binder\n  commentId: T:Microsoft.CSharp.RuntimeBinder.Binder\n  id: Binder\n  parent: Microsoft.CSharp.RuntimeBinder\n  children:\n  - Microsoft.CSharp.RuntimeBinder.Binder.BinaryOperation(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Linq.Expressions.ExpressionType,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})\n  - Microsoft.CSharp.RuntimeBinder.Binder.Convert(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Type,System.Type)\n  - Microsoft.CSharp.RuntimeBinder.Binder.GetIndex(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})\n  - Microsoft.CSharp.RuntimeBinder.Binder.GetMember(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.String,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})\n  - Microsoft.CSharp.RuntimeBinder.Binder.Invoke(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})\n  - Microsoft.CSharp.RuntimeBinder.Binder.InvokeConstructor(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})\n  - Microsoft.CSharp.RuntimeBinder.Binder.InvokeMember(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.String,System.Collections.Generic.IEnumerable{System.Type},System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})\n  - Microsoft.CSharp.RuntimeBinder.Binder.IsEvent(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.String,System.Type)\n  - Microsoft.CSharp.RuntimeBinder.Binder.SetIndex(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})\n  - Microsoft.CSharp.RuntimeBinder.Binder.SetMember(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.String,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})\n  - Microsoft.CSharp.RuntimeBinder.Binder.UnaryOperation(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Linq.Expressions.ExpressionType,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})\n  langs:\n  - csharp\n  - vb\n  name: Binder\n  fullName: Microsoft.CSharp.RuntimeBinder.Binder\n  type: Class\n  source:\n    remote:\n      path: src/Microsoft.CSharp/src/Microsoft/CSharp/RuntimeBinder/Binder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Binder\n    path: src/Microsoft.CSharp/src/Microsoft/CSharp/RuntimeBinder/Binder.cs\n    startLine: 15\n  assemblies:\n  - Microsoft.CSharp\n  namespace: Microsoft.CSharp.RuntimeBinder\n  summary: \"\\n<p>Contains factory methods to create dynamic call site binders for CSharp.</p>\\n\"\n  syntax:\n    content: public class Binder\n    content.vb: Public Class Binder\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: Binder\n- uid: Microsoft.CSharp.RuntimeBinder.Binder.BinaryOperation(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Linq.Expressions.ExpressionType,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})\n  commentId: M:Microsoft.CSharp.RuntimeBinder.Binder.BinaryOperation(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Linq.Expressions.ExpressionType,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})\n  id: BinaryOperation(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Linq.Expressions.ExpressionType,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})\n  parent: Microsoft.CSharp.RuntimeBinder.Binder\n  langs:\n  - csharp\n  - vb\n  name: BinaryOperation(CSharpBinderFlags, Linq.Expressions.ExpressionType, Type, IEnumerable<CSharpArgumentInfo>)\n  fullName: Microsoft.CSharp.RuntimeBinder.Binder.BinaryOperation(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, System.Linq.Expressions.ExpressionType, System.Type, System.Collections.Generic.IEnumerable<Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo>)\n  type: Method\n  source:\n    remote:\n      path: src/Microsoft.CSharp/ref/Microsoft.CSharp.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BinaryOperation\n    path: src/Microsoft.CSharp/ref/Microsoft.CSharp.cs\n    startLine: 13\n  assemblies:\n  - Microsoft.CSharp\n  namespace: Microsoft.CSharp.RuntimeBinder\n  syntax:\n    content: public static CallSiteBinder BinaryOperation(CSharpBinderFlags flags, Linq.Expressions.ExpressionType operation, Type context, IEnumerable<CSharpArgumentInfo> argumentInfo)\n    content.vb: Public Shared Function BinaryOperation(flags As CSharpBinderFlags, operation As Linq.Expressions.ExpressionType, context As Type, argumentInfo As IEnumerable(Of CSharpArgumentInfo)) As CallSiteBinder\n    parameters:\n    - id: flags\n      type: Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags\n    - id: operation\n      type: System.Linq.Expressions.ExpressionType\n    - id: context\n      type: System.Type\n    - id: argumentInfo\n      type: System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo}\n    return:\n      type: System.Runtime.CompilerServices.CallSiteBinder\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: Microsoft.CSharp.RuntimeBinder.Binder.BinaryOperation(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, System.Linq.Expressions.ExpressionType, System.Type, System.Collections.Generic.IEnumerable(Of Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo))\n  name.vb: BinaryOperation(CSharpBinderFlags, Linq.Expressions.ExpressionType, Type, IEnumerable(Of CSharpArgumentInfo))\n  nameWithType: Binder.BinaryOperation(CSharpBinderFlags, Linq.Expressions.ExpressionType, Type, IEnumerable<CSharpArgumentInfo>)\n  nameWithType.vb: Binder.BinaryOperation(CSharpBinderFlags, Linq.Expressions.ExpressionType, Type, IEnumerable(Of CSharpArgumentInfo))\n- uid: Microsoft.CSharp.RuntimeBinder.Binder.Convert(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Type,System.Type)\n  commentId: M:Microsoft.CSharp.RuntimeBinder.Binder.Convert(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Type,System.Type)\n  id: Convert(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Type,System.Type)\n  parent: Microsoft.CSharp.RuntimeBinder.Binder\n  langs:\n  - csharp\n  - vb\n  name: Convert(CSharpBinderFlags, Type, Type)\n  fullName: Microsoft.CSharp.RuntimeBinder.Binder.Convert(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, System.Type, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/Microsoft.CSharp/src/Microsoft/CSharp/RuntimeBinder/Binder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Convert\n    path: src/Microsoft.CSharp/src/Microsoft/CSharp/RuntimeBinder/Binder.cs\n    startLine: 56\n  assemblies:\n  - Microsoft.CSharp\n  namespace: Microsoft.CSharp.RuntimeBinder\n  summary: \"\\n<p>Initializes a new CSharp convert binder.</p>\\n\"\n  syntax:\n    content: public static CallSiteBinder Convert(CSharpBinderFlags flags, Type type, Type context)\n    content.vb: Public Shared Function Convert(flags As CSharpBinderFlags, type As Type, context As Type) As CallSiteBinder\n    parameters:\n    - id: flags\n      type: Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags\n      description: \"\\n<p>The flags with which to initialize the binder.</p>\\n\"\n    - id: type\n      type: System.Type\n      description: \"\\n<p>The type to convert to.</p>\\n\"\n    - id: context\n      type: System.Type\n      description: \"\\n<p>The <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that indicates where this operation is used.</p>\\n\"\n    return:\n      type: CallSiteBinder\n      description: \"\\n<p>Returns a new CSharp convert binder.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Binder.Convert(CSharpBinderFlags, Type, Type)\n- uid: Microsoft.CSharp.RuntimeBinder.Binder.GetIndex(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})\n  commentId: M:Microsoft.CSharp.RuntimeBinder.Binder.GetIndex(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})\n  id: GetIndex(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})\n  parent: Microsoft.CSharp.RuntimeBinder.Binder\n  langs:\n  - csharp\n  - vb\n  name: GetIndex(CSharpBinderFlags, Type, IEnumerable<CSharpArgumentInfo>)\n  fullName: Microsoft.CSharp.RuntimeBinder.Binder.GetIndex(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, System.Type, System.Collections.Generic.IEnumerable<Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo>)\n  type: Method\n  source:\n    remote:\n      path: src/Microsoft.CSharp/src/Microsoft/CSharp/RuntimeBinder/Binder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetIndex\n    path: src/Microsoft.CSharp/src/Microsoft/CSharp/RuntimeBinder/Binder.cs\n    startLine: 82\n  assemblies:\n  - Microsoft.CSharp\n  namespace: Microsoft.CSharp.RuntimeBinder\n  summary: \"\\n<p>Initializes a new CSharp get index binder.</p>\\n\"\n  syntax:\n    content: public static CallSiteBinder GetIndex(CSharpBinderFlags flags, Type context, IEnumerable<CSharpArgumentInfo> argumentInfo)\n    content.vb: Public Shared Function GetIndex(flags As CSharpBinderFlags, context As Type, argumentInfo As IEnumerable(Of CSharpArgumentInfo)) As CallSiteBinder\n    parameters:\n    - id: flags\n      type: Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags\n      description: \"\\n<p>The flags with which to initialize the binder.</p>\\n\"\n    - id: context\n      type: System.Type\n      description: \"\\n<p>The <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that indicates where this operation is used.</p>\\n\"\n    - id: argumentInfo\n      type: System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo}\n      description: \"\\n<p>The sequence of <xref href=\\\"Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances for the arguments to this operation.</p>\\n\"\n    return:\n      type: CallSiteBinder\n      description: \"\\n<p>Returns a new CSharp get index binder.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: Microsoft.CSharp.RuntimeBinder.Binder.GetIndex(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, System.Type, System.Collections.Generic.IEnumerable(Of Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo))\n  name.vb: GetIndex(CSharpBinderFlags, Type, IEnumerable(Of CSharpArgumentInfo))\n  nameWithType: Binder.GetIndex(CSharpBinderFlags, Type, IEnumerable<CSharpArgumentInfo>)\n  nameWithType.vb: Binder.GetIndex(CSharpBinderFlags, Type, IEnumerable(Of CSharpArgumentInfo))\n- uid: Microsoft.CSharp.RuntimeBinder.Binder.GetMember(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.String,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})\n  commentId: M:Microsoft.CSharp.RuntimeBinder.Binder.GetMember(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.String,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})\n  id: GetMember(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.String,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})\n  parent: Microsoft.CSharp.RuntimeBinder.Binder\n  langs:\n  - csharp\n  - vb\n  name: GetMember(CSharpBinderFlags, String, Type, IEnumerable<CSharpArgumentInfo>)\n  fullName: Microsoft.CSharp.RuntimeBinder.Binder.GetMember(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, System.String, System.Type, System.Collections.Generic.IEnumerable<Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo>)\n  type: Method\n  source:\n    remote:\n      path: src/Microsoft.CSharp/src/Microsoft/CSharp/RuntimeBinder/Binder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetMember\n    path: src/Microsoft.CSharp/src/Microsoft/CSharp/RuntimeBinder/Binder.cs\n    startLine: 100\n  assemblies:\n  - Microsoft.CSharp\n  namespace: Microsoft.CSharp.RuntimeBinder\n  summary: \"\\n<p>Initializes a new CSharp get member binder.</p>\\n\"\n  syntax:\n    content: public static CallSiteBinder GetMember(CSharpBinderFlags flags, string name, Type context, IEnumerable<CSharpArgumentInfo> argumentInfo)\n    content.vb: Public Shared Function GetMember(flags As CSharpBinderFlags, name As String, context As Type, argumentInfo As IEnumerable(Of CSharpArgumentInfo)) As CallSiteBinder\n    parameters:\n    - id: flags\n      type: Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags\n      description: \"\\n<p>The flags with which to initialize the binder.</p>\\n\"\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the member to get.</p>\\n\"\n    - id: context\n      type: System.Type\n      description: \"\\n<p>The <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that indicates where this operation is used.</p>\\n\"\n    - id: argumentInfo\n      type: System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo}\n      description: \"\\n<p>The sequence of <xref href=\\\"Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances for the arguments to this operation.</p>\\n\"\n    return:\n      type: CallSiteBinder\n      description: \"\\n<p>Returns a new CSharp get member binder.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: Microsoft.CSharp.RuntimeBinder.Binder.GetMember(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, System.String, System.Type, System.Collections.Generic.IEnumerable(Of Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo))\n  name.vb: GetMember(CSharpBinderFlags, String, Type, IEnumerable(Of CSharpArgumentInfo))\n  nameWithType: Binder.GetMember(CSharpBinderFlags, String, Type, IEnumerable<CSharpArgumentInfo>)\n  nameWithType.vb: Binder.GetMember(CSharpBinderFlags, String, Type, IEnumerable(Of CSharpArgumentInfo))\n- uid: Microsoft.CSharp.RuntimeBinder.Binder.Invoke(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})\n  commentId: M:Microsoft.CSharp.RuntimeBinder.Binder.Invoke(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})\n  id: Invoke(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})\n  parent: Microsoft.CSharp.RuntimeBinder.Binder\n  langs:\n  - csharp\n  - vb\n  name: Invoke(CSharpBinderFlags, Type, IEnumerable<CSharpArgumentInfo>)\n  fullName: Microsoft.CSharp.RuntimeBinder.Binder.Invoke(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, System.Type, System.Collections.Generic.IEnumerable<Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo>)\n  type: Method\n  source:\n    remote:\n      path: src/Microsoft.CSharp/src/Microsoft/CSharp/RuntimeBinder/Binder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Invoke\n    path: src/Microsoft.CSharp/src/Microsoft/CSharp/RuntimeBinder/Binder.cs\n    startLine: 119\n  assemblies:\n  - Microsoft.CSharp\n  namespace: Microsoft.CSharp.RuntimeBinder\n  summary: \"\\n<p>Initializes a new CSharp invoke binder.</p>\\n\"\n  syntax:\n    content: public static CallSiteBinder Invoke(CSharpBinderFlags flags, Type context, IEnumerable<CSharpArgumentInfo> argumentInfo)\n    content.vb: Public Shared Function Invoke(flags As CSharpBinderFlags, context As Type, argumentInfo As IEnumerable(Of CSharpArgumentInfo)) As CallSiteBinder\n    parameters:\n    - id: flags\n      type: Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags\n      description: \"\\n<p>The flags with which to initialize the binder.</p>\\n\"\n    - id: context\n      type: System.Type\n      description: \"\\n<p>The <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that indicates where this operation is used.</p>\\n\"\n    - id: argumentInfo\n      type: System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo}\n      description: \"\\n<p>The sequence of <xref href=\\\"Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances for the arguments to this operation.</p>\\n\"\n    return:\n      type: CallSiteBinder\n      description: \"\\n<p>Returns a new CSharp invoke binder.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: Microsoft.CSharp.RuntimeBinder.Binder.Invoke(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, System.Type, System.Collections.Generic.IEnumerable(Of Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo))\n  name.vb: Invoke(CSharpBinderFlags, Type, IEnumerable(Of CSharpArgumentInfo))\n  nameWithType: Binder.Invoke(CSharpBinderFlags, Type, IEnumerable<CSharpArgumentInfo>)\n  nameWithType.vb: Binder.Invoke(CSharpBinderFlags, Type, IEnumerable(Of CSharpArgumentInfo))\n- uid: Microsoft.CSharp.RuntimeBinder.Binder.InvokeConstructor(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})\n  commentId: M:Microsoft.CSharp.RuntimeBinder.Binder.InvokeConstructor(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})\n  id: InvokeConstructor(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})\n  parent: Microsoft.CSharp.RuntimeBinder.Binder\n  langs:\n  - csharp\n  - vb\n  name: InvokeConstructor(CSharpBinderFlags, Type, IEnumerable<CSharpArgumentInfo>)\n  fullName: Microsoft.CSharp.RuntimeBinder.Binder.InvokeConstructor(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, System.Type, System.Collections.Generic.IEnumerable<Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo>)\n  type: Method\n  source:\n    remote:\n      path: src/Microsoft.CSharp/src/Microsoft/CSharp/RuntimeBinder/Binder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: InvokeConstructor\n    path: src/Microsoft.CSharp/src/Microsoft/CSharp/RuntimeBinder/Binder.cs\n    startLine: 183\n  assemblies:\n  - Microsoft.CSharp\n  namespace: Microsoft.CSharp.RuntimeBinder\n  summary: \"\\n<p>Initializes a new CSharp invoke constructor binder.</p>\\n\"\n  syntax:\n    content: public static CallSiteBinder InvokeConstructor(CSharpBinderFlags flags, Type context, IEnumerable<CSharpArgumentInfo> argumentInfo)\n    content.vb: Public Shared Function InvokeConstructor(flags As CSharpBinderFlags, context As Type, argumentInfo As IEnumerable(Of CSharpArgumentInfo)) As CallSiteBinder\n    parameters:\n    - id: flags\n      type: Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags\n      description: \"\\n<p>The flags with which to initialize the binder.</p>\\n\"\n    - id: context\n      type: System.Type\n      description: \"\\n<p>The <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that indicates where this operation is used.</p>\\n\"\n    - id: argumentInfo\n      type: System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo}\n      description: \"\\n<p>The sequence of <xref href=\\\"Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances for the arguments to this operation.</p>\\n\"\n    return:\n      type: CallSiteBinder\n      description: \"\\n<p>Returns a new CSharp invoke constructor binder.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: Microsoft.CSharp.RuntimeBinder.Binder.InvokeConstructor(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, System.Type, System.Collections.Generic.IEnumerable(Of Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo))\n  name.vb: InvokeConstructor(CSharpBinderFlags, Type, IEnumerable(Of CSharpArgumentInfo))\n  nameWithType: Binder.InvokeConstructor(CSharpBinderFlags, Type, IEnumerable<CSharpArgumentInfo>)\n  nameWithType.vb: Binder.InvokeConstructor(CSharpBinderFlags, Type, IEnumerable(Of CSharpArgumentInfo))\n- uid: Microsoft.CSharp.RuntimeBinder.Binder.InvokeMember(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.String,System.Collections.Generic.IEnumerable{System.Type},System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})\n  commentId: M:Microsoft.CSharp.RuntimeBinder.Binder.InvokeMember(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.String,System.Collections.Generic.IEnumerable{System.Type},System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})\n  id: InvokeMember(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.String,System.Collections.Generic.IEnumerable{System.Type},System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})\n  parent: Microsoft.CSharp.RuntimeBinder.Binder\n  langs:\n  - csharp\n  - vb\n  name: InvokeMember(CSharpBinderFlags, String, IEnumerable<Type>, Type, IEnumerable<CSharpArgumentInfo>)\n  fullName: Microsoft.CSharp.RuntimeBinder.Binder.InvokeMember(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, System.String, System.Collections.Generic.IEnumerable<System.Type>, System.Type, System.Collections.Generic.IEnumerable<Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo>)\n  type: Method\n  source:\n    remote:\n      path: src/Microsoft.CSharp/src/Microsoft/CSharp/RuntimeBinder/Binder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: InvokeMember\n    path: src/Microsoft.CSharp/src/Microsoft/CSharp/RuntimeBinder/Binder.cs\n    startLine: 146\n  assemblies:\n  - Microsoft.CSharp\n  namespace: Microsoft.CSharp.RuntimeBinder\n  summary: \"\\n<p>Initializes a new CSharp invoke member binder.</p>\\n\"\n  syntax:\n    content: public static CallSiteBinder InvokeMember(CSharpBinderFlags flags, string name, IEnumerable<Type> typeArguments, Type context, IEnumerable<CSharpArgumentInfo> argumentInfo)\n    content.vb: Public Shared Function InvokeMember(flags As CSharpBinderFlags, name As String, typeArguments As IEnumerable(Of Type), context As Type, argumentInfo As IEnumerable(Of CSharpArgumentInfo)) As CallSiteBinder\n    parameters:\n    - id: flags\n      type: Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags\n      description: \"\\n<p>The flags with which to initialize the binder.</p>\\n\"\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the member to invoke.</p>\\n\"\n    - id: typeArguments\n      type: System.Collections.Generic.IEnumerable{System.Type}\n      description: \"\\n<p>The list of type arguments specified for this invoke.</p>\\n\"\n    - id: context\n      type: System.Type\n      description: \"\\n<p>The <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that indicates where this operation is used.</p>\\n\"\n    - id: argumentInfo\n      type: System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo}\n      description: \"\\n<p>The sequence of <xref href=\\\"Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances for the arguments to this operation.</p>\\n\"\n    return:\n      type: CallSiteBinder\n      description: \"\\n<p>Returns a new CSharp invoke member binder.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: Microsoft.CSharp.RuntimeBinder.Binder.InvokeMember(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, System.String, System.Collections.Generic.IEnumerable(Of System.Type), System.Type, System.Collections.Generic.IEnumerable(Of Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo))\n  name.vb: InvokeMember(CSharpBinderFlags, String, IEnumerable(Of Type), Type, IEnumerable(Of CSharpArgumentInfo))\n  nameWithType: Binder.InvokeMember(CSharpBinderFlags, String, IEnumerable<Type>, Type, IEnumerable<CSharpArgumentInfo>)\n  nameWithType.vb: Binder.InvokeMember(CSharpBinderFlags, String, IEnumerable(Of Type), Type, IEnumerable(Of CSharpArgumentInfo))\n- uid: Microsoft.CSharp.RuntimeBinder.Binder.IsEvent(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.String,System.Type)\n  commentId: M:Microsoft.CSharp.RuntimeBinder.Binder.IsEvent(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.String,System.Type)\n  id: IsEvent(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.String,System.Type)\n  parent: Microsoft.CSharp.RuntimeBinder.Binder\n  langs:\n  - csharp\n  - vb\n  name: IsEvent(CSharpBinderFlags, String, Type)\n  fullName: Microsoft.CSharp.RuntimeBinder.Binder.IsEvent(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, System.String, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/Microsoft.CSharp/src/Microsoft/CSharp/RuntimeBinder/Binder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsEvent\n    path: src/Microsoft.CSharp/src/Microsoft/CSharp/RuntimeBinder/Binder.cs\n    startLine: 200\n  assemblies:\n  - Microsoft.CSharp\n  namespace: Microsoft.CSharp.RuntimeBinder\n  summary: \"\\n<p>Initializes a new CSharp is event binder.</p>\\n\"\n  syntax:\n    content: public static CallSiteBinder IsEvent(CSharpBinderFlags flags, string name, Type context)\n    content.vb: Public Shared Function IsEvent(flags As CSharpBinderFlags, name As String, context As Type) As CallSiteBinder\n    parameters:\n    - id: flags\n      type: Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags\n      description: \"\\n<p>The flags with which to initialize the binder.</p>\\n\"\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the event to look for.</p>\\n\"\n    - id: context\n      type: System.Type\n      description: \"\\n<p>The <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that indicates where this operation is used.</p>\\n\"\n    return:\n      type: CallSiteBinder\n      description: \"\\n<p>Returns a new CSharp is event binder.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Binder.IsEvent(CSharpBinderFlags, String, Type)\n- uid: Microsoft.CSharp.RuntimeBinder.Binder.SetIndex(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})\n  commentId: M:Microsoft.CSharp.RuntimeBinder.Binder.SetIndex(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})\n  id: SetIndex(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})\n  parent: Microsoft.CSharp.RuntimeBinder.Binder\n  langs:\n  - csharp\n  - vb\n  name: SetIndex(CSharpBinderFlags, Type, IEnumerable<CSharpArgumentInfo>)\n  fullName: Microsoft.CSharp.RuntimeBinder.Binder.SetIndex(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, System.Type, System.Collections.Generic.IEnumerable<Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo>)\n  type: Method\n  source:\n    remote:\n      path: src/Microsoft.CSharp/src/Microsoft/CSharp/RuntimeBinder/Binder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SetIndex\n    path: src/Microsoft.CSharp/src/Microsoft/CSharp/RuntimeBinder/Binder.cs\n    startLine: 217\n  assemblies:\n  - Microsoft.CSharp\n  namespace: Microsoft.CSharp.RuntimeBinder\n  summary: \"\\n<p>Initializes a new CSharp set index binder.</p>\\n\"\n  syntax:\n    content: public static CallSiteBinder SetIndex(CSharpBinderFlags flags, Type context, IEnumerable<CSharpArgumentInfo> argumentInfo)\n    content.vb: Public Shared Function SetIndex(flags As CSharpBinderFlags, context As Type, argumentInfo As IEnumerable(Of CSharpArgumentInfo)) As CallSiteBinder\n    parameters:\n    - id: flags\n      type: Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags\n      description: \"\\n<p>The flags with which to initialize the binder.</p>\\n\"\n    - id: context\n      type: System.Type\n      description: \"\\n<p>The <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that indicates where this operation is used.</p>\\n\"\n    - id: argumentInfo\n      type: System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo}\n      description: \"\\n<p>The sequence of <xref href=\\\"Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances for the arguments to this operation.</p>\\n\"\n    return:\n      type: CallSiteBinder\n      description: \"\\n<p>Returns a new CSharp set index binder.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: Microsoft.CSharp.RuntimeBinder.Binder.SetIndex(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, System.Type, System.Collections.Generic.IEnumerable(Of Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo))\n  name.vb: SetIndex(CSharpBinderFlags, Type, IEnumerable(Of CSharpArgumentInfo))\n  nameWithType: Binder.SetIndex(CSharpBinderFlags, Type, IEnumerable<CSharpArgumentInfo>)\n  nameWithType.vb: Binder.SetIndex(CSharpBinderFlags, Type, IEnumerable(Of CSharpArgumentInfo))\n- uid: Microsoft.CSharp.RuntimeBinder.Binder.SetMember(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.String,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})\n  commentId: M:Microsoft.CSharp.RuntimeBinder.Binder.SetMember(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.String,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})\n  id: SetMember(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.String,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})\n  parent: Microsoft.CSharp.RuntimeBinder.Binder\n  langs:\n  - csharp\n  - vb\n  name: SetMember(CSharpBinderFlags, String, Type, IEnumerable<CSharpArgumentInfo>)\n  fullName: Microsoft.CSharp.RuntimeBinder.Binder.SetMember(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, System.String, System.Type, System.Collections.Generic.IEnumerable<Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo>)\n  type: Method\n  source:\n    remote:\n      path: src/Microsoft.CSharp/src/Microsoft/CSharp/RuntimeBinder/Binder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SetMember\n    path: src/Microsoft.CSharp/src/Microsoft/CSharp/RuntimeBinder/Binder.cs\n    startLine: 237\n  assemblies:\n  - Microsoft.CSharp\n  namespace: Microsoft.CSharp.RuntimeBinder\n  summary: \"\\n<p>Initializes a new CSharp set member binder.</p>\\n\"\n  syntax:\n    content: public static CallSiteBinder SetMember(CSharpBinderFlags flags, string name, Type context, IEnumerable<CSharpArgumentInfo> argumentInfo)\n    content.vb: Public Shared Function SetMember(flags As CSharpBinderFlags, name As String, context As Type, argumentInfo As IEnumerable(Of CSharpArgumentInfo)) As CallSiteBinder\n    parameters:\n    - id: flags\n      type: Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags\n      description: \"\\n<p>The flags with which to initialize the binder.</p>\\n\"\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the member to set.</p>\\n\"\n    - id: context\n      type: System.Type\n      description: \"\\n<p>The <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that indicates where this operation is used.</p>\\n\"\n    - id: argumentInfo\n      type: System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo}\n      description: \"\\n<p>The sequence of <xref href=\\\"Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances for the arguments to this operation.</p>\\n\"\n    return:\n      type: CallSiteBinder\n      description: \"\\n<p>Returns a new CSharp set member binder.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: Microsoft.CSharp.RuntimeBinder.Binder.SetMember(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, System.String, System.Type, System.Collections.Generic.IEnumerable(Of Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo))\n  name.vb: SetMember(CSharpBinderFlags, String, Type, IEnumerable(Of CSharpArgumentInfo))\n  nameWithType: Binder.SetMember(CSharpBinderFlags, String, Type, IEnumerable<CSharpArgumentInfo>)\n  nameWithType.vb: Binder.SetMember(CSharpBinderFlags, String, Type, IEnumerable(Of CSharpArgumentInfo))\n- uid: Microsoft.CSharp.RuntimeBinder.Binder.UnaryOperation(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Linq.Expressions.ExpressionType,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})\n  commentId: M:Microsoft.CSharp.RuntimeBinder.Binder.UnaryOperation(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Linq.Expressions.ExpressionType,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})\n  id: UnaryOperation(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Linq.Expressions.ExpressionType,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})\n  parent: Microsoft.CSharp.RuntimeBinder.Binder\n  langs:\n  - csharp\n  - vb\n  name: UnaryOperation(CSharpBinderFlags, Linq.Expressions.ExpressionType, Type, IEnumerable<CSharpArgumentInfo>)\n  fullName: Microsoft.CSharp.RuntimeBinder.Binder.UnaryOperation(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, System.Linq.Expressions.ExpressionType, System.Type, System.Collections.Generic.IEnumerable<Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo>)\n  type: Method\n  source:\n    remote:\n      path: src/Microsoft.CSharp/ref/Microsoft.CSharp.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: UnaryOperation\n    path: src/Microsoft.CSharp/ref/Microsoft.CSharp.cs\n    startLine: 23\n  assemblies:\n  - Microsoft.CSharp\n  namespace: Microsoft.CSharp.RuntimeBinder\n  summary: \"\\n<p>Initializes a new CSharp unary operation binder.</p>\\n\"\n  syntax:\n    content: public static CallSiteBinder UnaryOperation(CSharpBinderFlags flags, Linq.Expressions.ExpressionType operation, Type context, IEnumerable<CSharpArgumentInfo> argumentInfo)\n    content.vb: Public Shared Function UnaryOperation(flags As CSharpBinderFlags, operation As Linq.Expressions.ExpressionType, context As Type, argumentInfo As IEnumerable(Of CSharpArgumentInfo)) As CallSiteBinder\n    parameters:\n    - id: flags\n      type: Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags\n      description: \"\\n<p>The flags with which to initialize the binder.</p>\\n\"\n    - id: operation\n      type: System.Linq.Expressions.ExpressionType\n      description: \"\\n<p>The unary operation kind.</p>\\n\"\n    - id: context\n      type: System.Type\n      description: \"\\n<p>The <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that indicates where this operation is used.</p>\\n\"\n    - id: argumentInfo\n      type: System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo}\n      description: \"\\n<p>The sequence of <xref href=\\\"Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances for the arguments to this operation.</p>\\n\"\n    return:\n      type: System.Runtime.CompilerServices.CallSiteBinder\n      description: \"\\n<p>Returns a new CSharp unary operation binder.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: Microsoft.CSharp.RuntimeBinder.Binder.UnaryOperation(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, System.Linq.Expressions.ExpressionType, System.Type, System.Collections.Generic.IEnumerable(Of Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo))\n  name.vb: UnaryOperation(CSharpBinderFlags, Linq.Expressions.ExpressionType, Type, IEnumerable(Of CSharpArgumentInfo))\n  nameWithType: Binder.UnaryOperation(CSharpBinderFlags, Linq.Expressions.ExpressionType, Type, IEnumerable<CSharpArgumentInfo>)\n  nameWithType.vb: Binder.UnaryOperation(CSharpBinderFlags, Linq.Expressions.ExpressionType, Type, IEnumerable(Of CSharpArgumentInfo))\nreferences:\n- uid: Microsoft.CSharp.RuntimeBinder\n  isExternal: false\n  name: Microsoft.CSharp.RuntimeBinder\n  fullName: Microsoft.CSharp.RuntimeBinder\n  nameWithType: Microsoft.CSharp.RuntimeBinder\n  commentId: N:Microsoft.CSharp.RuntimeBinder\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags\n  parent: Microsoft.CSharp.RuntimeBinder\n  isExternal: false\n  name: CSharpBinderFlags\n  fullName: Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags\n  nameWithType: CSharpBinderFlags\n  commentId: T:Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags\n- uid: System.Linq.Expressions.ExpressionType\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ExpressionType\n  fullName: System.Linq.Expressions.ExpressionType\n  nameWithType: ExpressionType\n  commentId: T:System.Linq.Expressions.ExpressionType\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  nameWithType: Type\n  commentId: T:System.Type\n- uid: System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<CSharpArgumentInfo>\n  fullName: System.Collections.Generic.IEnumerable<Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo)\n  name.vb: IEnumerable(Of CSharpArgumentInfo)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo\n    name: CSharpArgumentInfo\n    fullName: Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo\n    name: CSharpArgumentInfo\n    fullName: Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<CSharpArgumentInfo>\n  nameWithType.vb: IEnumerable(Of CSharpArgumentInfo)\n  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo}\n- uid: System.Runtime.CompilerServices.CallSiteBinder\n  parent: System.Runtime.CompilerServices\n  isExternal: false\n  name: CallSiteBinder\n  fullName: System.Runtime.CompilerServices.CallSiteBinder\n  nameWithType: CallSiteBinder\n  commentId: T:System.Runtime.CompilerServices.CallSiteBinder\n- uid: System.Linq.Expressions\n  isExternal: false\n  name: System.Linq.Expressions\n  fullName: System.Linq.Expressions\n  nameWithType: System.Linq.Expressions\n  commentId: N:System.Linq.Expressions\n- uid: System.Collections.Generic.IEnumerable`1\n  isExternal: false\n  name: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T)\n  name.vb: IEnumerable(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<T>\n  nameWithType.vb: IEnumerable(Of T)\n  commentId: T:System.Collections.Generic.IEnumerable`1\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  nameWithType: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n- uid: System.Runtime.CompilerServices\n  isExternal: false\n  name: System.Runtime.CompilerServices\n  fullName: System.Runtime.CompilerServices\n  nameWithType: System.Runtime.CompilerServices\n  commentId: N:System.Runtime.CompilerServices\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Collections.Generic.IEnumerable{System.Type}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<Type>\n  fullName: System.Collections.Generic.IEnumerable<System.Type>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Type)\n  name.vb: IEnumerable(Of Type)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<Type>\n  nameWithType.vb: IEnumerable(Of Type)\n  commentId: T:System.Collections.Generic.IEnumerable{System.Type}\n"}